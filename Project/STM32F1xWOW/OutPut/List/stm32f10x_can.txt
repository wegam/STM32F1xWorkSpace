; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_can.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_can.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_can.c]
                          THUMB

                          AREA ||i.CAN_CancelTransmit||, CODE, READONLY, ALIGN=2

                  CAN_CancelTransmit PROC
;;;541    *******************************************************************************/
;;;542    void CAN_CancelTransmit(u8 Mailbox)
000000  b120              CBZ      r0,|L1.12|
;;;543    {
;;;544      /* Check the parameters */
;;;545      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;546    
;;;547      /* abort transmission */
;;;548      switch (Mailbox)
000002  2801              CMP      r0,#1
000004  d009              BEQ      |L1.26|
000006  2802              CMP      r0,#2
000008  d115              BNE      |L1.54|
00000a  e00d              B        |L1.40|
                  |L1.12|
;;;549      {
;;;550        case (0): CAN->TSR |= CAN_TSR_ABRQ0;
00000c  490b              LDR      r1,|L1.60|
00000e  6809              LDR      r1,[r1,#0]
000010  f0410180          ORR      r1,r1,#0x80
000014  4a09              LDR      r2,|L1.60|
000016  6011              STR      r1,[r2,#0]
;;;551          break;
000018  e00e              B        |L1.56|
                  |L1.26|
;;;552        case (1): CAN->TSR |= CAN_TSR_ABRQ1;
00001a  4908              LDR      r1,|L1.60|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4414100          ORR      r1,r1,#0x8000
000022  4a06              LDR      r2,|L1.60|
000024  6011              STR      r1,[r2,#0]
;;;553          break;
000026  e007              B        |L1.56|
                  |L1.40|
;;;554        case (2): CAN->TSR |= CAN_TSR_ABRQ2;
000028  4904              LDR      r1,|L1.60|
00002a  6809              LDR      r1,[r1,#0]
00002c  f4410100          ORR      r1,r1,#0x800000
000030  4a02              LDR      r2,|L1.60|
000032  6011              STR      r1,[r2,#0]
;;;555          break;
000034  e000              B        |L1.56|
                  |L1.54|
;;;556        default:
;;;557          break;
000036  bf00              NOP      
                  |L1.56|
000038  bf00              NOP                            ;551
;;;558      }
;;;559    }
00003a  4770              BX       lr
;;;560    
                          ENDP

                  |L1.60|
                          DCD      0x40006408

                          AREA ||i.CAN_ClearFlag||, CODE, READONLY, ALIGN=2

                  CAN_ClearFlag PROC
;;;751    *******************************************************************************/
;;;752    void CAN_ClearFlag(u32 CAN_FLAG)
000000  4902              LDR      r1,|L2.12|
;;;753    {
;;;754      /* Check the parameters */
;;;755      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;756    
;;;757      /* Clear the selected CAN flags */
;;;758      CAN->ESR &= ~CAN_FLAG;
000002  6809              LDR      r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  6011              STR      r1,[r2,#0]
;;;759    }
00000a  4770              BX       lr
;;;760    
                          ENDP

                  |L2.12|
                          DCD      0x40006418

                          AREA ||i.CAN_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CAN_ClearITPendingBit PROC
;;;834    *******************************************************************************/
;;;835    void CAN_ClearITPendingBit(u32 CAN_IT)
000000  2840              CMP      r0,#0x40
;;;836    {
;;;837      /* Check the parameters */
;;;838      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;839    
;;;840      switch (CAN_IT)
000002  d03e              BEQ      |L3.130|
000004  dc0e              BGT      |L3.36|
000006  2807              CMP      r0,#7
000008  d027              BEQ      |L3.90|
00000a  dc06              BGT      |L3.26|
00000c  2804              CMP      r0,#4
00000e  d029              BEQ      |L3.100|
000010  2805              CMP      r0,#5
000012  d019              BEQ      |L3.72|
000014  2806              CMP      r0,#6
000016  d15e              BNE      |L3.214|
000018  e01a              B        |L3.80|
                  |L3.26|
00001a  2808              CMP      r0,#8
00001c  d027              BEQ      |L3.110|
00001e  2820              CMP      r0,#0x20
000020  d159              BNE      |L3.214|
000022  e029              B        |L3.120|
                  |L3.36|
000024  f5b06f80          CMP      r0,#0x400
000028  d042              BEQ      |L3.176|
00002a  dc06              BGT      |L3.58|
00002c  f5b07f80          CMP      r0,#0x100
000030  d02c              BEQ      |L3.140|
000032  f5b07f00          CMP      r0,#0x200
000036  d14e              BNE      |L3.214|
000038  e031              B        |L3.158|
                  |L3.58|
00003a  f5b03f80          CMP      r0,#0x10000
00003e  d040              BEQ      |L3.194|
000040  f5b03f00          CMP      r0,#0x20000
000044  d147              BNE      |L3.214|
000046  e041              B        |L3.204|
                  |L3.72|
;;;841      {
;;;842        case CAN_IT_RQCP0:
;;;843          CAN->TSR = CAN_TSR_RQCP0; /* rc_w1*/
000048  2101              MOVS     r1,#1
00004a  4a24              LDR      r2,|L3.220|
00004c  6011              STR      r1,[r2,#0]
;;;844          break;
00004e  e043              B        |L3.216|
                  |L3.80|
;;;845        case CAN_IT_RQCP1:
;;;846          CAN->TSR = CAN_TSR_RQCP1; /* rc_w1*/
000050  f44f7180          MOV      r1,#0x100
000054  4a21              LDR      r2,|L3.220|
000056  6011              STR      r1,[r2,#0]
;;;847          break;
000058  e03e              B        |L3.216|
                  |L3.90|
;;;848        case CAN_IT_RQCP2:
;;;849          CAN->TSR = CAN_TSR_RQCP2; /* rc_w1*/
00005a  f44f3180          MOV      r1,#0x10000
00005e  4a1f              LDR      r2,|L3.220|
000060  6011              STR      r1,[r2,#0]
;;;850          break;
000062  e039              B        |L3.216|
                  |L3.100|
;;;851        case CAN_IT_FF0:
;;;852          CAN->RF0R = CAN_RF0R_FULL0; /* rc_w1*/
000064  2108              MOVS     r1,#8
000066  4a1d              LDR      r2,|L3.220|
000068  1d12              ADDS     r2,r2,#4
00006a  6011              STR      r1,[r2,#0]
;;;853          break;
00006c  e034              B        |L3.216|
                  |L3.110|
;;;854        case CAN_IT_FOV0:
;;;855          CAN->RF0R = CAN_RF0R_FOVR0; /* rc_w1*/
00006e  2110              MOVS     r1,#0x10
000070  4a1a              LDR      r2,|L3.220|
000072  1d12              ADDS     r2,r2,#4
000074  6011              STR      r1,[r2,#0]
;;;856          break;
000076  e02f              B        |L3.216|
                  |L3.120|
;;;857        case CAN_IT_FF1:
;;;858          CAN->RF1R = CAN_RF1R_FULL1; /* rc_w1*/
000078  2108              MOVS     r1,#8
00007a  4a18              LDR      r2,|L3.220|
00007c  3208              ADDS     r2,r2,#8
00007e  6011              STR      r1,[r2,#0]
;;;859          break;
000080  e02a              B        |L3.216|
                  |L3.130|
;;;860        case CAN_IT_FOV1:
;;;861          CAN->RF1R = CAN_RF1R_FOVR1; /* rc_w1*/
000082  2110              MOVS     r1,#0x10
000084  4a15              LDR      r2,|L3.220|
000086  3208              ADDS     r2,r2,#8
000088  6011              STR      r1,[r2,#0]
;;;862          break;
00008a  e025              B        |L3.216|
                  |L3.140|
;;;863        case CAN_IT_EWG:
;;;864          CAN->ESR &= ~ CAN_ESR_EWGF; /* rw */
00008c  4913              LDR      r1,|L3.220|
00008e  3110              ADDS     r1,r1,#0x10
000090  6809              LDR      r1,[r1,#0]
000092  f0210101          BIC      r1,r1,#1
000096  4a11              LDR      r2,|L3.220|
000098  3210              ADDS     r2,r2,#0x10
00009a  6011              STR      r1,[r2,#0]
;;;865          break;
00009c  e01c              B        |L3.216|
                  |L3.158|
;;;866        case CAN_IT_EPV:
;;;867          CAN->ESR &= ~ CAN_ESR_EPVF; /* rw */
00009e  490f              LDR      r1,|L3.220|
0000a0  3110              ADDS     r1,r1,#0x10
0000a2  6809              LDR      r1,[r1,#0]
0000a4  f0210102          BIC      r1,r1,#2
0000a8  4a0c              LDR      r2,|L3.220|
0000aa  3210              ADDS     r2,r2,#0x10
0000ac  6011              STR      r1,[r2,#0]
;;;868          break;
0000ae  e013              B        |L3.216|
                  |L3.176|
;;;869        case CAN_IT_BOF:
;;;870          CAN->ESR &= ~ CAN_ESR_BOFF; /* rw */
0000b0  490a              LDR      r1,|L3.220|
0000b2  3110              ADDS     r1,r1,#0x10
0000b4  6809              LDR      r1,[r1,#0]
0000b6  f0210104          BIC      r1,r1,#4
0000ba  4a08              LDR      r2,|L3.220|
0000bc  3210              ADDS     r2,r2,#0x10
0000be  6011              STR      r1,[r2,#0]
;;;871          break;
0000c0  e00a              B        |L3.216|
                  |L3.194|
;;;872        case CAN_IT_WKU:
;;;873          CAN->MSR = CAN_MSR_WKUI;  /* rc_w1*/
0000c2  2108              MOVS     r1,#8
0000c4  4a05              LDR      r2,|L3.220|
0000c6  1f12              SUBS     r2,r2,#4
0000c8  6011              STR      r1,[r2,#0]
;;;874          break;
0000ca  e005              B        |L3.216|
                  |L3.204|
;;;875        case CAN_IT_SLK:
;;;876          CAN->MSR = CAN_MSR_SLAKI;  /* rc_w1*/
0000cc  2110              MOVS     r1,#0x10
0000ce  4a03              LDR      r2,|L3.220|
0000d0  1f12              SUBS     r2,r2,#4
0000d2  6011              STR      r1,[r2,#0]
;;;877          break;
0000d4  e000              B        |L3.216|
                  |L3.214|
;;;878        default :
;;;879          break;
0000d6  bf00              NOP      
                  |L3.216|
0000d8  bf00              NOP                            ;844
;;;880      }
;;;881    }
0000da  4770              BX       lr
;;;882    
                          ENDP

                  |L3.220|
                          DCD      0x40006408

                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=1

                  CAN_DeInit PROC
;;;90     *******************************************************************************/
;;;91     void CAN_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;92     {
;;;93       /* Enable CAN reset state */
;;;94       RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
000002  2101              MOVS     r1,#1
000004  0648              LSLS     r0,r1,#25
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;95       /* Release CAN from reset state */
;;;96       RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f7000          MOV      r0,#0x2000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;97     }
000014  bd10              POP      {r4,pc}
;;;98     
                          ENDP


                          AREA ||i.CAN_FIFORelease||, CODE, READONLY, ALIGN=2

                  CAN_FIFORelease PROC
;;;567    *******************************************************************************/
;;;568    void CAN_FIFORelease(u8 FIFONumber)
000000  b918              CBNZ     r0,|L5.10|
;;;569    {
;;;570      /* Check the parameters */
;;;571      assert_param(IS_CAN_FIFO(FIFONumber));
;;;572    
;;;573      /* Release FIFO0 */
;;;574      if (FIFONumber == CAN_FIFO0)
;;;575      {
;;;576        CAN->RF0R = CAN_RF0R_RFOM0;
000002  2120              MOVS     r1,#0x20
000004  4a03              LDR      r2,|L5.20|
000006  6011              STR      r1,[r2,#0]
000008  e003              B        |L5.18|
                  |L5.10|
;;;577      }
;;;578      /* Release FIFO1 */
;;;579      else /* FIFONumber == CAN_FIFO1 */
;;;580      {
;;;581        CAN->RF1R = CAN_RF1R_RFOM1;
00000a  2120              MOVS     r1,#0x20
00000c  4a01              LDR      r2,|L5.20|
00000e  1d12              ADDS     r2,r2,#4
000010  6011              STR      r1,[r2,#0]
                  |L5.18|
;;;582      }
;;;583    }
000012  4770              BX       lr
;;;584    
                          ENDP

                  |L5.20|
                          DCD      0x4000640c

                          AREA ||i.CAN_FilterInit||, CODE, READONLY, ALIGN=2

                  CAN_FilterInit PROC
;;;231    *******************************************************************************/
;;;232    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234      u16 FilterNumber_BitPos = 0;
000002  2100              MOVS     r1,#0
;;;235    
;;;236      /* Check the parameters */
;;;237      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;238      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;239      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;240      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;241      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;242    
;;;243      FilterNumber_BitPos = 
000004  7803              LDRB     r3,[r0,#0]
000006  2201              MOVS     r2,#1
000008  409a              LSLS     r2,r2,r3
00000a  b291              UXTH     r1,r2
;;;244      (u16)((u16)0x0001 << ((u16)CAN_FilterInitStruct->CAN_FilterNumber));
;;;245    
;;;246      /* Initialisation mode for the filter */
;;;247      CAN->FMR |= CAN_FMR_FINIT;
00000c  4a3d              LDR      r2,|L6.260|
00000e  6812              LDR      r2,[r2,#0]
000010  f0420201          ORR      r2,r2,#1
000014  4b3b              LDR      r3,|L6.260|
000016  601a              STR      r2,[r3,#0]
;;;248    
;;;249      /* Filter Deactivation */
;;;250      CAN->FA1R &= ~(u32)FilterNumber_BitPos;
000018  4a3a              LDR      r2,|L6.260|
00001a  321c              ADDS     r2,r2,#0x1c
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  4b38              LDR      r3,|L6.260|
000022  331c              ADDS     r3,r3,#0x1c
000024  601a              STR      r2,[r3,#0]
;;;251    
;;;252      /* Filter Scale */
;;;253      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000026  7882              LDRB     r2,[r0,#2]
000028  b9ca              CBNZ     r2,|L6.94|
;;;254      {
;;;255        /* 16-bit scale for the filter */
;;;256        CAN->FS1R &= ~(u32)FilterNumber_BitPos;
00002a  4a36              LDR      r2,|L6.260|
00002c  320c              ADDS     r2,r2,#0xc
00002e  6812              LDR      r2,[r2,#0]
000030  438a              BICS     r2,r2,r1
000032  4b34              LDR      r3,|L6.260|
000034  330c              ADDS     r3,r3,#0xc
000036  601a              STR      r2,[r3,#0]
;;;257    
;;;258        /* First 16-bit identifier and First 16-bit mask */
;;;259        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;260        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000038  88c2              LDRH     r2,[r0,#6]
00003a  8943              LDRH     r3,[r0,#0xa]
00003c  ea424303          ORR      r3,r2,r3,LSL #16
000040  4a30              LDR      r2,|L6.260|
000042  3240              ADDS     r2,r2,#0x40
000044  7804              LDRB     r4,[r0,#0]
000046  f8423034          STR      r3,[r2,r4,LSL #3]
;;;261        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;262            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
;;;263    
;;;264        /* Second 16-bit identifier and Second 16-bit mask */
;;;265        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;266        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
00004a  8882              LDRH     r2,[r0,#4]
00004c  8903              LDRH     r3,[r0,#8]
00004e  ea424303          ORR      r3,r2,r3,LSL #16
000052  4a2c              LDR      r2,|L6.260|
000054  3240              ADDS     r2,r2,#0x40
000056  7804              LDRB     r4,[r0,#0]
000058  eb0202c4          ADD      r2,r2,r4,LSL #3
00005c  6053              STR      r3,[r2,#4]
                  |L6.94|
;;;267        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;268            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;269      }
;;;270      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
00005e  7882              LDRB     r2,[r0,#2]
000060  2a01              CMP      r2,#1
000062  d119              BNE      |L6.152|
;;;271      {
;;;272        /* 32-bit scale for the filter */
;;;273        CAN->FS1R |= FilterNumber_BitPos;
000064  4a27              LDR      r2,|L6.260|
000066  320c              ADDS     r2,r2,#0xc
000068  6812              LDR      r2,[r2,#0]
00006a  430a              ORRS     r2,r2,r1
00006c  4b25              LDR      r3,|L6.260|
00006e  330c              ADDS     r3,r3,#0xc
000070  601a              STR      r2,[r3,#0]
;;;274    
;;;275        /* 32-bit identifier or First 32-bit identifier */
;;;276        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000072  88c2              LDRH     r2,[r0,#6]
000074  8883              LDRH     r3,[r0,#4]
000076  ea424303          ORR      r3,r2,r3,LSL #16
00007a  4a22              LDR      r2,|L6.260|
00007c  3240              ADDS     r2,r2,#0x40
00007e  7804              LDRB     r4,[r0,#0]
000080  f8423034          STR      r3,[r2,r4,LSL #3]
;;;277        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;278            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
;;;279    
;;;280        /* 32-bit mask or Second 32-bit identifier */
;;;281        CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000084  8942              LDRH     r2,[r0,#0xa]
000086  8903              LDRH     r3,[r0,#8]
000088  ea424303          ORR      r3,r2,r3,LSL #16
00008c  4a1d              LDR      r2,|L6.260|
00008e  3240              ADDS     r2,r2,#0x40
000090  7804              LDRB     r4,[r0,#0]
000092  eb0202c4          ADD      r2,r2,r4,LSL #3
000096  6053              STR      r3,[r2,#4]
                  |L6.152|
;;;282        ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;283            ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;284    
;;;285      }
;;;286    
;;;287      /* Filter Mode */
;;;288      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
000098  7842              LDRB     r2,[r0,#1]
00009a  b93a              CBNZ     r2,|L6.172|
;;;289      {
;;;290        /*Id/Mask mode for the filter*/
;;;291        CAN->FM1R &= ~(u32)FilterNumber_BitPos;
00009c  4a19              LDR      r2,|L6.260|
00009e  1d12              ADDS     r2,r2,#4
0000a0  6812              LDR      r2,[r2,#0]
0000a2  438a              BICS     r2,r2,r1
0000a4  4b17              LDR      r3,|L6.260|
0000a6  1d1b              ADDS     r3,r3,#4
0000a8  601a              STR      r2,[r3,#0]
0000aa  e006              B        |L6.186|
                  |L6.172|
;;;292      }
;;;293      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;294      {
;;;295        /*Identifier list mode for the filter*/
;;;296        CAN->FM1R |= (u32)FilterNumber_BitPos;
0000ac  4a15              LDR      r2,|L6.260|
0000ae  1d12              ADDS     r2,r2,#4
0000b0  6812              LDR      r2,[r2,#0]
0000b2  430a              ORRS     r2,r2,r1
0000b4  4b13              LDR      r3,|L6.260|
0000b6  1d1b              ADDS     r3,r3,#4
0000b8  601a              STR      r2,[r3,#0]
                  |L6.186|
;;;297      }
;;;298    
;;;299      /* Filter FIFO assignment */
;;;300      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO0)
0000ba  8982              LDRH     r2,[r0,#0xc]
0000bc  b932              CBNZ     r2,|L6.204|
;;;301      {
;;;302        /* FIFO 0 assignation for the filter */
;;;303        CAN->FFA1R &= ~(u32)FilterNumber_BitPos;
0000be  4a11              LDR      r2,|L6.260|
0000c0  3214              ADDS     r2,r2,#0x14
0000c2  6812              LDR      r2,[r2,#0]
0000c4  438a              BICS     r2,r2,r1
0000c6  4b0f              LDR      r3,|L6.260|
0000c8  3314              ADDS     r3,r3,#0x14
0000ca  601a              STR      r2,[r3,#0]
                  |L6.204|
;;;304      }
;;;305      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO1)
0000cc  8982              LDRH     r2,[r0,#0xc]
0000ce  2a01              CMP      r2,#1
0000d0  d106              BNE      |L6.224|
;;;306      {
;;;307        /* FIFO 1 assignation for the filter */
;;;308        CAN->FFA1R |= (u32)FilterNumber_BitPos;
0000d2  4a0c              LDR      r2,|L6.260|
0000d4  3214              ADDS     r2,r2,#0x14
0000d6  6812              LDR      r2,[r2,#0]
0000d8  430a              ORRS     r2,r2,r1
0000da  4b0a              LDR      r3,|L6.260|
0000dc  3314              ADDS     r3,r3,#0x14
0000de  601a              STR      r2,[r3,#0]
                  |L6.224|
;;;309      }
;;;310      
;;;311      /* Filter activation */
;;;312      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
0000e0  7b82              LDRB     r2,[r0,#0xe]
0000e2  2a01              CMP      r2,#1
0000e4  d106              BNE      |L6.244|
;;;313      {
;;;314        CAN->FA1R |= FilterNumber_BitPos;
0000e6  4a07              LDR      r2,|L6.260|
0000e8  321c              ADDS     r2,r2,#0x1c
0000ea  6812              LDR      r2,[r2,#0]
0000ec  430a              ORRS     r2,r2,r1
0000ee  4b05              LDR      r3,|L6.260|
0000f0  331c              ADDS     r3,r3,#0x1c
0000f2  601a              STR      r2,[r3,#0]
                  |L6.244|
;;;315      }
;;;316    
;;;317      /* Leave the initialisation mode for the filter */
;;;318      CAN->FMR &= ~CAN_FMR_FINIT;
0000f4  4a03              LDR      r2,|L6.260|
0000f6  6812              LDR      r2,[r2,#0]
0000f8  f0220201          BIC      r2,r2,#1
0000fc  4b01              LDR      r3,|L6.260|
0000fe  601a              STR      r2,[r3,#0]
;;;319    }
000100  bd10              POP      {r4,pc}
;;;320    
                          ENDP

000102  0000              DCW      0x0000
                  |L6.260|
                          DCD      0x40006600

                          AREA ||i.CAN_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetFlagStatus PROC
;;;722    *******************************************************************************/
;;;723    FlagStatus CAN_GetFlagStatus(u32 CAN_FLAG)
000000  4601              MOV      r1,r0
;;;724    {
;;;725      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;726    
;;;727      /* Check the parameters */
;;;728      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;729    
;;;730      /* Check the status of the specified CAN flag */
;;;731      if ((CAN->ESR & CAN_FLAG) != (u32)RESET)
000004  4a03              LDR      r2,|L7.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L7.16|
;;;732      {
;;;733        /* CAN_FLAG is set */
;;;734        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L7.18|
                  |L7.16|
;;;735      }
;;;736      else
;;;737      {
;;;738        /* CAN_FLAG is reset */
;;;739        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L7.18|
;;;740      }
;;;741      /* Return the CAN_FLAG status */
;;;742      return  bitstatus;
;;;743    }
000012  4770              BX       lr
;;;744    
                          ENDP

                  |L7.20|
                          DCD      0x40006418

                          AREA ||i.CAN_GetITStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetITStatus PROC
;;;772    *******************************************************************************/
;;;773    ITStatus CAN_GetITStatus(u32 CAN_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;774    {
000002  4604              MOV      r4,r0
;;;775      ITStatus pendingbitstatus = RESET;
000004  2500              MOVS     r5,#0
;;;776    
;;;777      /* Check the parameters */
;;;778      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;779    
;;;780      switch (CAN_IT)
000006  2c40              CMP      r4,#0x40
000008  d04f              BEQ      |L8.170|
00000a  dc0e              BGT      |L8.42|
00000c  2c07              CMP      r4,#7
00000e  d02c              BEQ      |L8.106|
000010  dc06              BGT      |L8.32|
000012  2c04              CMP      r4,#4
000014  d031              BEQ      |L8.122|
000016  2c05              CMP      r4,#5
000018  d019              BEQ      |L8.78|
00001a  2c06              CMP      r4,#6
00001c  d176              BNE      |L8.268|
00001e  e01d              B        |L8.92|
                  |L8.32|
000020  2c08              CMP      r4,#8
000022  d032              BEQ      |L8.138|
000024  2c20              CMP      r4,#0x20
000026  d171              BNE      |L8.268|
000028  e037              B        |L8.154|
                  |L8.42|
00002a  f5b46f80          CMP      r4,#0x400
00002e  d054              BEQ      |L8.218|
000030  dc06              BGT      |L8.64|
000032  f5b47f80          CMP      r4,#0x100
000036  d040              BEQ      |L8.186|
000038  f5b47f00          CMP      r4,#0x200
00003c  d166              BNE      |L8.268|
00003e  e044              B        |L8.202|
                  |L8.64|
000040  f5b43f80          CMP      r4,#0x10000
000044  d059              BEQ      |L8.250|
000046  f5b43f00          CMP      r4,#0x20000
00004a  d15f              BNE      |L8.268|
00004c  e04d              B        |L8.234|
                  |L8.78|
;;;781      {
;;;782        case CAN_IT_RQCP0:
;;;783          pendingbitstatus = CheckITStatus(CAN->TSR, CAN_TSR_RQCP0);
00004e  4932              LDR      r1,|L8.280|
000050  6808              LDR      r0,[r1,#0]
000052  2101              MOVS     r1,#1
000054  f7fffffe          BL       CheckITStatus
000058  4605              MOV      r5,r0
;;;784          break;
00005a  e059              B        |L8.272|
                  |L8.92|
;;;785        case CAN_IT_RQCP1:
;;;786          pendingbitstatus = CheckITStatus(CAN->TSR, CAN_TSR_RQCP1);
00005c  492e              LDR      r1,|L8.280|
00005e  6808              LDR      r0,[r1,#0]
000060  1589              ASRS     r1,r1,#22
000062  f7fffffe          BL       CheckITStatus
000066  4605              MOV      r5,r0
;;;787          break;
000068  e052              B        |L8.272|
                  |L8.106|
;;;788        case CAN_IT_RQCP2:
;;;789          pendingbitstatus = CheckITStatus(CAN->TSR, CAN_TSR_RQCP2);
00006a  492b              LDR      r1,|L8.280|
00006c  6808              LDR      r0,[r1,#0]
00006e  f44f3180          MOV      r1,#0x10000
000072  f7fffffe          BL       CheckITStatus
000076  4605              MOV      r5,r0
;;;790          break;
000078  e04a              B        |L8.272|
                  |L8.122|
;;;791        case CAN_IT_FF0:
;;;792          pendingbitstatus = CheckITStatus(CAN->RF0R, CAN_RF0R_FULL0);
00007a  4927              LDR      r1,|L8.280|
00007c  1d09              ADDS     r1,r1,#4
00007e  6808              LDR      r0,[r1,#0]
000080  2108              MOVS     r1,#8
000082  f7fffffe          BL       CheckITStatus
000086  4605              MOV      r5,r0
;;;793          break;
000088  e042              B        |L8.272|
                  |L8.138|
;;;794        case CAN_IT_FOV0:
;;;795          pendingbitstatus = CheckITStatus(CAN->RF0R, CAN_RF0R_FOVR0);
00008a  4923              LDR      r1,|L8.280|
00008c  1d09              ADDS     r1,r1,#4
00008e  6808              LDR      r0,[r1,#0]
000090  2110              MOVS     r1,#0x10
000092  f7fffffe          BL       CheckITStatus
000096  4605              MOV      r5,r0
;;;796          break;
000098  e03a              B        |L8.272|
                  |L8.154|
;;;797        case CAN_IT_FF1:
;;;798          pendingbitstatus = CheckITStatus(CAN->RF1R, CAN_RF1R_FULL1);
00009a  491f              LDR      r1,|L8.280|
00009c  3108              ADDS     r1,r1,#8
00009e  6808              LDR      r0,[r1,#0]
0000a0  2108              MOVS     r1,#8
0000a2  f7fffffe          BL       CheckITStatus
0000a6  4605              MOV      r5,r0
;;;799          break;
0000a8  e032              B        |L8.272|
                  |L8.170|
;;;800        case CAN_IT_FOV1:
;;;801          pendingbitstatus = CheckITStatus(CAN->RF1R, CAN_RF1R_FOVR1);
0000aa  491b              LDR      r1,|L8.280|
0000ac  3108              ADDS     r1,r1,#8
0000ae  6808              LDR      r0,[r1,#0]
0000b0  2110              MOVS     r1,#0x10
0000b2  f7fffffe          BL       CheckITStatus
0000b6  4605              MOV      r5,r0
;;;802          break;
0000b8  e02a              B        |L8.272|
                  |L8.186|
;;;803        case CAN_IT_EWG:
;;;804          pendingbitstatus = CheckITStatus(CAN->ESR, CAN_ESR_EWGF);
0000ba  4917              LDR      r1,|L8.280|
0000bc  3110              ADDS     r1,r1,#0x10
0000be  6808              LDR      r0,[r1,#0]
0000c0  2101              MOVS     r1,#1
0000c2  f7fffffe          BL       CheckITStatus
0000c6  4605              MOV      r5,r0
;;;805          break;
0000c8  e022              B        |L8.272|
                  |L8.202|
;;;806        case CAN_IT_EPV:
;;;807          pendingbitstatus = CheckITStatus(CAN->ESR, CAN_ESR_EPVF);
0000ca  4913              LDR      r1,|L8.280|
0000cc  3110              ADDS     r1,r1,#0x10
0000ce  6808              LDR      r0,[r1,#0]
0000d0  2102              MOVS     r1,#2
0000d2  f7fffffe          BL       CheckITStatus
0000d6  4605              MOV      r5,r0
;;;808          break;
0000d8  e01a              B        |L8.272|
                  |L8.218|
;;;809        case CAN_IT_BOF:
;;;810          pendingbitstatus = CheckITStatus(CAN->ESR, CAN_ESR_BOFF);
0000da  490f              LDR      r1,|L8.280|
0000dc  3110              ADDS     r1,r1,#0x10
0000de  6808              LDR      r0,[r1,#0]
0000e0  2104              MOVS     r1,#4
0000e2  f7fffffe          BL       CheckITStatus
0000e6  4605              MOV      r5,r0
;;;811          break;
0000e8  e012              B        |L8.272|
                  |L8.234|
;;;812        case CAN_IT_SLK:
;;;813          pendingbitstatus = CheckITStatus(CAN->MSR, CAN_MSR_SLAKI);
0000ea  490b              LDR      r1,|L8.280|
0000ec  1f09              SUBS     r1,r1,#4
0000ee  6808              LDR      r0,[r1,#0]
0000f0  2110              MOVS     r1,#0x10
0000f2  f7fffffe          BL       CheckITStatus
0000f6  4605              MOV      r5,r0
;;;814          break;
0000f8  e00a              B        |L8.272|
                  |L8.250|
;;;815        case CAN_IT_WKU:
;;;816          pendingbitstatus = CheckITStatus(CAN->MSR, CAN_MSR_WKUI);
0000fa  4907              LDR      r1,|L8.280|
0000fc  1f09              SUBS     r1,r1,#4
0000fe  6808              LDR      r0,[r1,#0]
000100  2108              MOVS     r1,#8
000102  f7fffffe          BL       CheckITStatus
000106  4605              MOV      r5,r0
;;;817          break;
000108  e002              B        |L8.272|
00010a  e7ff              B        |L8.268|
                  |L8.268|
;;;818    
;;;819        default :
;;;820          pendingbitstatus = RESET;
00010c  2500              MOVS     r5,#0
;;;821          break;
00010e  bf00              NOP      
                  |L8.272|
000110  bf00              NOP                            ;784
;;;822      }
;;;823    
;;;824      /* Return the CAN_IT status */
;;;825      return  pendingbitstatus;
000112  4628              MOV      r0,r5
;;;826    }
000114  bd70              POP      {r4-r6,pc}
;;;827    
                          ENDP

000116  0000              DCW      0x0000
                  |L8.280|
                          DCD      0x40006408

                          AREA ||i.CAN_ITConfig||, CODE, READONLY, ALIGN=2

                  CAN_ITConfig PROC
;;;381    *******************************************************************************/
;;;382    void CAN_ITConfig(u32 CAN_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L9.14|
;;;383    {
;;;384      /* Check the parameters */
;;;385      assert_param(IS_CAN_ITConfig(CAN_IT));
;;;386      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;387    
;;;388      if (NewState != DISABLE)
;;;389      {
;;;390        /* Enable the selected CAN interrupt */
;;;391        CAN->IER |= CAN_IT;
000002  4a06              LDR      r2,|L9.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L9.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L9.24|
                  |L9.14|
;;;392      }
;;;393      else
;;;394      {
;;;395        /* Disable the selected CAN interrupt */
;;;396        CAN->IER &= ~CAN_IT;
00000e  4a03              LDR      r2,|L9.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L9.28|
000016  601a              STR      r2,[r3,#0]
                  |L9.24|
;;;397      }
;;;398    }
000018  4770              BX       lr
;;;399    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40006414

                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=2

                  CAN_Init PROC
;;;108    *******************************************************************************/
;;;109    u8 CAN_Init(CAN_InitTypeDef* CAN_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;110    {
000002  4601              MOV      r1,r0
;;;111      u8 InitStatus = 0;
000004  2000              MOVS     r0,#0
;;;112      u16 WaitAck;
;;;113    
;;;114      /* Check the parameters */
;;;115      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;116      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;117      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;118      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;119      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;120      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;121      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;122      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;123      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;124      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;125      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;126    
;;;127      /* Request initialisation */
;;;128      CAN->MCR = CAN_MCR_INRQ;
000006  2301              MOVS     r3,#1
000008  4c46              LDR      r4,|L10.292|
00000a  6023              STR      r3,[r4,#0]
;;;129    
;;;130      /* ...and check acknowledged */
;;;131      if ((CAN->MSR & CAN_MSR_INAK) == 0)
00000c  1d23              ADDS     r3,r4,#4
00000e  681b              LDR      r3,[r3,#0]
000010  f0030301          AND      r3,r3,#1
000014  b903              CBNZ     r3,|L10.24|
;;;132      {
;;;133        InitStatus = CANINITFAILED;
000016  e084              B        |L10.290|
                  |L10.24|
;;;134      }
;;;135      else
;;;136      {
;;;137        /* Set the time triggered communication mode */
;;;138        if (CAN_InitStruct->CAN_TTCM == ENABLE)
000018  780b              LDRB     r3,[r1,#0]
00001a  2b01              CMP      r3,#1
00001c  d106              BNE      |L10.44|
;;;139        {
;;;140          CAN->MCR |= CAN_MCR_TTCM;
00001e  4b41              LDR      r3,|L10.292|
000020  681b              LDR      r3,[r3,#0]
000022  f0430380          ORR      r3,r3,#0x80
000026  4c3f              LDR      r4,|L10.292|
000028  6023              STR      r3,[r4,#0]
00002a  e005              B        |L10.56|
                  |L10.44|
;;;141        }
;;;142        else
;;;143        {
;;;144          CAN->MCR &= ~CAN_MCR_TTCM;
00002c  4b3d              LDR      r3,|L10.292|
00002e  681b              LDR      r3,[r3,#0]
000030  f0230380          BIC      r3,r3,#0x80
000034  4c3b              LDR      r4,|L10.292|
000036  6023              STR      r3,[r4,#0]
                  |L10.56|
;;;145        }
;;;146    
;;;147        /* Set the automatic bus-off management */
;;;148        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000038  784b              LDRB     r3,[r1,#1]
00003a  2b01              CMP      r3,#1
00003c  d106              BNE      |L10.76|
;;;149        {
;;;150          CAN->MCR |= CAN_MCR_ABOM;
00003e  4b39              LDR      r3,|L10.292|
000040  681b              LDR      r3,[r3,#0]
000042  f0430340          ORR      r3,r3,#0x40
000046  4c37              LDR      r4,|L10.292|
000048  6023              STR      r3,[r4,#0]
00004a  e005              B        |L10.88|
                  |L10.76|
;;;151        }
;;;152        else
;;;153        {
;;;154          CAN->MCR &= ~CAN_MCR_ABOM;
00004c  4b35              LDR      r3,|L10.292|
00004e  681b              LDR      r3,[r3,#0]
000050  f0230340          BIC      r3,r3,#0x40
000054  4c33              LDR      r4,|L10.292|
000056  6023              STR      r3,[r4,#0]
                  |L10.88|
;;;155        }
;;;156    
;;;157        /* Set the automatic wake-up mode */
;;;158        if (CAN_InitStruct->CAN_AWUM == ENABLE)
000058  788b              LDRB     r3,[r1,#2]
00005a  2b01              CMP      r3,#1
00005c  d106              BNE      |L10.108|
;;;159        {
;;;160          CAN->MCR |= CAN_MCR_AWUM;
00005e  4b31              LDR      r3,|L10.292|
000060  681b              LDR      r3,[r3,#0]
000062  f0430320          ORR      r3,r3,#0x20
000066  4c2f              LDR      r4,|L10.292|
000068  6023              STR      r3,[r4,#0]
00006a  e005              B        |L10.120|
                  |L10.108|
;;;161        }
;;;162        else
;;;163        {
;;;164          CAN->MCR &= ~CAN_MCR_AWUM;
00006c  4b2d              LDR      r3,|L10.292|
00006e  681b              LDR      r3,[r3,#0]
000070  f0230320          BIC      r3,r3,#0x20
000074  4c2b              LDR      r4,|L10.292|
000076  6023              STR      r3,[r4,#0]
                  |L10.120|
;;;165        }
;;;166    
;;;167        /* Set the no automatic retransmission */
;;;168        if (CAN_InitStruct->CAN_NART == ENABLE)
000078  78cb              LDRB     r3,[r1,#3]
00007a  2b01              CMP      r3,#1
00007c  d106              BNE      |L10.140|
;;;169        {
;;;170          CAN->MCR |= CAN_MCR_NART;
00007e  4b29              LDR      r3,|L10.292|
000080  681b              LDR      r3,[r3,#0]
000082  f0430310          ORR      r3,r3,#0x10
000086  4c27              LDR      r4,|L10.292|
000088  6023              STR      r3,[r4,#0]
00008a  e005              B        |L10.152|
                  |L10.140|
;;;171        }
;;;172        else
;;;173        {
;;;174          CAN->MCR &= ~CAN_MCR_NART;
00008c  4b25              LDR      r3,|L10.292|
00008e  681b              LDR      r3,[r3,#0]
000090  f0230310          BIC      r3,r3,#0x10
000094  4c23              LDR      r4,|L10.292|
000096  6023              STR      r3,[r4,#0]
                  |L10.152|
;;;175        }
;;;176    
;;;177        /* Set the receive FIFO locked mode */
;;;178        if (CAN_InitStruct->CAN_RFLM == ENABLE)
000098  790b              LDRB     r3,[r1,#4]
00009a  2b01              CMP      r3,#1
00009c  d106              BNE      |L10.172|
;;;179        {
;;;180          CAN->MCR |= CAN_MCR_RFLM;
00009e  4b21              LDR      r3,|L10.292|
0000a0  681b              LDR      r3,[r3,#0]
0000a2  f0430308          ORR      r3,r3,#8
0000a6  4c1f              LDR      r4,|L10.292|
0000a8  6023              STR      r3,[r4,#0]
0000aa  e005              B        |L10.184|
                  |L10.172|
;;;181        }
;;;182        else
;;;183        {
;;;184          CAN->MCR &= ~CAN_MCR_RFLM;
0000ac  4b1d              LDR      r3,|L10.292|
0000ae  681b              LDR      r3,[r3,#0]
0000b0  f0230308          BIC      r3,r3,#8
0000b4  4c1b              LDR      r4,|L10.292|
0000b6  6023              STR      r3,[r4,#0]
                  |L10.184|
;;;185        }
;;;186    
;;;187        /* Set the transmit FIFO priority */
;;;188        if (CAN_InitStruct->CAN_TXFP == ENABLE)
0000b8  794b              LDRB     r3,[r1,#5]
0000ba  2b01              CMP      r3,#1
0000bc  d106              BNE      |L10.204|
;;;189        {
;;;190          CAN->MCR |= CAN_MCR_TXFP;
0000be  4b19              LDR      r3,|L10.292|
0000c0  681b              LDR      r3,[r3,#0]
0000c2  f0430304          ORR      r3,r3,#4
0000c6  4c17              LDR      r4,|L10.292|
0000c8  6023              STR      r3,[r4,#0]
0000ca  e005              B        |L10.216|
                  |L10.204|
;;;191        }
;;;192        else
;;;193        {
;;;194          CAN->MCR &= ~CAN_MCR_TXFP;
0000cc  4b15              LDR      r3,|L10.292|
0000ce  681b              LDR      r3,[r3,#0]
0000d0  f0230304          BIC      r3,r3,#4
0000d4  4c13              LDR      r4,|L10.292|
0000d6  6023              STR      r3,[r4,#0]
                  |L10.216|
;;;195        }
;;;196    
;;;197        /* Set the bit timing register */
;;;198        CAN->BTR = (u32)((u32)CAN_InitStruct->CAN_Mode << 30) | ((u32)CAN_InitStruct->CAN_SJW << 24) |
0000d8  798b              LDRB     r3,[r1,#6]
0000da  079b              LSLS     r3,r3,#30
0000dc  79cc              LDRB     r4,[r1,#7]
0000de  ea436304          ORR      r3,r3,r4,LSL #24
0000e2  7a0c              LDRB     r4,[r1,#8]
0000e4  ea434304          ORR      r3,r3,r4,LSL #16
0000e8  7a4c              LDRB     r4,[r1,#9]
0000ea  ea435304          ORR      r3,r3,r4,LSL #20
0000ee  894c              LDRH     r4,[r1,#0xa]
0000f0  1e64              SUBS     r4,r4,#1
0000f2  4323              ORRS     r3,r3,r4
0000f4  4c0b              LDR      r4,|L10.292|
0000f6  341c              ADDS     r4,r4,#0x1c
0000f8  6023              STR      r3,[r4,#0]
;;;199                   ((u32)CAN_InitStruct->CAN_BS1 << 16) | ((u32)CAN_InitStruct->CAN_BS2 << 20) |
;;;200                   ((u32)CAN_InitStruct->CAN_Prescaler - 1);
;;;201    
;;;202        InitStatus = CANINITOK;
0000fa  2001              MOVS     r0,#1
;;;203    
;;;204        /* Request leave initialisation */
;;;205        CAN->MCR &= ~CAN_MCR_INRQ;
0000fc  4b09              LDR      r3,|L10.292|
0000fe  681b              LDR      r3,[r3,#0]
000100  f0230301          BIC      r3,r3,#1
000104  4c07              LDR      r4,|L10.292|
000106  6023              STR      r3,[r4,#0]
;;;206    
;;;207        /* Wait the acknowledge */
;;;208        for(WaitAck = 0x400; WaitAck > 0x0; WaitAck--)
000108  0282              LSLS     r2,r0,#10
00010a  e001              B        |L10.272|
                  |L10.268|
00010c  1e53              SUBS     r3,r2,#1
00010e  b29a              UXTH     r2,r3
                  |L10.272|
000110  2a00              CMP      r2,#0
000112  dcfb              BGT      |L10.268|
;;;209        {
;;;210        }
;;;211        
;;;212        /* ...and check acknowledged */
;;;213        if ((CAN->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
000114  4b03              LDR      r3,|L10.292|
000116  1d1b              ADDS     r3,r3,#4
000118  681b              LDR      r3,[r3,#0]
00011a  f0030301          AND      r3,r3,#1
00011e  b103              CBZ      r3,|L10.290|
;;;214        {
;;;215          InitStatus = CANINITFAILED;
000120  2000              MOVS     r0,#0
                  |L10.290|
;;;216        }
;;;217      }
;;;218    
;;;219      /* At this step, return the status of initialization */
;;;220      return InitStatus;
;;;221    }
000122  bd10              POP      {r4,pc}
;;;222    
                          ENDP

                  |L10.292|
                          DCD      0x40006400

                          AREA ||i.CAN_MessagePending||, CODE, READONLY, ALIGN=2

                  CAN_MessagePending PROC
;;;591    *******************************************************************************/
;;;592    u8 CAN_MessagePending(u8 FIFONumber)
000000  4601              MOV      r1,r0
;;;593    {
;;;594      u8 MessagePending=0;
000002  2000              MOVS     r0,#0
;;;595    
;;;596      /* Check the parameters */
;;;597      assert_param(IS_CAN_FIFO(FIFONumber));
;;;598    
;;;599      if (FIFONumber == CAN_FIFO0)
000004  b921              CBNZ     r1,|L11.16|
;;;600      {
;;;601        MessagePending = (u8)(CAN->RF0R&(u32)0x03);
000006  4a07              LDR      r2,|L11.36|
000008  6812              LDR      r2,[r2,#0]
00000a  f0020003          AND      r0,r2,#3
00000e  e008              B        |L11.34|
                  |L11.16|
;;;602      }
;;;603      else if (FIFONumber == CAN_FIFO1)
000010  2901              CMP      r1,#1
000012  d105              BNE      |L11.32|
;;;604      {
;;;605        MessagePending = (u8)(CAN->RF1R&(u32)0x03);
000014  4a03              LDR      r2,|L11.36|
000016  1d12              ADDS     r2,r2,#4
000018  6812              LDR      r2,[r2,#0]
00001a  f0020003          AND      r0,r2,#3
00001e  e000              B        |L11.34|
                  |L11.32|
;;;606      }
;;;607      else
;;;608      {
;;;609        MessagePending = 0;
000020  2000              MOVS     r0,#0
                  |L11.34|
;;;610      }
;;;611      return MessagePending;
;;;612    }
000022  4770              BX       lr
;;;613    
                          ENDP

                  |L11.36|
                          DCD      0x4000640c

                          AREA ||i.CAN_Receive||, CODE, READONLY, ALIGN=2

                  CAN_Receive PROC
;;;621    *******************************************************************************/
;;;622    void CAN_Receive(u8 FIFONumber, CanRxMsg* RxMessage)
000000  b510              PUSH     {r4,lr}
;;;623    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;624      /* Check the parameters */
;;;625      assert_param(IS_CAN_FIFO(FIFONumber));
;;;626    
;;;627      /* Get the Id */
;;;628      RxMessage->IDE = (u8)0x04 & CAN->sFIFOMailBox[FIFONumber].RIR;
000006  4831              LDR      r0,|L12.204|
000008  eb001004          ADD      r0,r0,r4,LSL #4
00000c  6800              LDR      r0,[r0,#0]
00000e  f0000004          AND      r0,r0,#4
000012  7218              STRB     r0,[r3,#8]
;;;629      if (RxMessage->IDE == CAN_ID_STD)
000014  7a18              LDRB     r0,[r3,#8]
000016  b948              CBNZ     r0,|L12.44|
;;;630      {
;;;631        RxMessage->StdId = (u32)0x000007FF & (CAN->sFIFOMailBox[FIFONumber].RIR >> 21);
000018  482c              LDR      r0,|L12.204|
00001a  eb001004          ADD      r0,r0,r4,LSL #4
00001e  6800              LDR      r0,[r0,#0]
000020  f24071ff          MOV      r1,#0x7ff
000024  ea015050          AND      r0,r1,r0,LSR #21
000028  6018              STR      r0,[r3,#0]
00002a  e008              B        |L12.62|
                  |L12.44|
;;;632      }
;;;633      else
;;;634      {
;;;635        RxMessage->ExtId = (u32)0x1FFFFFFF & (CAN->sFIFOMailBox[FIFONumber].RIR >> 3);
00002c  4827              LDR      r0,|L12.204|
00002e  eb001004          ADD      r0,r0,r4,LSL #4
000032  6800              LDR      r0,[r0,#0]
000034  f06f4160          MVN      r1,#0xe0000000
000038  ea0100d0          AND      r0,r1,r0,LSR #3
00003c  6058              STR      r0,[r3,#4]
                  |L12.62|
;;;636      }
;;;637      
;;;638      RxMessage->RTR = (u8)0x02 & CAN->sFIFOMailBox[FIFONumber].RIR;
00003e  4823              LDR      r0,|L12.204|
000040  eb001004          ADD      r0,r0,r4,LSL #4
000044  6800              LDR      r0,[r0,#0]
000046  f0000002          AND      r0,r0,#2
00004a  7258              STRB     r0,[r3,#9]
;;;639    
;;;640      /* Get the DLC */
;;;641      RxMessage->DLC = (u8)0x0F & CAN->sFIFOMailBox[FIFONumber].RDTR;
00004c  481f              LDR      r0,|L12.204|
00004e  eb001004          ADD      r0,r0,r4,LSL #4
000052  6840              LDR      r0,[r0,#4]
000054  f000000f          AND      r0,r0,#0xf
000058  7298              STRB     r0,[r3,#0xa]
;;;642    
;;;643      /* Get the FMI */
;;;644      RxMessage->FMI = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDTR >> 8);
00005a  481c              LDR      r0,|L12.204|
00005c  eb001004          ADD      r0,r0,r4,LSL #4
000060  6840              LDR      r0,[r0,#4]
000062  0a00              LSRS     r0,r0,#8
000064  74d8              STRB     r0,[r3,#0x13]
;;;645    
;;;646      /* Get the data field */
;;;647      RxMessage->Data[0] = (u8)0xFF & CAN->sFIFOMailBox[FIFONumber].RDLR;
000066  4819              LDR      r0,|L12.204|
000068  eb001004          ADD      r0,r0,r4,LSL #4
00006c  6880              LDR      r0,[r0,#8]
00006e  72d8              STRB     r0,[r3,#0xb]
;;;648      RxMessage->Data[1] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 8);
000070  4816              LDR      r0,|L12.204|
000072  eb001004          ADD      r0,r0,r4,LSL #4
000076  6880              LDR      r0,[r0,#8]
000078  0a01              LSRS     r1,r0,#8
00007a  7319              STRB     r1,[r3,#0xc]
;;;649      RxMessage->Data[2] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 16);
00007c  4813              LDR      r0,|L12.204|
00007e  eb001004          ADD      r0,r0,r4,LSL #4
000082  6880              LDR      r0,[r0,#8]
000084  0c01              LSRS     r1,r0,#16
000086  7359              STRB     r1,[r3,#0xd]
;;;650      RxMessage->Data[3] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 24);
000088  4810              LDR      r0,|L12.204|
00008a  eb001004          ADD      r0,r0,r4,LSL #4
00008e  6880              LDR      r0,[r0,#8]
000090  0e00              LSRS     r0,r0,#24
000092  7398              STRB     r0,[r3,#0xe]
;;;651    
;;;652      RxMessage->Data[4] = (u8)0xFF & CAN->sFIFOMailBox[FIFONumber].RDHR;
000094  480d              LDR      r0,|L12.204|
000096  eb001004          ADD      r0,r0,r4,LSL #4
00009a  68c0              LDR      r0,[r0,#0xc]
00009c  73d8              STRB     r0,[r3,#0xf]
;;;653      RxMessage->Data[5] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 8);
00009e  480b              LDR      r0,|L12.204|
0000a0  eb001004          ADD      r0,r0,r4,LSL #4
0000a4  68c0              LDR      r0,[r0,#0xc]
0000a6  0a01              LSRS     r1,r0,#8
0000a8  7419              STRB     r1,[r3,#0x10]
;;;654      RxMessage->Data[6] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 16);
0000aa  4808              LDR      r0,|L12.204|
0000ac  eb001004          ADD      r0,r0,r4,LSL #4
0000b0  68c0              LDR      r0,[r0,#0xc]
0000b2  0c01              LSRS     r1,r0,#16
0000b4  7459              STRB     r1,[r3,#0x11]
;;;655      RxMessage->Data[7] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 24);
0000b6  4805              LDR      r0,|L12.204|
0000b8  eb001004          ADD      r0,r0,r4,LSL #4
0000bc  68c0              LDR      r0,[r0,#0xc]
0000be  0e00              LSRS     r0,r0,#24
0000c0  7498              STRB     r0,[r3,#0x12]
;;;656    
;;;657      /* Release the FIFO */
;;;658      CAN_FIFORelease(FIFONumber);
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       CAN_FIFORelease
;;;659    }
0000c8  bd10              POP      {r4,pc}
;;;660    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L12.204|
                          DCD      0x400065b0

                          AREA ||i.CAN_Sleep||, CODE, READONLY, ALIGN=2

                  CAN_Sleep PROC
;;;667    *******************************************************************************/
;;;668    u8 CAN_Sleep(void)
000000  2000              MOVS     r0,#0
;;;669    {
;;;670      u8 SleepStatus = 0;
;;;671    
;;;672      /* Sleep mode entering request */
;;;673      CAN->MCR |= CAN_MCR_SLEEP;
000002  4907              LDR      r1,|L13.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410102          ORR      r1,r1,#2
00000a  4a05              LDR      r2,|L13.32|
00000c  6011              STR      r1,[r2,#0]
;;;674      SleepStatus = CANSLEEPOK;
00000e  2001              MOVS     r0,#1
;;;675    
;;;676      /* Sleep mode status */
;;;677      if ((CAN->MCR&CAN_MCR_SLEEP) == 0)
000010  4611              MOV      r1,r2
000012  6809              LDR      r1,[r1,#0]
000014  f0010102          AND      r1,r1,#2
000018  b901              CBNZ     r1,|L13.28|
;;;678      {
;;;679        /* Sleep mode not entered */
;;;680        SleepStatus = CANSLEEPFAILED;
00001a  2000              MOVS     r0,#0
                  |L13.28|
;;;681      }
;;;682    
;;;683      /* At this step, sleep mode status */
;;;684      return SleepStatus;
;;;685    }
00001c  4770              BX       lr
;;;686    
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      0x40006400

                          AREA ||i.CAN_StructInit||, CODE, READONLY, ALIGN=1

                  CAN_StructInit PROC
;;;328    *******************************************************************************/
;;;329    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000000  2100              MOVS     r1,#0
;;;330    {
;;;331      /* Reset CAN init structure parameters values */
;;;332    
;;;333      /* Initialize the time triggered communication mode */
;;;334      CAN_InitStruct->CAN_TTCM = DISABLE;
000002  7001              STRB     r1,[r0,#0]
;;;335    
;;;336      /* Initialize the automatic bus-off management */
;;;337      CAN_InitStruct->CAN_ABOM = DISABLE;
000004  7041              STRB     r1,[r0,#1]
;;;338    
;;;339      /* Initialize the automatic wake-up mode */
;;;340      CAN_InitStruct->CAN_AWUM = DISABLE;
000006  7081              STRB     r1,[r0,#2]
;;;341    
;;;342      /* Initialize the no automatic retransmission */
;;;343      CAN_InitStruct->CAN_NART = DISABLE;
000008  70c1              STRB     r1,[r0,#3]
;;;344    
;;;345      /* Initialize the receive FIFO locked mode */
;;;346      CAN_InitStruct->CAN_RFLM = DISABLE;
00000a  7101              STRB     r1,[r0,#4]
;;;347    
;;;348      /* Initialize the transmit FIFO priority */
;;;349      CAN_InitStruct->CAN_TXFP = DISABLE;
00000c  7141              STRB     r1,[r0,#5]
;;;350    
;;;351      /* Initialize the CAN_Mode member */
;;;352      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00000e  7181              STRB     r1,[r0,#6]
;;;353    
;;;354      /* Initialize the CAN_SJW member */
;;;355      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000010  71c1              STRB     r1,[r0,#7]
;;;356    
;;;357      /* Initialize the CAN_BS1 member */
;;;358      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000012  2103              MOVS     r1,#3
000014  7201              STRB     r1,[r0,#8]
;;;359    
;;;360      /* Initialize the CAN_BS2 member */
;;;361      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000016  2102              MOVS     r1,#2
000018  7241              STRB     r1,[r0,#9]
;;;362    
;;;363      /* Initialize the CAN_Prescaler member */
;;;364      CAN_InitStruct->CAN_Prescaler = 1;
00001a  2101              MOVS     r1,#1
00001c  8141              STRH     r1,[r0,#0xa]
;;;365    }
00001e  4770              BX       lr
;;;366    
                          ENDP


                          AREA ||i.CAN_Transmit||, CODE, READONLY, ALIGN=2

                  CAN_Transmit PROC
;;;407    *******************************************************************************/
;;;408    u8 CAN_Transmit(CanTxMsg* TxMessage)
000000  b510              PUSH     {r4,lr}
;;;409    {
000002  4601              MOV      r1,r0
;;;410      u8 TransmitMailbox = 0;
000004  2000              MOVS     r0,#0
;;;411    
;;;412      /* Check the parameters */
;;;413      assert_param(IS_CAN_STDID(TxMessage->StdId));
;;;414      assert_param(IS_CAN_EXTID(TxMessage->StdId));
;;;415      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;416      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;417      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;418    
;;;419      /* Select one empty transmit mailbox */
;;;420      if ((CAN->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000006  4a49              LDR      r2,|L15.300|
000008  6812              LDR      r2,[r2,#0]
00000a  f0026280          AND      r2,r2,#0x4000000
00000e  f1b26f80          CMP      r2,#0x4000000
000012  d100              BNE      |L15.22|
;;;421      {
;;;422        TransmitMailbox = 0;
000014  e012              B        |L15.60|
                  |L15.22|
;;;423      }
;;;424      else if ((CAN->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
000016  4a45              LDR      r2,|L15.300|
000018  6812              LDR      r2,[r2,#0]
00001a  f0026200          AND      r2,r2,#0x8000000
00001e  f1b26f00          CMP      r2,#0x8000000
000022  d101              BNE      |L15.40|
;;;425      {
;;;426        TransmitMailbox = 1;
000024  2001              MOVS     r0,#1
000026  e009              B        |L15.60|
                  |L15.40|
;;;427      }
;;;428      else if ((CAN->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
000028  4a40              LDR      r2,|L15.300|
00002a  6812              LDR      r2,[r2,#0]
00002c  f0025280          AND      r2,r2,#0x10000000
000030  f1b25f80          CMP      r2,#0x10000000
000034  d101              BNE      |L15.58|
;;;429      {
;;;430        TransmitMailbox = 2;
000036  2002              MOVS     r0,#2
000038  e000              B        |L15.60|
                  |L15.58|
;;;431      }
;;;432      else
;;;433      {
;;;434        TransmitMailbox = CAN_NO_MB;
00003a  2004              MOVS     r0,#4
                  |L15.60|
;;;435      }
;;;436    
;;;437      if (TransmitMailbox != CAN_NO_MB)
00003c  2804              CMP      r0,#4
00003e  d074              BEQ      |L15.298|
;;;438      {
;;;439        /* Set up the Id */
;;;440        CAN->sTxMailBox[TransmitMailbox].TIR &= CAN_TMIDxR_TXRQ;
000040  4a3b              LDR      r2,|L15.304|
000042  eb021200          ADD      r2,r2,r0,LSL #4
000046  6812              LDR      r2,[r2,#0]
000048  f0020301          AND      r3,r2,#1
00004c  4a38              LDR      r2,|L15.304|
00004e  eb021200          ADD      r2,r2,r0,LSL #4
000052  6013              STR      r3,[r2,#0]
;;;441        if (TxMessage->IDE == CAN_ID_STD)
000054  7a0a              LDRB     r2,[r1,#8]
000056  b9aa              CBNZ     r2,|L15.132|
;;;442        {
;;;443          TxMessage->StdId &= (u32)0x000007FF;
000058  880a              LDRH     r2,[r1,#0]
00005a  f3c2020a          UBFX     r2,r2,#0,#11
00005e  600a              STR      r2,[r1,#0]
;;;444          TxMessage->StdId = TxMessage->StdId << 21;
000060  880a              LDRH     r2,[r1,#0]
000062  0552              LSLS     r2,r2,#21
000064  600a              STR      r2,[r1,#0]
;;;445          
;;;446          CAN->sTxMailBox[TransmitMailbox].TIR |= (TxMessage->StdId | TxMessage->IDE |
000066  4a32              LDR      r2,|L15.304|
000068  eb021200          ADD      r2,r2,r0,LSL #4
00006c  6813              LDR      r3,[r2,#0]
00006e  7a0c              LDRB     r4,[r1,#8]
000070  680a              LDR      r2,[r1,#0]
000072  4322              ORRS     r2,r2,r4
000074  7a4c              LDRB     r4,[r1,#9]
000076  4322              ORRS     r2,r2,r4
000078  4313              ORRS     r3,r3,r2
00007a  4a2d              LDR      r2,|L15.304|
00007c  eb021200          ADD      r2,r2,r0,LSL #4
000080  6013              STR      r3,[r2,#0]
000082  e014              B        |L15.174|
                  |L15.132|
;;;447                                                   TxMessage->RTR);
;;;448        }
;;;449        else
;;;450        {
;;;451          TxMessage->ExtId &= (u32)0x1FFFFFFF;
000084  684a              LDR      r2,[r1,#4]
000086  f0224260          BIC      r2,r2,#0xe0000000
00008a  604a              STR      r2,[r1,#4]
;;;452          TxMessage->ExtId <<= 3;
00008c  684a              LDR      r2,[r1,#4]
00008e  00d2              LSLS     r2,r2,#3
000090  604a              STR      r2,[r1,#4]
;;;453    
;;;454          CAN->sTxMailBox[TransmitMailbox].TIR |= (TxMessage->ExtId | TxMessage->IDE | 
000092  4a27              LDR      r2,|L15.304|
000094  eb021200          ADD      r2,r2,r0,LSL #4
000098  6813              LDR      r3,[r2,#0]
00009a  7a0c              LDRB     r4,[r1,#8]
00009c  684a              LDR      r2,[r1,#4]
00009e  4322              ORRS     r2,r2,r4
0000a0  7a4c              LDRB     r4,[r1,#9]
0000a2  4322              ORRS     r2,r2,r4
0000a4  4313              ORRS     r3,r3,r2
0000a6  4a22              LDR      r2,|L15.304|
0000a8  eb021200          ADD      r2,r2,r0,LSL #4
0000ac  6013              STR      r3,[r2,#0]
                  |L15.174|
;;;455                                                   TxMessage->RTR);
;;;456        }
;;;457        
;;;458        /* Set up the DLC */
;;;459        TxMessage->DLC &= (u8)0x0000000F;
0000ae  7a8a              LDRB     r2,[r1,#0xa]
0000b0  f002020f          AND      r2,r2,#0xf
0000b4  728a              STRB     r2,[r1,#0xa]
;;;460        CAN->sTxMailBox[TransmitMailbox].TDTR &= (u32)0xFFFFFFF0;
0000b6  4a1e              LDR      r2,|L15.304|
0000b8  eb021200          ADD      r2,r2,r0,LSL #4
0000bc  6852              LDR      r2,[r2,#4]
0000be  f022030f          BIC      r3,r2,#0xf
0000c2  4a1b              LDR      r2,|L15.304|
0000c4  eb021200          ADD      r2,r2,r0,LSL #4
0000c8  6053              STR      r3,[r2,#4]
;;;461        CAN->sTxMailBox[TransmitMailbox].TDTR |= TxMessage->DLC;
0000ca  4a19              LDR      r2,|L15.304|
0000cc  eb021200          ADD      r2,r2,r0,LSL #4
0000d0  6852              LDR      r2,[r2,#4]
0000d2  7a8b              LDRB     r3,[r1,#0xa]
0000d4  431a              ORRS     r2,r2,r3
0000d6  4b16              LDR      r3,|L15.304|
0000d8  eb031300          ADD      r3,r3,r0,LSL #4
0000dc  605a              STR      r2,[r3,#4]
;;;462    
;;;463        /* Set up the data field */
;;;464        CAN->sTxMailBox[TransmitMailbox].TDLR = (((u32)TxMessage->Data[3] << 24) | 
0000de  7b8a              LDRB     r2,[r1,#0xe]
0000e0  0613              LSLS     r3,r2,#24
0000e2  7b4a              LDRB     r2,[r1,#0xd]
0000e4  ea434302          ORR      r3,r3,r2,LSL #16
0000e8  7b0a              LDRB     r2,[r1,#0xc]
0000ea  ea432302          ORR      r3,r3,r2,LSL #8
0000ee  7aca              LDRB     r2,[r1,#0xb]
0000f0  4313              ORRS     r3,r3,r2
0000f2  4a0f              LDR      r2,|L15.304|
0000f4  eb021200          ADD      r2,r2,r0,LSL #4
0000f8  6093              STR      r3,[r2,#8]
;;;465                                                 ((u32)TxMessage->Data[2] << 16) |
;;;466                                                 ((u32)TxMessage->Data[1] << 8) | 
;;;467                                                 ((u32)TxMessage->Data[0]));
;;;468        CAN->sTxMailBox[TransmitMailbox].TDHR = (((u32)TxMessage->Data[7] << 24) | 
0000fa  7c8a              LDRB     r2,[r1,#0x12]
0000fc  0613              LSLS     r3,r2,#24
0000fe  7c4a              LDRB     r2,[r1,#0x11]
000100  ea434302          ORR      r3,r3,r2,LSL #16
000104  7c0a              LDRB     r2,[r1,#0x10]
000106  ea432202          ORR      r2,r3,r2,LSL #8
00010a  7bcb              LDRB     r3,[r1,#0xf]
00010c  4313              ORRS     r3,r3,r2
00010e  4a08              LDR      r2,|L15.304|
000110  eb021200          ADD      r2,r2,r0,LSL #4
000114  60d3              STR      r3,[r2,#0xc]
;;;469                                                 ((u32)TxMessage->Data[6] << 16) |
;;;470                                                 ((u32)TxMessage->Data[5] << 8) |
;;;471                                                 ((u32)TxMessage->Data[4]));
;;;472    
;;;473        /* Request transmission */
;;;474        CAN->sTxMailBox[TransmitMailbox].TIR |= CAN_TMIDxR_TXRQ;
000116  4a06              LDR      r2,|L15.304|
000118  eb021200          ADD      r2,r2,r0,LSL #4
00011c  6812              LDR      r2,[r2,#0]
00011e  f0420301          ORR      r3,r2,#1
000122  4a03              LDR      r2,|L15.304|
000124  eb021200          ADD      r2,r2,r0,LSL #4
000128  6013              STR      r3,[r2,#0]
                  |L15.298|
;;;475      }
;;;476    
;;;477      return TransmitMailbox;
;;;478    }
00012a  bd10              POP      {r4,pc}
;;;479    
                          ENDP

                  |L15.300|
                          DCD      0x40006408
                  |L15.304|
                          DCD      0x40006580

                          AREA ||i.CAN_TransmitStatus||, CODE, READONLY, ALIGN=2

                  CAN_TransmitStatus PROC
;;;488    *******************************************************************************/
;;;489    u8 CAN_TransmitStatus(u8 TransmitMailbox)
000000  4601              MOV      r1,r0
;;;490    {
;;;491      /* RQCP, TXOK and TME bits */
;;;492      u8 State = 0;
000002  2000              MOVS     r0,#0
;;;493    
;;;494      /* Check the parameters */
;;;495      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;496    
;;;497      switch (TransmitMailbox)
000004  b121              CBZ      r1,|L16.16|
000006  2901              CMP      r1,#1
000008  d013              BEQ      |L16.50|
00000a  2902              CMP      r1,#2
00000c  d135              BNE      |L16.122|
00000e  e022              B        |L16.86|
                  |L16.16|
;;;498      {
;;;499        case (0): State |= (u8)((CAN->TSR & CAN_TSR_RQCP0) << 2);
000010  4a23              LDR      r2,|L16.160|
000012  6812              LDR      r2,[r2,#0]
000014  f0020201          AND      r2,r2,#1
000018  ea400082          ORR      r0,r0,r2,LSL #2
;;;500          State |= (u8)((CAN->TSR & CAN_TSR_TXOK0) >> 0);
00001c  4a20              LDR      r2,|L16.160|
00001e  6812              LDR      r2,[r2,#0]
000020  f0020202          AND      r2,r2,#2
000024  4310              ORRS     r0,r0,r2
;;;501          State |= (u8)((CAN->TSR & CAN_TSR_TME0) >> 26);
000026  4a1e              LDR      r2,|L16.160|
000028  6812              LDR      r2,[r2,#0]
00002a  f3c26280          UBFX     r2,r2,#26,#1
00002e  4310              ORRS     r0,r0,r2
;;;502          break;
000030  e025              B        |L16.126|
                  |L16.50|
;;;503        case (1): State |= (u8)((CAN->TSR & CAN_TSR_RQCP1) >> 6);
000032  4a1b              LDR      r2,|L16.160|
000034  6812              LDR      r2,[r2,#0]
000036  f4027280          AND      r2,r2,#0x100
00003a  ea401092          ORR      r0,r0,r2,LSR #6
;;;504          State |= (u8)((CAN->TSR & CAN_TSR_TXOK1) >> 8);
00003e  4a18              LDR      r2,|L16.160|
000040  6812              LDR      r2,[r2,#0]
000042  f4027200          AND      r2,r2,#0x200
000046  ea402012          ORR      r0,r0,r2,LSR #8
;;;505          State |= (u8)((CAN->TSR & CAN_TSR_TME1) >> 27);
00004a  4a15              LDR      r2,|L16.160|
00004c  6812              LDR      r2,[r2,#0]
00004e  f3c262c0          UBFX     r2,r2,#27,#1
000052  4310              ORRS     r0,r0,r2
;;;506          break;
000054  e013              B        |L16.126|
                  |L16.86|
;;;507        case (2): State |= (u8)((CAN->TSR & CAN_TSR_RQCP2) >> 14);
000056  4a12              LDR      r2,|L16.160|
000058  6812              LDR      r2,[r2,#0]
00005a  f4023280          AND      r2,r2,#0x10000
00005e  ea403092          ORR      r0,r0,r2,LSR #14
;;;508          State |= (u8)((CAN->TSR & CAN_TSR_TXOK2) >> 16);
000062  4a0f              LDR      r2,|L16.160|
000064  6812              LDR      r2,[r2,#0]
000066  f4023200          AND      r2,r2,#0x20000
00006a  ea404012          ORR      r0,r0,r2,LSR #16
;;;509          State |= (u8)((CAN->TSR & CAN_TSR_TME2) >> 28);
00006e  4a0c              LDR      r2,|L16.160|
000070  6812              LDR      r2,[r2,#0]
000072  f3c27200          UBFX     r2,r2,#28,#1
000076  4310              ORRS     r0,r0,r2
;;;510          break;
000078  e001              B        |L16.126|
                  |L16.122|
;;;511        default:
;;;512          State = CANTXFAILED;
00007a  2000              MOVS     r0,#0
;;;513          break;
00007c  bf00              NOP      
                  |L16.126|
00007e  bf00              NOP                            ;502
;;;514      }
;;;515    
;;;516      switch (State)
000080  b120              CBZ      r0,|L16.140|
000082  2805              CMP      r0,#5
000084  d004              BEQ      |L16.144|
000086  2807              CMP      r0,#7
000088  d106              BNE      |L16.152|
00008a  e003              B        |L16.148|
                  |L16.140|
;;;517      {
;;;518          /* transmit pending  */
;;;519        case (0x0): State = CANTXPENDING;
00008c  2002              MOVS     r0,#2
;;;520          break;
00008e  e005              B        |L16.156|
                  |L16.144|
;;;521          /* transmit failed  */
;;;522        case (0x5): State = CANTXFAILED;
000090  2000              MOVS     r0,#0
;;;523          break;
000092  e003              B        |L16.156|
                  |L16.148|
;;;524          /* transmit succedeed  */
;;;525        case (0x7): State = CANTXOK;
000094  2001              MOVS     r0,#1
;;;526          break;
000096  e001              B        |L16.156|
                  |L16.152|
;;;527        default:
;;;528          State = CANTXFAILED;
000098  2000              MOVS     r0,#0
;;;529          break;
00009a  bf00              NOP      
                  |L16.156|
00009c  bf00              NOP                            ;520
;;;530      }
;;;531    
;;;532      return State;
;;;533    }
00009e  4770              BX       lr
;;;534    
                          ENDP

                  |L16.160|
                          DCD      0x40006408

                          AREA ||i.CAN_WakeUp||, CODE, READONLY, ALIGN=2

                  CAN_WakeUp PROC
;;;694    *******************************************************************************/
;;;695    u8 CAN_WakeUp(void)
000000  2000              MOVS     r0,#0
;;;696    {
;;;697      u8 WakeUpStatus = 0;
;;;698    
;;;699      /* Wake up request */
;;;700      CAN->MCR &= ~CAN_MCR_SLEEP;
000002  4907              LDR      r1,|L17.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0210102          BIC      r1,r1,#2
00000a  4a05              LDR      r2,|L17.32|
00000c  6011              STR      r1,[r2,#0]
;;;701      WakeUpStatus = CANWAKEUPFAILED;
00000e  bf00              NOP      
;;;702    
;;;703      /* Sleep mode status */
;;;704      if ((CAN->MCR&CAN_MCR_SLEEP) == 0)
000010  4611              MOV      r1,r2
000012  6809              LDR      r1,[r1,#0]
000014  f0010102          AND      r1,r1,#2
000018  b901              CBNZ     r1,|L17.28|
;;;705      {
;;;706        /* Sleep mode exited */
;;;707        WakeUpStatus = CANWAKEUPOK;
00001a  2001              MOVS     r0,#1
                  |L17.28|
;;;708      }
;;;709    
;;;710      /* At this step, sleep mode status */
;;;711      return WakeUpStatus;
;;;712    }
00001c  4770              BX       lr
;;;713    
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
                          DCD      0x40006400

                          AREA ||i.CheckITStatus||, CODE, READONLY, ALIGN=1

                  CheckITStatus PROC
;;;890    *******************************************************************************/
;;;891    static ITStatus CheckITStatus(u32 CAN_Reg, u32 It_Bit)
000000  4602              MOV      r2,r0
;;;892    {
;;;893      ITStatus pendingbitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;894    
;;;895      if ((CAN_Reg & It_Bit) != (u32)RESET)
000004  ea020301          AND      r3,r2,r1
000008  b10b              CBZ      r3,|L18.14|
;;;896      {
;;;897        /* CAN_IT is set */
;;;898        pendingbitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L18.16|
                  |L18.14|
;;;899      }
;;;900      else
;;;901      {
;;;902        /* CAN_IT is reset */
;;;903        pendingbitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L18.16|
;;;904      }
;;;905    
;;;906      return pendingbitstatus;
;;;907    }
000010  4770              BX       lr
;;;908    
                          ENDP

