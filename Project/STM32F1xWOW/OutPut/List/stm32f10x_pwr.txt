; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_pwr.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_pwr.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;80     *******************************************************************************/
;;;81     void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;82     {
;;;83       /* Check the parameters */
;;;84       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;85     
;;;86       *(vu32 *) CR_DBP_BB = (u32)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;271    *******************************************************************************/
;;;272    void PWR_ClearFlag(u32 PWR_FLAG)
000000  4903              LDR      r1,|L2.16|
;;;273    {
;;;274      /* Check the parameters */
;;;275      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;276             
;;;277      PWR->CR |=  PWR_FLAG << 2;
000002  6809              LDR      r1,[r1,#0]
000004  ea410180          ORR      r1,r1,r0,LSL #2
000008  4a01              LDR      r2,|L2.16|
00000a  6011              STR      r1,[r2,#0]
;;;278    }
00000c  4770              BX       lr
;;;279    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;66     *******************************************************************************/
;;;67     void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;68     {
;;;69       RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;70       RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;71     }
000014  bd10              POP      {r4,pc}
;;;72     
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;215    *******************************************************************************/
;;;216    void PWR_EnterSTANDBYMode(void)
000000  b510              PUSH     {r4,lr}
;;;217    {
;;;218      /* Clear Wake-up flag */
;;;219      PWR->CR |= CR_CWUF_Set;
000002  480a              LDR      r0,|L4.44|
000004  6800              LDR      r0,[r0,#0]
000006  f0400004          ORR      r0,r0,#4
00000a  4908              LDR      r1,|L4.44|
00000c  6008              STR      r0,[r1,#0]
;;;220    
;;;221      /* Select STANDBY mode */
;;;222      PWR->CR |= CR_PDDS_Set;
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  f0400002          ORR      r0,r0,#2
000016  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;225      *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
000018  4805              LDR      r0,|L4.48|
00001a  6800              LDR      r0,[r0,#0]
00001c  f0400004          ORR      r0,r0,#4
000020  4903              LDR      r1,|L4.48|
000022  6008              STR      r0,[r1,#0]
;;;226    
;;;227      /* Request Wait For Interrupt */
;;;228      __WFI();
000024  f7fffffe          BL       __WFI
;;;229    }
000028  bd10              POP      {r4,pc}
;;;230    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40007000
                  |L4.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;172    *******************************************************************************/
;;;173    void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;175      u32 tmpreg = 0;
000006  2400              MOVS     r4,#0
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;179      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;180      
;;;181      /* Select the regulator state in STOP mode ---------------------------------*/
;;;182      tmpreg = PWR->CR;
000008  4809              LDR      r0,|L5.48|
00000a  6804              LDR      r4,[r0,#0]
;;;183    
;;;184      /* Clear PDDS and LPDS bits */
;;;185      tmpreg &= CR_DS_Mask;
00000c  f0240403          BIC      r4,r4,#3
;;;186    
;;;187      /* Set LPDS bit according to PWR_Regulator value */
;;;188      tmpreg |= PWR_Regulator;
000010  432c              ORRS     r4,r4,r5
;;;189    
;;;190      /* Store the new value */
;;;191      PWR->CR = tmpreg;
000012  6004              STR      r4,[r0,#0]
;;;192    
;;;193      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;194      *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
000014  4807              LDR      r0,|L5.52|
000016  6800              LDR      r0,[r0,#0]
000018  f0400004          ORR      r0,r0,#4
00001c  4905              LDR      r1,|L5.52|
00001e  6008              STR      r0,[r1,#0]
;;;195      
;;;196      /* Select STOP mode entry --------------------------------------------------*/
;;;197      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000020  2e01              CMP      r6,#1
000022  d102              BNE      |L5.42|
;;;198      {   
;;;199        /* Request Wait For Interrupt */
;;;200        __WFI();
000024  f7fffffe          BL       __WFI
000028  e001              B        |L5.46|
                  |L5.42|
;;;201      }
;;;202      else
;;;203      {
;;;204        /* Request Wait For Event */
;;;205        __WFE();
00002a  f7fffffe          BL       __WFE
                  |L5.46|
;;;206      }
;;;207    }
00002e  bd70              POP      {r4-r6,pc}
;;;208    
                          ENDP

                  |L5.48|
                          DCD      0x40007000
                  |L5.52|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;241    *******************************************************************************/
;;;242    FlagStatus PWR_GetFlagStatus(u32 PWR_FLAG)
000000  4601              MOV      r1,r0
;;;243    {
;;;244      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;245    
;;;246      /* Check the parameters */
;;;247      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;248      
;;;249      if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
000004  4a03              LDR      r2,|L6.20|
000006  6852              LDR      r2,[r2,#4]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L6.16|
;;;250      {
;;;251        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L6.18|
                  |L6.16|
;;;252      }
;;;253      else
;;;254      {
;;;255        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;256      }
;;;257    
;;;258      /* Return the flag status */
;;;259      return bitstatus;
;;;260    }
000012  4770              BX       lr
;;;261    
                          ENDP

                  |L6.20|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;96     *******************************************************************************/
;;;97     void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;98     {
;;;99       /* Check the parameters */
;;;100      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;101    
;;;102      *(vu32 *) CR_PVDE_BB = (u32)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;103    }
000004  4770              BX       lr
;;;104    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;121    *******************************************************************************/
;;;122    void PWR_PVDLevelConfig(u32 PWR_PVDLevel)
000000  4601              MOV      r1,r0
;;;123    {
;;;124      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;125    
;;;126      /* Check the parameters */
;;;127      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;128    
;;;129      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L8.20|
000006  6810              LDR      r0,[r2,#0]
;;;130    
;;;131      /* Clear PLS[7:5] bits */
;;;132      tmpreg &= CR_PLS_Mask;
000008  f02000e0          BIC      r0,r0,#0xe0
;;;133    
;;;134      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;135      tmpreg |= PWR_PVDLevel;
00000c  4308              ORRS     r0,r0,r1
;;;136    
;;;137      /* Store the new value */
;;;138      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;139    }
000010  4770              BX       lr
;;;140    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;148    *******************************************************************************/
;;;149    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;150    {
;;;151      /* Check the parameters */
;;;152      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;153    
;;;154      *(vu32 *) CSR_EWUP_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;155    }
000004  4770              BX       lr
;;;156    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e00a0
