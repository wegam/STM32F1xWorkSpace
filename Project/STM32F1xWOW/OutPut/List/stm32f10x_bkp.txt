; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_bkp.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_bkp.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;240    *******************************************************************************/
;;;241    void BKP_ClearFlag(void)
000000  4803              LDR      r0,|L1.16|
;;;242    {
;;;243      /* Set CTE bit to clear Tamper Pin Event flag */
;;;244      BKP->CSR |= CSR_CTE_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  8008              STRH     r0,[r1,#0]
;;;245    }
00000c  4770              BX       lr
;;;246    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;265    *******************************************************************************/
;;;266    void BKP_ClearITPendingBit(void)
000000  4803              LDR      r0,|L2.16|
;;;267    {
;;;268      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;269      BKP->CSR |= CSR_CTI_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L2.16|
00000a  8008              STRH     r0,[r1,#0]
;;;270    }
00000c  4770              BX       lr
;;;271    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;71     *******************************************************************************/
;;;72     void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74       RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;75       RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;76     }
00000e  bd10              POP      {r4,pc}
;;;77     
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;228    *******************************************************************************/
;;;229    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;230    {
;;;231      return (FlagStatus)(*(vu32 *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;232    }
000006  4770              BX       lr
;;;233    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;253    *******************************************************************************/
;;;254    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;255    {
;;;256      return (ITStatus)(*(vu32 *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;257    }
000006  4770              BX       lr
;;;258    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;119    *******************************************************************************/
;;;120    void BKP_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;121    {
;;;122      /* Check the parameters */
;;;123      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;124    
;;;125      *(vu32 *) CSR_TPIE_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;126    }
000004  4770              BX       lr
;;;127    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;142    *******************************************************************************/
;;;143    void BKP_RTCOutputConfig(u16 BKP_RTCOutputSource)
000000  4601              MOV      r1,r0
;;;144    {
;;;145      u16 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;146    
;;;147      /* Check the parameters */
;;;148      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;149    
;;;150      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L7.24|
000006  8810              LDRH     r0,[r2,#0]
;;;151    
;;;152      /* Clear CCO, ASOE and ASOS bits */
;;;153      tmpreg &= RTCCR_Mask;
000008  f64f427f          MOV      r2,#0xfc7f
00000c  4010              ANDS     r0,r0,r2
;;;154      
;;;155      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;156      tmpreg |= BKP_RTCOutputSource;
00000e  4308              ORRS     r0,r0,r1
;;;157    
;;;158      /* Store the new value */
;;;159      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L7.24|
000012  8010              STRH     r0,[r2,#0]
;;;160    }
000014  4770              BX       lr
;;;161    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;213    *******************************************************************************/
;;;214    u16 BKP_ReadBackupRegister(u16 BKP_DR)
000000  4601              MOV      r1,r0
;;;215    {
;;;216      /* Check the parameters */
;;;217      assert_param(IS_BKP_DR(BKP_DR));
;;;218    
;;;219      return (*(vu16 *) (BKP_BASE + BKP_DR));
000002  4802              LDR      r0,|L8.12|
000004  4408              ADD      r0,r0,r1
000006  f8b00c00          LDRH     r0,[r0,#0xc00]
;;;220    }
00000a  4770              BX       lr
;;;221    
                          ENDP

                  |L8.12|
                          DCD      0x40006000

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;169    *******************************************************************************/
;;;170    void BKP_SetRTCCalibrationValue(u8 CalibrationValue)
000000  4601              MOV      r1,r0
;;;171    {
;;;172      u16 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;173    
;;;174      /* Check the parameters */
;;;175      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;176    
;;;177      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L9.24|
000006  8810              LDRH     r0,[r2,#0]
;;;178    
;;;179      /* Clear CAL[6:0] bits */
;;;180      tmpreg &= RTCCR_CAL_Mask;
000008  f64f7280          MOV      r2,#0xff80
00000c  4010              ANDS     r0,r0,r2
;;;181    
;;;182      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;183      tmpreg |= CalibrationValue;
00000e  4308              ORRS     r0,r0,r1
;;;184    
;;;185      /* Store the new value */
;;;186      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L9.24|
000012  8010              STRH     r0,[r2,#0]
;;;187    }
000014  4770              BX       lr
;;;188    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;103    *******************************************************************************/
;;;104    void BKP_TamperPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L10.8|
;;;105    {
;;;106      /* Check the parameters */
;;;107      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;108    
;;;109      *(vu32 *) CR_TPE_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;110    }
000004  4770              BX       lr
;;;111    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;87     *******************************************************************************/
;;;88     void BKP_TamperPinLevelConfig(u16 BKP_TamperPinLevel)
000000  4901              LDR      r1,|L11.8|
;;;89     {
;;;90       /* Check the parameters */
;;;91       assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;92     
;;;93       *(vu32 *) CR_TPAL_BB = BKP_TamperPinLevel;
000002  6008              STR      r0,[r1,#0]
;;;94     }
000004  4770              BX       lr
;;;95     
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;197    *******************************************************************************/
;;;198    void BKP_WriteBackupRegister(u16 BKP_DR, u16 Data)
000000  4a02              LDR      r2,|L12.12|
;;;199    {
;;;200      /* Check the parameters */
;;;201      assert_param(IS_BKP_DR(BKP_DR));
;;;202    
;;;203      *(vu16 *) (BKP_BASE + BKP_DR) = Data;
000002  4402              ADD      r2,r2,r0
000004  f8a21c00          STRH     r1,[r2,#0xc00]
;;;204    }
000008  4770              BX       lr
;;;205    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      0x40006000
