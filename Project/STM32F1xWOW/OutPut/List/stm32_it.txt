; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_it.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_it.crf main\STM32_IT.c]
                          THUMB

                          AREA ||i.ADC1_2_IRQHandler||, CODE, READONLY, ALIGN=1

                  ADC1_2_IRQHandler PROC
;;;372    *******************************************************************************/
;;;373    void ADC1_2_IRQHandler(void)
000000  4770              BX       lr
;;;374    {
;;;375    }
;;;376    
                          ENDP


                          AREA ||i.ADC3_IRQHandler||, CODE, READONLY, ALIGN=1

                  ADC3_IRQHandler PROC
;;;782    *******************************************************************************/
;;;783    void ADC3_IRQHandler(void)
000000  4770              BX       lr
;;;784    {
;;;785    }
;;;786    
                          ENDP


                          AREA ||i.BusFaultException||, CODE, READONLY, ALIGN=1

                  BusFault_Handler                  ; Alternate entry point
                  BusFaultException PROC
;;;84     *******************************************************************************/
;;;85     void BusFaultException(void)
;;;86     {
;;;87       /* Go to infinite loop when Bus Fault exception occurs */
;;;88       while (1)
;;;89       {
;;;90       }
;;;91     }
;;;92     
000000  bf00              NOP      
                  |L3.2|
000002  e7fe              B        |L3.2|
                          ENDP


                          AREA ||i.CAN_RX1_IRQHandler||, CODE, READONLY, ALIGN=1

                  CAN_RX1_IRQHandler PROC
;;;429    *******************************************************************************/
;;;430    void CAN_RX1_IRQHandler(void)
000000  4770              BX       lr
;;;431    {
;;;432    }
;;;433    
                          ENDP


                          AREA ||i.CAN_SCE_IRQHandler||, CODE, READONLY, ALIGN=1

                  CAN_SCE_IRQHandler PROC
;;;440    *******************************************************************************/
;;;441    void CAN_SCE_IRQHandler(void)
000000  4770              BX       lr
;;;442    {
;;;443    }
;;;444    
                          ENDP


                          AREA ||i.DMA1_Channel1_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel1_IRQHandler PROC
;;;285    *******************************************************************************/
;;;286    void DMA1_Channel1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;287    {
;;;288    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;289    }
000006  bd10              POP      {r4,pc}
;;;290    
                          ENDP


                          AREA ||i.DMA1_Channel2_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel2_IRQHandler PROC
;;;297    *******************************************************************************/
;;;298    void DMA1_Channel2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;299    {
;;;300    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;301    }
000006  bd10              POP      {r4,pc}
;;;302    
                          ENDP


                          AREA ||i.DMA1_Channel3_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel3_IRQHandler PROC
;;;309    *******************************************************************************/
;;;310    void DMA1_Channel3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;311    {
;;;312    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;313    }
000006  bd10              POP      {r4,pc}
;;;314    
                          ENDP


                          AREA ||i.DMA1_Channel4_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel4_IRQHandler PROC
;;;321    *******************************************************************************/
;;;322    void DMA1_Channel4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;323    {
;;;324    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;325    //	DMA_ClearFlag(DMA1_FLAG_TC4);								//清除标志
;;;326    //	DMA_Cmd(DMA1_Channel4,DISABLE);							//DMA发送关闭
;;;327    }
000006  bd10              POP      {r4,pc}
;;;328    
                          ENDP


                          AREA ||i.DMA1_Channel5_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel5_IRQHandler PROC
;;;335    *******************************************************************************/
;;;336    void DMA1_Channel5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;337    {
;;;338    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;339    }
000006  bd10              POP      {r4,pc}
;;;340    
                          ENDP


                          AREA ||i.DMA1_Channel6_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel6_IRQHandler PROC
;;;347    *******************************************************************************/
;;;348    void DMA1_Channel6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;351    }
000006  bd10              POP      {r4,pc}
;;;352    
                          ENDP


                          AREA ||i.DMA1_Channel7_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel7_IRQHandler PROC
;;;359    *******************************************************************************/
;;;360    void DMA1_Channel7_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;361    {
;;;362    //	WOW_Server();
;;;363    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;364    }
000006  bd10              POP      {r4,pc}
;;;365    
                          ENDP


                          AREA ||i.DMA2_Channel1_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel1_IRQHandler PROC
;;;883    *******************************************************************************/
;;;884    void DMA2_Channel1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;885    {
;;;886    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;887    }
000006  bd10              POP      {r4,pc}
;;;888    
                          ENDP


                          AREA ||i.DMA2_Channel2_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel2_IRQHandler PROC
;;;895    *******************************************************************************/
;;;896    void DMA2_Channel2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;897    {
;;;898    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;899    }
000006  bd10              POP      {r4,pc}
;;;900    
                          ENDP


                          AREA ||i.DMA2_Channel3_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel3_IRQHandler PROC
;;;907    *******************************************************************************/
;;;908    void DMA2_Channel3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;909    {
;;;910    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;911    }
000006  bd10              POP      {r4,pc}
;;;912    
                          ENDP


                          AREA ||i.DMA2_Channel4_5_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Channel4_5_IRQHandler PROC
;;;920    *******************************************************************************/
;;;921    void DMA2_Channel4_5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;922    {
;;;923    	DMA_Server();			//DMA中断服务程序
000002  f7fffffe          BL       DMA_Server
;;;924    }
000006  bd10              POP      {r4,pc}
;;;925    
                          ENDP


                          AREA ||i.DebugMonitor||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler                  ; Alternate entry point
                  DebugMonitor PROC
;;;114    *******************************************************************************/
;;;115    void DebugMonitor(void)
;;;116    {
;;;117    }
;;;118    
000000  4770              BX       lr
                          ENDP


                          AREA ||i.EXTI0_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI0_IRQHandler PROC
;;;225    *******************************************************************************/
;;;226    void EXTI0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;229    }
000006  bd10              POP      {r4,pc}
;;;230    
                          ENDP


                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI15_10_IRQHandler PROC
;;;701    *******************************************************************************/
;;;702    void EXTI15_10_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;703    {
;;;704    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;705    }
000006  bd10              POP      {r4,pc}
;;;706    
                          ENDP


                          AREA ||i.EXTI1_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI1_IRQHandler PROC
;;;237    *******************************************************************************/
;;;238    void EXTI1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;239    {
;;;240    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;241    }
000006  bd10              POP      {r4,pc}
;;;242    
                          ENDP


                          AREA ||i.EXTI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI2_IRQHandler PROC
;;;249    *******************************************************************************/
;;;250    void EXTI2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;251    {
;;;252    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;253    }
000006  bd10              POP      {r4,pc}
;;;254    
                          ENDP


                          AREA ||i.EXTI3_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI3_IRQHandler PROC
;;;261    *******************************************************************************/
;;;262    void EXTI3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;265    }
000006  bd10              POP      {r4,pc}
;;;266    
                          ENDP


                          AREA ||i.EXTI4_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI4_IRQHandler PROC
;;;273    *******************************************************************************/
;;;274    void EXTI4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;275    {
;;;276    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;277    }
000006  bd10              POP      {r4,pc}
;;;278    
                          ENDP


                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI9_5_IRQHandler PROC
;;;451    *******************************************************************************/
;;;452    void EXTI9_5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;453    {
;;;454    	EXTI_Server();
000002  f7fffffe          BL       EXTI_Server
;;;455    }
000006  bd10              POP      {r4,pc}
;;;456    
                          ENDP


                          AREA ||i.FLASH_IRQHandler||, CODE, READONLY, ALIGN=1

                  FLASH_IRQHandler PROC
;;;203    *******************************************************************************/
;;;204    void FLASH_IRQHandler(void)
000000  4770              BX       lr
;;;205    {
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.FSMC_IRQHandler||, CODE, READONLY, ALIGN=1

                  FSMC_IRQHandler PROC
;;;793    *******************************************************************************/
;;;794    void FSMC_IRQHandler(void)
000000  4770              BX       lr
;;;795    {
;;;796    }
;;;797    
                          ENDP


                          AREA ||i.HardFaultException||, CODE, READONLY, ALIGN=1

                  HardFault_Handler                  ; Alternate entry point
                  HardFaultException PROC
;;;54     *******************************************************************************/
;;;55     void HardFaultException(void)
;;;56     {
;;;57       /* Go to infinite loop when Hard Fault exception occurs */
;;;58       while (1)
;;;59       {
;;;60       }
;;;61     }
;;;62     
000000  bf00              NOP      
                  |L27.2|
000002  e7fe              B        |L27.2|
                          ENDP


                          AREA ||i.I2C1_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C1_ER_IRQHandler PROC
;;;580    *******************************************************************************/
;;;581    void I2C1_ER_IRQHandler(void)
000000  4770              BX       lr
;;;582    {
;;;583    }
;;;584    
                          ENDP


                          AREA ||i.I2C1_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C1_EV_IRQHandler PROC
;;;569    *******************************************************************************/
;;;570    void I2C1_EV_IRQHandler(void)
000000  4770              BX       lr
;;;571    {
;;;572    }
;;;573    
                          ENDP


                          AREA ||i.I2C2_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C2_ER_IRQHandler PROC
;;;602    *******************************************************************************/
;;;603    void I2C2_ER_IRQHandler(void)
000000  4770              BX       lr
;;;604    {
;;;605    }
;;;606    
                          ENDP


                          AREA ||i.I2C2_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C2_EV_IRQHandler PROC
;;;591    *******************************************************************************/
;;;592    void I2C2_EV_IRQHandler(void)
000000  4770              BX       lr
;;;593    {
;;;594    }
;;;595    
                          ENDP


                          AREA ||i.MemManageException||, CODE, READONLY, ALIGN=1

                  MemManage_Handler                  ; Alternate entry point
                  MemManageException PROC
;;;69     *******************************************************************************/
;;;70     void MemManageException(void)
;;;71     {
;;;72       /* Go to infinite loop when Memory Manage exception occurs */
;;;73       while (1)
;;;74       {
;;;75       }
;;;76     }
;;;77     
000000  bf00              NOP      
                  |L32.2|
000002  e7fe              B        |L32.2|
                          ENDP


                          AREA ||i.NMIException||, CODE, READONLY, ALIGN=1

                  NMI_Handler                  ; Alternate entry point
                  NMIException PROC
;;;43     *******************************************************************************/
;;;44     void NMIException(void)
;;;45     {
;;;46     }
;;;47     
000000  4770              BX       lr
                          ENDP


                          AREA ||i.PVD_IRQHandler||, CODE, READONLY, ALIGN=1

                  PVD_IRQHandler PROC
;;;170    *******************************************************************************/
;;;171    void PVD_IRQHandler(void)
000000  4770              BX       lr
;;;172    {
;;;173    }
;;;174    
                          ENDP


                          AREA ||i.PendSVC||, CODE, READONLY, ALIGN=1

                  PendSV_Handler                  ; Alternate entry point
                  PendSVC PROC
;;;136    *******************************************************************************/
;;;137    void PendSVC(void)
;;;138    {
;;;139    }
;;;140    
000000  4770              BX       lr
                          ENDP


                          AREA ||i.RCC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RCC_IRQHandler PROC
;;;214    *******************************************************************************/
;;;215    void RCC_IRQHandler(void)
000000  4770              BX       lr
;;;216    {
;;;217    }
;;;218    
                          ENDP


                          AREA ||i.RTCAlarm_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTCAlarm_IRQHandler PROC
;;;713    *******************************************************************************/
;;;714    void RTCAlarm_IRQHandler(void)
000000  4770              BX       lr
;;;715    {
;;;716    }
;;;717    
                          ENDP


                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;804    *******************************************************************************/
;;;805    void SDIO_IRQHandler(void)
000000  4770              BX       lr
;;;806    {
;;;807    }
;;;808    
                          ENDP


                          AREA ||i.SPI1_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI1_IRQHandler PROC
;;;613    *******************************************************************************/
;;;614    void SPI1_IRQHandler(void)
000000  4770              BX       lr
;;;615    {
;;;616    }
;;;617    
                          ENDP


                          AREA ||i.SPI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI2_IRQHandler PROC
;;;624    *******************************************************************************/
;;;625    void SPI2_IRQHandler(void)
000000  4770              BX       lr
;;;626    {
;;;627    	
;;;628    	
;;;629    #ifdef USE_STM3210E_EVAL
;;;630      static u8 channel = 0;
;;;631    
;;;632      if ((SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_TXE) == SET))
;;;633      {
;;;634        /* Audio codec configuration section */
;;;635        if (GetVar_SendDummyData() == 1)
;;;636        {
;;;637          /* Send a dummy data just to generate the I2S clock */
;;;638          SPI_I2S_SendData(SPI2, DUMMYDATA);
;;;639        }
;;;640        else if ((Out_Data_Offset < In_Data_Offset) && ((u8)(MUTE_DATA) == 0))
;;;641        {
;;;642          if ((channel++) & 1)
;;;643          {
;;;644            SPI_I2S_SendData(SPI2, (u16)Stream_Buff[Out_Data_Offset++]);
;;;645          }
;;;646          else
;;;647          {
;;;648            SPI_I2S_SendData(SPI2, (u16)Stream_Buff[Out_Data_Offset]);
;;;649          }
;;;650        }
;;;651      }
;;;652    	return;
;;;653    #endif
;;;654    	
;;;655    //	SPI_Server();
;;;656    }
;;;657    
                          ENDP


                          AREA ||i.SPI3_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI3_IRQHandler PROC
;;;826    *******************************************************************************/
;;;827    void SPI3_IRQHandler(void)
000000  4770              BX       lr
;;;828    {
;;;829    }
;;;830    
                          ENDP


                          AREA ||i.SVCHandler||, CODE, READONLY, ALIGN=1

                  SVC_Handler                  ; Alternate entry point
                  SVCHandler PROC
;;;125    *******************************************************************************/
;;;126    void SVCHandler(void)
;;;127    {
;;;128    }
;;;129    
000000  4770              BX       lr
                          ENDP


                          AREA ||i.SysTickHandler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler                  ; Alternate entry point
                  SysTickHandler PROC
;;;147    *******************************************************************************/
;;;148    void SysTickHandler(void)
;;;149    {
;;;150    	SysTick_Server();				//嘀嗒时钟服务
;;;151    }
;;;152    
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       SysTick_Server
000006  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.TAMPER_IRQHandler||, CODE, READONLY, ALIGN=1

                  TAMPER_IRQHandler PROC
;;;181    *******************************************************************************/
;;;182    void TAMPER_IRQHandler(void)
000000  4770              BX       lr
;;;183    {
;;;184    }
;;;185    
                          ENDP


                          AREA ||i.TIM1_BRK_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_BRK_IRQHandler PROC
;;;463    *******************************************************************************/
;;;464    void TIM1_BRK_IRQHandler(void)
000000  4770              BX       lr
;;;465    {
;;;466    }
;;;467    
                          ENDP


                          AREA ||i.TIM1_CC_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_CC_IRQHandler PROC
;;;501    *******************************************************************************/
;;;502    void TIM1_CC_IRQHandler(void)
000000  4770              BX       lr
;;;503    {
;;;504    //	TIM_Server();
;;;505    }
;;;506    
                          ENDP


                          AREA ||i.TIM1_TRG_COM_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_TRG_COM_IRQHandler PROC
;;;490    *******************************************************************************/
;;;491    void TIM1_TRG_COM_IRQHandler(void)
000000  4770              BX       lr
;;;492    {
;;;493    }
;;;494    
                          ENDP


                          AREA ||i.TIM1_UP_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM1_UP_IRQHandler PROC
;;;475    *******************************************************************************/
;;;476    void TIM1_UP_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;477    {
;;;478    	
;;;479    	TIM_Server();
000002  f7fffffe          BL       TIM_Server
;;;480    	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
000006  2101              MOVS     r1,#1
000008  4801              LDR      r0,|L48.16|
00000a  f7fffffe          BL       TIM_ClearITPendingBit
;;;481    }
00000e  bd10              POP      {r4,pc}
;;;482    
                          ENDP

                  |L48.16|
                          DCD      0x40012c00

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM2_IRQHandler PROC
;;;513    *******************************************************************************/
;;;514    void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;515    {
;;;516    	
;;;517    #ifdef USE_STM3210B_EVAL
;;;518      if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
;;;519      {
;;;520        /* Clear TIM2 update interrupt */
;;;521        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
;;;522    
;;;523        if ((Out_Data_Offset < In_Data_Offset) && ((u8)(MUTE_DATA) == 0))
;;;524        {
;;;525          TIM_SetCompare3(TIM4, Stream_Buff[Out_Data_Offset]);
;;;526          Out_Data_Offset++;
;;;527        }
;;;528      }
;;;529    	return;
;;;530    #endif
;;;531    	
;;;532    	TIM_Server();
000002  f7fffffe          BL       TIM_Server
;;;533    	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
000006  2101              MOVS     r1,#1
000008  0788              LSLS     r0,r1,#30
00000a  f7fffffe          BL       TIM_ClearITPendingBit
;;;534    	
;;;535    }
00000e  bd10              POP      {r4,pc}
;;;536    
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;543    *******************************************************************************/
;;;544    void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;545    {
;;;546    	
;;;547    	TIM_Server();	
000002  f7fffffe          BL       TIM_Server
;;;548    	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
000006  2101              MOVS     r1,#1
000008  4801              LDR      r0,|L50.16|
00000a  f7fffffe          BL       TIM_ClearITPendingBit
;;;549    }
00000e  bd10              POP      {r4,pc}
;;;550    
                          ENDP

                  |L50.16|
                          DCD      0x40000400

                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM4_IRQHandler PROC
;;;557    *******************************************************************************/
;;;558    void TIM4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;559    {
;;;560    	TIM_Server();
000002  f7fffffe          BL       TIM_Server
;;;561    }
000006  bd10              POP      {r4,pc}
;;;562    
                          ENDP


                          AREA ||i.TIM5_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM5_IRQHandler PROC
;;;815    *******************************************************************************/
;;;816    void TIM5_IRQHandler(void)
000000  4770              BX       lr
;;;817    {
;;;818    }
;;;819    
                          ENDP


                          AREA ||i.TIM6_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM6_IRQHandler PROC
;;;861    *******************************************************************************/
;;;862    void TIM6_IRQHandler(void)
000000  4770              BX       lr
;;;863    {
;;;864    }
;;;865    
                          ENDP


                          AREA ||i.TIM7_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM7_IRQHandler PROC
;;;872    *******************************************************************************/
;;;873    void TIM7_IRQHandler(void)
000000  4770              BX       lr
;;;874    {
;;;875    }
;;;876    
                          ENDP


                          AREA ||i.TIM8_BRK_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_BRK_IRQHandler PROC
;;;735    *******************************************************************************/
;;;736    void TIM8_BRK_IRQHandler(void)
000000  4770              BX       lr
;;;737    {
;;;738    }
;;;739    
                          ENDP


                          AREA ||i.TIM8_CC_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_CC_IRQHandler PROC
;;;771    *******************************************************************************/
;;;772    void TIM8_CC_IRQHandler(void)
000000  4770              BX       lr
;;;773    {
;;;774    }
;;;775    
                          ENDP


                          AREA ||i.TIM8_TRG_COM_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_TRG_COM_IRQHandler PROC
;;;760    *******************************************************************************/
;;;761    void TIM8_TRG_COM_IRQHandler(void)
000000  4770              BX       lr
;;;762    {
;;;763    }
;;;764    
                          ENDP


                          AREA ||i.TIM8_UP_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM8_UP_IRQHandler PROC
;;;747    *******************************************************************************/
;;;748    void TIM8_UP_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;749    {
;;;750    	TIM_Server();
000002  f7fffffe          BL       TIM_Server
;;;751    }
000006  bd10              POP      {r4,pc}
;;;752    
                          ENDP


                          AREA ||i.UART4_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART4_IRQHandler PROC
;;;837    *******************************************************************************/
;;;838    void UART4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;839    {
;;;840    	WOW_Server();
000002  f7fffffe          BL       WOW_Server
;;;841    }
000006  bd10              POP      {r4,pc}
;;;842    
                          ENDP


                          AREA ||i.UART5_IRQHandler||, CODE, READONLY, ALIGN=1

                  UART5_IRQHandler PROC
;;;849    *******************************************************************************/
;;;850    void UART5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;851    {
;;;852    	WOW_Server();
000002  f7fffffe          BL       WOW_Server
;;;853    }
000006  bd10              POP      {r4,pc}
;;;854    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART1_IRQHandler PROC
;;;664    *******************************************************************************/
;;;665    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;666    {
;;;667    	WOW_Server();
000002  f7fffffe          BL       WOW_Server
;;;668    }
000006  bd10              POP      {r4,pc}
;;;669    
                          ENDP


                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART2_IRQHandler PROC
;;;676    *******************************************************************************/
;;;677    void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;678    {
;;;679    //	USART_RX_Server();
;;;680    	WOW_Server();
000002  f7fffffe          BL       WOW_Server
;;;681    }
000006  bd10              POP      {r4,pc}
;;;682    
                          ENDP


                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART3_IRQHandler PROC
;;;689    *******************************************************************************/
;;;690    void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;691    {
;;;692    	WOW_Server();
000002  f7fffffe          BL       WOW_Server
;;;693    }
000006  bd10              POP      {r4,pc}
;;;694    
                          ENDP


                          AREA ||i.USBWakeUp_IRQHandler||, CODE, READONLY, ALIGN=1

                  USBWakeUp_IRQHandler PROC
;;;724    *******************************************************************************/
;;;725    void USBWakeUp_IRQHandler(void)
000000  4770              BX       lr
;;;726    {
;;;727    }
;;;728    
                          ENDP


                          AREA ||i.USB_HP_CAN_TX_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_HP_CAN_TX_IRQHandler PROC
;;;384    *******************************************************************************/
;;;385    void USB_HP_CAN_TX_IRQHandler(void)
000000  4770              BX       lr
;;;386    {
;;;387    #ifdef	Audio_Speaker
;;;388    	CTR_HP();
;;;389    #endif
;;;390    }
;;;391    
                          ENDP


                          AREA ||i.USB_LP_CAN_RX0_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_CAN_RX0_IRQHandler PROC
;;;399    *******************************************************************************/
;;;400    void USB_LP_CAN_RX0_IRQHandler(void)
000000  4770              BX       lr
;;;401    {
;;;402    	
;;;403    #ifdef MS0800_PL001V20
;;;404    	PL001V20_CAN_RX();
;;;405    #elif MS0800_PC004V10
;;;406    	PC004V10_CAN_RX();
;;;407    #elif	CAN_TEST
;;;408    	CAN_TEST_Server();
;;;409    #elif	PL013V10
;;;410    	u8 i=0;
;;;411    #elif	VirtualCom	
;;;412    	USB_Istr();			//usb_istr.c
;;;413    #elif	Audio_Speaker	
;;;414    	USB_Istr();			//usb_istr.c
;;;415    #elif	USBtoSPI	
;;;416    	USB_Istr();			//usb_istr.c
;;;417    #elif	USBDEMO	
;;;418    	#include "usb_istr.h"
;;;419    	USB_Istr();			//usb_istr.c
;;;420    #endif
;;;421    }
;;;422    
                          ENDP


                          AREA ||i.UsageFaultException||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler                  ; Alternate entry point
                  UsageFaultException PROC
;;;99     *******************************************************************************/
;;;100    void UsageFaultException(void)
;;;101    {
;;;102      /* Go to infinite loop when Usage Fault exception occurs */
;;;103      while (1)
;;;104      {
;;;105      }
;;;106    }
;;;107    
000000  bf00              NOP      
                  |L67.2|
000002  e7fe              B        |L67.2|
                          ENDP


                          AREA ||i.WWDG_IRQHandler||, CODE, READONLY, ALIGN=1

                  WWDG_IRQHandler PROC
;;;159    *******************************************************************************/
;;;160    void WWDG_IRQHandler(void)
000000  4770              BX       lr
;;;161    {
;;;162    }
;;;163    
                          ENDP

