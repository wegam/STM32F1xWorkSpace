; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_wwdg.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_wwdg.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;184    *******************************************************************************/
;;;185    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;186    {
;;;187      WWDG->SR = (u32)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;188    }
000006  4770              BX       lr
;;;189    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;57     *******************************************************************************/
;;;58     void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;61       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;62     }
000014  bd10              POP      {r4,pc}
;;;63     
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;157    *******************************************************************************/
;;;158    void WWDG_Enable(u8 Counter)
000000  f0400180          ORR      r1,r0,#0x80
;;;159    {
;;;160      /* Check the parameters */
;;;161      assert_param(IS_WWDG_COUNTER(Counter));
;;;162    
;;;163      WWDG->CR = CR_WDGA_Set | Counter;
000004  4a01              LDR      r2,|L3.12|
000006  6011              STR      r1,[r2,#0]
;;;164    }
000008  4770              BX       lr
;;;165    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;125    *******************************************************************************/
;;;126    void WWDG_EnableIT(void)
000000  2001              MOVS     r0,#1
;;;127    {
;;;128      *(vu32 *) CFR_EWI_BB = (u32)ENABLE;
000002  4901              LDR      r1,|L4.8|
000004  6008              STR      r0,[r1,#0]
;;;129    }
000006  4770              BX       lr
;;;130    
                          ENDP

                  |L4.8|
                          DCD      0x420580a4

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;172    *******************************************************************************/
;;;173    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;174    {
;;;175      return (FlagStatus)(*(vu32 *) SR_EWIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;176    }
000006  4770              BX       lr
;;;177    
                          ENDP

                  |L5.8|
                          DCD      0x42058100

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;138    *******************************************************************************/
;;;139    void WWDG_SetCounter(u8 Counter)
000000  f000017f          AND      r1,r0,#0x7f
;;;140    {
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_COUNTER(Counter));
;;;143    
;;;144      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;145         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;146      WWDG->CR = Counter & BIT_Mask;
000004  4a01              LDR      r2,|L6.12|
000006  6011              STR      r1,[r2,#0]
;;;147    }
000008  4770              BX       lr
;;;148    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;75     *******************************************************************************/
;;;76     void WWDG_SetPrescaler(u32 WWDG_Prescaler)
000000  2100              MOVS     r1,#0
;;;77     {
;;;78       u32 tmpreg = 0;
;;;79     
;;;80       /* Check the parameters */
;;;81       assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;82     
;;;83       /* Clear WDGTB[1:0] bits */
;;;84       tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000002  4a04              LDR      r2,|L7.20|
000004  6812              LDR      r2,[r2,#0]
000006  f42271c0          BIC      r1,r2,#0x180
;;;85     
;;;86       /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;87       tmpreg |= WWDG_Prescaler;
00000a  4301              ORRS     r1,r1,r0
;;;88     
;;;89       /* Store the new value */
;;;90       WWDG->CFR = tmpreg;
00000c  4a01              LDR      r2,|L7.20|
00000e  6011              STR      r1,[r2,#0]
;;;91     }
000010  4770              BX       lr
;;;92     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;101    *******************************************************************************/
;;;102    void WWDG_SetWindowValue(u8 WindowValue)
000000  2100              MOVS     r1,#0
;;;103    {
;;;104      u32 tmpreg = 0;
;;;105    
;;;106      /* Check the parameters */
;;;107      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;108    
;;;109      /* Clear W[6:0] bits */
;;;110      tmpreg = WWDG->CFR & CFR_W_Mask;
000002  4a05              LDR      r2,|L8.24|
000004  6812              LDR      r2,[r2,#0]
000006  f022017f          BIC      r1,r2,#0x7f
;;;111    
;;;112      /* Set W[6:0] bits according to WindowValue value */
;;;113      tmpreg |= WindowValue & BIT_Mask;
00000a  f000027f          AND      r2,r0,#0x7f
00000e  4311              ORRS     r1,r1,r2
;;;114    
;;;115      /* Store the new value */
;;;116      WWDG->CFR = tmpreg;
000010  4a01              LDR      r2,|L8.24|
000012  6011              STR      r1,[r2,#0]
;;;117    }
000014  4770              BX       lr
;;;118    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40002c04
