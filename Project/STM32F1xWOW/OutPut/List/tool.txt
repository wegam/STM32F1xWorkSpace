; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\tool.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\tool.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\tool.crf ..\..\Driver\Tool\TOOL.C]
                          THUMB

                          AREA ||i.BCC8||, CODE, READONLY, ALIGN=1

                  BCC8 PROC
;;;188    *******************************************************************************/
;;;189    unsigned char BCC8(const unsigned char *buffer,unsigned short num)			//异或校验
000000  b510              PUSH     {r4,lr}
;;;190    {
000002  4602              MOV      r2,r0
;;;191    	u16 i=0;
000004  2300              MOVS     r3,#0
;;;192    	u16 temp=0;
000006  2400              MOVS     r4,#0
;;;193    	if(NULL	==	buffer)
000008  b90a              CBNZ     r2,|L1.14|
;;;194    	{
;;;195    		return 0;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;196    	}
;;;197    	if(1	>=	num)
;;;198    	{
;;;199    		return 0;
;;;200    	}
;;;201    	for(i=0;i<num;i++)
;;;202    	{
;;;203    		temp=temp^buffer[i];
;;;204    	}
;;;205    	return temp;
;;;206    }
00000c  bd10              POP      {r4,pc}
                  |L1.14|
00000e  2901              CMP      r1,#1                 ;197
000010  dc01              BGT      |L1.22|
000012  2000              MOVS     r0,#0                 ;199
000014  e7fa              B        |L1.12|
                  |L1.22|
000016  2300              MOVS     r3,#0                 ;201
000018  e003              B        |L1.34|
                  |L1.26|
00001a  5cd0              LDRB     r0,[r2,r3]            ;203
00001c  4044              EORS     r4,r4,r0              ;203
00001e  1c58              ADDS     r0,r3,#1              ;201
000020  b283              UXTH     r3,r0                 ;201
                  |L1.34|
000022  428b              CMP      r3,r1                 ;201
000024  dbf9              BLT      |L1.26|
000026  b2e0              UXTB     r0,r4                 ;205
000028  e7f0              B        |L1.12|
;;;207    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC8||, CODE, READONLY, ALIGN=1

                  CRC8 PROC
;;;213    *******************************************************************************/
;;;214    unsigned char CRC8(const unsigned char *buffer)			//循环冗余校验
000000  4601              MOV      r1,r0
;;;215    {
;;;216    	return 0;
000002  2000              MOVS     r0,#0
;;;217    }
000004  4770              BX       lr
;;;218    /*******************************************************************************
                          ENDP


                          AREA ||i.GetAveLong||, CODE, READONLY, ALIGN=1

                  GetAveLong PROC
;;;381    *******************************************************************************/
;;;382    unsigned long GetAveLong(unsigned long *pBuffer,unsigned short Length)	//获取unsigned long型平均值
000000  b510              PUSH     {r4,lr}
;;;383    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;384    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;385    	unsigned long TempData=0;
000008  2000              MOVS     r0,#0
;;;386    	
;;;387    	TempData	=	pBuffer[0];
00000a  6810              LDR      r0,[r2,#0]
;;;388    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e005              B        |L3.28|
                  |L3.16|
;;;389    	{
;;;390    		TempData	=	(TempData	+	pBuffer[i])/2;
000010  f8524021          LDR      r4,[r2,r1,LSL #2]
000014  4404              ADD      r4,r4,r0
000016  0860              LSRS     r0,r4,#1
000018  1c4c              ADDS     r4,r1,#1              ;388
00001a  b2a1              UXTH     r1,r4                 ;388
                  |L3.28|
00001c  4299              CMP      r1,r3                 ;388
00001e  dbf7              BLT      |L3.16|
;;;391    	}
;;;392    	return TempData;
;;;393    }
000020  bd10              POP      {r4,pc}
;;;394    /*******************************************************************************
                          ENDP


                          AREA ||i.GetBuildDay||, CODE, READONLY, ALIGN=1

                  GetBuildDay PROC
;;;115    *******************************************************************************/
;;;116    unsigned char GetBuildDay(const char* DataStr)
000000  4601              MOV      r1,r0
;;;117    {
;;;118    	unsigned	char Day	=	0;
000002  2200              MOVS     r2,#0
;;;119    	if(NULL	==DataStr)
000004  b909              CBNZ     r1,|L4.10|
;;;120    		return 0;
000006  2000              MOVS     r0,#0
                  |L4.8|
;;;121    
;;;122    	Day	=	(unsigned char)((DataStr[4] == ' ' ? 0 : DataStr[4] - '0') * 10+ (DataStr[5] - '0'));
;;;123    
;;;124    	return	Day;
;;;125    }
000008  4770              BX       lr
                  |L4.10|
00000a  794b              LDRB     r3,[r1,#5]            ;122
00000c  3b30              SUBS     r3,r3,#0x30           ;122
00000e  7908              LDRB     r0,[r1,#4]            ;122
000010  2820              CMP      r0,#0x20              ;122
000012  d101              BNE      |L4.24|
000014  2000              MOVS     r0,#0                 ;122
000016  e001              B        |L4.28|
                  |L4.24|
000018  7908              LDRB     r0,[r1,#4]            ;122
00001a  3830              SUBS     r0,r0,#0x30           ;122
                  |L4.28|
00001c  eb000080          ADD      r0,r0,r0,LSL #2       ;122
000020  eb030040          ADD      r0,r3,r0,LSL #1       ;122
000024  b2c2              UXTB     r2,r0                 ;122
000026  4610              MOV      r0,r2                 ;124
000028  e7ee              B        |L4.8|
;;;126    /*******************************************************************************
                          ENDP


                          AREA ||i.GetBuildHour||, CODE, READONLY, ALIGN=1

                  GetBuildHour PROC
;;;134    *******************************************************************************/
;;;135    unsigned char GetBuildHour(const char* TimeStr)
000000  4601              MOV      r1,r0
;;;136    {
;;;137    	unsigned	char Hour	=	0;
000002  2200              MOVS     r2,#0
;;;138    
;;;139    	if(NULL	==TimeStr)
000004  b909              CBNZ     r1,|L5.10|
;;;140    		return 0;
000006  2000              MOVS     r0,#0
                  |L5.8|
;;;141    
;;;142    	Hour	=	(unsigned char)((TimeStr[0]-'0')*10+(TimeStr[1]-'0'));
;;;143    	return	Hour;
;;;144    }
000008  4770              BX       lr
                  |L5.10|
00000a  7848              LDRB     r0,[r1,#1]            ;142
00000c  3830              SUBS     r0,r0,#0x30           ;142
00000e  780b              LDRB     r3,[r1,#0]            ;142
000010  3b30              SUBS     r3,r3,#0x30           ;142
000012  eb030383          ADD      r3,r3,r3,LSL #2       ;142
000016  eb000043          ADD      r0,r0,r3,LSL #1       ;142
00001a  b2c2              UXTB     r2,r0                 ;142
00001c  4610              MOV      r0,r2                 ;143
00001e  e7f3              B        |L5.8|
;;;145    /*******************************************************************************
                          ENDP


                          AREA ||i.GetBuildMinute||, CODE, READONLY, ALIGN=1

                  GetBuildMinute PROC
;;;153    *******************************************************************************/
;;;154    unsigned char GetBuildMinute(const char* TimeStr)
000000  4601              MOV      r1,r0
;;;155    {
;;;156    	unsigned	char Minute	=	0;
000002  2200              MOVS     r2,#0
;;;157    	if(NULL	==TimeStr)
000004  b909              CBNZ     r1,|L6.10|
;;;158    		return 0;
000006  2000              MOVS     r0,#0
                  |L6.8|
;;;159    
;;;160    	Minute	=	(unsigned char)((TimeStr[3]-'0')*10+(TimeStr[4]-'0'));
;;;161    	return	Minute;
;;;162    }
000008  4770              BX       lr
                  |L6.10|
00000a  7908              LDRB     r0,[r1,#4]            ;160
00000c  3830              SUBS     r0,r0,#0x30           ;160
00000e  78cb              LDRB     r3,[r1,#3]            ;160
000010  3b30              SUBS     r3,r3,#0x30           ;160
000012  eb030383          ADD      r3,r3,r3,LSL #2       ;160
000016  eb000043          ADD      r0,r0,r3,LSL #1       ;160
00001a  b2c2              UXTB     r2,r0                 ;160
00001c  4610              MOV      r0,r2                 ;161
00001e  e7f3              B        |L6.8|
;;;163    /*******************************************************************************
                          ENDP


                          AREA ||i.GetBuildMonth||, CODE, READONLY, ALIGN=2

                  GetBuildMonth PROC
;;;88     *******************************************************************************/
;;;89     unsigned char GetBuildMonth(const char* DataStr)
000000  4601              MOV      r1,r0
;;;90     {
;;;91     	unsigned	char Month	=	0;
000002  2200              MOVS     r2,#0
;;;92     	if(NULL	==DataStr)
000004  b909              CBNZ     r1,|L7.10|
;;;93     		return 0;
000006  2000              MOVS     r0,#0
                  |L7.8|
;;;94     	Month	=	(DataStr[2] == 'c' ? 0\
;;;95     					:DataStr[2] == 'b' ? 1\
;;;96     					:DataStr[2] == 'r' ? (__DATE__ [0] == 'M' ? 2 : 3) \
;;;97     					:DataStr[2] == 'y' ? 4 \
;;;98     					:DataStr[2] == 'n' ? 5 \
;;;99     					:DataStr[2] == 'l' ? 6 \
;;;100    					:DataStr[2] == 'g' ? 7 \
;;;101    					:DataStr[2] == 'p' ? 8 \
;;;102    					:DataStr[2] == 't' ? 9 \
;;;103    					:DataStr[2] == 'v' ? 10 : 11)+1;
;;;104    //	Month	=	(unsigned char)((DataStr[7]-'0')*1000+(DataStr[8]-'0')*100+(DataStr[9]-'0')*10+(DataStr[10]-'0'));
;;;105    	return	Month;
;;;106    }
000008  4770              BX       lr
                  |L7.10|
00000a  7888              LDRB     r0,[r1,#2]            ;94
00000c  2863              CMP      r0,#0x63              ;94
00000e  d101              BNE      |L7.20|
000010  2000              MOVS     r0,#0                 ;94
000012  e033              B        |L7.124|
                  |L7.20|
000014  7888              LDRB     r0,[r1,#2]            ;95
000016  2862              CMP      r0,#0x62              ;95
000018  d101              BNE      |L7.30|
00001a  2001              MOVS     r0,#1                 ;95
00001c  e02e              B        |L7.124|
                  |L7.30|
00001e  7888              LDRB     r0,[r1,#2]            ;96
000020  2872              CMP      r0,#0x72              ;96
000022  d107              BNE      |L7.52|
000024  a017              ADR      r0,|L7.132|
000026  7800              LDRB     r0,[r0,#0]            ;96
000028  284d              CMP      r0,#0x4d              ;96
00002a  d101              BNE      |L7.48|
00002c  2002              MOVS     r0,#2                 ;96
00002e  e025              B        |L7.124|
                  |L7.48|
000030  2003              MOVS     r0,#3                 ;96
000032  e023              B        |L7.124|
                  |L7.52|
000034  7888              LDRB     r0,[r1,#2]            ;97
000036  2879              CMP      r0,#0x79              ;97
000038  d101              BNE      |L7.62|
00003a  2004              MOVS     r0,#4                 ;97
00003c  e01e              B        |L7.124|
                  |L7.62|
00003e  7888              LDRB     r0,[r1,#2]            ;98
000040  286e              CMP      r0,#0x6e              ;98
000042  d101              BNE      |L7.72|
000044  2005              MOVS     r0,#5                 ;98
000046  e019              B        |L7.124|
                  |L7.72|
000048  7888              LDRB     r0,[r1,#2]            ;99
00004a  286c              CMP      r0,#0x6c              ;99
00004c  d101              BNE      |L7.82|
00004e  2006              MOVS     r0,#6                 ;99
000050  e014              B        |L7.124|
                  |L7.82|
000052  7888              LDRB     r0,[r1,#2]            ;100
000054  2867              CMP      r0,#0x67              ;100
000056  d101              BNE      |L7.92|
000058  2007              MOVS     r0,#7                 ;100
00005a  e00f              B        |L7.124|
                  |L7.92|
00005c  7888              LDRB     r0,[r1,#2]            ;101
00005e  2870              CMP      r0,#0x70              ;101
000060  d101              BNE      |L7.102|
000062  2008              MOVS     r0,#8                 ;101
000064  e00a              B        |L7.124|
                  |L7.102|
000066  7888              LDRB     r0,[r1,#2]            ;102
000068  2874              CMP      r0,#0x74              ;102
00006a  d101              BNE      |L7.112|
00006c  2009              MOVS     r0,#9                 ;102
00006e  e005              B        |L7.124|
                  |L7.112|
000070  7888              LDRB     r0,[r1,#2]            ;103
000072  2876              CMP      r0,#0x76              ;103
000074  d101              BNE      |L7.122|
000076  200a              MOVS     r0,#0xa               ;103
000078  e000              B        |L7.124|
                  |L7.122|
00007a  200b              MOVS     r0,#0xb               ;103
                  |L7.124|
00007c  1c42              ADDS     r2,r0,#1              ;103
00007e  4610              MOV      r0,r2                 ;105
000080  e7c2              B        |L7.8|
;;;107    /*******************************************************************************
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
000084  4d617220          DCB      "Mar  7 2019",0
000088  20372032
00008c  30313900

                          AREA ||i.GetBuildSecond||, CODE, READONLY, ALIGN=1

                  GetBuildSecond PROC
;;;171    *******************************************************************************/
;;;172    unsigned char GetBuildSecond(const char* TimeStr)
000000  4601              MOV      r1,r0
;;;173    {
;;;174    	unsigned	char Second	=	0;
000002  2200              MOVS     r2,#0
;;;175    	if(NULL	==TimeStr)
000004  b909              CBNZ     r1,|L8.10|
;;;176    		return 0;
000006  2000              MOVS     r0,#0
                  |L8.8|
;;;177    	Second	=	(unsigned char)((TimeStr[6]-'0')*10+(TimeStr[7]-'0'));
;;;178    	return	Second;
;;;179    }
000008  4770              BX       lr
                  |L8.10|
00000a  79c8              LDRB     r0,[r1,#7]            ;177
00000c  3830              SUBS     r0,r0,#0x30           ;177
00000e  798b              LDRB     r3,[r1,#6]            ;177
000010  3b30              SUBS     r3,r3,#0x30           ;177
000012  eb030383          ADD      r3,r3,r3,LSL #2       ;177
000016  eb000043          ADD      r0,r0,r3,LSL #1       ;177
00001a  b2c2              UXTB     r2,r0                 ;177
00001c  4610              MOV      r0,r2                 ;178
00001e  e7f3              B        |L8.8|
;;;180      
                          ENDP


                          AREA ||i.GetBuildTime||, CODE, READONLY, ALIGN=2

                  GetBuildTime PROC
;;;48     *******************************************************************************/
;;;49     BuildTimeDef* GetBuildTime(void* pDate, void*	pTime)
000000  b530              PUSH     {r4,r5,lr}
;;;50     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;51     	static BuildTimeDef	BuildTime;
;;;52     	//=============================================转换日期
;;;53     	BuildTime.year		=	GetBuildYear((char*)pDate);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       GetBuildYear
00000c  490e              LDR      r1,|L9.72|
00000e  8008              STRH     r0,[r1,#0]
;;;54     	BuildTime.month		=	GetBuildMonth((char*)pDate);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       GetBuildMonth
000016  490c              LDR      r1,|L9.72|
000018  7088              STRB     r0,[r1,#2]
;;;55     	BuildTime.day			=	GetBuildDay((char*)pDate);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       GetBuildDay
000020  4909              LDR      r1,|L9.72|
000022  70c8              STRB     r0,[r1,#3]
;;;56     	//=============================================转换时间
;;;57     	BuildTime.hour		=	GetBuildHour((char*)pTime);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       GetBuildHour
00002a  4907              LDR      r1,|L9.72|
00002c  7108              STRB     r0,[r1,#4]
;;;58     	BuildTime.minute	=	GetBuildMinute((char*)pTime);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GetBuildMinute
000034  4904              LDR      r1,|L9.72|
000036  7148              STRB     r0,[r1,#5]
;;;59     	BuildTime.second	=	GetBuildSecond((char*)pTime);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       GetBuildSecond
00003e  4902              LDR      r1,|L9.72|
000040  7188              STRB     r0,[r1,#6]
;;;60     	return &BuildTime;
000042  4608              MOV      r0,r1
;;;61     }
000044  bd30              POP      {r4,r5,pc}
;;;62     /*******************************************************************************
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      BuildTime

                          AREA ||i.GetBuildYear||, CODE, READONLY, ALIGN=1

                  GetBuildYear PROC
;;;70     *******************************************************************************/
;;;71     unsigned short GetBuildYear(const char* DataStr)
000000  b510              PUSH     {r4,lr}
;;;72     {
000002  4601              MOV      r1,r0
;;;73     	unsigned	short Year	=	0;
000004  2200              MOVS     r2,#0
;;;74     //	unsigned	char DataStr[]=__DATE__;
;;;75     	if(NULL	==DataStr)
000006  b909              CBNZ     r1,|L10.12|
;;;76     		return 0;
000008  2000              MOVS     r0,#0
                  |L10.10|
;;;77     	Year	=	(unsigned short)((DataStr[7]-'0')*1000+(DataStr[8]-'0')*100+(DataStr[9]-'0')*10+(DataStr[10]-'0'));
;;;78     	return	Year;
;;;79     }
00000a  bd10              POP      {r4,pc}
                  |L10.12|
00000c  79c8              LDRB     r0,[r1,#7]            ;77
00000e  3830              SUBS     r0,r0,#0x30           ;77
000010  f44f737a          MOV      r3,#0x3e8             ;77
000014  4358              MULS     r0,r3,r0              ;77
000016  7a0b              LDRB     r3,[r1,#8]            ;77
000018  3b30              SUBS     r3,r3,#0x30           ;77
00001a  eb0304c3          ADD      r4,r3,r3,LSL #3       ;77
00001e  eb041303          ADD      r3,r4,r3,LSL #4       ;77
000022  eb000383          ADD      r3,r0,r3,LSL #2       ;77
000026  7a48              LDRB     r0,[r1,#9]            ;77
000028  3830              SUBS     r0,r0,#0x30           ;77
00002a  eb000080          ADD      r0,r0,r0,LSL #2       ;77
00002e  eb030340          ADD      r3,r3,r0,LSL #1       ;77
000032  7a88              LDRB     r0,[r1,#0xa]          ;77
000034  3830              SUBS     r0,r0,#0x30           ;77
000036  4418              ADD      r0,r0,r3              ;77
000038  b282              UXTH     r2,r0                 ;77
00003a  4610              MOV      r0,r2                 ;78
00003c  e7e5              B        |L10.10|
;;;80     /*******************************************************************************
                          ENDP


                          AREA ||i.GetMaxChar||, CODE, READONLY, ALIGN=1

                  GetMaxChar PROC
;;;237    *******************************************************************************/
;;;238    unsigned char GetMaxChar(unsigned char *pBuffer,unsigned short Length)
000000  b510              PUSH     {r4,lr}
;;;239    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;240    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;241    	unsigned char TempData=0;
000008  2000              MOVS     r0,#0
;;;242    	
;;;243    	TempData	=	pBuffer[0];
00000a  7810              LDRB     r0,[r2,#0]
;;;244    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e005              B        |L11.28|
                  |L11.16|
;;;245    	{
;;;246    		if(TempData<pBuffer[i])
000010  5c54              LDRB     r4,[r2,r1]
000012  4284              CMP      r4,r0
000014  dd00              BLE      |L11.24|
;;;247    		{
;;;248    			TempData	=	pBuffer[i];
000016  5c50              LDRB     r0,[r2,r1]
                  |L11.24|
000018  1c4c              ADDS     r4,r1,#1              ;244
00001a  b2a1              UXTH     r1,r4                 ;244
                  |L11.28|
00001c  4299              CMP      r1,r3                 ;244
00001e  dbf7              BLT      |L11.16|
;;;249    		}
;;;250    	}
;;;251    	return TempData;
;;;252    }
000020  bd10              POP      {r4,pc}
;;;253    /*******************************************************************************
                          ENDP


                          AREA ||i.GetMaxLong||, CODE, READONLY, ALIGN=1

                  GetMaxLong PROC
;;;285    *******************************************************************************/
;;;286    unsigned long GetMaxLong(unsigned long *pBuffer,unsigned short Length)
000000  b510              PUSH     {r4,lr}
;;;287    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;288    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;289    	unsigned long TempData=0;
000008  2000              MOVS     r0,#0
;;;290    	
;;;291    	TempData	=	pBuffer[0];
00000a  6810              LDR      r0,[r2,#0]
;;;292    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e007              B        |L12.32|
                  |L12.16|
;;;293    	{
;;;294    		if(TempData<pBuffer[i])
000010  f8524021          LDR      r4,[r2,r1,LSL #2]
000014  4284              CMP      r4,r0
000016  d901              BLS      |L12.28|
;;;295    		{
;;;296    			TempData	=	pBuffer[i];
000018  f8520021          LDR      r0,[r2,r1,LSL #2]
                  |L12.28|
00001c  1c4c              ADDS     r4,r1,#1              ;292
00001e  b2a1              UXTH     r1,r4                 ;292
                  |L12.32|
000020  4299              CMP      r1,r3                 ;292
000022  dbf5              BLT      |L12.16|
;;;297    		}
;;;298    	}
;;;299    	return TempData;
;;;300    }
000024  bd10              POP      {r4,pc}
;;;301    /*******************************************************************************
                          ENDP


                          AREA ||i.GetMaxShort||, CODE, READONLY, ALIGN=1

                  GetMaxShort PROC
;;;261    *******************************************************************************/
;;;262    unsigned short GetMaxShort(unsigned short *pBuffer,unsigned short Length)
000000  b510              PUSH     {r4,lr}
;;;263    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;264    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;265    	unsigned short TempData=0;
000008  2000              MOVS     r0,#0
;;;266    	
;;;267    	TempData	=	pBuffer[0];
00000a  8810              LDRH     r0,[r2,#0]
;;;268    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e007              B        |L13.32|
                  |L13.16|
;;;269    	{
;;;270    		if(TempData<pBuffer[i])
000010  f8324011          LDRH     r4,[r2,r1,LSL #1]
000014  4284              CMP      r4,r0
000016  dd01              BLE      |L13.28|
;;;271    		{
;;;272    			TempData	=	pBuffer[i];
000018  f8320011          LDRH     r0,[r2,r1,LSL #1]
                  |L13.28|
00001c  1c4c              ADDS     r4,r1,#1              ;268
00001e  b2a1              UXTH     r1,r4                 ;268
                  |L13.32|
000020  4299              CMP      r1,r3                 ;268
000022  dbf5              BLT      |L13.16|
;;;273    		}
;;;274    	}
;;;275    	return TempData;
;;;276    }
000024  bd10              POP      {r4,pc}
;;;277    /*******************************************************************************
                          ENDP


                          AREA ||i.GetMinChar||, CODE, READONLY, ALIGN=1

                  GetMinChar PROC
;;;309    *******************************************************************************/
;;;310    unsigned char GetMinChar(unsigned char *pBuffer,unsigned short Length)
000000  b510              PUSH     {r4,lr}
;;;311    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;312    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;313    	unsigned char TempData=0;
000008  2000              MOVS     r0,#0
;;;314    	
;;;315    	TempData	=	pBuffer[0];
00000a  7810              LDRB     r0,[r2,#0]
;;;316    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e005              B        |L14.28|
                  |L14.16|
;;;317    	{
;;;318    		if(TempData>pBuffer[i])
000010  5c54              LDRB     r4,[r2,r1]
000012  4284              CMP      r4,r0
000014  da00              BGE      |L14.24|
;;;319    		{
;;;320    			TempData	=	pBuffer[i];
000016  5c50              LDRB     r0,[r2,r1]
                  |L14.24|
000018  1c4c              ADDS     r4,r1,#1              ;316
00001a  b2a1              UXTH     r1,r4                 ;316
                  |L14.28|
00001c  4299              CMP      r1,r3                 ;316
00001e  dbf7              BLT      |L14.16|
;;;321    		}
;;;322    	}
;;;323    	return TempData;
;;;324    }
000020  bd10              POP      {r4,pc}
;;;325    /*******************************************************************************
                          ENDP


                          AREA ||i.GetMinLong||, CODE, READONLY, ALIGN=1

                  GetMinLong PROC
;;;357    *******************************************************************************/
;;;358    unsigned long GetMinLong(unsigned long *pBuffer,unsigned short Length)
000000  b510              PUSH     {r4,lr}
;;;359    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;360    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;361    	unsigned long TempData=0;
000008  2000              MOVS     r0,#0
;;;362    	
;;;363    	TempData	=	pBuffer[0];
00000a  6810              LDR      r0,[r2,#0]
;;;364    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e007              B        |L15.32|
                  |L15.16|
;;;365    	{
;;;366    		if(TempData>pBuffer[i])
000010  f8524021          LDR      r4,[r2,r1,LSL #2]
000014  4284              CMP      r4,r0
000016  d201              BCS      |L15.28|
;;;367    		{
;;;368    			TempData	=	pBuffer[i];
000018  f8520021          LDR      r0,[r2,r1,LSL #2]
                  |L15.28|
00001c  1c4c              ADDS     r4,r1,#1              ;364
00001e  b2a1              UXTH     r1,r4                 ;364
                  |L15.32|
000020  4299              CMP      r1,r3                 ;364
000022  dbf5              BLT      |L15.16|
;;;369    		}
;;;370    	}
;;;371    	return TempData;
;;;372    }
000024  bd10              POP      {r4,pc}
;;;373    /*******************************************************************************
                          ENDP


                          AREA ||i.GetMinShort||, CODE, READONLY, ALIGN=1

                  GetMinShort PROC
;;;333    *******************************************************************************/
;;;334    unsigned short GetMinShort(unsigned short *pBuffer,unsigned short Length)
000000  b510              PUSH     {r4,lr}
;;;335    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;336    	unsigned short i	=	0;
000006  2100              MOVS     r1,#0
;;;337    	unsigned short TempData=0;
000008  2000              MOVS     r0,#0
;;;338    	
;;;339    	TempData	=	pBuffer[0];
00000a  8810              LDRH     r0,[r2,#0]
;;;340    	for(i=1;i<Length;i++)
00000c  2101              MOVS     r1,#1
00000e  e007              B        |L16.32|
                  |L16.16|
;;;341    	{
;;;342    		if(TempData>pBuffer[i])
000010  f8324011          LDRH     r4,[r2,r1,LSL #1]
000014  4284              CMP      r4,r0
000016  da01              BGE      |L16.28|
;;;343    		{
;;;344    			TempData	=	pBuffer[i];
000018  f8320011          LDRH     r0,[r2,r1,LSL #1]
                  |L16.28|
00001c  1c4c              ADDS     r4,r1,#1              ;340
00001e  b2a1              UXTH     r1,r4                 ;340
                  |L16.32|
000020  4299              CMP      r1,r3                 ;340
000022  dbf5              BLT      |L16.16|
;;;345    		}
;;;346    	}
;;;347    	return TempData;
;;;348    }
000024  bd10              POP      {r4,pc}
;;;349    /*******************************************************************************
                          ENDP


                          AREA ||i.GetVarLong||, CODE, READONLY, ALIGN=1

                  GetVarLong PROC
;;;402    *******************************************************************************/
;;;403    unsigned long GetVarLong(unsigned long *pBuffer,unsigned short Length)	//获取unsigned long方差
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;404    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
;;;405    	unsigned short i	=	0;
000008  2400              MOVS     r4,#0
;;;406    	unsigned long TempData=0;
00000a  2600              MOVS     r6,#0
;;;407    	long VarData=0;
00000c  2700              MOVS     r7,#0
;;;408    	
;;;409    	//获取平均值
;;;410    	TempData	=	GetAveLong(pBuffer,Length);	//获取unsigned long型平均值
00000e  4641              MOV      r1,r8
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       GetAveLong
000016  4606              MOV      r6,r0
;;;411    		
;;;412    	for(i=0;i<Length;i++)
000018  bf00              NOP      
00001a  e016              B        |L17.74|
                  |L17.28|
;;;413    	{
;;;414    		if(pBuffer[i]>=TempData)
00001c  f8550024          LDR      r0,[r5,r4,LSL #2]
000020  42b0              CMP      r0,r6
000022  d308              BCC      |L17.54|
;;;415    		{
;;;416    			VarData+=(pBuffer[i]-TempData)*(pBuffer[i]-TempData);
000024  f8550024          LDR      r0,[r5,r4,LSL #2]
000028  1b80              SUBS     r0,r0,r6
00002a  f8551024          LDR      r1,[r5,r4,LSL #2]
00002e  1b89              SUBS     r1,r1,r6
000030  fb007701          MLA      r7,r0,r1,r7
000034  e007              B        |L17.70|
                  |L17.54|
;;;417    		}
;;;418    		else
;;;419    		{
;;;420    			VarData-=(TempData-pBuffer[i])*(TempData-pBuffer[i]);
000036  f8550024          LDR      r0,[r5,r4,LSL #2]
00003a  1a30              SUBS     r0,r6,r0
00003c  f8551024          LDR      r1,[r5,r4,LSL #2]
000040  1a71              SUBS     r1,r6,r1
000042  fb007711          MLS      r7,r0,r1,r7
                  |L17.70|
000046  1c60              ADDS     r0,r4,#1              ;412
000048  b284              UXTH     r4,r0                 ;412
                  |L17.74|
00004a  4544              CMP      r4,r8                 ;412
00004c  dbe6              BLT      |L17.28|
;;;421    		}
;;;422    	}
;;;423    	if(VarData<0)
00004e  2f00              CMP      r7,#0
000050  da00              BGE      |L17.84|
;;;424    	{
;;;425    		VarData	=	0	-	VarData;
000052  427f              RSBS     r7,r7,#0
                  |L17.84|
;;;426    	}
;;;427    	return VarData;
000054  4638              MOV      r0,r7
;;;428    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;429    
                          ENDP


                          AREA ||i.LRC8||, CODE, READONLY, ALIGN=1

                  LRC8 PROC
;;;224    *******************************************************************************/
;;;225    unsigned char LRC8(const unsigned char *buffer)		//纵向冗余校验
000000  4601              MOV      r1,r0
;;;226    {
;;;227    	return 0;
000002  2000              MOVS     r0,#0
;;;228    }
000004  4770              BX       lr
;;;229    /*******************************************************************************
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  n
                          DCD      0x00000000
                  BuildTime
                          %        8
