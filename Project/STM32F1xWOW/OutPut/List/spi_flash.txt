; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\spi_flash.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\spi_flash.crf ..\..\Driver\Protocol\SPI_FLASH.C]
                          THUMB

                          AREA ||i.SPI_FLASH_BufferRead||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_BufferRead PROC
;;;291    *******************************************************************************/
;;;292    void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)
000000  b570              PUSH     {r4-r6,lr}
;;;293    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;294      /* Select the FLASH: Chip Select low */
;;;295      SPI_CS_LOW(&FlashSYS->SPI);
000008  4817              LDR      r0,|L1.104|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  f7fffffe          BL       SPI_CS_LOW
;;;296    
;;;297      /* Send "Read from Memory " instruction */
;;;298      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.READ);
000010  4815              LDR      r0,|L1.104|
000012  6800              LDR      r0,[r0,#0]  ; FlashSYS
000014  f8901029          LDRB     r1,[r0,#0x29]
000018  4813              LDR      r0,|L1.104|
00001a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;299    
;;;300      /* Send ReadAddr high nibble address byte to read from */
;;;301      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(ReadAddr & 0xFF0000) >> 16);
000020  f3c44107          UBFX     r1,r4,#16,#8
000024  4810              LDR      r0,|L1.104|
000026  6800              LDR      r0,[r0,#0]  ; FlashSYS
000028  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;302      /* Send ReadAddr medium nibble address byte to read from */
;;;303      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(ReadAddr& 0xFF00) >> 8);
00002c  f3c42107          UBFX     r1,r4,#8,#8
000030  480d              LDR      r0,|L1.104|
000032  6800              LDR      r0,[r0,#0]  ; FlashSYS
000034  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;304      /* Send ReadAddr low nibble address byte to read from */
;;;305      SPI_ReadWriteByteSPI(&FlashSYS->SPI,ReadAddr & 0xFF);
000038  b2e1              UXTB     r1,r4
00003a  480b              LDR      r0,|L1.104|
00003c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003e  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;306    
;;;307      while (NumByteToRead--) /* while there is data to be read */
000042  e006              B        |L1.82|
                  |L1.68|
;;;308      {
;;;309        /* Read a byte from the FLASH */
;;;310        *pBuffer = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000044  21a5              MOVS     r1,#0xa5
000046  4808              LDR      r0,|L1.104|
000048  6800              LDR      r0,[r0,#0]  ; FlashSYS
00004a  f7fffffe          BL       SPI_ReadWriteByteSPI
00004e  7028              STRB     r0,[r5,#0]
;;;311        /* Point to the next location where the byte read will be saved */
;;;312        pBuffer++;
000050  1c6d              ADDS     r5,r5,#1
                  |L1.82|
000052  1e30              SUBS     r0,r6,#0              ;307
000054  f1a60101          SUB      r1,r6,#1              ;307
000058  b28e              UXTH     r6,r1                 ;307
00005a  d1f3              BNE      |L1.68|
;;;313      }
;;;314    
;;;315      /* Deselect the FLASH: Chip Select high */
;;;316      SPI_CS_HIGH(&FlashSYS->SPI);
00005c  4802              LDR      r0,|L1.104|
00005e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000060  f7fffffe          BL       SPI_CS_HIGH
;;;317    }
000064  bd70              POP      {r4-r6,pc}
;;;318    /*******************************************************************************
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_BufferWrite||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_BufferWrite PROC
;;;206    *******************************************************************************/
;;;207    void SPI_FLASH_BufferWrite(u8* pBuffer, u32 StartAddr, u16 NumByteToWrite)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;208    {
000004  4680              MOV      r8,r0
000006  468b              MOV      r11,r1
000008  4616              MOV      r6,r2
;;;209      u8 NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
00000a  f04f0900          MOV      r9,#0
00000e  46ca              MOV      r10,r9
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
000014  2500              MOVS     r5,#0
000016  9000              STR      r0,[sp,#0]
;;;210    	unsigned long	SPI_FLASH_PageSize	=	0;	//页大小byte单位
000018  2400              MOVS     r4,#0
;;;211    	unsigned long	WriteAddr	=	StartAddr;		//页大小byte单位
00001a  465f              MOV      r7,r11
;;;212    	
;;;213    	SPI_FLASH_PageSize	=	FlashSYS->Memory.PageSize;
00001c  483e              LDR      r0,|L2.280|
00001e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000020  6bc4              LDR      r4,[r0,#0x3c]
;;;214    	
;;;215      Addr 				= WriteAddr % SPI_FLASH_PageSize;					//判断数据起始地址是否与页起始地址对齐，如果与页起始地址对齐，可以整页写
000022  fbb7f0f4          UDIV     r0,r7,r4
000026  fb047010          MLS      r0,r4,r0,r7
00002a  b2c0              UXTB     r0,r0
00002c  9001              STR      r0,[sp,#4]
;;;216      count 			= SPI_FLASH_PageSize - Addr;							//计数写入地址与页地址的偏移，如果起始地址与页对齐，此时为0,否则为偏移值
00002e  9801              LDR      r0,[sp,#4]
000030  1a20              SUBS     r0,r4,r0
000032  b2c5              UXTB     r5,r0
;;;217      NumOfPage 	=	NumByteToWrite / SPI_FLASH_PageSize;		//计数页数---需要使用多少页空间
000034  fbb6f0f4          UDIV     r0,r6,r4
000038  f00009ff          AND      r9,r0,#0xff
;;;218      NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;		//剩余数量--不到整页部分数据大小
00003c  fbb6f0f4          UDIV     r0,r6,r4
000040  fb046010          MLS      r0,r4,r0,r6
000044  f0000aff          AND      r10,r0,#0xff
;;;219    
;;;220      if (Addr == 0) 				/* StartAddr is SPI_FLASH_PageSize aligned  */	//写入的数据起始地址与页地址对齐
000048  9801              LDR      r0,[sp,#4]
00004a  b9e8              CBNZ     r0,|L2.136|
;;;221      {
;;;222        if (NumOfPage == 0) /* NumByteToWrite < SPI_FLASH_PageSize */				//总数据量不超过一页
00004c  f1b90f00          CMP      r9,#0
000050  d105              BNE      |L2.94|
;;;223        {
;;;224          SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
000052  4632              MOV      r2,r6
000054  4639              MOV      r1,r7
000056  4640              MOV      r0,r8
000058  f7fffffe          BL       SPI_FLASH_PageWrite
00005c  e05a              B        |L2.276|
                  |L2.94|
;;;225        }
;;;226        else /* NumByteToWrite > SPI_FLASH_PageSize */
;;;227        {
;;;228          while (NumOfPage--)		//整页写入
00005e  e006              B        |L2.110|
                  |L2.96|
;;;229          {
;;;230            SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
000060  b2a2              UXTH     r2,r4
000062  4639              MOV      r1,r7
000064  4640              MOV      r0,r8
000066  f7fffffe          BL       SPI_FLASH_PageWrite
;;;231            WriteAddr +=  SPI_FLASH_PageSize;
00006a  4427              ADD      r7,r7,r4
;;;232            pBuffer += SPI_FLASH_PageSize;
00006c  44a0              ADD      r8,r8,r4
                  |L2.110|
00006e  f1b90000          SUBS     r0,r9,#0              ;228
000072  f1a90101          SUB      r1,r9,#1              ;228
000076  f00109ff          AND      r9,r1,#0xff           ;228
00007a  d1f1              BNE      |L2.96|
;;;233          }
;;;234    
;;;235          SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);	//写入剩余非整页数据
00007c  4652              MOV      r2,r10
00007e  4639              MOV      r1,r7
000080  4640              MOV      r0,r8
000082  f7fffffe          BL       SPI_FLASH_PageWrite
000086  e045              B        |L2.276|
                  |L2.136|
;;;236        }
;;;237      }
;;;238      else /* StartAddr is not SPI_FLASH_PageSize aligned  */		//起始地址未对齐
;;;239      {
;;;240        if (NumOfPage == 0) /* NumByteToWrite < SPI_FLASH_PageSize */
000088  f1b90f00          CMP      r9,#0
00008c  d118              BNE      |L2.192|
;;;241        {
;;;242          if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > SPI_FLASH_PageSize */
00008e  45aa              CMP      r10,r5
000090  dd10              BLE      |L2.180|
;;;243          {
;;;244            temp = NumOfSingle - count;
000092  ebaa0005          SUB      r0,r10,r5
000096  b2c0              UXTB     r0,r0
000098  9000              STR      r0,[sp,#0]
;;;245    
;;;246            SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
00009a  462a              MOV      r2,r5
00009c  4639              MOV      r1,r7
00009e  4640              MOV      r0,r8
0000a0  f7fffffe          BL       SPI_FLASH_PageWrite
;;;247            WriteAddr +=  count;
0000a4  442f              ADD      r7,r7,r5
;;;248            pBuffer += count;
0000a6  44a8              ADD      r8,r8,r5
;;;249    
;;;250            SPI_FLASH_PageWrite(pBuffer, WriteAddr, temp);
0000a8  4639              MOV      r1,r7
0000aa  4640              MOV      r0,r8
0000ac  9a00              LDR      r2,[sp,#0]
0000ae  f7fffffe          BL       SPI_FLASH_PageWrite
0000b2  e02f              B        |L2.276|
                  |L2.180|
;;;251          }
;;;252          else
;;;253          {
;;;254            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
0000b4  4632              MOV      r2,r6
0000b6  4639              MOV      r1,r7
0000b8  4640              MOV      r0,r8
0000ba  f7fffffe          BL       SPI_FLASH_PageWrite
0000be  e029              B        |L2.276|
                  |L2.192|
;;;255          }
;;;256        }
;;;257        else /* NumByteToWrite > SPI_FLASH_PageSize */
;;;258        {
;;;259          NumByteToWrite -= count;
0000c0  1b70              SUBS     r0,r6,r5
0000c2  b286              UXTH     r6,r0
;;;260          NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
0000c4  fbb6f0f4          UDIV     r0,r6,r4
0000c8  f00009ff          AND      r9,r0,#0xff
;;;261          NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
0000cc  fbb6f0f4          UDIV     r0,r6,r4
0000d0  fb046010          MLS      r0,r4,r0,r6
0000d4  f0000aff          AND      r10,r0,#0xff
;;;262    
;;;263          SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
0000d8  462a              MOV      r2,r5
0000da  4639              MOV      r1,r7
0000dc  4640              MOV      r0,r8
0000de  f7fffffe          BL       SPI_FLASH_PageWrite
;;;264          WriteAddr +=  count;
0000e2  442f              ADD      r7,r7,r5
;;;265          pBuffer += count;
0000e4  44a8              ADD      r8,r8,r5
;;;266    
;;;267          while (NumOfPage--)
0000e6  e006              B        |L2.246|
                  |L2.232|
;;;268          {
;;;269            SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
0000e8  b2a2              UXTH     r2,r4
0000ea  4639              MOV      r1,r7
0000ec  4640              MOV      r0,r8
0000ee  f7fffffe          BL       SPI_FLASH_PageWrite
;;;270            WriteAddr +=  SPI_FLASH_PageSize;
0000f2  4427              ADD      r7,r7,r4
;;;271            pBuffer += SPI_FLASH_PageSize;
0000f4  44a0              ADD      r8,r8,r4
                  |L2.246|
0000f6  f1b90000          SUBS     r0,r9,#0              ;267
0000fa  f1a90101          SUB      r1,r9,#1              ;267
0000fe  f00109ff          AND      r9,r1,#0xff           ;267
000102  d1f1              BNE      |L2.232|
;;;272          }
;;;273    
;;;274          if (NumOfSingle != 0)
000104  f1ba0f00          CMP      r10,#0
000108  d004              BEQ      |L2.276|
;;;275          {
;;;276            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
00010a  4652              MOV      r2,r10
00010c  4639              MOV      r1,r7
00010e  4640              MOV      r0,r8
000110  f7fffffe          BL       SPI_FLASH_PageWrite
                  |L2.276|
;;;277          }
;;;278        }
;;;279      }
;;;280    }
000114  e8bd9ffc          POP      {r2-r12,pc}
;;;281    
                          ENDP

                  |L2.280|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_BulkErase||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_BulkErase PROC
;;;99     *******************************************************************************/
;;;100    void SPI_FLASH_BulkErase(u32 BulkAddr)
000000  b510              PUSH     {r4,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102      /* Send write enable instruction */
;;;103      SPI_FLASH_WriteEnable();
000004  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;104    
;;;105      /* Bulk Erase */
;;;106      /* Select the FLASH: Chip Select low */
;;;107      SPI_CS_LOW(&FlashSYS->SPI);
000008  4811              LDR      r0,|L3.80|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  f7fffffe          BL       SPI_CS_LOW
;;;108      /* Send Bulk Erase instruction  */
;;;109      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.BE);
000010  480f              LDR      r0,|L3.80|
000012  6800              LDR      r0,[r0,#0]  ; FlashSYS
000014  f8901030          LDRB     r1,[r0,#0x30]
000018  480d              LDR      r0,|L3.80|
00001a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;110    	/* Send SectorAddr high nibble address byte */
;;;111      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(BulkAddr & 0xFF0000) >> 16);
000020  f3c44107          UBFX     r1,r4,#16,#8
000024  480a              LDR      r0,|L3.80|
000026  6800              LDR      r0,[r0,#0]  ; FlashSYS
000028  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;112      /* Send SectorAddr medium nibble address byte */
;;;113      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(BulkAddr & 0xFF00) >> 8);
00002c  f3c42107          UBFX     r1,r4,#8,#8
000030  4807              LDR      r0,|L3.80|
000032  6800              LDR      r0,[r0,#0]  ; FlashSYS
000034  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;114      /* Send SectorAddr low nibble address byte */
;;;115      SPI_ReadWriteByteSPI(&FlashSYS->SPI,BulkAddr & 0xFF);
000038  b2e1              UXTB     r1,r4
00003a  4805              LDR      r0,|L3.80|
00003c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003e  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;116      /* Deselect the FLASH: Chip Select high */
;;;117      SPI_CS_HIGH(&FlashSYS->SPI);
000042  4803              LDR      r0,|L3.80|
000044  6800              LDR      r0,[r0,#0]  ; FlashSYS
000046  f7fffffe          BL       SPI_CS_HIGH
;;;118    
;;;119      /* Wait the end of Flash writing */
;;;120      SPI_FLASH_WaitForWriteEnd();
00004a  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;121    }
00004e  bd10              POP      {r4,pc}
;;;122    /*******************************************************************************
                          ENDP

                  |L3.80|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_ChipErase||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_ChipErase PROC
;;;128    *******************************************************************************/
;;;129    void SPI_FLASH_ChipErase(void)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131      /* Send write enable instruction */
;;;132      SPI_FLASH_WriteEnable();
000002  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;133    
;;;134      /* Sector Erase */
;;;135      /* Select the FLASH: Chip Select low */
;;;136      SPI_CS_LOW(&FlashSYS->SPI);
000006  4809              LDR      r0,|L4.44|
000008  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000a  f7fffffe          BL       SPI_CS_LOW
;;;137      /* Send Sector Erase instruction */
;;;138      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.CE);
00000e  4807              LDR      r0,|L4.44|
000010  6800              LDR      r0,[r0,#0]  ; FlashSYS
000012  f8901031          LDRB     r1,[r0,#0x31]
000016  4805              LDR      r0,|L4.44|
000018  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;139      /* Deselect the FLASH: Chip Select high */
;;;140      SPI_CS_HIGH(&FlashSYS->SPI);
00001e  4803              LDR      r0,|L4.44|
000020  6800              LDR      r0,[r0,#0]  ; FlashSYS
000022  f7fffffe          BL       SPI_CS_HIGH
;;;141    
;;;142      /* Wait the end of Flash writing */
;;;143      SPI_FLASH_WaitForWriteEnd();
000026  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;144    }
00002a  bd10              POP      {r4,pc}
;;;145    
                          ENDP

                  |L4.44|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_Initialize||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_Initialize PROC
;;;55     *******************************************************************************/
;;;56     void SPI_FLASH_Initialize(SPIFlashDef *Flash)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58     	SPIDef	*SPIx	=	0;
000004  2500              MOVS     r5,#0
;;;59       SPIx	=	&Flash->SPI;
000006  4625              MOV      r5,r4
;;;60     	FlashSYS	=	Flash;
000008  4802              LDR      r0,|L5.20|
00000a  6004              STR      r4,[r0,#0]  ; FlashSYS
;;;61     	SPI_Initialize(SPIx);		//SPI接口配置
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       SPI_Initialize
;;;62     }
000012  bd70              POP      {r4-r6,pc}
;;;63     
                          ENDP

                  |L5.20|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_PageWrite||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_PageWrite PROC
;;;159    *******************************************************************************/
;;;160    void SPI_FLASH_PageWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;162    	if(NumByteToWrite>FlashSYS->Memory.PageSize)		//写入数据大于一页
000008  481d              LDR      r0,|L6.128|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  6bc0              LDR      r0,[r0,#0x3c]
00000e  42b0              CMP      r0,r6
000010  d203              BCS      |L6.26|
;;;163    	{
;;;164    		NumByteToWrite	=	FlashSYS->Memory.PageSize;
000012  481b              LDR      r0,|L6.128|
000014  6800              LDR      r0,[r0,#0]  ; FlashSYS
000016  8f80              LDRH     r0,[r0,#0x3c]
000018  b286              UXTH     r6,r0
                  |L6.26|
;;;165    	}
;;;166      /* Enable the write access to the FLASH */
;;;167      SPI_FLASH_WriteEnable();
00001a  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;168    
;;;169      /* Select the FLASH: Chip Select low */
;;;170      SPI_CS_LOW(&FlashSYS->SPI);
00001e  4818              LDR      r0,|L6.128|
000020  6800              LDR      r0,[r0,#0]  ; FlashSYS
000022  f7fffffe          BL       SPI_CS_LOW
;;;171      /* Send "Write to Memory " instruction */
;;;172      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.PP);
000026  4816              LDR      r0,|L6.128|
000028  6800              LDR      r0,[r0,#0]  ; FlashSYS
00002a  f8901032          LDRB     r1,[r0,#0x32]
00002e  4814              LDR      r0,|L6.128|
000030  6800              LDR      r0,[r0,#0]  ; FlashSYS
000032  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;173      /* Send WriteAddr high nibble address byte to write to */
;;;174      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(WriteAddr & 0xFF0000) >> 16);
000036  f3c44107          UBFX     r1,r4,#16,#8
00003a  4811              LDR      r0,|L6.128|
00003c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003e  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;175      /* Send WriteAddr medium nibble address byte to write to */
;;;176      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(WriteAddr & 0xFF00) >> 8);
000042  f3c42107          UBFX     r1,r4,#8,#8
000046  480e              LDR      r0,|L6.128|
000048  6800              LDR      r0,[r0,#0]  ; FlashSYS
00004a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;177      /* Send WriteAddr low nibble address byte to write to */
;;;178      SPI_ReadWriteByteSPI(&FlashSYS->SPI,WriteAddr & 0xFF);
00004e  b2e1              UXTB     r1,r4
000050  480b              LDR      r0,|L6.128|
000052  6800              LDR      r0,[r0,#0]  ; FlashSYS
000054  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;179    
;;;180      /* while there is data to be written on the FLASH */
;;;181      while (NumByteToWrite--)
000058  e005              B        |L6.102|
                  |L6.90|
;;;182      {
;;;183        /* Send the current byte */
;;;184        SPI_ReadWriteByteSPI(&FlashSYS->SPI,*pBuffer);
00005a  7829              LDRB     r1,[r5,#0]
00005c  4808              LDR      r0,|L6.128|
00005e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000060  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;185        /* Point on the next byte to be written */
;;;186        pBuffer++;
000064  1c6d              ADDS     r5,r5,#1
                  |L6.102|
000066  1e30              SUBS     r0,r6,#0              ;181
000068  f1a60101          SUB      r1,r6,#1              ;181
00006c  b28e              UXTH     r6,r1                 ;181
00006e  d1f4              BNE      |L6.90|
;;;187      }
;;;188    
;;;189      /* Deselect the FLASH: Chip Select high */
;;;190      SPI_CS_HIGH(&FlashSYS->SPI);
000070  4803              LDR      r0,|L6.128|
000072  6800              LDR      r0,[r0,#0]  ; FlashSYS
000074  f7fffffe          BL       SPI_CS_HIGH
;;;191    
;;;192      /* Wait the end of Flash writing */
;;;193      SPI_FLASH_WaitForWriteEnd();
000078  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;194    }
00007c  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_ReadID||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_ReadID PROC
;;;434    *******************************************************************************/
;;;435    u32 SPI_FLASH_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;436    {
;;;437      u32 Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
;;;438    
;;;439      /* Select the FLASH: Chip Select low */
;;;440      SPI_CS_LOW(&FlashSYS->SPI);
00000c  4814              LDR      r0,|L7.96|
00000e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000010  f7fffffe          BL       SPI_CS_LOW
;;;441    
;;;442      /* Send "RDID " instruction */
;;;443      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.RDID);
000014  4812              LDR      r0,|L7.96|
000016  6800              LDR      r0,[r0,#0]  ; FlashSYS
000018  f8901027          LDRB     r1,[r0,#0x27]
00001c  4810              LDR      r0,|L7.96|
00001e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000020  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;444    
;;;445      /* Read a byte from the FLASH */
;;;446      Temp0 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000024  21a5              MOVS     r1,#0xa5
000026  480e              LDR      r0,|L7.96|
000028  6800              LDR      r0,[r0,#0]  ; FlashSYS
00002a  f7fffffe          BL       SPI_ReadWriteByteSPI
00002e  4605              MOV      r5,r0
;;;447    
;;;448      /* Read a byte from the FLASH */
;;;449      Temp1 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000030  21a5              MOVS     r1,#0xa5
000032  480b              LDR      r0,|L7.96|
000034  6800              LDR      r0,[r0,#0]  ; FlashSYS
000036  f7fffffe          BL       SPI_ReadWriteByteSPI
00003a  4606              MOV      r6,r0
;;;450    
;;;451      /* Read a byte from the FLASH */
;;;452      Temp2 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
00003c  21a5              MOVS     r1,#0xa5
00003e  4808              LDR      r0,|L7.96|
000040  6800              LDR      r0,[r0,#0]  ; FlashSYS
000042  f7fffffe          BL       SPI_ReadWriteByteSPI
000046  4607              MOV      r7,r0
;;;453    
;;;454      /* Deselect the FLASH: Chip Select high */
;;;455      SPI_CS_HIGH(&FlashSYS->SPI);
000048  4805              LDR      r0,|L7.96|
00004a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00004c  f7fffffe          BL       SPI_CS_HIGH
;;;456    
;;;457      Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
000050  0428              LSLS     r0,r5,#16
000052  ea402006          ORR      r0,r0,r6,LSL #8
000056  ea400407          ORR      r4,r0,r7
;;;458    
;;;459      return Temp;
00005a  4620              MOV      r0,r4
;;;460    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;461    /*******************************************************************************
                          ENDP

                  |L7.96|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_ReadRDSFDP||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_ReadRDSFDP PROC
;;;392    *******************************************************************************/
;;;393    u32 SPI_FLASH_ReadRDSFDP(void)
000000  b570              PUSH     {r4-r6,lr}
;;;394    {
;;;395      u32 Temp = 0, Temp0 = 0, Temp1 = 0;
000002  2400              MOVS     r4,#0
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;396    
;;;397      /* Select the FLASH: Chip Select low */
;;;398      SPI_CS_LOW(&FlashSYS->SPI);
000008  4819              LDR      r0,|L8.112|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  f7fffffe          BL       SPI_CS_LOW
;;;399    
;;;400      /* Send "RDSFDP " instruction */
;;;401      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.RDSFDP);
000010  4817              LDR      r0,|L8.112|
000012  6800              LDR      r0,[r0,#0]  ; FlashSYS
000014  f890102b          LDRB     r1,[r0,#0x2b]
000018  4815              LDR      r0,|L8.112|
00001a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;402    
;;;403    	/* Send "ADD1 "  */
;;;404    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,0x00);
000020  2100              MOVS     r1,#0
000022  4813              LDR      r0,|L8.112|
000024  6800              LDR      r0,[r0,#0]  ; FlashSYS
000026  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;405    	
;;;406    	/* Send "ADD2 "  */
;;;407    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,0x00);
00002a  2100              MOVS     r1,#0
00002c  4810              LDR      r0,|L8.112|
00002e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000030  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;408    	
;;;409    	/* Send "ADD3 "  */
;;;410    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,0x00);
000034  2100              MOVS     r1,#0
000036  480e              LDR      r0,|L8.112|
000038  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;411    	
;;;412    	/* Send one dummy bytes---Byte1 */
;;;413    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
00003e  21a5              MOVS     r1,#0xa5
000040  480b              LDR      r0,|L8.112|
000042  6800              LDR      r0,[r0,#0]  ; FlashSYS
000044  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;414    	
;;;415      /* Read Data1 from the FLASH */
;;;416      Temp0 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000048  21a5              MOVS     r1,#0xa5
00004a  4809              LDR      r0,|L8.112|
00004c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00004e  f7fffffe          BL       SPI_ReadWriteByteSPI
000052  4605              MOV      r5,r0
;;;417    
;;;418      /* Read Data2 from the FLASH */
;;;419      Temp1 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000054  21a5              MOVS     r1,#0xa5
000056  4806              LDR      r0,|L8.112|
000058  6800              LDR      r0,[r0,#0]  ; FlashSYS
00005a  f7fffffe          BL       SPI_ReadWriteByteSPI
00005e  4606              MOV      r6,r0
;;;420    
;;;421      /* Deselect the FLASH: Chip Select high */
;;;422      SPI_CS_HIGH(&FlashSYS->SPI);
000060  4803              LDR      r0,|L8.112|
000062  6800              LDR      r0,[r0,#0]  ; FlashSYS
000064  f7fffffe          BL       SPI_CS_HIGH
;;;423    
;;;424      Temp = (Temp0 << 8) | Temp1;
000068  ea462405          ORR      r4,r6,r5,LSL #8
;;;425    
;;;426      return Temp;
00006c  4620              MOV      r0,r4
;;;427    }
00006e  bd70              POP      {r4-r6,pc}
;;;428    /*******************************************************************************
                          ENDP

                  |L8.112|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_ReadREMS||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_ReadREMS PROC
;;;467    *******************************************************************************/
;;;468    u32 SPI_FLASH_ReadREMS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;469    {
;;;470      u16 Temp = 0, Temp0 = 0, Temp1 = 0;
000002  2400              MOVS     r4,#0
000004  2500              MOVS     r5,#0
000006  2600              MOVS     r6,#0
;;;471    
;;;472      /* Select the FLASH: Chip Select low */
;;;473      SPI_CS_LOW(&FlashSYS->SPI);
000008  4817              LDR      r0,|L9.104|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  f7fffffe          BL       SPI_CS_LOW
;;;474    
;;;475      /* Send "REMS " instruction */
;;;476      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.REMS);
000010  4815              LDR      r0,|L9.104|
000012  6800              LDR      r0,[r0,#0]  ; FlashSYS
000014  f890102d          LDRB     r1,[r0,#0x2d]
000018  4813              LDR      r0,|L9.104|
00001a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;477    
;;;478      /* Send two dummy bytes---Byte1 */
;;;479    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000020  21a5              MOVS     r1,#0xa5
000022  4811              LDR      r0,|L9.104|
000024  6800              LDR      r0,[r0,#0]  ; FlashSYS
000026  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;480    
;;;481      /* Send two dummy bytes---Byte2 */
;;;482    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
00002a  21a5              MOVS     r1,#0xa5
00002c  480e              LDR      r0,|L9.104|
00002e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000030  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;483    
;;;484    	/* Send one bytes address (A7~A0). 发送0x00,manufacturer ID先出;发送0x01，device ID先出*/
;;;485    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,0X00);
000034  2100              MOVS     r1,#0
000036  480c              LDR      r0,|L9.104|
000038  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;486    	
;;;487    	/* Read a byte from the FLASH */
;;;488      Temp0 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
00003e  21a5              MOVS     r1,#0xa5
000040  4809              LDR      r0,|L9.104|
000042  6800              LDR      r0,[r0,#0]  ; FlashSYS
000044  f7fffffe          BL       SPI_ReadWriteByteSPI
000048  4605              MOV      r5,r0
;;;489    
;;;490      /* Read a byte from the FLASH */
;;;491      Temp1 = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
00004a  21a5              MOVS     r1,#0xa5
00004c  4806              LDR      r0,|L9.104|
00004e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000050  f7fffffe          BL       SPI_ReadWriteByteSPI
000054  4606              MOV      r6,r0
;;;492    
;;;493      /* Deselect the FLASH: Chip Select high */
;;;494      SPI_CS_HIGH(&FlashSYS->SPI);
000056  4804              LDR      r0,|L9.104|
000058  6800              LDR      r0,[r0,#0]  ; FlashSYS
00005a  f7fffffe          BL       SPI_CS_HIGH
;;;495    
;;;496      Temp = (Temp0 << 8) | Temp1;
00005e  ea462405          ORR      r4,r6,r5,LSL #8
;;;497    
;;;498      return Temp;
000062  4620              MOV      r0,r4
;;;499    }
000064  bd70              POP      {r4-r6,pc}
;;;500    /*******************************************************************************
                          ENDP

000066  0000              DCW      0x0000
                  |L9.104|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_ReadStatusRegister||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_ReadStatusRegister PROC
;;;506    *******************************************************************************/
;;;507    u32 SPI_FLASH_ReadStatusRegister(void)
000000  b508              PUSH     {r3,lr}
;;;508    {
;;;509      u8 Temp = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;510    
;;;511      /* Select the FLASH: Chip Select low */
;;;512      SPI_CS_LOW(&FlashSYS->SPI);
000006  480f              LDR      r0,|L10.68|
000008  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000a  f7fffffe          BL       SPI_CS_LOW
;;;513    
;;;514      /* Send "REMS " instruction */
;;;515      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.RDSR);
00000e  480d              LDR      r0,|L10.68|
000010  6800              LDR      r0,[r0,#0]  ; FlashSYS
000012  f8901028          LDRB     r1,[r0,#0x28]
000016  480b              LDR      r0,|L10.68|
000018  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;516    
;;;517    	/* Read a byte from the FLASH */
;;;518      Temp = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
00001e  21a5              MOVS     r1,#0xa5
000020  4808              LDR      r0,|L10.68|
000022  6800              LDR      r0,[r0,#0]  ; FlashSYS
000024  f7fffffe          BL       SPI_ReadWriteByteSPI
000028  9000              STR      r0,[sp,#0]
;;;519    
;;;520      /* Deselect the FLASH: Chip Select high */
;;;521      SPI_CS_HIGH(&FlashSYS->SPI);
00002a  4806              LDR      r0,|L10.68|
00002c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00002e  f7fffffe          BL       SPI_CS_HIGH
;;;522    
;;;523    	memcpy((unsigned char*)&FlashSYS->Flag,&Temp,1);
000032  4804              LDR      r0,|L10.68|
000034  6800              LDR      r0,[r0,#0]  ; FlashSYS
000036  f89d1000          LDRB     r1,[sp,#0]
00003a  f8801035          STRB     r1,[r0,#0x35]
;;;524    	
;;;525      return Temp;
00003e  f89d0000          LDRB     r0,[sp,#0]
;;;526    }
000042  bd08              POP      {r3,pc}
;;;527    /*******************************************************************************
                          ENDP

                  |L10.68|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_ResDeepPowerdown||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_ResDeepPowerdown PROC
;;;372    *******************************************************************************/
;;;373    void SPI_FLASH_ResDeepPowerdown(void)
000000  b510              PUSH     {r4,lr}
;;;374    {
;;;375    
;;;376      /* Select the FLASH: Chip Select low */
;;;377      SPI_CS_LOW(&FlashSYS->SPI);
000002  4808              LDR      r0,|L11.36|
000004  6800              LDR      r0,[r0,#0]  ; FlashSYS
000006  f7fffffe          BL       SPI_CS_LOW
;;;378    
;;;379      /* Send "RDP " instruction */
;;;380      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.RDP);
00000a  4806              LDR      r0,|L11.36|
00000c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000e  f8901034          LDRB     r1,[r0,#0x34]
000012  4804              LDR      r0,|L11.36|
000014  6800              LDR      r0,[r0,#0]  ; FlashSYS
000016  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;381    
;;;382      /* Deselect the FLASH: Chip Select high */
;;;383      SPI_CS_HIGH(&FlashSYS->SPI);
00001a  4802              LDR      r0,|L11.36|
00001c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001e  f7fffffe          BL       SPI_CS_HIGH
;;;384    
;;;385    }
000022  bd10              POP      {r4,pc}
;;;386    /*******************************************************************************
                          ENDP

                  |L11.36|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_SectorErase||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_SectorErase PROC
;;;70     *******************************************************************************/
;;;71     void SPI_FLASH_SectorErase(u32 SectorAddr)
000000  b510              PUSH     {r4,lr}
;;;72     {
000002  4604              MOV      r4,r0
;;;73       /* Send write enable instruction */
;;;74       SPI_FLASH_WriteEnable();
000004  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;75     
;;;76       /* Sector Erase */
;;;77       /* Select the FLASH: Chip Select low */
;;;78       SPI_CS_LOW(&FlashSYS->SPI);
000008  4811              LDR      r0,|L12.80|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  f7fffffe          BL       SPI_CS_LOW
;;;79       /* Send Sector Erase instruction */
;;;80       SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.SE);
000010  480f              LDR      r0,|L12.80|
000012  6800              LDR      r0,[r0,#0]  ; FlashSYS
000014  f890102f          LDRB     r1,[r0,#0x2f]
000018  480d              LDR      r0,|L12.80|
00001a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;81       /* Send SectorAddr high nibble address byte */
;;;82       SPI_ReadWriteByteSPI(&FlashSYS->SPI,(SectorAddr & 0xFF0000) >> 16);
000020  f3c44107          UBFX     r1,r4,#16,#8
000024  480a              LDR      r0,|L12.80|
000026  6800              LDR      r0,[r0,#0]  ; FlashSYS
000028  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;83       /* Send SectorAddr medium nibble address byte */
;;;84       SPI_ReadWriteByteSPI(&FlashSYS->SPI,(SectorAddr & 0xFF00) >> 8);
00002c  f3c42107          UBFX     r1,r4,#8,#8
000030  4807              LDR      r0,|L12.80|
000032  6800              LDR      r0,[r0,#0]  ; FlashSYS
000034  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;85       /* Send SectorAddr low nibble address byte */
;;;86       SPI_ReadWriteByteSPI(&FlashSYS->SPI,SectorAddr & 0xFF);
000038  b2e1              UXTB     r1,r4
00003a  4805              LDR      r0,|L12.80|
00003c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003e  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;87       /* Deselect the FLASH: Chip Select high */
;;;88       SPI_CS_HIGH(&FlashSYS->SPI);
000042  4803              LDR      r0,|L12.80|
000044  6800              LDR      r0,[r0,#0]  ; FlashSYS
000046  f7fffffe          BL       SPI_CS_HIGH
;;;89     
;;;90       /* Wait the end of Flash writing */
;;;91       SPI_FLASH_WaitForWriteEnd();
00004a  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;92     }
00004e  bd10              POP      {r4,pc}
;;;93     /*******************************************************************************
                          ENDP

                  |L12.80|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_SetDeepPowerdown||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_SetDeepPowerdown PROC
;;;352    *******************************************************************************/
;;;353    void SPI_FLASH_SetDeepPowerdown(void)
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355    
;;;356      /* Select the FLASH: Chip Select low */
;;;357      SPI_CS_LOW(&FlashSYS->SPI);
000002  4808              LDR      r0,|L13.36|
000004  6800              LDR      r0,[r0,#0]  ; FlashSYS
000006  f7fffffe          BL       SPI_CS_LOW
;;;358    
;;;359      /* Send "DP " instruction */
;;;360      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.DP);
00000a  4806              LDR      r0,|L13.36|
00000c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000e  f8901033          LDRB     r1,[r0,#0x33]
000012  4804              LDR      r0,|L13.36|
000014  6800              LDR      r0,[r0,#0]  ; FlashSYS
000016  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;361    
;;;362      /* Deselect the FLASH: Chip Select high */
;;;363      SPI_CS_HIGH(&FlashSYS->SPI);
00001a  4802              LDR      r0,|L13.36|
00001c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001e  f7fffffe          BL       SPI_CS_HIGH
;;;364    
;;;365    }
000022  bd10              POP      {r4,pc}
;;;366    /*******************************************************************************
                          ENDP

                  |L13.36|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_StartReadSequence||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_StartReadSequence PROC
;;;329    *******************************************************************************/
;;;330    void SPI_FLASH_StartReadSequence(u32 ReadAddr)
000000  b510              PUSH     {r4,lr}
;;;331    {
000002  4604              MOV      r4,r0
;;;332      /* Select the FLASH: Chip Select low */
;;;333      SPI_CS_LOW(&FlashSYS->SPI);
000004  480e              LDR      r0,|L14.64|
000006  6800              LDR      r0,[r0,#0]  ; FlashSYS
000008  f7fffffe          BL       SPI_CS_LOW
;;;334    
;;;335      /* Send "Read from Memory " instruction */
;;;336      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.READ);
00000c  480c              LDR      r0,|L14.64|
00000e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000010  f8901029          LDRB     r1,[r0,#0x29]
000014  480a              LDR      r0,|L14.64|
000016  6800              LDR      r0,[r0,#0]  ; FlashSYS
000018  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;337    
;;;338      /* Send the 24-bit address of the address to read from -----------------------*/
;;;339      /* Send ReadAddr high nibble address byte */
;;;340      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(ReadAddr & 0xFF0000) >> 16);
00001c  f3c44107          UBFX     r1,r4,#16,#8
000020  4807              LDR      r0,|L14.64|
000022  6800              LDR      r0,[r0,#0]  ; FlashSYS
000024  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;341      /* Send ReadAddr medium nibble address byte */
;;;342      SPI_ReadWriteByteSPI(&FlashSYS->SPI,(ReadAddr& 0xFF00) >> 8);
000028  f3c42107          UBFX     r1,r4,#8,#8
00002c  4804              LDR      r0,|L14.64|
00002e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000030  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;343      /* Send ReadAddr low nibble address byte */
;;;344      SPI_ReadWriteByteSPI(&FlashSYS->SPI,ReadAddr & 0xFF);
000034  b2e1              UXTB     r1,r4
000036  4802              LDR      r0,|L14.64|
000038  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;345    }
00003e  bd10              POP      {r4,pc}
;;;346    /*******************************************************************************
                          ENDP

                  |L14.64|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_WaitForWriteEnd||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_WaitForWriteEnd PROC
;;;588    *******************************************************************************/
;;;589    void SPI_FLASH_WaitForWriteEnd(void)
000000  b570              PUSH     {r4-r6,lr}
;;;590    {
;;;591      u8 FLASH_Status = 0;
000002  2400              MOVS     r4,#0
;;;592    	unsigned long Time	=	720000;
000004  4d0f              LDR      r5,|L15.68|
;;;593    
;;;594      /* Select the FLASH: Chip Select low */
;;;595      SPI_CS_LOW(&FlashSYS->SPI);
000006  4810              LDR      r0,|L15.72|
000008  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000a  f7fffffe          BL       SPI_CS_LOW
;;;596    
;;;597      /* Send "Read Status Register" instruction */
;;;598      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.RDSR);
00000e  480e              LDR      r0,|L15.72|
000010  6800              LDR      r0,[r0,#0]  ; FlashSYS
000012  f8901028          LDRB     r1,[r0,#0x28]
000016  480c              LDR      r0,|L15.72|
000018  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;599    
;;;600      /* Loop as long as the memory is busy with a write cycle */
;;;601      do
00001e  bf00              NOP      
                  |L15.32|
;;;602      {
;;;603        /* Send a dummy byte to generate the clock needed by the FLASH
;;;604        and put the value of the status register in FLASH_Status variable */
;;;605        FLASH_Status = SPI_ReadWriteByteSPI(&FlashSYS->SPI,Dummy_Byte);
000020  21a5              MOVS     r1,#0xa5
000022  4809              LDR      r0,|L15.72|
000024  6800              LDR      r0,[r0,#0]  ; FlashSYS
000026  f7fffffe          BL       SPI_ReadWriteByteSPI
00002a  4604              MOV      r4,r0
;;;606      }
;;;607      while (((FLASH_Status & WIP_Flag) == SET)&&(Time--)); /* Write in progress */
00002c  f0040001          AND      r0,r4,#1
000030  b118              CBZ      r0,|L15.58|
000032  1e28              SUBS     r0,r5,#0
000034  f1a50501          SUB      r5,r5,#1
000038  d1f2              BNE      |L15.32|
                  |L15.58|
;;;608      /* Deselect the FLASH: Chip Select high */
;;;609      SPI_CS_HIGH(&FlashSYS->SPI);
00003a  4803              LDR      r0,|L15.72|
00003c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00003e  f7fffffe          BL       SPI_CS_HIGH
;;;610    }
000042  bd70              POP      {r4-r6,pc}
;;;611    
                          ENDP

                  |L15.68|
                          DCD      0x000afc80
                  |L15.72|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_WriteDisble||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_WriteDisble PROC
;;;573    *******************************************************************************/
;;;574    void SPI_FLASH_WriteDisble(void)
000000  b510              PUSH     {r4,lr}
;;;575    {
;;;576    	SPI_CS_LOW(&FlashSYS->SPI);
000002  4808              LDR      r0,|L16.36|
000004  6800              LDR      r0,[r0,#0]  ; FlashSYS
000006  f7fffffe          BL       SPI_CS_LOW
;;;577    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.WRDI);
00000a  4806              LDR      r0,|L16.36|
00000c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000e  f8901025          LDRB     r1,[r0,#0x25]
000012  4804              LDR      r0,|L16.36|
000014  6800              LDR      r0,[r0,#0]  ; FlashSYS
000016  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;578    	SPI_CS_HIGH(&FlashSYS->SPI);
00001a  4802              LDR      r0,|L16.36|
00001c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001e  f7fffffe          BL       SPI_CS_HIGH
;;;579    }
000022  bd10              POP      {r4,pc}
;;;580    /*******************************************************************************
                          ENDP

                  |L16.36|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_WriteEnable||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_WriteEnable PROC
;;;560    *******************************************************************************/
;;;561    void SPI_FLASH_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;562    {
;;;563    	SPI_CS_LOW(&FlashSYS->SPI);
000002  4808              LDR      r0,|L17.36|
000004  6800              LDR      r0,[r0,#0]  ; FlashSYS
000006  f7fffffe          BL       SPI_CS_LOW
;;;564    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.WREN);
00000a  4806              LDR      r0,|L17.36|
00000c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000e  f8901024          LDRB     r1,[r0,#0x24]
000012  4804              LDR      r0,|L17.36|
000014  6800              LDR      r0,[r0,#0]  ; FlashSYS
000016  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;565    	SPI_CS_HIGH(&FlashSYS->SPI);
00001a  4802              LDR      r0,|L17.36|
00001c  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001e  f7fffffe          BL       SPI_CS_HIGH
;;;566    }
000022  bd10              POP      {r4,pc}
;;;567    /*******************************************************************************
                          ENDP

                  |L17.36|
                          DCD      FlashSYS

                          AREA ||i.SPI_FLASH_WriteStatusRegister||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_WriteStatusRegister PROC
;;;533    *******************************************************************************/
;;;534    void SPI_FLASH_WriteStatusRegister(SPIFlashStatusDef Flag)
000000  b501              PUSH     {r0,lr}
;;;535    {
000002  b082              SUB      sp,sp,#8
;;;536    	u8 Status	=	0;
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
;;;537    	
;;;538      FlashSYS->Flag 	=	Flag;
000008  480f              LDR      r0,|L18.72|
00000a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00000c  f89d1008          LDRB     r1,[sp,#8]
000010  f8801035          STRB     r1,[r0,#0x35]
;;;539    	memcpy((unsigned char*)&Status,(unsigned char*)&Flag,1);
000014  9802              LDR      r0,[sp,#8]
000016  9001              STR      r0,[sp,#4]
;;;540    	
;;;541      /* Select the FLASH: Chip Select low */
;;;542      SPI_CS_LOW(&FlashSYS->SPI);
000018  480b              LDR      r0,|L18.72|
00001a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00001c  f7fffffe          BL       SPI_CS_LOW
;;;543    
;;;544      /* Send "WRSR " instruction */
;;;545      SPI_ReadWriteByteSPI(&FlashSYS->SPI,FlashSYS->Cmd.WRSR);
000020  4809              LDR      r0,|L18.72|
000022  6800              LDR      r0,[r0,#0]  ; FlashSYS
000024  f8901026          LDRB     r1,[r0,#0x26]
000028  4807              LDR      r0,|L18.72|
00002a  6800              LDR      r0,[r0,#0]  ; FlashSYS
00002c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;546    
;;;547    	/* Send "Status " to the FLASH */
;;;548    	SPI_ReadWriteByteSPI(&FlashSYS->SPI,Status);
000030  f89d1004          LDRB     r1,[sp,#4]
000034  4804              LDR      r0,|L18.72|
000036  6800              LDR      r0,[r0,#0]  ; FlashSYS
000038  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;549    
;;;550      /* Deselect the FLASH: Chip Select high */
;;;551      SPI_CS_HIGH(&FlashSYS->SPI);
00003c  4802              LDR      r0,|L18.72|
00003e  6800              LDR      r0,[r0,#0]  ; FlashSYS
000040  f7fffffe          BL       SPI_CS_HIGH
;;;552    }
000044  bd0e              POP      {r1-r3,pc}
;;;553    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      FlashSYS

                          AREA ||.data||, DATA, ALIGN=2

                  FlashSYS
                          DCD      0x00000000
