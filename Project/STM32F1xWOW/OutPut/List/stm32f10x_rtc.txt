; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_rtc.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_rtc.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;259    *******************************************************************************/
;;;260    void RTC_ClearFlag(u16 RTC_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;261    {
;;;262      /* Check the parameters */
;;;263      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;264        
;;;265      /* Clear the coressponding RTC flag */
;;;266      RTC->CRL &= (u16)~RTC_FLAG;
000002  8809              LDRH     r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  8011              STRH     r1,[r2,#0]
;;;267    }
00000a  4770              BX       lr
;;;268    
                          ENDP

                  |L1.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;310    *******************************************************************************/
;;;311    void RTC_ClearITPendingBit(u16 RTC_IT)
000000  4902              LDR      r1,|L2.12|
;;;312    {
;;;313      /* Check the parameters */
;;;314      assert_param(IS_RTC_IT(RTC_IT));  
;;;315      
;;;316      /* Clear the coressponding RTC pending bit */
;;;317      RTC->CRL &= (u16)~RTC_IT;
000002  8809              LDRH     r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  8011              STRH     r1,[r2,#0]
;;;318    }
00000a  4770              BX       lr
;;;319    
                          ENDP

                  |L2.12|
                          DCD      0x40002804

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;67     *******************************************************************************/
;;;68     void RTC_EnterConfigMode(void)
000000  4803              LDR      r0,|L3.16|
;;;69     {
;;;70       /* Set the CNF flag to enter in the Configuration Mode */
;;;71       RTC->CRL |= CRL_CNF_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L3.16|
00000a  8008              STRH     r0,[r1,#0]
;;;72     }
00000c  4770              BX       lr
;;;73     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40002804

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;80     *******************************************************************************/
;;;81     void RTC_ExitConfigMode(void)
000000  4803              LDR      r0,|L4.16|
;;;82     {
;;;83       /* Reset the CNF flag to exit from the Configuration Mode */
;;;84       RTC->CRL &= CRL_CNF_Reset;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71ef          MOV      r1,#0xffef
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L4.16|
00000c  8008              STRH     r0,[r1,#0]
;;;85     }
00000e  4770              BX       lr
;;;86     
                          ENDP

                  |L4.16|
                          DCD      0x40002804

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;93     *******************************************************************************/
;;;94     u32 RTC_GetCounter(void)
000000  2100              MOVS     r1,#0
;;;95     {
;;;96       u16 tmp = 0;
;;;97       tmp = RTC->CNTL;
000002  4803              LDR      r0,|L5.16|
000004  8801              LDRH     r1,[r0,#0]
;;;98     
;;;99       return (((u32)RTC->CNTH << 16 ) | tmp) ;
000006  1f00              SUBS     r0,r0,#4
000008  8800              LDRH     r0,[r0,#0]
00000a  ea414000          ORR      r0,r1,r0,LSL #16
;;;100    }
00000e  4770              BX       lr
;;;101    
                          ENDP

                  |L5.16|
                          DCD      0x4000281c

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;168    *******************************************************************************/
;;;169    u32 RTC_GetDivider(void)
000000  2000              MOVS     r0,#0
;;;170    {
;;;171      u32 tmp = 0x00;
;;;172    
;;;173      tmp = ((u32)RTC->DIVH & (u32)0x000F) << 16;
000002  4904              LDR      r1,|L6.20|
000004  8809              LDRH     r1,[r1,#0]
000006  0709              LSLS     r1,r1,#28
000008  0b08              LSRS     r0,r1,#12
;;;174      tmp |= RTC->DIVL;
00000a  4902              LDR      r1,|L6.20|
00000c  1d09              ADDS     r1,r1,#4
00000e  8809              LDRH     r1,[r1,#0]
000010  4308              ORRS     r0,r0,r1
;;;175    
;;;176      return tmp;
;;;177    }
000012  4770              BX       lr
;;;178    
                          ENDP

                  |L6.20|
                          DCD      0x40002810

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;228    *******************************************************************************/
;;;229    FlagStatus RTC_GetFlagStatus(u16 RTC_FLAG)
000000  4601              MOV      r1,r0
;;;230    {
;;;231      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;232      
;;;233      /* Check the parameters */
;;;234      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;235      
;;;236      if ((RTC->CRL & RTC_FLAG) != (u16)RESET)
000004  4a03              LDR      r2,|L7.20|
000006  8812              LDRH     r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L7.16|
;;;237      {
;;;238        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L7.18|
                  |L7.16|
;;;239      }
;;;240      else
;;;241      {
;;;242        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L7.18|
;;;243      }
;;;244      return bitstatus;
;;;245    }
000012  4770              BX       lr
;;;246    
                          ENDP

                  |L7.20|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;279    *******************************************************************************/
;;;280    ITStatus RTC_GetITStatus(u16 RTC_IT)
000000  4601              MOV      r1,r0
;;;281    {
;;;282      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;283    
;;;284      /* Check the parameters */
;;;285      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;286      
;;;287      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000004  4a06              LDR      r2,|L8.32|
000006  8812              LDRH     r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b2d0              UXTB     r0,r2
;;;288    
;;;289      if (((RTC->CRH & RTC_IT) != (u16)RESET) && (bitstatus != (u16)RESET))
00000c  4a04              LDR      r2,|L8.32|
00000e  1f12              SUBS     r2,r2,#4
000010  8812              LDRH     r2,[r2,#0]
000012  400a              ANDS     r2,r2,r1
000014  b112              CBZ      r2,|L8.28|
000016  b108              CBZ      r0,|L8.28|
;;;290      {
;;;291        bitstatus = SET;
000018  2001              MOVS     r0,#1
00001a  e000              B        |L8.30|
                  |L8.28|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = RESET;
00001c  2000              MOVS     r0,#0
                  |L8.30|
;;;296      }
;;;297      return bitstatus;
;;;298    }
00001e  4770              BX       lr
;;;299    
                          ENDP

                  |L8.32|
                          DCD      0x40002804

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;44     *******************************************************************************/
;;;45     void RTC_ITConfig(u16 RTC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L9.14|
;;;46     {
;;;47       /* Check the parameters */
;;;48       assert_param(IS_RTC_IT(RTC_IT));  
;;;49       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;50       
;;;51       if (NewState != DISABLE)
;;;52       {
;;;53         RTC->CRH |= RTC_IT;
000002  4a06              LDR      r2,|L9.28|
000004  8812              LDRH     r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L9.28|
00000a  801a              STRH     r2,[r3,#0]
00000c  e004              B        |L9.24|
                  |L9.14|
;;;54       }
;;;55       else
;;;56       {
;;;57         RTC->CRH &= (u16)~RTC_IT;
00000e  4a03              LDR      r2,|L9.28|
000010  8812              LDRH     r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L9.28|
000016  801a              STRH     r2,[r3,#0]
                  |L9.24|
;;;58       }
;;;59     }
000018  4770              BX       lr
;;;60     
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40002800

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;149    *******************************************************************************/
;;;150    void RTC_SetAlarm(u32 AlarmValue)
000000  b500              PUSH     {lr}
;;;151    {  
000002  4602              MOV      r2,r0
;;;152      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;153    
;;;154      /* Set the ALARM MSB word */
;;;155      RTC->ALRH = AlarmValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L10.24|
00000c  8008              STRH     r0,[r1,#0]
;;;156      /* Set the ALARM LSB word */
;;;157      RTC->ALRL = (AlarmValue & RTC_LSB_Mask);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;158    
;;;159      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;160    }
000016  bd00              POP      {pc}
;;;161    
                          ENDP

                  |L10.24|
                          DCD      0x40002820

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;108    *******************************************************************************/
;;;109    void RTC_SetCounter(u32 CounterValue)
000000  b500              PUSH     {lr}
;;;110    { 
000002  4602              MOV      r2,r0
;;;111      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;112    
;;;113      /* Set RTC COUNTER MSB word */
;;;114      RTC->CNTH = CounterValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L11.24|
00000c  8008              STRH     r0,[r1,#0]
;;;115      /* Set RTC COUNTER LSB word */
;;;116      RTC->CNTL = (CounterValue & RTC_LSB_Mask);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;117    
;;;118      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;119    }
000016  bd00              POP      {pc}
;;;120    
                          ENDP

                  |L11.24|
                          DCD      0x40002818

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;127    *******************************************************************************/
;;;128    void RTC_SetPrescaler(u32 PrescalerValue)
000000  b500              PUSH     {lr}
;;;129    {
000002  4602              MOV      r2,r0
;;;130      /* Check the parameters */
;;;131      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;132      
;;;133      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;134    
;;;135      /* Set RTC PRESCALER MSB word */
;;;136      RTC->PRLH = (PrescalerValue & PRLH_MSB_Mask) >> 16;
000008  f3c24003          UBFX     r0,r2,#16,#4
00000c  4903              LDR      r1,|L12.28|
00000e  8008              STRH     r0,[r1,#0]
;;;137      /* Set RTC PRESCALER LSB word */
;;;138      RTC->PRLL = (PrescalerValue & RTC_LSB_Mask);
000010  1d09              ADDS     r1,r1,#4
000012  800a              STRH     r2,[r1,#0]
;;;139    
;;;140      RTC_ExitConfigMode();
000014  f7fffffe          BL       RTC_ExitConfigMode
;;;141    }
000018  bd00              POP      {pc}
;;;142    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40002808

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;186    *******************************************************************************/
;;;187    void RTC_WaitForLastTask(void)
000000  bf00              NOP      
                  |L13.2|
;;;188    {
;;;189      /* Loop until RTOFF flag is set */
;;;190      while ((RTC->CRL & RTC_FLAG_RTOFF) == (u16)RESET)
000002  4803              LDR      r0,|L13.16|
000004  8800              LDRH     r0,[r0,#0]
000006  f0000020          AND      r0,r0,#0x20
00000a  2800              CMP      r0,#0
00000c  d0f9              BEQ      |L13.2|
;;;191      {
;;;192      }
;;;193    }
00000e  4770              BX       lr
;;;194    
                          ENDP

                  |L13.16|
                          DCD      0x40002804

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;204    *******************************************************************************/
;;;205    void RTC_WaitForSynchro(void)
000000  4807              LDR      r0,|L14.32|
;;;206    {
;;;207      /* Clear RSF flag */
;;;208      RTC->CRL &= (u16)~RTC_FLAG_RSF;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71f7          MOV      r1,#0xfff7
000008  4008              ANDS     r0,r0,r1
00000a  4905              LDR      r1,|L14.32|
00000c  8008              STRH     r0,[r1,#0]
;;;209    
;;;210      /* Loop until RSF flag is set */
;;;211      while ((RTC->CRL & RTC_FLAG_RSF) == (u16)RESET)
00000e  bf00              NOP      
                  |L14.16|
000010  4803              LDR      r0,|L14.32|
000012  8800              LDRH     r0,[r0,#0]
000014  f0000008          AND      r0,r0,#8
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L14.16|
;;;212      {
;;;213      }
;;;214    }
00001c  4770              BX       lr
;;;215    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x40002804
