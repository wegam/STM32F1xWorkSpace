; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_wdg.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_wdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_wdg.crf ..\..\Driver\WOW\SCR\STM32_WDG.C]
                          THUMB

                          AREA ||i.IWDG_Configuration||, CODE, READONLY, ALIGN=1

                  IWDG_Configuration PROC
;;;38     *******************************************************************************/
;;;39     void IWDG_Configuration(u32 Tout)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4604              MOV      r4,r0
;;;41     //	u32 Tout=0;
;;;42     	u8 Prescaler=3;																//分频值
000004  2603              MOVS     r6,#3
;;;43     	u16 Reload=0;																	//计数值
000006  2500              MOVS     r5,#0
;;;44     	
;;;45     	if(Tout*40/4/8<4095)
000008  eb040084          ADD      r0,r4,r4,LSL #2
00000c  00c0              LSLS     r0,r0,#3
00000e  f64071ff          MOV      r1,#0xfff
000012  ebb11f50          CMP      r1,r0,LSR #5
000016  d907              BLS      |L1.40|
;;;46     	{
;;;47     		Prescaler=3;
000018  bf00              NOP      
;;;48     		Reload=Tout*40/4/8;
00001a  eb040084          ADD      r0,r4,r4,LSL #2
00001e  00c0              LSLS     r0,r0,#3
000020  0880              LSRS     r0,r0,#2
000022  f3c005cf          UBFX     r5,r0,#3,#16
000026  e02e              B        |L1.134|
                  |L1.40|
;;;49     	}
;;;50     	else if(Tout*40/4/16<4095)
000028  eb040084          ADD      r0,r4,r4,LSL #2
00002c  00c0              LSLS     r0,r0,#3
00002e  f64071ff          MOV      r1,#0xfff
000032  ebb11f90          CMP      r1,r0,LSR #6
000036  d907              BLS      |L1.72|
;;;51     	{
;;;52     		Prescaler=4;
000038  2604              MOVS     r6,#4
;;;53     		Reload=Tout*40/4/16;
00003a  eb040084          ADD      r0,r4,r4,LSL #2
00003e  00c0              LSLS     r0,r0,#3
000040  0880              LSRS     r0,r0,#2
000042  f3c0150f          UBFX     r5,r0,#4,#16
000046  e01e              B        |L1.134|
                  |L1.72|
;;;54     	}
;;;55     	else if(Tout*40/4/32<4095)
000048  eb040084          ADD      r0,r4,r4,LSL #2
00004c  00c0              LSLS     r0,r0,#3
00004e  f64071ff          MOV      r1,#0xfff
000052  ebb11fd0          CMP      r1,r0,LSR #7
000056  d907              BLS      |L1.104|
;;;56     	{
;;;57     		Prescaler=5;
000058  2605              MOVS     r6,#5
;;;58     		Reload=Tout*40/4/32;
00005a  eb040084          ADD      r0,r4,r4,LSL #2
00005e  00c0              LSLS     r0,r0,#3
000060  0880              LSRS     r0,r0,#2
000062  f3c0154f          UBFX     r5,r0,#5,#16
000066  e00e              B        |L1.134|
                  |L1.104|
;;;59     	}
;;;60     	else if(Tout*40/4/64<4095)
000068  eb040084          ADD      r0,r4,r4,LSL #2
00006c  00c0              LSLS     r0,r0,#3
00006e  f64071ff          MOV      r1,#0xfff
000072  ebb12f10          CMP      r1,r0,LSR #8
000076  d906              BLS      |L1.134|
;;;61     	{
;;;62     		Prescaler=6;
000078  2606              MOVS     r6,#6
;;;63     		Reload=Tout*40/4/64;
00007a  eb040084          ADD      r0,r4,r4,LSL #2
00007e  00c0              LSLS     r0,r0,#3
000080  0880              LSRS     r0,r0,#2
000082  f3c0158f          UBFX     r5,r0,#6,#16
                  |L1.134|
;;;64     	}
;;;65     	if(Reload==0)
000086  b905              CBNZ     r5,|L1.138|
;;;66     		Reload=1;
000088  2501              MOVS     r5,#1
                  |L1.138|
;;;67     //	Reload=Tout*40/4/8<4095;
;;;68     	
;;;69     	//1--取消寄存器写保护
;;;70     	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);	//允许访问PR和RLR寄存器
00008a  f2455055          MOV      r0,#0x5555
00008e  f7fffffe          BL       IWDG_WriteAccessCmd
;;;71     	//2--设置看门狗时钟分频
;;;72     	IWDG_SetPrescaler(Prescaler);				//设置分频
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       IWDG_SetPrescaler
;;;73     	//3--设置重装载初值
;;;74     	IWDG_SetReload(Reload);													//设定计数器初值
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       IWDG_SetReload
;;;75     	//4--装入初值，加载计数
;;;76     	IWDG_ReloadCounter();
00009e  f7fffffe          BL       IWDG_ReloadCounter
;;;77     	//5--使能独立看门狗
;;;78     	IWDG_Enable();
0000a2  f7fffffe          BL       IWDG_Enable
;;;79     }
0000a6  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP


                          AREA ||i.IWDG_Feed||, CODE, READONLY, ALIGN=1

                  IWDG_Feed PROC
;;;88     *******************************************************************************/
;;;89     void IWDG_Feed(void)
000000  b510              PUSH     {r4,lr}
;;;90     {
;;;91     	IWDG_ReloadCounter();
000002  f7fffffe          BL       IWDG_ReloadCounter
;;;92     }
000006  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.WWDG_Configuration||, CODE, READONLY, ALIGN=1

                  WWDG_Configuration PROC
;;;112    *******************************************************************************/
;;;113    void WWDG_Configuration(void)
000000  4770              BX       lr
;;;114    {
;;;115    //	Tout
;;;116    //	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);	//允许访问PR和RLR寄存器
;;;117    //	IWDG_SetPrescaler(0);				//设置分频
;;;118    //	IWDG_SetReload(0);					//设定计数器初值
;;;119    //	IWDG_ReloadCounter();
;;;120    //	IWDG_Enable();
;;;121    }
;;;122    
                          ENDP


                          AREA ||i.WWDG_Feed||, CODE, READONLY, ALIGN=1

                  WWDG_Feed PROC
;;;130    *******************************************************************************/
;;;131    void WWDG_Feed(void)
000000  4770              BX       lr
;;;132    {
;;;133    //	IWDG_ReloadCounter();
;;;134    }
;;;135    
                          ENDP

