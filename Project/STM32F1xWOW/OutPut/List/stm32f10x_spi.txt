; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_spi.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_spi.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;360    *******************************************************************************/
;;;361    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;362    {
;;;363      /* Check the parameters */
;;;364      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;365      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;366    
;;;367      if (NewState != DISABLE)
;;;368      {
;;;369        /* Enable the selected SPI peripheral (in I2S mode) */
;;;370        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;371      }
;;;372      else
;;;373      {
;;;374        /* Disable the selected SPI peripheral (in I2S mode) */
;;;375        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;376      }
;;;377    }
000016  4770              BX       lr
;;;378    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=1

                  I2S_Init PROC
;;;163    ******************************************************************************/
;;;164    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;165    {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;166      u16 tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
00000a  f04f0900          MOV      r9,#0
00000e  2702              MOVS     r7,#2
000010  f04f0800          MOV      r8,#0
000014  f04f0a01          MOV      r10,#1
;;;167      u32 tmp = 0;
000018  2600              MOVS     r6,#0
;;;168      RCC_ClocksTypeDef RCC_Clocks;
;;;169       
;;;170      /* Check the I2S parameters */
;;;171      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;172      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;173      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;174      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;175      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;176      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;177      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;178    
;;;179    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;180    
;;;181      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;182      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00001a  8ba8              LDRH     r0,[r5,#0x1c]
00001c  f24f0140          MOV      r1,#0xf040
000020  4008              ANDS     r0,r0,r1
000022  83a8              STRH     r0,[r5,#0x1c]
;;;183      SPIx->I2SPR = 0x0002;
000024  2002              MOVS     r0,#2
000026  8428              STRH     r0,[r5,#0x20]
;;;184      
;;;185      /* Get the I2SCFGR register value */
;;;186      tmpreg = SPIx->I2SCFGR;
000028  f8b5901c          LDRH     r9,[r5,#0x1c]
;;;187      
;;;188      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;189      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00002c  8920              LDRH     r0,[r4,#8]
00002e  2802              CMP      r0,#2
000030  d101              BNE      |L2.54|
;;;190      {
;;;191        i2sodd = (u16)0;
000032  bf00              NOP      
;;;192        i2sdiv = (u16)2;   
000034  e031              B        |L2.154|
                  |L2.54|
;;;193      }
;;;194      /* If the requested audio frequency is not the default, compute the prescaler */
;;;195      else
;;;196      {
;;;197        /* Check the frame length (For the Prescaler computing) */
;;;198        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000036  88a0              LDRH     r0,[r4,#4]
000038  b910              CBNZ     r0,|L2.64|
;;;199        {
;;;200          /* Packet length is 16 bits */
;;;201          packetlength = 1;
00003a  f04f0a01          MOV      r10,#1
00003e  e001              B        |L2.68|
                  |L2.64|
;;;202        }
;;;203        else
;;;204        {
;;;205          /* Packet length is 32 bits */
;;;206          packetlength = 2;
000040  f04f0a02          MOV      r10,#2
                  |L2.68|
;;;207        }
;;;208        /* Get System Clock frequency */
;;;209        RCC_GetClocksFreq(&RCC_Clocks);
000044  a801              ADD      r0,sp,#4
000046  f7fffffe          BL       RCC_GetClocksFreq
;;;210        
;;;211        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;212        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00004a  88e0              LDRH     r0,[r4,#6]
00004c  f5b07f00          CMP      r0,#0x200
000050  d10a              BNE      |L2.104|
;;;213        {
;;;214          /* MCLK output is enabled */
;;;215          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
000052  9801              LDR      r0,[sp,#4]
000054  eb000080          ADD      r0,r0,r0,LSL #2
000058  0040              LSLS     r0,r0,#1
00005a  8921              LDRH     r1,[r4,#8]
00005c  0209              LSLS     r1,r1,#8
00005e  fbb0f0f1          UDIV     r0,r0,r1
000062  1d40              ADDS     r0,r0,#5
000064  b286              UXTH     r6,r0
000066  e00b              B        |L2.128|
                  |L2.104|
;;;216        }
;;;217        else
;;;218        {
;;;219          /* MCLK output is disabled */
;;;220          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
000068  ea4f104a          LSL      r0,r10,#5
00006c  8921              LDRH     r1,[r4,#8]
00006e  4348              MULS     r0,r1,r0
000070  9901              LDR      r1,[sp,#4]
000072  eb010181          ADD      r1,r1,r1,LSL #2
000076  0049              LSLS     r1,r1,#1
000078  fbb1f0f0          UDIV     r0,r1,r0
00007c  1d40              ADDS     r0,r0,#5
00007e  b286              UXTH     r6,r0
                  |L2.128|
;;;221        }
;;;222        
;;;223        /* Remove the flaoting point */
;;;224        tmp = tmp/10;  
000080  200a              MOVS     r0,#0xa
000082  fbb6f6f0          UDIV     r6,r6,r0
;;;225          
;;;226        /* Check the parity of the divider */
;;;227        i2sodd = (u16)(tmp & (u16)0x0001);
000086  f0060801          AND      r8,r6,#1
;;;228       
;;;229        /* Compute the i2sdiv prescaler */
;;;230        i2sdiv = (u16)((tmp - i2sodd) / 2);
00008a  eba60008          SUB      r0,r6,r8
00008e  f3c0074f          UBFX     r7,r0,#1,#16
;;;231       
;;;232        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;233        i2sodd = (u16) (i2sodd << 8);
000092  f64f70ff          MOV      r0,#0xffff
000096  ea002808          AND      r8,r0,r8,LSL #8
                  |L2.154|
;;;234      }
;;;235      
;;;236      /* Test if the divider is 1 or 0 */
;;;237      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
00009a  2f02              CMP      r7,#2
00009c  db01              BLT      |L2.162|
00009e  2fff              CMP      r7,#0xff
0000a0  dd02              BLE      |L2.168|
                  |L2.162|
;;;238      {
;;;239        /* Set the default values */
;;;240        i2sdiv = 2;
0000a2  2702              MOVS     r7,#2
;;;241        i2sodd = 0;
0000a4  f04f0800          MOV      r8,#0
                  |L2.168|
;;;242      }
;;;243    
;;;244      /* Write to SPIx I2SPR register the computed value */
;;;245      SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
0000a8  ea470008          ORR      r0,r7,r8
0000ac  88e1              LDRH     r1,[r4,#6]
0000ae  4308              ORRS     r0,r0,r1
0000b0  8428              STRH     r0,[r5,#0x20]
;;;246     
;;;247      /* Configure the I2S with the SPI_InitStruct values */
;;;248      tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
0000b2  8820              LDRH     r0,[r4,#0]
0000b4  f4406000          ORR      r0,r0,#0x800
0000b8  8861              LDRH     r1,[r4,#2]
0000ba  4308              ORRS     r0,r0,r1
0000bc  88a1              LDRH     r1,[r4,#4]
0000be  4308              ORRS     r0,r0,r1
0000c0  8961              LDRH     r1,[r4,#0xa]
0000c2  4308              ORRS     r0,r0,r1
0000c4  ea400909          ORR      r9,r0,r9
;;;249                      I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
;;;250                      I2S_InitStruct->I2S_CPOL);
;;;251     
;;;252      /* Write to SPIx I2SCFGR */  
;;;253      SPIx->I2SCFGR = tmpreg;                                    
0000c8  f8a5901c          STRH     r9,[r5,#0x1c]
;;;254    }
0000cc  b006              ADD      sp,sp,#0x18
0000ce  e8bd87f0          POP      {r4-r10,pc}
;;;255    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;302    *******************************************************************************/
;;;303    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;304    {
;;;305    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;306      /* Initialize the I2S_Mode member */
;;;307      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;308      
;;;309      /* Initialize the I2S_Standard member */
;;;310      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;311      
;;;312      /* Initialize the I2S_DataFormat member */
;;;313      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;314      
;;;315      /* Initialize the I2S_MCLKOutput member */
;;;316      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;317      
;;;318      /* Initialize the I2S_AudioFreq member */
;;;319      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  8101              STRH     r1,[r0,#8]
;;;320      
;;;321      /* Initialize the I2S_CPOL member */
;;;322      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8141              STRH     r1,[r0,#0xa]
;;;323    }
000012  4770              BX       lr
;;;324    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;682    *******************************************************************************/
;;;683    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, u16 SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;684    {
;;;685      /* Check the parameters */
;;;686      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;687      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;688    
;;;689      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L4.16|
;;;690      {
;;;691        /* Set the Tx only mode */
;;;692        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;693      }
;;;694      else
;;;695      {
;;;696        /* Set the Rx only mode */
;;;697        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L4.26|
;;;698      }
;;;699    }
00001a  4770              BX       lr
;;;700    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;600    *******************************************************************************/
;;;601    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;602    {
;;;603      /* Check the parameters */
;;;604      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;605      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;606    
;;;607      if (NewState != DISABLE)
;;;608      {
;;;609        /* Enable the selected SPI CRC calculation */
;;;610        SPIx->CR1 |= CR1_CRCEN_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Disable the selected SPI CRC calculation */
;;;615        SPIx->CR1 &= CR1_CRCEN_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L5.22|
;;;616      }
;;;617    }
000016  4770              BX       lr
;;;618    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;333    *******************************************************************************/
;;;334    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;335    {
;;;336      /* Check the parameters */
;;;337      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;338      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;339    
;;;340      if (NewState != DISABLE)
;;;341      {
;;;342        /* Enable the selected SPI peripheral */
;;;343        SPIx->CR1 |= CR1_SPE_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;344      }
;;;345      else
;;;346      {
;;;347        /* Disable the selected SPI peripheral */
;;;348        SPIx->CR1 &= CR1_SPE_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;349      }
;;;350    }
000016  4770              BX       lr
;;;351    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;562    *******************************************************************************/
;;;563    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, u16 SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;567      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;568    
;;;569      /* Clear DFF bit */
;;;570      SPIx->CR1 &= (u16)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;571      /* Set new DFF bit value */
;;;572      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;573    }
000010  4770              BX       lr
;;;574    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;630    *******************************************************************************/
;;;631    u16 SPI_GetCRC(SPI_TypeDef* SPIx, u8 SPI_CRC)
000000  4602              MOV      r2,r0
;;;632    {
;;;633      u16 crcreg = 0;
000002  2000              MOVS     r0,#0
;;;634    
;;;635      /* Check the parameters */
;;;636      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;637      assert_param(IS_SPI_CRC(SPI_CRC));
;;;638    
;;;639      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L8.12|
;;;640      {
;;;641        /* Get the Tx CRC register */
;;;642        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L8.14|
                  |L8.12|
;;;643      }
;;;644      else
;;;645      {
;;;646        /* Get the Rx CRC register */
;;;647        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L8.14|
;;;648      }
;;;649    
;;;650      /* Return the selected CRC register */
;;;651      return crcreg;
;;;652    }
00000e  4770              BX       lr
;;;653    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;660    *******************************************************************************/
;;;661    u16 SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;662    {
;;;663      /* Check the parameters */
;;;664      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;665      
;;;666      /* Return the CRC polynomial register */
;;;667      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;668    }
000004  4770              BX       lr
;;;669    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;759    *******************************************************************************/
;;;760    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
000000  2920              CMP      r1,#0x20
;;;761    {
;;;762      /* Check the parameters */
;;;763      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;764      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;765        
;;;766      /* SPI_FLAG_MODF flag clear */
;;;767      if(SPI_I2S_FLAG == SPI_FLAG_MODF)
000002  d105              BNE      |L10.16|
;;;768      {
;;;769        /* Read SR register */
;;;770        (void)SPIx->SR;
000004  8902              LDRH     r2,[r0,#8]
;;;771        
;;;772        /* Write on CR1 register */
;;;773        SPIx->CR1 |= CR1_SPE_Set; 
000006  8802              LDRH     r2,[r0,#0]
000008  f0420240          ORR      r2,r2,#0x40
00000c  8002              STRH     r2,[r0,#0]
00000e  e007              B        |L10.32|
                  |L10.16|
;;;774      }
;;;775      /* SPI_I2S_FLAG_OVR flag or I2S_FLAG_UDR flag clear */
;;;776      else if ((SPI_I2S_FLAG == SPI_I2S_FLAG_OVR) || (SPI_I2S_FLAG == I2S_FLAG_UDR))  
000010  2940              CMP      r1,#0x40
000012  d001              BEQ      |L10.24|
000014  2908              CMP      r1,#8
000016  d101              BNE      |L10.28|
                  |L10.24|
;;;777      {
;;;778        /* Read SR register  (Before clearing OVR flag, it is mandatory to read 
;;;779           SPI_I2S_DR register)*/
;;;780        (void)SPIx->SR;
000018  8902              LDRH     r2,[r0,#8]
00001a  e001              B        |L10.32|
                  |L10.28|
;;;781      }
;;;782      else /* SPI_FLAG_CRCERR flag clear */
;;;783      {
;;;784        /* Clear the selected SPI flag */
;;;785        SPIx->SR = (u16)~SPI_I2S_FLAG;
00001c  43ca              MVNS     r2,r1
00001e  8102              STRH     r2,[r0,#8]
                  |L10.32|
;;;786      }
;;;787    }
000020  4770              BX       lr
;;;788    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;854    *******************************************************************************/
;;;855    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;856    {
;;;857      u16 itpos = 0;
000002  2200              MOVS     r2,#0
;;;858    
;;;859      /* Check the parameters */
;;;860      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;861      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;862    
;;;863      /* SPI_IT_MODF pending bit clear */
;;;864      if(SPI_I2S_IT == SPI_IT_MODF)
000004  2955              CMP      r1,#0x55
000006  d105              BNE      |L11.20|
;;;865      {
;;;866        /* Read SR register */
;;;867        (void)SPIx->SR;
000008  8903              LDRH     r3,[r0,#8]
;;;868        /* Write on CR1 register */
;;;869        SPIx->CR1 |= CR1_SPE_Set; 
00000a  8803              LDRH     r3,[r0,#0]
00000c  f0430340          ORR      r3,r3,#0x40
000010  8003              STRH     r3,[r0,#0]
000012  e00c              B        |L11.46|
                  |L11.20|
;;;870      }
;;;871      /* SPI_I2S_IT_OVR or I2S_IT_UDR pending bit clear */ 
;;;872      else if((SPI_I2S_IT == SPI_I2S_IT_OVR) || (SPI_I2S_IT == I2S_IT_UDR))    
000014  2956              CMP      r1,#0x56
000016  d001              BEQ      |L11.28|
000018  2953              CMP      r1,#0x53
00001a  d101              BNE      |L11.32|
                  |L11.28|
;;;873      {
;;;874        /* Read SR register */
;;;875        (void)(SPIx->SR);
00001c  8903              LDRH     r3,[r0,#8]
00001e  e006              B        |L11.46|
                  |L11.32|
;;;876      }  
;;;877      else   /* SPI_IT_CRCERR pending bit clear */
;;;878      {
;;;879        /* Get the SPI/I2S IT index */
;;;880        itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
000020  f001040f          AND      r4,r1,#0xf
000024  2301              MOVS     r3,#1
000026  40a3              LSLS     r3,r3,r4
000028  b29a              UXTH     r2,r3
;;;881        /* Clear the selected SPI/I2S interrupt pending bits */
;;;882        SPIx->SR = (u16)~itpos;
00002a  43d3              MVNS     r3,r2
00002c  8103              STRH     r3,[r0,#8]
                  |L11.46|
;;;883      }
;;;884    }
00002e  bd10              POP      {r4,pc}
;;;885    
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;438    *******************************************************************************/
;;;439    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, u16 SPI_I2S_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L12.10|
;;;440    {
;;;441      /* Check the parameters */
;;;442      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;443      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;444      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;445    
;;;446      if (NewState != DISABLE)
;;;447      {
;;;448        /* Enable the selected SPI/I2S DMA requests */
;;;449        SPIx->CR2 |= SPI_I2S_DMAReq;
000002  8883              LDRH     r3,[r0,#4]
000004  430b              ORRS     r3,r3,r1
000006  8083              STRH     r3,[r0,#4]
000008  e002              B        |L12.16|
                  |L12.10|
;;;450      }
;;;451      else
;;;452      {
;;;453        /* Disable the selected SPI/I2S DMA requests */
;;;454        SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
00000a  8883              LDRH     r3,[r0,#4]
00000c  438b              BICS     r3,r3,r1
00000e  8083              STRH     r3,[r0,#4]
                  |L12.16|
;;;455      }
;;;456    }
000010  4770              BX       lr
;;;457    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;61     *******************************************************************************/
;;;62     void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;63     {
000002  4604              MOV      r4,r0
;;;64       /* Check the parameters */
;;;65       assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;66       
;;;67       switch (*(u32*)&SPIx)
000004  4814              LDR      r0,|L13.88|
000006  4420              ADD      r0,r0,r4
000008  b178              CBZ      r0,|L13.42|
00000a  f5b06f80          CMP      r0,#0x400
00000e  d016              BEQ      |L13.62|
000010  f5b04f78          CMP      r0,#0xf800
000014  d11d              BNE      |L13.82|
;;;68       {
;;;69         case SPI1_BASE:
;;;70           /* Enable SPI1 reset state */
;;;71           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000016  2101              MOVS     r1,#1
000018  0308              LSLS     r0,r1,#12
00001a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;72           /* Release SPI1 from reset state */
;;;73           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
00001e  2100              MOVS     r1,#0
000020  f44f5080          MOV      r0,#0x1000
000024  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;74           break;
000028  e014              B        |L13.84|
                  |L13.42|
;;;75     
;;;76         case SPI2_BASE:
;;;77           /* Enable SPI2 reset state */
;;;78           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  0388              LSLS     r0,r1,#14
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;79           /* Release SPI2 from reset state */
;;;80           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000032  2100              MOVS     r1,#0
000034  f44f4080          MOV      r0,#0x4000
000038  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;81           break;
00003c  e00a              B        |L13.84|
                  |L13.62|
;;;82     
;;;83         case SPI3_BASE:
;;;84           /* Enable SPI3 reset state */
;;;85           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003e  2101              MOVS     r1,#1
000040  03c8              LSLS     r0,r1,#15
000042  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;86           /* Release SPI3 from reset state */
;;;87           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000046  2100              MOVS     r1,#0
000048  f44f4000          MOV      r0,#0x8000
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;88           break;
000050  e000              B        |L13.84|
                  |L13.82|
;;;89     
;;;90         default:
;;;91           break;
000052  bf00              NOP      
                  |L13.84|
000054  bf00              NOP                            ;74
;;;92       }
;;;93     }
000056  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  |L13.88|
                          DCD      0xbfffc800

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;719    *******************************************************************************/
;;;720    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;721    {
;;;722      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;723    
;;;724      /* Check the parameters */
;;;725      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;726      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;727    
;;;728      /* Check the status of the specified SPI/I2S flag */
;;;729      if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L14.14|
;;;730      {
;;;731        /* SPI_I2S_FLAG is set */
;;;732        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;733      }
;;;734      else
;;;735      {
;;;736        /* SPI_I2S_FLAG is reset */
;;;737        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;738      }
;;;739      /* Return the SPI_I2S_FLAG status */
;;;740      return  bitstatus;
;;;741    }
000010  4770              BX       lr
;;;742    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;805    *******************************************************************************/
;;;806    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;807    {
000002  4602              MOV      r2,r0
;;;808      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;809      u16 itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;810    
;;;811      /* Check the parameters */
;;;812      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;813      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;814    
;;;815      /* Get the SPI/I2S IT index */
;;;816      itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;817    
;;;818      /* Get the SPI/I2S IT mask */
;;;819      itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;820      /* Set the IT mask */
;;;821      itmask = (u16)((u16)0x01 << itmask);
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;822      /* Get the SPI_I2S_IT enable bit status */
;;;823      enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;824    
;;;825      /* Check the status of the specified SPI/I2S interrupt */
;;;826      if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4026              ANDS     r6,r6,r4
000028  b116              CBZ      r6,|L15.48|
00002a  b10d              CBZ      r5,|L15.48|
;;;827      {
;;;828        /* SPI_I2S_IT is set */
;;;829        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L15.50|
                  |L15.48|
;;;830      }
;;;831      else
;;;832      {
;;;833        /* SPI_I2S_IT is reset */
;;;834        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L15.50|
;;;835      }
;;;836      /* Return the SPI_I2S_IT status */
;;;837      return bitstatus;
;;;838    }
000032  bdf0              POP      {r4-r7,pc}
;;;839    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;395    *******************************************************************************/
;;;396    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, u8 SPI_I2S_IT, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;397    {
;;;398      u16 itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;399    
;;;400      /* Check the parameters */
;;;401      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;402      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;403      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;404    
;;;405      /* Get the SPI/I2S IT index */
;;;406      itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;407      /* Set the IT mask */
;;;408      itmask = (u16)((u16)1 << itpos);
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;409    
;;;410      if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L16.24|
;;;411      {
;;;412        /* Enable the selected SPI/I2S interrupt */
;;;413        SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e002              B        |L16.30|
                  |L16.24|
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Disable the selected SPI/I2S interrupt */
;;;418        SPIx->CR2 &= (u16)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  439d              BICS     r5,r5,r3
00001c  8085              STRH     r5,[r0,#4]
                  |L16.30|
;;;419      }
;;;420    }
00001e  bd30              POP      {r4,r5,pc}
;;;421    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;485    *******************************************************************************/
;;;486    u16 SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;490      
;;;491      /* Return the data in the DR register */
;;;492      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;493    }
000004  4770              BX       lr
;;;494    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;467    *******************************************************************************/
;;;468    void SPI_I2S_SendData(SPI_TypeDef* SPIx, u16 Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;469    {
;;;470      /* Check the parameters */
;;;471      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;472      
;;;473      /* Write in the DR register the data to be sent */
;;;474      SPIx->DR = Data;
;;;475    }
000002  4770              BX       lr
;;;476    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;105    ******************************************************************************/
;;;106    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108      u16 tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;109      
;;;110      /* check the parameters */
;;;111      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;112      
;;;113      /* Check the SPI parameters */
;;;114      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;115      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;116      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;117      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;118      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;119      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;120      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;121      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;122      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;123    
;;;124    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;125      /* Get the SPIx CR1 value */
;;;126      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;127      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;128      tmpreg &= CR1_CLEAR_Mask;
000006  f4025241          AND      r2,r2,#0x3040
;;;129      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;130         master/salve mode, CPOL and CPHA */
;;;131      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;132      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;133      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;134      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;135      /* Set CPOL bit according to SPI_CPOL value */
;;;136      /* Set CPHA bit according to SPI_CPHA value */
;;;137      tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;138                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;139                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;140                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;141      /* Write to SPIx CR1 */
;;;142      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;143      
;;;144      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;145      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;146    
;;;147    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;148      /* Write to SPIx CRCPOLY */
;;;149      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;150    }
00003a  bd10              POP      {r4,pc}
;;;151    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;506    *******************************************************************************/
;;;507    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, u16 SPI_NSSInternalSoft)
000000  f64f62ff          MOV      r2,#0xfeff
;;;508    {
;;;509      /* Check the parameters */
;;;510      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;511      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;512    
;;;513      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  4291              CMP      r1,r2
000006  d004              BEQ      |L20.18|
;;;514      {
;;;515        /* Set NSS pin internally by software */
;;;516        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L20.28|
                  |L20.18|
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Reset NSS pin internally by software */
;;;521        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L20.28|
;;;522      }
;;;523    }
00001c  4770              BX       lr
;;;524    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;533    *******************************************************************************/
;;;534    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;535    {
;;;536      /* Check the parameters */
;;;537      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;538      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;539    
;;;540      if (NewState != DISABLE)
;;;541      {
;;;542        /* Enable the selected SPI SS output */
;;;543        SPIx->CR2 |= CR2_SSOE_Set;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L21.22|
                  |L21.12|
;;;544      }
;;;545      else
;;;546      {
;;;547        /* Disable the selected SPI SS output */
;;;548        SPIx->CR2 &= CR2_SSOE_Reset;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L21.22|
;;;549      }
;;;550    }
000016  4770              BX       lr
;;;551    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;263    *******************************************************************************/
;;;264    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;265    {
;;;266    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;267      /* Initialize the SPI_Direction member */
;;;268      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;269    
;;;270      /* initialize the SPI_Mode member */
;;;271      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;272    
;;;273      /* initialize the SPI_DataSize member */
;;;274      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;275    
;;;276      /* Initialize the SPI_CPOL member */
;;;277      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;278    
;;;279      /* Initialize the SPI_CPHA member */
;;;280      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;281    
;;;282      /* Initialize the SPI_NSS member */
;;;283      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;284    
;;;285      /* Initialize the SPI_BaudRatePrescaler member */
;;;286      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;287    
;;;288      /* Initialize the SPI_FirstBit member */
;;;289      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;290    
;;;291      /* Initialize the SPI_CRCPolynomial member */
;;;292      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;293    }
000016  4770              BX       lr
;;;294    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;581    *******************************************************************************/
;;;582    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;583    {
;;;584      /* Check the parameters */
;;;585      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;586      
;;;587      /* Enable the selected SPI CRC transmission */
;;;588      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;589    }
000008  4770              BX       lr
;;;590    
                          ENDP

