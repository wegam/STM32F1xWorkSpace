; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_tim.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_tim.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_tim.crf ..\..\Driver\WOW\SCR\STM32_TIM.C]
                          THUMB

                          AREA ||i.TIM_Configuration||, CODE, READONLY, ALIGN=2

                  TIM_Configuration PROC
;;;345    *******************************************************************************/
;;;346    void TIM_Configuration(TIM_TypeDef* TIMx,u16 Prescaler,u16 Period)	//定时时间设定
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;347    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;348    	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义
;;;349    	NVIC_InitTypeDef	NVIC_InitStructure;						//中断结构体
;;;350    	u8 TIM_IRQChannel=0;
00000a  2700              MOVS     r7,#0
;;;351    	//1)**********定义相关变量	
;;;352    	switch (*(u32*)&TIMx)
00000c  4942              LDR      r1,|L1.280|
00000e  1a60              SUBS     r0,r4,r1
000010  428c              CMP      r4,r1
000012  d035              BEQ      |L1.128|
000014  dc0c              BGT      |L1.48|
000016  f1b44f80          CMP      r4,#0x40000000
00001a  d019              BEQ      |L1.80|
00001c  483f              LDR      r0,|L1.284|
00001e  4420              ADD      r0,r0,r4
000020  b1e0              CBZ      r0,|L1.92|
000022  f5b06f80          CMP      r0,#0x400
000026  d01f              BEQ      |L1.104|
000028  f5b06f00          CMP      r0,#0x800
00002c  d13a              BNE      |L1.164|
00002e  e021              B        |L1.116|
                  |L1.48|
000030  f5b06f80          CMP      r0,#0x400
000034  d02a              BEQ      |L1.140|
000036  f5b03f8e          CMP      r0,#0x11c00
00003a  d003              BEQ      |L1.68|
00003c  f5b03f92          CMP      r0,#0x12400
000040  d130              BNE      |L1.164|
000042  e029              B        |L1.152|
                  |L1.68|
;;;353    	{
;;;354    		case TIM1_BASE:
;;;355    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
000044  2101              MOVS     r1,#1
000046  02c8              LSLS     r0,r1,#11
000048  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;356    			TIM_IRQChannel=TIM1_UP_IRQChannel;
00004c  2719              MOVS     r7,#0x19
;;;357    			break;
00004e  e02a              B        |L1.166|
                  |L1.80|
;;;358    		
;;;359    		case TIM2_BASE:
;;;360    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000050  2101              MOVS     r1,#1
000052  4608              MOV      r0,r1
000054  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;361    			TIM_IRQChannel=TIM2_IRQChannel;
000058  271c              MOVS     r7,#0x1c
;;;362    			break;
00005a  e024              B        |L1.166|
                  |L1.92|
;;;363    		
;;;364    		case TIM3_BASE:
;;;365    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00005c  2101              MOVS     r1,#1
00005e  2002              MOVS     r0,#2
000060  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;366    			TIM_IRQChannel=TIM3_IRQChannel;
000064  271d              MOVS     r7,#0x1d
;;;367    			break;
000066  e01e              B        |L1.166|
                  |L1.104|
;;;368    		
;;;369    		case TIM4_BASE:
;;;370    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000068  2101              MOVS     r1,#1
00006a  2004              MOVS     r0,#4
00006c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;371    			TIM_IRQChannel=TIM4_IRQChannel;
000070  271e              MOVS     r7,#0x1e
;;;372    			break;
000072  e018              B        |L1.166|
                  |L1.116|
;;;373    		
;;;374    		case TIM5_BASE:
;;;375    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
000074  2101              MOVS     r1,#1
000076  2008              MOVS     r0,#8
000078  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;376    			TIM_IRQChannel=TIM5_IRQChannel;
00007c  2732              MOVS     r7,#0x32
;;;377    			break;
00007e  e012              B        |L1.166|
                  |L1.128|
;;;378    		
;;;379    		case TIM6_BASE:
;;;380    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
000080  2101              MOVS     r1,#1
000082  2010              MOVS     r0,#0x10
000084  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;381    			TIM_IRQChannel=TIM6_IRQChannel;
000088  2736              MOVS     r7,#0x36
;;;382    			break;
00008a  e00c              B        |L1.166|
                  |L1.140|
;;;383    		
;;;384    		case TIM7_BASE:
;;;385    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  2020              MOVS     r0,#0x20
000090  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;386    			TIM_IRQChannel=TIM7_IRQChannel;
000094  2737              MOVS     r7,#0x37
;;;387    			break;
000096  e006              B        |L1.166|
                  |L1.152|
;;;388    		
;;;389    		case TIM8_BASE:
;;;390    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
000098  2101              MOVS     r1,#1
00009a  0348              LSLS     r0,r1,#13
00009c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;391    			TIM_IRQChannel=TIM8_UP_IRQChannel;
0000a0  272c              MOVS     r7,#0x2c
;;;392    			break;
0000a2  e000              B        |L1.166|
                  |L1.164|
;;;393    		
;;;394    		default:
;;;395    			break;
0000a4  bf00              NOP      
                  |L1.166|
0000a6  bf00              NOP                            ;357
;;;396    		
;;;397    	}
;;;398    	
;;;399    	TIMx_RCC_ENABLE(TIMx);													//打开相应定时器时钟
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       TIMx_RCC_ENABLE
;;;400    	//1)**********定义相关变量	
;;;401    	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler-1; 		// 设定分频值
0000ae  1e68              SUBS     r0,r5,#1
0000b0  b280              UXTH     r0,r0
0000b2  f8ad0004          STRH     r0,[sp,#4]
;;;402    	TIM_TimeBaseStructure.TIM_Period = Period-1;        	//设定自动重装载值
0000b6  1e70              SUBS     r0,r6,#1
0000b8  b280              UXTH     r0,r0
0000ba  f8ad0008          STRH     r0,[sp,#8]
;;;403    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  //不分割
0000be  2000              MOVS     r0,#0
0000c0  f8ad000a          STRH     r0,[sp,#0xa]
;;;404    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
0000c4  f8ad0006          STRH     r0,[sp,#6]
;;;405    	//	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;	//????,???????????????????-??????????
;;;406    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化
0000c8  a901              ADD      r1,sp,#4
0000ca  4620              MOV      r0,r4
0000cc  f7fffffe          BL       TIM_TimeBaseInit
;;;407    	//1)**********定义相关变量	
;;;408    	TIM_ARRPreloadConfig(TIMx, ENABLE);
0000d0  2101              MOVS     r1,#1
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       TIM_ARRPreloadConfig
;;;409    	TIM_Cmd(TIMx, ENABLE); 
0000d8  2101              MOVS     r1,#1
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       TIM_Cmd
;;;410    	
;;;411    	//1)**********定义相关变量	
;;;412    	NVIC_InitStructure.NVIC_IRQChannel = TIM_IRQChannel;
0000e0  f88d7000          STRB     r7,[sp,#0]
;;;413    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
0000e4  2000              MOVS     r0,#0
0000e6  f88d0001          STRB     r0,[sp,#1]
;;;414    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
0000ea  f88d0002          STRB     r0,[sp,#2]
;;;415    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000ee  2001              MOVS     r0,#1
0000f0  f88d0003          STRB     r0,[sp,#3]
;;;416    	NVIC_Init(&NVIC_InitStructure);
0000f4  4668              MOV      r0,sp
0000f6  f7fffffe          BL       NVIC_Init
;;;417    	
;;;418    	/* Clear TIMx update pending flag[清除TIMx溢出中断] */
;;;419    	TIM_ClearFlag(TIMx, TIM_FLAG_Update);
0000fa  2101              MOVS     r1,#1
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       TIM_ClearFlag
;;;420    
;;;421    	/* Enable TIM2 Update interrupt [TIMx溢出中断允许]*/
;;;422    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE); 
000102  2201              MOVS     r2,#1
000104  4611              MOV      r1,r2
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       TIM_ITConfig
;;;423    
;;;424    	/* TIM2 enable counter [使能TIMx计数]*/
;;;425    	TIM_Cmd(TIMx, ENABLE);	//使能TIMx计数
00010c  2101              MOVS     r1,#1
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       TIM_Cmd
;;;426    }
000114  e8bd81ff          POP      {r0-r8,pc}
;;;427    /*******************************************************************************
                          ENDP

                  |L1.280|
                          DCD      0x40001000
                  |L1.284|
                          DCD      0xbffffc00

                          AREA ||i.TIM_ConfigurationFreq||, CODE, READONLY, ALIGN=2

                  TIM_ConfigurationFreq PROC
;;;42     *******************************************************************************/
;;;43     void TIM_ConfigurationFreq(TIM_TypeDef* TIMx,u32 Frequency)		//定时器频率配置方式，最小频率1Hz,最大100KHz
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;44     {
000004  b08a              SUB      sp,sp,#0x28
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
;;;45     	//*1,结构体定义
;;;46     	//*2,变量定义
;;;47     	//*3,管脚确认
;;;48     	//*4,打开相应的时钟
;;;49     	//*5,管脚配置（初始化）
;;;50     	//*6,定时器配置（初始化）
;;;51     	//*7,PWM输出配置（初始化）
;;;52     	//*8,占空比配置	
;;;53     		
;;;54     	//*1,结构体定义***********************************************************************
;;;55     	//1）============================结构体定义
;;;56     //	GPIO_InitTypeDef GPIO_InitStructure;
;;;57     	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义	
;;;58     	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值
;;;59     	NVIC_InitTypeDef	NVIC_InitStructure;						//中断结构体
;;;60     	
;;;61     	//1）============================临时变量定义
;;;62     
;;;63     //	u16 GPIO_Pin_n				=	PWM_Tim->PWM_BasicData.GPIO_Pin_n;
;;;64     //	double PWM_Frequency	=	2*(PWM_Tim->PWM_BasicData.PWM_Frequency);
;;;65     	
;;;66     	u8 TIM_IRQChannel=0;
00000a  f04f0800          MOV      r8,#0
;;;67     	u32	Tim_temp				=	2*Frequency;	//由于翻转需要双倍频率
00000e  007c              LSLS     r4,r7,#1
;;;68     	u32	TIMx_Frequency				=	0;			//	定时器时钟
000010  2500              MOVS     r5,#0
;;;69     	u16 TIMx_Prescaler				=	0	;			//	定时器时钟分频值		取值范围：0x0000~0xFFFF
000012  46a9              MOV      r9,r5
;;;70       u16 TIMx_Period						=	0	;			//	定时器自动重装载值	取值范围：0x0000~0xFFFF
000014  46aa              MOV      r10,r5
;;;71     
;;;72     
;;;73     
;;;74     	//1）============================打开定时器时钟
;;;75     	switch ((u32)TIMx)
000016  4969              LDR      r1,|L2.444|
000018  1a70              SUBS     r0,r6,r1
00001a  428e              CMP      r6,r1
00001c  d03d              BEQ      |L2.154|
00001e  dc0c              BGT      |L2.58|
000020  f1b64f80          CMP      r6,#0x40000000
000024  d01d              BEQ      |L2.98|
000026  4866              LDR      r0,|L2.448|
000028  4430              ADD      r0,r0,r6
00002a  b308              CBZ      r0,|L2.112|
00002c  f5b06f80          CMP      r0,#0x400
000030  d025              BEQ      |L2.126|
000032  f5b06f00          CMP      r0,#0x800
000036  d148              BNE      |L2.202|
000038  e028              B        |L2.140|
                  |L2.58|
00003a  f5b06f80          CMP      r0,#0x400
00003e  d033              BEQ      |L2.168|
000040  f5b03f8e          CMP      r0,#0x11c00
000044  d003              BEQ      |L2.78|
000046  f5b03f92          CMP      r0,#0x12400
00004a  d13e              BNE      |L2.202|
00004c  e033              B        |L2.182|
                  |L2.78|
;;;76     	{
;;;77     		case TIM1_BASE:
;;;78     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
00004e  2101              MOVS     r1,#1
000050  02c8              LSLS     r0,r1,#11
000052  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;79     			TIM_IRQChannel=TIM1_UP_IRQChannel;	
000056  f04f0819          MOV      r8,#0x19
;;;80     			TIM_TimeBaseStructure.TIM_RepetitionCounter	=	0;
00005a  2000              MOVS     r0,#0
00005c  f88d0024          STRB     r0,[sp,#0x24]
;;;81     			break;
000060  e034              B        |L2.204|
                  |L2.98|
;;;82     		
;;;83     		case TIM2_BASE:
;;;84     			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000062  2101              MOVS     r1,#1
000064  4608              MOV      r0,r1
000066  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;85     			TIM_IRQChannel=TIM2_IRQChannel;
00006a  f04f081c          MOV      r8,#0x1c
;;;86     			break;
00006e  e02d              B        |L2.204|
                  |L2.112|
;;;87     		
;;;88     		case TIM3_BASE:
;;;89     			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000070  2101              MOVS     r1,#1
000072  2002              MOVS     r0,#2
000074  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;90     			TIM_IRQChannel=TIM3_IRQChannel;
000078  f04f081d          MOV      r8,#0x1d
;;;91     			break;
00007c  e026              B        |L2.204|
                  |L2.126|
;;;92     		
;;;93     		case TIM4_BASE:
;;;94     			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
00007e  2101              MOVS     r1,#1
000080  2004              MOVS     r0,#4
000082  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;95     			TIM_IRQChannel=TIM4_IRQChannel;
000086  f04f081e          MOV      r8,#0x1e
;;;96     			break;
00008a  e01f              B        |L2.204|
                  |L2.140|
;;;97     		
;;;98     		case TIM5_BASE:
;;;99     			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  2008              MOVS     r0,#8
000090  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;100    			TIM_IRQChannel=TIM5_IRQChannel;
000094  f04f0832          MOV      r8,#0x32
;;;101    			break;
000098  e018              B        |L2.204|
                  |L2.154|
;;;102    		
;;;103    		case TIM6_BASE:
;;;104    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  2010              MOVS     r0,#0x10
00009e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;105    			TIM_IRQChannel=TIM6_IRQChannel;
0000a2  f04f0836          MOV      r8,#0x36
;;;106    			break;
0000a6  e011              B        |L2.204|
                  |L2.168|
;;;107    		
;;;108    		case TIM7_BASE:
;;;109    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  2020              MOVS     r0,#0x20
0000ac  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;110    			TIM_IRQChannel=TIM7_IRQChannel;
0000b0  f04f0837          MOV      r8,#0x37
;;;111    			break;
0000b4  e00a              B        |L2.204|
                  |L2.182|
;;;112    		
;;;113    		case TIM8_BASE:
;;;114    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
0000b6  2101              MOVS     r1,#1
0000b8  0348              LSLS     r0,r1,#13
0000ba  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;115    			TIM_IRQChannel=TIM8_UP_IRQChannel;
0000be  f04f082c          MOV      r8,#0x2c
;;;116    			TIM_TimeBaseStructure.TIM_RepetitionCounter	=	0;
0000c2  2000              MOVS     r0,#0
0000c4  f88d0024          STRB     r0,[sp,#0x24]
;;;117    			break;
0000c8  e000              B        |L2.204|
                  |L2.202|
;;;118    		
;;;119    		default:
;;;120    			break;		
0000ca  bf00              NOP      
                  |L2.204|
0000cc  bf00              NOP                            ;81
;;;121    	}
;;;122    	//1）============================获取TIMx时钟频率
;;;123    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;124    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;125    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
0000ce  a802              ADD      r0,sp,#8
0000d0  f7fffffe          BL       RCC_GetClocksFreq
;;;126    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;
0000d4  9d02              LDR      r5,[sp,#8]
;;;127    	if ((((u32)TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
0000d6  483b              LDR      r0,|L2.452|
0000d8  4030              ANDS     r0,r0,r6
0000da  493a              LDR      r1,|L2.452|
0000dc  4288              CMP      r0,r1
0000de  d101              BNE      |L2.228|
;;;128      {
;;;129        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2
0000e0  9d05              LDR      r5,[sp,#0x14]
0000e2  e000              B        |L2.230|
                  |L2.228|
;;;130      }
;;;131      else
;;;132      {
;;;133        TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1
0000e4  9d04              LDR      r5,[sp,#0x10]
                  |L2.230|
;;;134      }
;;;135    	//1）============================计算分频值和重装载值
;;;136    //	TIMx_Frequency = 72000000;
;;;137    	//*6.2.4,计算定时器参数*********************************************************************
;;;138    	//Fsys==Fpwm*Count==Fpwm*(Prescaler*Period)	
;;;139    	//	TIMx_Prescaler				=	72-1		;		// 	定时器时钟分频值
;;;140    	//	TIMx_Period						=	1000-1	;		// 	定时器自动重装载值
;;;141    	//	Tim_num1							=	0				;		//	临时变量1
;;;142    	if(Tim_temp>100000)		//>100KHz
0000e6  4838              LDR      r0,|L2.456|
0000e8  4284              CMP      r4,r0
0000ea  d907              BLS      |L2.252|
;;;143    	{
;;;144    		TIMx_Prescaler=0;
0000ec  f04f0900          MOV      r9,#0
;;;145    		TIMx_Period=(u16)(TIMx_Frequency/Tim_temp-1);
0000f0  fbb5f0f4          UDIV     r0,r5,r4
0000f4  1e40              SUBS     r0,r0,#1
0000f6  fa1ffa80          UXTH     r10,r0
0000fa  e035              B        |L2.360|
                  |L2.252|
;;;146    	}
;;;147    	else if(Tim_temp>1000)	//>1KHz
0000fc  f5b47f7a          CMP      r4,#0x3e8
000100  d90a              BLS      |L2.280|
;;;148    	{
;;;149    		TIMx_Prescaler=10-1;
000102  f04f0909          MOV      r9,#9
;;;150    		TIMx_Period=(u16)((TIMx_Frequency/Tim_temp)/10-1);
000106  fbb5f0f4          UDIV     r0,r5,r4
00010a  210a              MOVS     r1,#0xa
00010c  fbb0f0f1          UDIV     r0,r0,r1
000110  1e40              SUBS     r0,r0,#1
000112  fa1ffa80          UXTH     r10,r0
000116  e027              B        |L2.360|
                  |L2.280|
;;;151    	}
;;;152    	else if(Tim_temp>100)		//>100Hz
000118  2c64              CMP      r4,#0x64
00011a  d90a              BLS      |L2.306|
;;;153    	{
;;;154    		TIMx_Prescaler=100-1;
00011c  f04f0963          MOV      r9,#0x63
;;;155    		TIMx_Period=(u16)((TIMx_Frequency/Tim_temp)/100-1);
000120  fbb5f0f4          UDIV     r0,r5,r4
000124  2164              MOVS     r1,#0x64
000126  fbb0f0f1          UDIV     r0,r0,r1
00012a  1e40              SUBS     r0,r0,#1
00012c  fa1ffa80          UXTH     r10,r0
000130  e01a              B        |L2.360|
                  |L2.306|
;;;156    	}
;;;157    	else if(Tim_temp>10)		//>10Hz
000132  2c0a              CMP      r4,#0xa
000134  d90b              BLS      |L2.334|
;;;158    	{
;;;159    		TIMx_Prescaler=1000-1;
000136  f24039e7          MOV      r9,#0x3e7
;;;160    		TIMx_Period=(u16)((TIMx_Frequency/Tim_temp)/1000-1);
00013a  fbb5f0f4          UDIV     r0,r5,r4
00013e  f44f717a          MOV      r1,#0x3e8
000142  fbb0f0f1          UDIV     r0,r0,r1
000146  1e40              SUBS     r0,r0,#1
000148  fa1ffa80          UXTH     r10,r0
00014c  e00c              B        |L2.360|
                  |L2.334|
;;;161    	}
;;;162    	else if(Tim_temp<=10)		//<=10Hz
00014e  2c0a              CMP      r4,#0xa
000150  d80a              BHI      |L2.360|
;;;163    	{
;;;164    		TIMx_Prescaler=2000-1;
000152  f24079cf          MOV      r9,#0x7cf
;;;165    		TIMx_Period=(u16)((TIMx_Frequency/Tim_temp)/2000-1);
000156  fbb5f0f4          UDIV     r0,r5,r4
00015a  f44f61fa          MOV      r1,#0x7d0
00015e  fbb0f0f1          UDIV     r0,r0,r1
000162  1e40              SUBS     r0,r0,#1
000164  fa1ffa80          UXTH     r10,r0
                  |L2.360|
;;;166    	}
;;;167    	
;;;168    //	TIMx_Prescaler=0;
;;;169    //	TIMx_Period=(u16)(5-1);
;;;170    	
;;;171    	//6.3定时器初始化*********************************************************************
;;;172    	TIM_TimeBaseStructure.TIM_Prescaler = TIMx_Prescaler; 				//设定分频值
000168  f8ad901c          STRH     r9,[sp,#0x1c]
;;;173    	TIM_TimeBaseStructure.TIM_Period 		= TIMx_Period;        		//设定自动重装载值
00016c  f8ada020          STRH     r10,[sp,#0x20]
;;;174    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  				//不分割
000170  2000              MOVS     r0,#0
000172  f8ad0022          STRH     r0,[sp,#0x22]
;;;175    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  		//向上计数
000176  f8ad001e          STRH     r0,[sp,#0x1e]
;;;176    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化	
00017a  a907              ADD      r1,sp,#0x1c
00017c  4630              MOV      r0,r6
00017e  f7fffffe          BL       TIM_TimeBaseInit
;;;177    		
;;;178    	//*6,中断配置============================================================================
;;;179    	NVIC_InitStructure.NVIC_IRQChannel = TIM_IRQChannel;
000182  f88d8004          STRB     r8,[sp,#4]
;;;180    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000186  2000              MOVS     r0,#0
000188  f88d0005          STRB     r0,[sp,#5]
;;;181    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00018c  f88d0006          STRB     r0,[sp,#6]
;;;182    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000190  2001              MOVS     r0,#1
000192  f88d0007          STRB     r0,[sp,#7]
;;;183    	NVIC_Init(&NVIC_InitStructure);
000196  a801              ADD      r0,sp,#4
000198  f7fffffe          BL       NVIC_Init
;;;184    	
;;;185    	/* Clear TIMx update pending flag[清除TIMx溢出中断] */
;;;186    	TIM_ClearFlag(TIMx, TIM_FLAG_Update);
00019c  2101              MOVS     r1,#1
00019e  4630              MOV      r0,r6
0001a0  f7fffffe          BL       TIM_ClearFlag
;;;187    
;;;188    	/* Enable TIM2 Update interrupt [TIMx溢出中断允许]*/
;;;189    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE); 
0001a4  2201              MOVS     r2,#1
0001a6  4611              MOV      r1,r2
0001a8  4630              MOV      r0,r6
0001aa  f7fffffe          BL       TIM_ITConfig
;;;190    	
;;;191    	TIM_Cmd(TIMx, DISABLE); 									//使能TIM
0001ae  2100              MOVS     r1,#0
0001b0  4630              MOV      r0,r6
0001b2  f7fffffe          BL       TIM_Cmd
;;;192    }
0001b6  b00a              ADD      sp,sp,#0x28
0001b8  e8bd87f0          POP      {r4-r10,pc}
;;;193    
                          ENDP

                  |L2.444|
                          DCD      0x40001000
                  |L2.448|
                          DCD      0xbffffc00
                  |L2.452|
                          DCD      0x40010000
                  |L2.456|
                          DCD      0x000186a0

                          AREA ||i.TIM_Interrupt||, CODE, READONLY, ALIGN=2

                  TIM_Interrupt PROC
;;;514    *******************************************************************************/
;;;515    void TIM_Interrupt(TIM_TypeDef* TIMx,u16 Prescaler,u16 Period)
000000  b5f8              PUSH     {r3-r7,lr}
;;;516    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;517    	NVIC_InitTypeDef	NVIC_InitStructure;
;;;518    	u8 TIM_IRQChannel=0;
000008  2700              MOVS     r7,#0
;;;519    	assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;520    	
;;;521    	TIM_Configuration(TIMx,Prescaler,Period);
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       TIM_Configuration
;;;522    	
;;;523    	switch (*(u32*)&TIMx)
000014  4924              LDR      r1,|L3.168|
000016  1a60              SUBS     r0,r4,r1
000018  428c              CMP      r4,r1
00001a  d021              BEQ      |L3.96|
00001c  dc0c              BGT      |L3.56|
00001e  f1b44f80          CMP      r4,#0x40000000
000022  d015              BEQ      |L3.80|
000024  4821              LDR      r0,|L3.172|
000026  4420              ADD      r0,r0,r4
000028  b1a0              CBZ      r0,|L3.84|
00002a  f5b06f80          CMP      r0,#0x400
00002e  d013              BEQ      |L3.88|
000030  f5b06f00          CMP      r0,#0x800
000034  d11a              BNE      |L3.108|
000036  e011              B        |L3.92|
                  |L3.56|
000038  f5b06f80          CMP      r0,#0x400
00003c  d012              BEQ      |L3.100|
00003e  f5b03f8e          CMP      r0,#0x11c00
000042  d003              BEQ      |L3.76|
000044  f5b03f92          CMP      r0,#0x12400
000048  d110              BNE      |L3.108|
00004a  e00d              B        |L3.104|
                  |L3.76|
;;;524    	{
;;;525    		case TIM1_BASE:
;;;526    			TIM_IRQChannel=TIM1_UP_IRQChannel;
00004c  2719              MOVS     r7,#0x19
;;;527    			break;
00004e  e00e              B        |L3.110|
                  |L3.80|
;;;528    		
;;;529    		case TIM2_BASE:
;;;530    			TIM_IRQChannel=TIM2_IRQChannel;
000050  271c              MOVS     r7,#0x1c
;;;531    			break;
000052  e00c              B        |L3.110|
                  |L3.84|
;;;532    		
;;;533    		case TIM3_BASE:
;;;534    			TIM_IRQChannel=TIM3_IRQChannel;
000054  271d              MOVS     r7,#0x1d
;;;535    			break;
000056  e00a              B        |L3.110|
                  |L3.88|
;;;536    		
;;;537    		case TIM4_BASE:
;;;538    			TIM_IRQChannel=TIM4_IRQChannel;
000058  271e              MOVS     r7,#0x1e
;;;539    			break;
00005a  e008              B        |L3.110|
                  |L3.92|
;;;540    		
;;;541    		case TIM5_BASE:
;;;542    			TIM_IRQChannel=TIM5_IRQChannel;
00005c  2732              MOVS     r7,#0x32
;;;543    			break;
00005e  e006              B        |L3.110|
                  |L3.96|
;;;544    		
;;;545    		case TIM6_BASE:
;;;546    			TIM_IRQChannel=TIM6_IRQChannel;
000060  2736              MOVS     r7,#0x36
;;;547    			break;
000062  e004              B        |L3.110|
                  |L3.100|
;;;548    		
;;;549    		case TIM7_BASE:
;;;550    			TIM_IRQChannel=TIM7_IRQChannel;
000064  2737              MOVS     r7,#0x37
;;;551    			break;
000066  e002              B        |L3.110|
                  |L3.104|
;;;552    		
;;;553    		case TIM8_BASE:
;;;554    			TIM_IRQChannel=TIM8_UP_IRQChannel;
000068  272c              MOVS     r7,#0x2c
;;;555    			break;
00006a  e000              B        |L3.110|
                  |L3.108|
;;;556    		
;;;557    		default:
;;;558    			break;
00006c  bf00              NOP      
                  |L3.110|
00006e  bf00              NOP                            ;527
;;;559    		
;;;560    	}
;;;561    	
;;;562    	NVIC_InitStructure.NVIC_IRQChannel = TIM_IRQChannel;
000070  f88d7000          STRB     r7,[sp,#0]
;;;563    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000074  2000              MOVS     r0,#0
000076  f88d0001          STRB     r0,[sp,#1]
;;;564    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00007a  f88d0002          STRB     r0,[sp,#2]
;;;565    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00007e  2001              MOVS     r0,#1
000080  f88d0003          STRB     r0,[sp,#3]
;;;566    	NVIC_Init(&NVIC_InitStructure);
000084  4668              MOV      r0,sp
000086  f7fffffe          BL       NVIC_Init
;;;567    	
;;;568    	/* Clear TIMx update pending flag[清除TIMx溢出中断] */
;;;569    	TIM_ClearFlag(TIMx, TIM_FLAG_Update);
00008a  2101              MOVS     r1,#1
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       TIM_ClearFlag
;;;570    
;;;571    	/* Enable TIM2 Update interrupt [TIMx溢出中断允许]*/
;;;572    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE); 
000092  2201              MOVS     r2,#1
000094  4611              MOV      r1,r2
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       TIM_ITConfig
;;;573    
;;;574    	/* TIM2 enable counter [使能TIMx计数]*/
;;;575    	TIM_Cmd(TIMx, ENABLE);	//使能TIMx计数
00009c  2101              MOVS     r1,#1
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       TIM_Cmd
;;;576    		
;;;577    }
0000a4  bdf8              POP      {r3-r7,pc}
;;;578    /*******************************************************************************
                          ENDP

0000a6  0000              DCW      0x0000
                  |L3.168|
                          DCD      0x40001000
                  |L3.172|
                          DCD      0xbffffc00

                          AREA ||i.TIM_Server||, CODE, READONLY, ALIGN=1

                  TIM_Server PROC
;;;585    *******************************************************************************/
;;;586    void TIM_Server(void)
000000  b510              PUSH     {r4,lr}
;;;587    {
;;;588    	WOW_Server();															//服务函数
000002  f7fffffe          BL       WOW_Server
;;;589    //	TIM_ClearFlag(TIM1, TIM_FLAG_Update);
;;;590    //	TIM_ClearFlag(TIM2, TIM_FLAG_Update);
;;;591    //	TIM_ClearFlag(TIM3, TIM_FLAG_Update);
;;;592    //	TIM_ClearFlag(TIM4, TIM_FLAG_Update);
;;;593    //	TIM_ClearFlag(TIM5, TIM_FLAG_Update);
;;;594    //	TIM_ClearFlag(TIM6, TIM_FLAG_Update);
;;;595    //	TIM_ClearFlag(TIM7, TIM_FLAG_Update);
;;;596    //	TIM_ClearFlag(TIM8, TIM_FLAG_Update);
;;;597    	
;;;598    //	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
;;;599    //	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
;;;600    //	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
;;;601    //	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
;;;602    //	TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
;;;603    //	TIM_ClearITPendingBit(TIM6, TIM_IT_Update);
;;;604    //	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
;;;605    //	TIM_ClearITPendingBit(TIM8, TIM_IT_Update);
;;;606    }
000006  bd10              POP      {r4,pc}
;;;607    
                          ENDP


                          AREA ||i.TIM_SetFreq||, CODE, READONLY, ALIGN=2

                  TIM_SetFreq PROC
;;;203    *******************************************************************************/
;;;204    void TIM_SetFreq(TIM_TypeDef* TIMx,u32 Frequency)		//设定频率
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;205    {
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  4688              MOV      r8,r1
;;;206    	
;;;207    		
;;;208    	//*1,结构体定义***********************************************************************
;;;209    	//1）============================结构体定义
;;;210    
;;;211    	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值
;;;212    
;;;213    	
;;;214    	//1）============================临时变量定义
;;;215    
;;;216    
;;;217    	u32	PWM_Frequency				=	2*Frequency;	//由于翻转需要双倍频率
00000a  ea4f0448          LSL      r4,r8,#1
;;;218    //	u32 RCC_APB2Periph_GPIOx	=	0x00;		//x=A/B/C/D/E/F/G	
;;;219    	u32	TIMx_Frequency				=	0;			//	定时器时钟
00000e  2700              MOVS     r7,#0
;;;220    	u16 TIMx_Prescaler				=	0	;			//	定时器时钟分频值		取值范围：0x0000~0xFFFF
000010  2600              MOVS     r6,#0
;;;221      u16 TIMx_Period						=	0	;			//	定时器自动重装载值	取值范围：0x0000~0xFFFF
000012  46b1              MOV      r9,r6
;;;222    
;;;223    //	TIMx->CR1 &= ((u16)0x03FE);		//CR1_CEN_Reset关闭定时器
;;;224    	
;;;225    	//1）============================获取TIMx时钟频率
;;;226    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;227    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;228    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       RCC_GetClocksFreq
;;;229    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;
00001a  9f00              LDR      r7,[sp,#0]
;;;230    	if ((((u32)TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
00001c  481d              LDR      r0,|L5.148|
00001e  4028              ANDS     r0,r0,r5
000020  491c              LDR      r1,|L5.148|
000022  4288              CMP      r0,r1
000024  d101              BNE      |L5.42|
;;;231      {
;;;232        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2
000026  9f03              LDR      r7,[sp,#0xc]
000028  e000              B        |L5.44|
                  |L5.42|
;;;233      }
;;;234      else
;;;235      {
;;;236        TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1
00002a  9f02              LDR      r7,[sp,#8]
                  |L5.44|
;;;237      }
;;;238    	//1）============================计算分频值和重装载值
;;;239    //	TIMx_Frequency = 72000000;
;;;240    	//*6.2.4,计算定时器参数*********************************************************************
;;;241    	//Fsys==Fpwm*Count==Fpwm*(Prescaler*Period)	
;;;242    	//	TIMx_Prescaler				=	72-1		;		// 	定时器时钟分频值
;;;243    	//	TIMx_Period						=	1000-1	;		// 	定时器自动重装载值
;;;244    	//	Tim_num1							=	0				;		//	临时变量1
;;;245    	if(PWM_Frequency<=500)		//<=500Hz
00002c  f5b47ffa          CMP      r4,#0x1f4
000030  d808              BHI      |L5.68|
;;;246    	{
;;;247    		TIMx_Prescaler=2000;
000032  f44f66fa          MOV      r6,#0x7d0
;;;248    		TIMx_Period=(u16)(TIMx_Frequency/TIMx_Prescaler/PWM_Frequency);
000036  fbb7f0f6          UDIV     r0,r7,r6
00003a  fbb0f0f4          UDIV     r0,r0,r4
00003e  fa1ff980          UXTH     r9,r0
000042  e01d              B        |L5.128|
                  |L5.68|
;;;249    	}
;;;250    	else if(PWM_Frequency<=1000)		//<=1KHz
000044  f5b47f7a          CMP      r4,#0x3e8
000048  d807              BHI      |L5.90|
;;;251    	{
;;;252    		TIMx_Prescaler=10;
00004a  260a              MOVS     r6,#0xa
;;;253    		TIMx_Period=(u16)(TIMx_Frequency/TIMx_Prescaler/PWM_Frequency);
00004c  fbb7f0f6          UDIV     r0,r7,r6
000050  fbb0f0f4          UDIV     r0,r0,r4
000054  fa1ff980          UXTH     r9,r0
000058  e012              B        |L5.128|
                  |L5.90|
;;;254    	}
;;;255    	else if(PWM_Frequency<=5000)	//<=5KHz
00005a  f2413088          MOV      r0,#0x1388
00005e  4284              CMP      r4,r0
000060  d807              BHI      |L5.114|
;;;256    	{
;;;257    		TIMx_Prescaler=2;
000062  2602              MOVS     r6,#2
;;;258    		TIMx_Period=(u16)(TIMx_Frequency/TIMx_Prescaler/PWM_Frequency);
000064  fbb7f0f6          UDIV     r0,r7,r6
000068  fbb0f0f4          UDIV     r0,r0,r4
00006c  fa1ff980          UXTH     r9,r0
000070  e006              B        |L5.128|
                  |L5.114|
;;;259    	}
;;;260    	else	//>5KHz
;;;261    	{
;;;262    		TIMx_Prescaler=1;
000072  2601              MOVS     r6,#1
;;;263    		TIMx_Period=(u16)(TIMx_Frequency/TIMx_Prescaler/PWM_Frequency);
000074  fbb7f0f6          UDIV     r0,r7,r6
000078  fbb0f0f4          UDIV     r0,r0,r4
00007c  fa1ff980          UXTH     r9,r0
                  |L5.128|
;;;264    	}
;;;265    //	else if(PWM_Frequency<100)		//>100kHz
;;;266    //	{
;;;267    //		TIMx_Prescaler=100-1;
;;;268    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/100-1);
;;;269    //	}
;;;270    //	else if(PWM_Frequency<10)		//>10Hz
;;;271    //	{
;;;272    //		TIMx_Prescaler=1000-1;
;;;273    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/1000-1);
;;;274    //	}
;;;275    //	else if(PWM_Frequency<=10)		//<=10Hz
;;;276    //	{
;;;277    //		TIMx_Prescaler=2000-1;
;;;278    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/2000-1);
;;;279    //	}
;;;280    	
;;;281    //	if(PWM_Frequency>100000)		//>100KHz
;;;282    //	{
;;;283    //		TIMx_Prescaler=0;
;;;284    //		TIMx_Period=(u16)(TIMx_Frequency/PWM_Frequency-1);
;;;285    //	}
;;;286    //	else if(PWM_Frequency>1000)	//>1KHz
;;;287    //	{
;;;288    //		TIMx_Prescaler=10-1;
;;;289    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/10-1);
;;;290    //	}
;;;291    //	else if(PWM_Frequency>100)		//>100Hz
;;;292    //	{
;;;293    //		TIMx_Prescaler=100-1;
;;;294    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/100-1);
;;;295    //	}
;;;296    //	else if(PWM_Frequency>10)		//>10Hz
;;;297    //	{
;;;298    //		TIMx_Prescaler=1000-1;
;;;299    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/1000-1);
;;;300    //	}
;;;301    //	else if(PWM_Frequency<=10)		//<=10Hz
;;;302    //	{
;;;303    //		TIMx_Prescaler=2000-1;
;;;304    //		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/2000-1);
;;;305    //	}
;;;306    
;;;307    //		TIMx_Prescaler=0;
;;;308    //		TIMx_Period=(u16)(5-1);
;;;309    
;;;310    	//6.3定时器初始化*********************************************************************
;;;311    	
;;;312    	
;;;313    	
;;;314      /* Set the Prescaler value */
;;;315      TIMx->PSC = TIMx_Prescaler-1;
000080  1e70              SUBS     r0,r6,#1
000082  8528              STRH     r0,[r5,#0x28]
;;;316    	
;;;317    	
;;;318    	
;;;319    	/* Set the Autoreload value */
;;;320      TIMx->ARR = TIMx_Period-1;
000084  f1a90001          SUB      r0,r9,#1
000088  85a8              STRH     r0,[r5,#0x2c]
;;;321    	
;;;322    	/*   */
;;;323    //  TIMx->CNT = 0;										//清除计数
;;;324    
;;;325    	/* Set or reset the UG Bit */
;;;326      TIMx->EGR = ((u16)0x0001);								//立即生效分频Prescaler
00008a  2001              MOVS     r0,#1
00008c  82a8              STRH     r0,[r5,#0x14]
;;;327    	
;;;328    //	TIMx->CR1 |= ((u16)0x0001);							//CR1_CEN_Set开启定时器
;;;329    }
00008e  b005              ADD      sp,sp,#0x14
000090  e8bd83f0          POP      {r4-r9,pc}
;;;330    
                          ENDP

                  |L5.148|
                          DCD      0x40010000

                          AREA ||i.TIM_TIME_SET||, CODE, READONLY, ALIGN=1

                  TIM_TIME_SET PROC
;;;491    *******************************************************************************/
;;;492    void TIM_TIME_SET(TIM_TypeDef* TIMx,u16 Prescaler,u16 Period)	//定时时间设定
000000  b5fe              PUSH     {r1-r7,lr}
;;;493    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;494    	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义
;;;495    
;;;496    	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler-1; 		// 设定分频值
000008  1e60              SUBS     r0,r4,#1
00000a  b280              UXTH     r0,r0
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;497    	TIM_TimeBaseStructure.TIM_Period = Period-1;        	//设定自动重装载值
000010  1e68              SUBS     r0,r5,#1
000012  b280              UXTH     r0,r0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;498    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  //不分割
000018  2000              MOVS     r0,#0
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;499    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
00001e  f8ad0002          STRH     r0,[sp,#2]
;;;500    	//	TIM_TimeBaseStructure.TIM_RepetitionCounter=0;	//????,???????????????????-??????????
;;;501    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化
000022  4669              MOV      r1,sp
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       TIM_TimeBaseInit
;;;502    //	TIM_PrescalerConfig(TIM2,Prescaler,TIM_PSCReloadMode_Update);
;;;503    	TIM_ARRPreloadConfig(TIMx, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       TIM_ARRPreloadConfig
;;;504    //	TIM_Cmd(TIM2, ENABLE);
;;;505    //	TIM_SetCompare1(TIM2,4000);
;;;506    }
000032  bdfe              POP      {r1-r7,pc}
;;;507    /*******************************************************************************
                          ENDP


                          AREA ||i.TIMx_RCC_ENABLE||, CODE, READONLY, ALIGN=2

                  TIMx_RCC_ENABLE PROC
;;;435    *******************************************************************************/
;;;436    void TIMx_RCC_ENABLE(TIM_TypeDef* TIMx)	//打开相应定时器时钟
000000  b510              PUSH     {r4,lr}
;;;437    {
000002  4604              MOV      r4,r0
;;;438    	assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;439    	switch (*(u32*)&TIMx)
000004  4923              LDR      r1,|L7.148|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d030              BEQ      |L7.110|
00000c  dc0c              BGT      |L7.40|
00000e  f1b44f80          CMP      r4,#0x40000000
000012  d018              BEQ      |L7.70|
000014  4820              LDR      r0,|L7.152|
000016  4420              ADD      r0,r0,r4
000018  b1d0              CBZ      r0,|L7.80|
00001a  f5b06f80          CMP      r0,#0x400
00001e  d01c              BEQ      |L7.90|
000020  f5b06f00          CMP      r0,#0x800
000024  d132              BNE      |L7.140|
000026  e01d              B        |L7.100|
                  |L7.40|
000028  f5b06f80          CMP      r0,#0x400
00002c  d024              BEQ      |L7.120|
00002e  f5b03f8e          CMP      r0,#0x11c00
000032  d003              BEQ      |L7.60|
000034  f5b03f92          CMP      r0,#0x12400
000038  d128              BNE      |L7.140|
00003a  e022              B        |L7.130|
                  |L7.60|
;;;440    	{
;;;441    		case TIM1_BASE:
;;;442    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  02c8              LSLS     r0,r1,#11
000040  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;443    			break;
000044  e023              B        |L7.142|
                  |L7.70|
;;;444    		
;;;445    		case TIM2_BASE:
;;;446    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000046  2101              MOVS     r1,#1
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;447    			break;
00004e  e01e              B        |L7.142|
                  |L7.80|
;;;448    		
;;;449    		case TIM3_BASE:
;;;450    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000050  2101              MOVS     r1,#1
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;451    			break;
000058  e019              B        |L7.142|
                  |L7.90|
;;;452    		
;;;453    		case TIM4_BASE:
;;;454    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
00005a  2101              MOVS     r1,#1
00005c  2004              MOVS     r0,#4
00005e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;455    			break;
000062  e014              B        |L7.142|
                  |L7.100|
;;;456    		
;;;457    		case TIM5_BASE:
;;;458    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
000064  2101              MOVS     r1,#1
000066  2008              MOVS     r0,#8
000068  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;459    			break;
00006c  e00f              B        |L7.142|
                  |L7.110|
;;;460    		
;;;461    		case TIM6_BASE:
;;;462    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
00006e  2101              MOVS     r1,#1
000070  2010              MOVS     r0,#0x10
000072  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;463    			break;
000076  e00a              B        |L7.142|
                  |L7.120|
;;;464    		
;;;465    		case TIM7_BASE:
;;;466    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
000078  2101              MOVS     r1,#1
00007a  2020              MOVS     r0,#0x20
00007c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;467    			break;
000080  e005              B        |L7.142|
                  |L7.130|
;;;468    		
;;;469    		case TIM8_BASE:
;;;470    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
000082  2101              MOVS     r1,#1
000084  0348              LSLS     r0,r1,#13
000086  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;471    			break;
00008a  e000              B        |L7.142|
                  |L7.140|
;;;472    		
;;;473    		default:
;;;474    break;
00008c  bf00              NOP      
                  |L7.142|
00008e  bf00              NOP                            ;443
;;;475    		
;;;476    	}
;;;477    }
000090  bd10              POP      {r4,pc}
;;;478    /*******************************************************************************
                          ENDP

000092  0000              DCW      0x0000
                  |L7.148|
                          DCD      0x40001000
                  |L7.152|
                          DCD      0xbffffc00
