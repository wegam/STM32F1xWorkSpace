; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\gt32l32m0180.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\gt32l32m0180.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\gt32l32m0180.crf ..\..\Driver\Components\SCR\GT32L32M0180.C]
                          THUMB

                          AREA ||i.GT32L32_BIG5_To_GBK||, CODE, READONLY, ALIGN=2

                  GT32L32_BIG5_To_GBK PROC
;;;604    ************************************************************/
;;;605    u32 GT32L32_BIG5_To_GBK(u16 BIG5_Code,u8 *GetBuffer) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;606    {
000004  4605              MOV      r5,r0
000006  468c              MOV      r12,r1
;;;607    	u32 Address,part_addr,BaseAddr=0x7F1E10;//转码表基地址; 
000008  4e1a              LDR      r6,|L1.116|
;;;608    	u8 TMP,BIG5_MSB,BIG5_LSB; 
;;;609    	BIG5_MSB= BIG5_Code >>8; 
00000a  1229              ASRS     r1,r5,#8
;;;610    	BIG5_LSB= BIG5_Code &0x00ff; 
00000c  b2ea              UXTB     r2,r5
;;;611    
;;;612    	if(BIG5_MSB>=0xa1&&BIG5_MSB<=0xa3)
00000e  29a1              CMP      r1,#0xa1
000010  db04              BLT      |L1.28|
000012  29a3              CMP      r1,#0xa3
000014  dc02              BGT      |L1.28|
;;;613    	{ 
;;;614    		part_addr=0; 
000016  2300              MOVS     r3,#0
;;;615    		TMP=0xa1; 
000018  24a1              MOVS     r4,#0xa1
00001a  e00e              B        |L1.58|
                  |L1.28|
;;;616    	} 
;;;617    	else if(BIG5_MSB>=0xa4&&BIG5_MSB<=0xc6) 
00001c  29a4              CMP      r1,#0xa4
00001e  db05              BLT      |L1.44|
000020  29c6              CMP      r1,#0xc6
000022  dc03              BGT      |L1.44|
;;;618    	{ 
;;;619    		part_addr=816; 
000024  f44f734c          MOV      r3,#0x330
;;;620    		TMP=0xa4; 
000028  24a4              MOVS     r4,#0xa4
00002a  e006              B        |L1.58|
                  |L1.44|
;;;621    	} 
;;;622    	else if(BIG5_MSB>=0xc9&&BIG5_MSB<=0xf9) 
00002c  29c9              CMP      r1,#0xc9
00002e  db04              BLT      |L1.58|
000030  29f9              CMP      r1,#0xf9
000032  dc02              BGT      |L1.58|
;;;623    	{ 
;;;624    		part_addr=11618; TMP=0xc9; 
000034  f6425362          MOV      r3,#0x2d62
000038  24c9              MOVS     r4,#0xc9
                  |L1.58|
;;;625    	}
;;;626    	if(BIG5_LSB<=0x7e&&BIG5_LSB>=0x40) 
00003a  2a7e              CMP      r2,#0x7e
00003c  dc0b              BGT      |L1.86|
00003e  2a40              CMP      r2,#0x40
000040  db09              BLT      |L1.86|
;;;627    	{ 
;;;628    		Address=part_addr+((BIG5_MSB-TMP)*157+BIG5_LSB-0x40)*2+BaseAddr; 
000042  1b0f              SUBS     r7,r1,r4
000044  f04f089d          MOV      r8,#0x9d
000048  fb072708          MLA      r7,r7,r8,r2
00004c  3f40              SUBS     r7,r7,#0x40
00004e  eb030747          ADD      r7,r3,r7,LSL #1
000052  19b8              ADDS     r0,r7,r6
000054  e00c              B        |L1.112|
                  |L1.86|
;;;629    	}
;;;630    	else if(BIG5_LSB<=0xfe&&BIG5_LSB>=0xa1) 
000056  2afe              CMP      r2,#0xfe
000058  dc0a              BGT      |L1.112|
00005a  2aa1              CMP      r2,#0xa1
00005c  db08              BLT      |L1.112|
;;;631    	{ 
;;;632    		Address=part_addr+((BIG5_MSB-TMP)*157+BIG5_LSB-0xa1+63)*2+BaseAddr; 
00005e  1b0f              SUBS     r7,r1,r4
000060  f04f089d          MOV      r8,#0x9d
000064  fb072708          MLA      r7,r7,r8,r2
000068  3f62              SUBS     r7,r7,#0x62
00006a  eb030747          ADD      r7,r3,r7,LSL #1
00006e  19b8              ADDS     r0,r7,r6
                  |L1.112|
;;;633    	}
;;;634    	return Address; 
;;;635    }
000070  e8bd81f0          POP      {r4-r8,pc}
;;;636    
                          ENDP

                  |L1.116|
                          DCD      0x007f1e10

                          AREA ||i.GT32L32_ChipErase||, CODE, READONLY, ALIGN=2

                  GT32L32_ChipErase PROC
;;;674    *******************************************************************************/
;;;675    void GT32L32_ChipErase(GT32L32Def *pInfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;676    {
000004  4604              MOV      r4,r0
;;;677    	//____________定义变量
;;;678    	u32 i=0;
000006  2500              MOVS     r5,#0
;;;679    	u8	len=255;
000008  26ff              MOVS     r6,#0xff
;;;680    	u8	Address=0x60;	//0X60 OR 0XC7
00000a  2760              MOVS     r7,#0x60
;;;681    	//____________使能片选
;;;682    	GPIO_ResetBits(GPIOC,GPIO_Pin_6);
00000c  2140              MOVS     r1,#0x40
00000e  480f              LDR      r0,|L2.76|
000010  f7fffffe          BL       GPIO_ResetBits
;;;683    	SPI_Cmd(pInfo->SPI.Port.SPIx, ENABLE);
000014  2101              MOVS     r1,#1
000016  6820              LDR      r0,[r4,#0]
000018  f7fffffe          BL       SPI_Cmd
;;;684    
;;;685    	SPI_ReadWriteByteSPI(&pInfo->SPI,Address);						//发送地址
00001c  4639              MOV      r1,r7
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;686    
;;;687    	for(i=0;i<len;i++)
000024  bf00              NOP      
000026  e004              B        |L2.50|
                  |L2.40|
;;;688    	{
;;;689    	 SPI_ReadWriteByteSPI(&pInfo->SPI,0XFF);// 从字库读出点阵数据到数组中。
000028  21ff              MOVS     r1,#0xff
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       SPI_ReadWriteByteSPI
000030  1c6d              ADDS     r5,r5,#1              ;687
                  |L2.50|
000032  42b5              CMP      r5,r6                 ;687
000034  d3f8              BCC      |L2.40|
;;;690    	}
;;;691    	//____________取消片选	
;;;692    	GPIO_SetBits(GPIOC,GPIO_Pin_6);
000036  2140              MOVS     r1,#0x40
000038  4804              LDR      r0,|L2.76|
00003a  f7fffffe          BL       GPIO_SetBits
;;;693    	SPI_Cmd(pInfo->SPI.Port.SPIx,DISABLE);
00003e  2100              MOVS     r1,#0
000040  6820              LDR      r0,[r4,#0]
000042  f7fffffe          BL       SPI_Cmd
;;;694    }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;695    /*******************************************************************************
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      0x40011000

                          AREA ||i.GT32L32_GetAddress||, CODE, READONLY, ALIGN=2

                  GT32L32_GetAddress PROC
;;;137    *******************************************************************************/
;;;138    u32 GT32L32_GetAddress(u8 font, u8 c1, u8 c2, u8 c3, u8 c4)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;139    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;140    	u32 Address=0;	//汉字点阵的字节地址(Address)
000010  2600              MOVS     r6,#0
;;;141    	u32 BaseAddr=0;
000012  46b2              MOV      r10,r6
;;;142    	//判断单字节与双字节字符（汉字通常为双字节）
;;;143    	if(c1>0x80)				//双字节，ASCII码表为（0x00~0x7F)
000014  2c80              CMP      r4,#0x80
000016  dd39              BLE      |L3.140|
;;;144    	{
;;;145    		//字体大小判断
;;;146    		if(font==12)				//(u32)0x113D0E,			//12x12点阵GB18030汉字/
000018  2d0c              CMP      r5,#0xc
00001a  d10d              BNE      |L3.56|
;;;147    		{
;;;148    			Address=GT32L32_GetGB18030(c1,	c2,	0,	0)*24+0x113D0E+192*24;
00001c  2300              MOVS     r3,#0
00001e  461a              MOV      r2,r3
000020  4639              MOV      r1,r7
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       GT32L32_GetGB18030
000028  eb000040          ADD      r0,r0,r0,LSL #1
00002c  4979              LDR      r1,|L3.532|
00002e  eb0100c0          ADD      r0,r1,r0,LSL #3
000032  f5005690          ADD      r6,r0,#0x1200
                  |L3.54|
000036  e0ea              B        |L3.526|
                  |L3.56|
;;;149    		}
;;;150    		else if(font==16)		//(u32)0x194FDE,			//16x16点阵GB18030汉字
000038  2d10              CMP      r5,#0x10
00003a  d10b              BNE      |L3.84|
;;;151    		{
;;;152    			Address=GT32L32_GetGB18030(c1,	c2,	c3,	c4)*32+0x194FDE+192*32;
00003c  464b              MOV      r3,r9
00003e  4642              MOV      r2,r8
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GT32L32_GetGB18030
000048  4973              LDR      r1,|L3.536|
00004a  eb011040          ADD      r0,r1,r0,LSL #5
00004e  f50056c0          ADD      r6,r0,#0x1800
000052  e0dc              B        |L3.526|
                  |L3.84|
;;;153    		}
;;;154    		else if(font==24)		//(u32)0x2743DE,			//24x24点阵GB18030汉字
000054  2d18              CMP      r5,#0x18
000056  d10d              BNE      |L3.116|
;;;155    		{
;;;156    			Address=GT32L32_GetGB18030(c1,	c2,	c3,	c4)*72+0x2743DE+192*72;
000058  464b              MOV      r3,r9
00005a  4642              MOV      r2,r8
00005c  4639              MOV      r1,r7
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       GT32L32_GetGB18030
000064  eb0000c0          ADD      r0,r0,r0,LSL #3
000068  496c              LDR      r1,|L3.540|
00006a  eb0100c0          ADD      r0,r1,r0,LSL #3
00006e  f5005658          ADD      r6,r0,#0x3600
000072  e0cc              B        |L3.526|
                  |L3.116|
;;;157    		}
;;;158    		else if(font==32)		//(u32)0x47AE10,			//32x32点阵GB18030汉字
000074  2d20              CMP      r5,#0x20
000076  d1de              BNE      |L3.54|
;;;159    		{
;;;160    			Address=GT32L32_GetGB18030(c1,	c2,	c3,	c4)*128+0x47AE10;
000078  464b              MOV      r3,r9
00007a  4642              MOV      r2,r8
00007c  4639              MOV      r1,r7
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       GT32L32_GetGB18030
000084  4966              LDR      r1,|L3.544|
000086  eb0116c0          ADD      r6,r1,r0,LSL #7
00008a  e0c0              B        |L3.526|
                  |L3.140|
;;;161    		}
;;;162    	}
;;;163    	else							//单字节，ASCII码表为（0x00~0x7F)
;;;164    	{
;;;165    		if  ((c1 >0x20)&&(c1<=0x7e))		//ASCIICode ASCII码表为（0x00~0x7F)	（0x00~0x20为控制符)
00008c  2c20              CMP      r4,#0x20
00008e  ddd2              BLE      |L3.54|
000090  2c7e              CMP      r4,#0x7e
000092  dcd0              BGT      |L3.54|
;;;166    		{	
;;;167    			switch(font)
000094  2d3e              CMP      r5,#0x3e
000096  d06c              BEQ      |L3.370|
000098  dc12              BGT      |L3.192|
00009a  2d24              CMP      r5,#0x24
00009c  d073              BEQ      |L3.390|
00009e  dc08              BGT      |L3.178|
0000a0  2d0c              CMP      r5,#0xc
0000a2  d03d              BEQ      |L3.288|
0000a4  2d10              CMP      r5,#0x10
0000a6  d049              BEQ      |L3.316|
0000a8  2d18              CMP      r5,#0x18
0000aa  d04d              BEQ      |L3.328|
0000ac  2d20              CMP      r5,#0x20
0000ae  d16b              BNE      |L3.392|
0000b0  e053              B        |L3.346|
                  |L3.178|
0000b2  2d34              CMP      r5,#0x34
0000b4  d057              BEQ      |L3.358|
0000b6  2d36              CMP      r5,#0x36
0000b8  d067              BEQ      |L3.394|
0000ba  2d38              CMP      r5,#0x38
0000bc  d164              BNE      |L3.392|
0000be  e08a              B        |L3.470|
                  |L3.192|
0000c0  4958              LDR      r1,|L3.548|
0000c2  1a68              SUBS     r0,r5,r1
0000c4  428d              CMP      r5,r1
0000c6  d033              BEQ      |L3.304|
0000c8  dc0b              BGT      |L3.226|
0000ca  2d79              CMP      r5,#0x79
0000cc  d079              BEQ      |L3.450|
0000ce  f5b51f80          CMP      r5,#0x100000
0000d2  d011              BEQ      |L3.248|
0000d4  4854              LDR      r0,|L3.552|
0000d6  4428              ADD      r0,r0,r5
0000d8  b1a8              CBZ      r0,|L3.262|
0000da  f5b07f40          CMP      r0,#0x300
0000de  d153              BNE      |L3.392|
0000e0  e018              B        |L3.276|
                  |L3.226|
0000e2  f5a040b2          SUB      r0,r0,#0x5900
0000e6  38c0              SUBS     r0,r0,#0xc0
0000e8  b3b0              CBZ      r0,|L3.344|
0000ea  f5b06f4c          CMP      r0,#0xcc0
0000ee  d055              BEQ      |L3.412|
0000f0  f5b05f22          CMP      r0,#0x2880
0000f4  d148              BNE      |L3.392|
0000f6  e05c              B        |L3.434|
                  |L3.248|
;;;168    			{
;;;169    				case 0x100000:	Address=(c1-0x20)*8+0x100000;		//(u32)0x100000,			//5x7点阵ASCII标准字符
0000f8  f1a40020          SUB      r0,r4,#0x20
0000fc  f44f1180          MOV      r1,#0x100000
000100  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;170    							break ;
000104  e082              B        |L3.524|
                  |L3.262|
;;;171    				case 0x100300:	Address=(c1-0x20)*8+0x100300;		//(u32)0x100300,			//7x8点阵ASCII标准字符
000106  f1a40020          SUB      r0,r4,#0x20
00010a  4947              LDR      r1,|L3.552|
00010c  4249              RSBS     r1,r1,#0
00010e  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;172    							break ;
000112  e07b              B        |L3.524|
                  |L3.276|
;;;173    				case 0x100600:	Address=(c1-0x20)*8+0x100600;		//(u32)0x100600,			//7x8点阵ASCII粗体字符
000114  f1a40020          SUB      r0,r4,#0x20
000118  4944              LDR      r1,|L3.556|
00011a  eb0106c0          ADD      r6,r1,r0,LSL #3
;;;174    							break ;
00011e  e075              B        |L3.524|
                  |L3.288|
;;;175    				case 12:	      Address=(c1-0x20)*12+0x100900;  //(u32)0x100900,			//6x12点阵ASCII字符
000120  f1a40020          SUB      r0,r4,#0x20
000124  eb000040          ADD      r0,r0,r0,LSL #1
000128  4941              LDR      r1,|L3.560|
00012a  eb010680          ADD      r6,r1,r0,LSL #2
;;;176    								break ;
00012e  e06d              B        |L3.524|
                  |L3.304|
;;;177    				case 0x100D80:	Address=(c1-0x20)*16+0x100D80;  //(u32)0x100D80,			//8x16点阵ASCII标准字符
000130  f1a40020          SUB      r0,r4,#0x20
000134  493b              LDR      r1,|L3.548|
000136  eb011600          ADD      r6,r1,r0,LSL #4
;;;178    							break ;  
00013a  e067              B        |L3.524|
                  |L3.316|
;;;179    				case 16:				Address=(c1-0x20)*16+0x101580;  //(u32)0x101580,			//8x16点阵ASCII粗体字符
00013c  f1a40020          SUB      r0,r4,#0x20
000140  493c              LDR      r1,|L3.564|
000142  eb011600          ADD      r6,r1,r0,LSL #4
;;;180    							break ;
000146  e061              B        |L3.524|
                  |L3.328|
;;;181    				case 24:				Address=(c1-0x20)*48+0x101B80;  //(u32)0x101B80,			//12x24点阵ASCII标准字符
000148  f1a40020          SUB      r0,r4,#0x20
00014c  eb000040          ADD      r0,r0,r0,LSL #1
000150  4939              LDR      r1,|L3.568|
000152  eb011600          ADD      r6,r1,r0,LSL #4
;;;182    							break ;  
000156  e059              B        |L3.524|
                  |L3.344|
000158  e018              B        |L3.396|
                  |L3.346|
;;;183    				case 32: 				Address=(c1-0x20)*64+0x102D80;  //(u32)0x102D80,			//16x32点阵ASCII标准字符
00015a  f1a40020          SUB      r0,r4,#0x20
00015e  4937              LDR      r1,|L3.572|
000160  eb011680          ADD      r6,r1,r0,LSL #6
;;;184    							break ;
000164  e052              B        |L3.524|
                  |L3.358|
;;;185    				case 52: 	      Address=(c1-0x20)*64+0x104580;  //(u32)0x104580,			//16x32点阵ASCII粗体字符
000166  f1a40020          SUB      r0,r4,#0x20
00016a  4935              LDR      r1,|L3.576|
00016c  eb011680          ADD      r6,r1,r0,LSL #6
;;;186    							break ;
000170  e04c              B        |L3.524|
                  |L3.370|
;;;187    				case 62: 	      Address=(c1-0x20)*26+0x105D80;  //(u32)0x105D80,			//12点阵不等宽ASCII方头（Arial）字符
000172  f1a40020          SUB      r0,r4,#0x20
000176  eb000180          ADD      r1,r0,r0,LSL #2
00017a  eb0100c0          ADD      r0,r1,r0,LSL #3
00017e  4931              LDR      r1,|L3.580|
000180  eb010640          ADD      r6,r1,r0,LSL #1
;;;188    							break ;
000184  e042              B        |L3.524|
                  |L3.390|
000186  e038              B        |L3.506|
                  |L3.392|
000188  e03f              B        |L3.522|
                  |L3.394|
00018a  e02c              B        |L3.486|
                  |L3.396|
;;;189    				case 0x106740: 	Address=(c1-0x20)*34+0x106740;  //(u32)0x106740,			//16点阵不等宽ASCII方头（Arial）字符
00018c  f1a40020          SUB      r0,r4,#0x20
000190  eb001000          ADD      r0,r0,r0,LSL #4
000194  492c              LDR      r1,|L3.584|
000196  eb010640          ADD      r6,r1,r0,LSL #1
;;;190    							break ; 
00019a  e037              B        |L3.524|
                  |L3.412|
;;;191    				case 0x107400: 	Address=(c1-0x20)*74+0x107400;  //(u32)0x107400,			//24点阵不等宽ASCII方头（Arial）字符
00019c  f1a40020          SUB      r0,r4,#0x20
0001a0  eb000180          ADD      r1,r0,r0,LSL #2
0001a4  eb011040          ADD      r0,r1,r0,LSL #5
0001a8  4928              LDR      r1,|L3.588|
0001aa  eb010640          ADD      r6,r1,r0,LSL #1
;;;192    							break ;
0001ae  e02d              B        |L3.524|
0001b0  e007              B        |L3.450|
                  |L3.434|
;;;193    				case 0x108FC0: 	Address=(c1-0x20)*130+0x108FC0; //(u32)0x108FC0,			//32点阵不等宽ASCII方头（Arial）字符
0001b2  f1a40020          SUB      r0,r4,#0x20
0001b6  eb001080          ADD      r0,r0,r0,LSL #6
0001ba  4925              LDR      r1,|L3.592|
0001bc  eb010640          ADD      r6,r1,r0,LSL #1
;;;194    							break ;
0001c0  e024              B        |L3.524|
                  |L3.450|
;;;195    				case 121: 	    Address=(c1-0x20)*26+0x10C080;  //(u32)0x10C080,			//12点阵不等宽ASCII白正（Times New Roman）字符
0001c2  f1a40020          SUB      r0,r4,#0x20
0001c6  eb000180          ADD      r1,r0,r0,LSL #2
0001ca  eb0100c0          ADD      r0,r1,r0,LSL #3
0001ce  4921              LDR      r1,|L3.596|
0001d0  eb010640          ADD      r6,r1,r0,LSL #1
;;;196    							break ;
0001d4  e01a              B        |L3.524|
                  |L3.470|
;;;197    				case 56: 	      Address=(c1-0x20)*34+0x10CA50;  //(u32)0x10CA50,			//16点阵不等宽ASCII白正（Times New Roman）字符
0001d6  f1a40020          SUB      r0,r4,#0x20
0001da  eb001000          ADD      r0,r0,r0,LSL #4
0001de  491e              LDR      r1,|L3.600|
0001e0  eb010640          ADD      r6,r1,r0,LSL #1
;;;198    							break ;
0001e4  e012              B        |L3.524|
                  |L3.486|
;;;199    				case 54: 	      Address=(c1-0x20)*74+0x10D740;  //(u32)0x10D740,			//24点阵不等宽ASCII白正（Times New Roman）字符
0001e6  f1a40020          SUB      r0,r4,#0x20
0001ea  eb000180          ADD      r1,r0,r0,LSL #2
0001ee  eb011040          ADD      r0,r1,r0,LSL #5
0001f2  491a              LDR      r1,|L3.604|
0001f4  eb010640          ADD      r6,r1,r0,LSL #1
;;;200    							break ;
0001f8  e008              B        |L3.524|
                  |L3.506|
;;;201    				case 36: 	      Address=(c1-0x20)*130+0x10F340; //(u32)0x10F340,			//32点阵不等宽ASCII白正（Times New Roman）字符
0001fa  f1a40020          SUB      r0,r4,#0x20
0001fe  eb001080          ADD      r0,r0,r0,LSL #6
000202  4917              LDR      r1,|L3.608|
000204  eb010640          ADD      r6,r1,r0,LSL #1
;;;202    							break ;  
000208  e000              B        |L3.524|
                  |L3.522|
;;;203    				default: 
;;;204    							break ;
00020a  bf00              NOP      
                  |L3.524|
00020c  bf00              NOP                            ;170
                  |L3.526|
;;;205    			}
;;;206    		}	
;;;207    	}	
;;;208    	return(Address);
00020e  4630              MOV      r0,r6
;;;209    }
000210  e8bd87f0          POP      {r4-r10,pc}
;;;210    /*************************************************************************************************** 
                          ENDP

                  |L3.532|
                          DCD      0x00113d0e
                  |L3.536|
                          DCD      0x00194fde
                  |L3.540|
                          DCD      0x002743de
                  |L3.544|
                          DCD      0x0047ae10
                  |L3.548|
                          DCD      0x00100d80
                  |L3.552|
                          DCD      0xffeffd00
                  |L3.556|
                          DCD      0x00100600
                  |L3.560|
                          DCD      0x00100900
                  |L3.564|
                          DCD      0x00101580
                  |L3.568|
                          DCD      0x00101b80
                  |L3.572|
                          DCD      0x00102d80
                  |L3.576|
                          DCD      0x00104580
                  |L3.580|
                          DCD      0x00105d80
                  |L3.584|
                          DCD      0x00106740
                  |L3.588|
                          DCD      0x00107400
                  |L3.592|
                          DCD      0x00108fc0
                  |L3.596|
                          DCD      0x0010c080
                  |L3.600|
                          DCD      0x0010ca50
                  |L3.604|
                          DCD      0x0010d740
                  |L3.608|
                          DCD      0x0010f340

                          AREA ||i.GT32L32_GetAntennaCode||, CODE, READONLY, ALIGN=2

                  GT32L32_GetAntennaCode PROC
;;;746    *******************************************************************************/
;;;747    u32 GT32L32_GetAntennaCode(u8	NUM,u8 *GetBuffer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;748    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;749      u32 lengh=24;
000008  2618              MOVS     r6,#0x18
;;;750    	u32 Address,BaseAdd=0x47AD32;  
00000a  f8df801c          LDR      r8,|L4.40|
;;;751    	Address=NUM*24+BaseAdd;
00000e  eb040044          ADD      r0,r4,r4,LSL #1
000012  eb0807c0          ADD      r7,r8,r0,LSL #3
;;;752    
;;;753      GT32L32_ReadBuffer(Address,lengh,GetBuffer);		//从字库中读数据并返回数据长度
000016  462a              MOV      r2,r5
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       GT32L32_ReadBuffer
;;;754      
;;;755    	return lengh;
000020  4630              MOV      r0,r6
;;;756    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;757    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x0047ad32

                          AREA ||i.GT32L32_GetBarCode_128||, CODE, READONLY, ALIGN=2

                  GT32L32_GetBarCode_128 PROC
;;;380    ***********************************************************************************************/
;;;381    u32 GT32L32_GetBarCode_128(u8	*BAR_NUM,u8	flag)
000000  b530              PUSH     {r4,r5,lr}
;;;382    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;383      u32 BaseAddr=0x479C7A;
000006  4a41              LDR      r2,|L5.268|
;;;384      u8 i;
;;;385      for(i=0;i<7;i++) 
000008  2100              MOVS     r1,#0
00000a  e07a              B        |L5.258|
                  |L5.12|
;;;386    	{
;;;387         switch(flag)
00000c  2c01              CMP      r4,#1
00000e  d004              BEQ      |L5.26|
000010  2c02              CMP      r4,#2
000012  d027              BEQ      |L5.100|
000014  2c03              CMP      r4,#3
000016  d170              BNE      |L5.250|
000018  e049              B        |L5.174|
                  |L5.26|
;;;388    		{  
;;;389    		case 1 :
;;;390    			 if(i==0)
00001a  b921              CBNZ     r1,|L5.38|
;;;391    			 {
;;;392    				 BAR_PIC_ADDR[i]=103*40+BaseAddr;
00001c  2018              MOVS     r0,#0x18
00001e  4410              ADD      r0,r0,r2
000020  4d3b              LDR      r5,|L5.272|
000022  5468              STRB     r0,[r5,r1]
000024  e01d              B        |L5.98|
                  |L5.38|
;;;393    			 }
;;;394    			 else if(i==1||i==2||i==3||i==4)           
000026  2901              CMP      r1,#1
000028  d005              BEQ      |L5.54|
00002a  2902              CMP      r1,#2
00002c  d003              BEQ      |L5.54|
00002e  2903              CMP      r1,#3
000030  d001              BEQ      |L5.54|
000032  2904              CMP      r1,#4
000034  d108              BNE      |L5.72|
                  |L5.54|
;;;395    			 {
;;;396    				 BAR_PIC_ADDR[i]=BAR_NUM[i-1]*40+BaseAddr;
000036  1e48              SUBS     r0,r1,#1
000038  5c18              LDRB     r0,[r3,r0]
00003a  eb000080          ADD      r0,r0,r0,LSL #2
00003e  eb0200c0          ADD      r0,r2,r0,LSL #3
000042  4d33              LDR      r5,|L5.272|
000044  5468              STRB     r0,[r5,r1]
000046  e00c              B        |L5.98|
                  |L5.72|
;;;397    			 }
;;;398    			 else if(i==5)
000048  2905              CMP      r1,#5
00004a  d104              BNE      |L5.86|
;;;399    			 {
;;;400    				 BAR_PIC_ADDR[i]=95*40+BaseAddr;
00004c  f60260d8          ADD      r0,r2,#0xed8
000050  4d2f              LDR      r5,|L5.272|
000052  5468              STRB     r0,[r5,r1]
000054  e005              B        |L5.98|
                  |L5.86|
;;;401    			 }
;;;402    			 else if(i==6)
000056  2906              CMP      r1,#6
000058  d103              BNE      |L5.98|
;;;403    			 {
;;;404    				 BAR_PIC_ADDR[i]=106*40+BaseAddr;
00005a  2090              MOVS     r0,#0x90
00005c  4410              ADD      r0,r0,r2
00005e  4d2c              LDR      r5,|L5.272|
000060  5468              STRB     r0,[r5,r1]
                  |L5.98|
;;;405    			 }
;;;406    			 break;
000062  e04b              B        |L5.252|
                  |L5.100|
;;;407         
;;;408    		case 2 :
;;;409    			if(i==0)
000064  b921              CBNZ     r1,|L5.112|
;;;410    			{
;;;411    				BAR_PIC_ADDR[i]=104*40+BaseAddr;
000066  f5025082          ADD      r0,r2,#0x1040
00006a  4d29              LDR      r5,|L5.272|
00006c  5468              STRB     r0,[r5,r1]
00006e  e01d              B        |L5.172|
                  |L5.112|
;;;412    			}
;;;413    			else if(i==1||i==2||i==3||i==4)           
000070  2901              CMP      r1,#1
000072  d005              BEQ      |L5.128|
000074  2902              CMP      r1,#2
000076  d003              BEQ      |L5.128|
000078  2903              CMP      r1,#3
00007a  d001              BEQ      |L5.128|
00007c  2904              CMP      r1,#4
00007e  d108              BNE      |L5.146|
                  |L5.128|
;;;414    			{
;;;415    				BAR_PIC_ADDR[i]=BAR_NUM[i-1]*40+BaseAddr;
000080  1e48              SUBS     r0,r1,#1
000082  5c18              LDRB     r0,[r3,r0]
000084  eb000080          ADD      r0,r0,r0,LSL #2
000088  eb0200c0          ADD      r0,r2,r0,LSL #3
00008c  4d20              LDR      r5,|L5.272|
00008e  5468              STRB     r0,[r5,r1]
000090  e00c              B        |L5.172|
                  |L5.146|
;;;416    			}
;;;417    			else if(i==5)
000092  2905              CMP      r1,#5
000094  d104              BNE      |L5.160|
;;;418    			{
;;;419    				BAR_PIC_ADDR[i]=95*40+BaseAddr;
000096  f60260d8          ADD      r0,r2,#0xed8
00009a  4d1d              LDR      r5,|L5.272|
00009c  5468              STRB     r0,[r5,r1]
00009e  e005              B        |L5.172|
                  |L5.160|
;;;420    			}
;;;421    			else if(i==6)
0000a0  2906              CMP      r1,#6
0000a2  d103              BNE      |L5.172|
;;;422    			{
;;;423    				BAR_PIC_ADDR[i]=106*40+BaseAddr;
0000a4  2090              MOVS     r0,#0x90
0000a6  4410              ADD      r0,r0,r2
0000a8  4d19              LDR      r5,|L5.272|
0000aa  5468              STRB     r0,[r5,r1]
                  |L5.172|
;;;424    			}
;;;425    			break;
0000ac  e026              B        |L5.252|
                  |L5.174|
;;;426       	       
;;;427    		case 3 :
;;;428    			if(i==0)
0000ae  b921              CBNZ     r1,|L5.186|
;;;429    			{
;;;430    				BAR_PIC_ADDR[i]=105*40+BaseAddr;
0000b0  2068              MOVS     r0,#0x68
0000b2  4410              ADD      r0,r0,r2
0000b4  4d16              LDR      r5,|L5.272|
0000b6  5468              STRB     r0,[r5,r1]
0000b8  e01d              B        |L5.246|
                  |L5.186|
;;;431    			}
;;;432    			else if(i==1||i==2||i==3||i==4)           
0000ba  2901              CMP      r1,#1
0000bc  d005              BEQ      |L5.202|
0000be  2902              CMP      r1,#2
0000c0  d003              BEQ      |L5.202|
0000c2  2903              CMP      r1,#3
0000c4  d001              BEQ      |L5.202|
0000c6  2904              CMP      r1,#4
0000c8  d108              BNE      |L5.220|
                  |L5.202|
;;;433    			{
;;;434    				BAR_PIC_ADDR[i]=BAR_NUM[i-1]*40+BaseAddr;
0000ca  1e48              SUBS     r0,r1,#1
0000cc  5c18              LDRB     r0,[r3,r0]
0000ce  eb000080          ADD      r0,r0,r0,LSL #2
0000d2  eb0200c0          ADD      r0,r2,r0,LSL #3
0000d6  4d0e              LDR      r5,|L5.272|
0000d8  5468              STRB     r0,[r5,r1]
0000da  e00c              B        |L5.246|
                  |L5.220|
;;;435    			}
;;;436    			else if(i==5)
0000dc  2905              CMP      r1,#5
0000de  d104              BNE      |L5.234|
;;;437    			{
;;;438    				BAR_PIC_ADDR[i]=95*40+BaseAddr;
0000e0  f60260d8          ADD      r0,r2,#0xed8
0000e4  4d0a              LDR      r5,|L5.272|
0000e6  5468              STRB     r0,[r5,r1]
0000e8  e005              B        |L5.246|
                  |L5.234|
;;;439    			}
;;;440    			else if(i==6)
0000ea  2906              CMP      r1,#6
0000ec  d103              BNE      |L5.246|
;;;441    			{
;;;442    				BAR_PIC_ADDR[i]=106*40+BaseAddr;
0000ee  2090              MOVS     r0,#0x90
0000f0  4410              ADD      r0,r0,r2
0000f2  4d07              LDR      r5,|L5.272|
0000f4  5468              STRB     r0,[r5,r1]
                  |L5.246|
;;;443    			}
;;;444    			break;
0000f6  e001              B        |L5.252|
0000f8  e7ff              B        |L5.250|
                  |L5.250|
;;;445       
;;;446         default:
;;;447         break;
0000fa  bf00              NOP      
                  |L5.252|
0000fc  bf00              NOP                            ;406
0000fe  1c48              ADDS     r0,r1,#1              ;385
000100  b2c1              UXTB     r1,r0                 ;385
                  |L5.258|
000102  2907              CMP      r1,#7                 ;385
000104  db82              BLT      |L5.12|
;;;448    		}
;;;449    	}
;;;450    	return BAR_PIC_ADDR[0];
000106  4802              LDR      r0,|L5.272|
000108  7800              LDRB     r0,[r0,#0]  ; BAR_PIC_ADDR
;;;451    }
00010a  bd30              POP      {r4,r5,pc}
;;;452    
                          ENDP

                  |L5.268|
                          DCD      0x00479c7a
                  |L5.272|
                          DCD      BAR_PIC_ADDR

                          AREA ||i.GT32L32_GetBarCode_13||, CODE, READONLY, ALIGN=2

                  GT32L32_GetBarCode_13 PROC
;;;280    ***********************************************************************/
;;;281    u32 GT32L32_GetBarCode_13(u8 * BAR_NUM)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
000002  4604              MOV      r4,r0
;;;283    	u32 i,BaseAddr=0x478FD2;
000004  4dfb              LDR      r5,|L6.1012|
;;;284    	BAR_PIC_ADDR[0]=BAR_NUM[0]*54+540*0+ BaseAddr;
000006  7820              LDRB     r0,[r4,#0]
000008  eb0000c0          ADD      r0,r0,r0,LSL #3
00000c  eb000040          ADD      r0,r0,r0,LSL #1
000010  2100              MOVS     r1,#0
000012  eb010040          ADD      r0,r1,r0,LSL #1
000016  4428              ADD      r0,r0,r5
000018  49f7              LDR      r1,|L6.1016|
00001a  7008              STRB     r0,[r1,#0]
;;;285    	BAR_PIC_ADDR[1]=BAR_NUM[1]*54+540*1+ BaseAddr;
00001c  7860              LDRB     r0,[r4,#1]
00001e  eb0000c0          ADD      r0,r0,r0,LSL #3
000022  eb000040          ADD      r0,r0,r0,LSL #1
000026  211c              MOVS     r1,#0x1c
000028  eb010040          ADD      r0,r1,r0,LSL #1
00002c  4428              ADD      r0,r0,r5
00002e  49f2              LDR      r1,|L6.1016|
000030  7048              STRB     r0,[r1,#1]
;;;286    	switch(BAR_NUM[0])
000032  7820              LDRB     r0,[r4,#0]
000034  280a              CMP      r0,#0xa
000036  d216              BCS      |L6.102|
000038  e8dff000          TBB      [pc,r0]
00003c  05164e86          DCB      0x05,0x16,0x4e,0x86
000040  befbf9f8          DCB      0xbe,0xfb,0xf9,0xf8
000044  f7f6              DCB      0xf7,0xf6
;;;287    	{
;;;288    		case 0:
;;;289    			for(i=2;i<=6;i++)
000046  2602              MOVS     r6,#2
000048  e00b              B        |L6.98|
                  |L6.74|
;;;290    			{
;;;291    				BAR_PIC_ADDR[i]=BAR_NUM[i]*54+540*1+ BaseAddr;
00004a  5da0              LDRB     r0,[r4,r6]
00004c  eb0000c0          ADD      r0,r0,r0,LSL #3
000050  eb000040          ADD      r0,r0,r0,LSL #1
000054  211c              MOVS     r1,#0x1c
000056  eb010040          ADD      r0,r1,r0,LSL #1
00005a  4428              ADD      r0,r0,r5
00005c  49e6              LDR      r1,|L6.1016|
00005e  5588              STRB     r0,[r1,r6]
000060  1c76              ADDS     r6,r6,#1              ;289
                  |L6.98|
000062  2e06              CMP      r6,#6                 ;289
000064  d9f1              BLS      |L6.74|
                  |L6.102|
;;;292    			}
;;;293    		break;
000066  e201              B        |L6.1132|
;;;294    		case 1:
;;;295    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*1+ BaseAddr;
000068  78a0              LDRB     r0,[r4,#2]
00006a  eb0000c0          ADD      r0,r0,r0,LSL #3
00006e  eb000040          ADD      r0,r0,r0,LSL #1
000072  211c              MOVS     r1,#0x1c
000074  eb010040          ADD      r0,r1,r0,LSL #1
000078  4428              ADD      r0,r0,r5
00007a  49df              LDR      r1,|L6.1016|
00007c  7088              STRB     r0,[r1,#2]
;;;296    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*2+ BaseAddr;
00007e  78e0              LDRB     r0,[r4,#3]
000080  eb0000c0          ADD      r0,r0,r0,LSL #3
000084  eb000040          ADD      r0,r0,r0,LSL #1
000088  2138              MOVS     r1,#0x38
00008a  eb010040          ADD      r0,r1,r0,LSL #1
00008e  4428              ADD      r0,r0,r5
000090  49d9              LDR      r1,|L6.1016|
000092  70c8              STRB     r0,[r1,#3]
;;;297    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*1+ BaseAddr;
000094  7920              LDRB     r0,[r4,#4]
000096  eb0000c0          ADD      r0,r0,r0,LSL #3
00009a  eb000040          ADD      r0,r0,r0,LSL #1
00009e  211c              MOVS     r1,#0x1c
0000a0  eb010040          ADD      r0,r1,r0,LSL #1
0000a4  4428              ADD      r0,r0,r5
0000a6  49d4              LDR      r1,|L6.1016|
0000a8  7108              STRB     r0,[r1,#4]
;;;298    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*2+ BaseAddr;
0000aa  7960              LDRB     r0,[r4,#5]
0000ac  eb0000c0          ADD      r0,r0,r0,LSL #3
0000b0  eb000040          ADD      r0,r0,r0,LSL #1
0000b4  2138              MOVS     r1,#0x38
0000b6  eb010040          ADD      r0,r1,r0,LSL #1
0000ba  4428              ADD      r0,r0,r5
0000bc  49ce              LDR      r1,|L6.1016|
0000be  7148              STRB     r0,[r1,#5]
;;;299    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*2+ BaseAddr;
0000c0  79a0              LDRB     r0,[r4,#6]
0000c2  eb0000c0          ADD      r0,r0,r0,LSL #3
0000c6  eb000040          ADD      r0,r0,r0,LSL #1
0000ca  2138              MOVS     r1,#0x38
0000cc  eb010040          ADD      r0,r1,r0,LSL #1
0000d0  4428              ADD      r0,r0,r5
0000d2  49c9              LDR      r1,|L6.1016|
0000d4  7188              STRB     r0,[r1,#6]
;;;300    		break;
0000d6  e1c9              B        |L6.1132|
;;;301    		case 2:
;;;302    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*1+ BaseAddr;
0000d8  78a0              LDRB     r0,[r4,#2]
0000da  eb0000c0          ADD      r0,r0,r0,LSL #3
0000de  eb000040          ADD      r0,r0,r0,LSL #1
0000e2  211c              MOVS     r1,#0x1c
0000e4  eb010040          ADD      r0,r1,r0,LSL #1
0000e8  4428              ADD      r0,r0,r5
0000ea  49c3              LDR      r1,|L6.1016|
0000ec  7088              STRB     r0,[r1,#2]
;;;303    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*2+ BaseAddr;
0000ee  78e0              LDRB     r0,[r4,#3]
0000f0  eb0000c0          ADD      r0,r0,r0,LSL #3
0000f4  eb000040          ADD      r0,r0,r0,LSL #1
0000f8  2138              MOVS     r1,#0x38
0000fa  eb010040          ADD      r0,r1,r0,LSL #1
0000fe  4428              ADD      r0,r0,r5
000100  49bd              LDR      r1,|L6.1016|
000102  70c8              STRB     r0,[r1,#3]
;;;304    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*2+ BaseAddr;
000104  7920              LDRB     r0,[r4,#4]
000106  eb0000c0          ADD      r0,r0,r0,LSL #3
00010a  eb000040          ADD      r0,r0,r0,LSL #1
00010e  2138              MOVS     r1,#0x38
000110  eb010040          ADD      r0,r1,r0,LSL #1
000114  4428              ADD      r0,r0,r5
000116  49b8              LDR      r1,|L6.1016|
000118  7108              STRB     r0,[r1,#4]
;;;305    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*1+ BaseAddr;
00011a  7960              LDRB     r0,[r4,#5]
00011c  eb0000c0          ADD      r0,r0,r0,LSL #3
000120  eb000040          ADD      r0,r0,r0,LSL #1
000124  211c              MOVS     r1,#0x1c
000126  eb010040          ADD      r0,r1,r0,LSL #1
00012a  4428              ADD      r0,r0,r5
00012c  49b2              LDR      r1,|L6.1016|
00012e  7148              STRB     r0,[r1,#5]
;;;306    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*2+ BaseAddr;
000130  79a0              LDRB     r0,[r4,#6]
000132  eb0000c0          ADD      r0,r0,r0,LSL #3
000136  eb000040          ADD      r0,r0,r0,LSL #1
00013a  2138              MOVS     r1,#0x38
00013c  eb010040          ADD      r0,r1,r0,LSL #1
000140  4428              ADD      r0,r0,r5
000142  49ad              LDR      r1,|L6.1016|
000144  7188              STRB     r0,[r1,#6]
;;;307    		break;
000146  e191              B        |L6.1132|
;;;308    		case 3:
;;;309    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*1+ BaseAddr;
000148  78a0              LDRB     r0,[r4,#2]
00014a  eb0000c0          ADD      r0,r0,r0,LSL #3
00014e  eb000040          ADD      r0,r0,r0,LSL #1
000152  211c              MOVS     r1,#0x1c
000154  eb010040          ADD      r0,r1,r0,LSL #1
000158  4428              ADD      r0,r0,r5
00015a  49a7              LDR      r1,|L6.1016|
00015c  7088              STRB     r0,[r1,#2]
;;;310    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*2+ BaseAddr;
00015e  78e0              LDRB     r0,[r4,#3]
000160  eb0000c0          ADD      r0,r0,r0,LSL #3
000164  eb000040          ADD      r0,r0,r0,LSL #1
000168  2138              MOVS     r1,#0x38
00016a  eb010040          ADD      r0,r1,r0,LSL #1
00016e  4428              ADD      r0,r0,r5
000170  49a1              LDR      r1,|L6.1016|
000172  70c8              STRB     r0,[r1,#3]
;;;311    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*2+ BaseAddr;
000174  7920              LDRB     r0,[r4,#4]
000176  eb0000c0          ADD      r0,r0,r0,LSL #3
00017a  eb000040          ADD      r0,r0,r0,LSL #1
00017e  2138              MOVS     r1,#0x38
000180  eb010040          ADD      r0,r1,r0,LSL #1
000184  4428              ADD      r0,r0,r5
000186  499c              LDR      r1,|L6.1016|
000188  7108              STRB     r0,[r1,#4]
;;;312    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*2+ BaseAddr;
00018a  7960              LDRB     r0,[r4,#5]
00018c  eb0000c0          ADD      r0,r0,r0,LSL #3
000190  eb000040          ADD      r0,r0,r0,LSL #1
000194  2138              MOVS     r1,#0x38
000196  eb010040          ADD      r0,r1,r0,LSL #1
00019a  4428              ADD      r0,r0,r5
00019c  4996              LDR      r1,|L6.1016|
00019e  7148              STRB     r0,[r1,#5]
;;;313    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*1+ BaseAddr;
0001a0  79a0              LDRB     r0,[r4,#6]
0001a2  eb0000c0          ADD      r0,r0,r0,LSL #3
0001a6  eb000040          ADD      r0,r0,r0,LSL #1
0001aa  211c              MOVS     r1,#0x1c
0001ac  eb010040          ADD      r0,r1,r0,LSL #1
0001b0  4428              ADD      r0,r0,r5
0001b2  4991              LDR      r1,|L6.1016|
0001b4  7188              STRB     r0,[r1,#6]
;;;314    		break;
0001b6  e159              B        |L6.1132|
;;;315    		case 4:
;;;316    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*2+ BaseAddr;
0001b8  78a0              LDRB     r0,[r4,#2]
0001ba  eb0000c0          ADD      r0,r0,r0,LSL #3
0001be  eb000040          ADD      r0,r0,r0,LSL #1
0001c2  2138              MOVS     r1,#0x38
0001c4  eb010040          ADD      r0,r1,r0,LSL #1
0001c8  4428              ADD      r0,r0,r5
0001ca  498b              LDR      r1,|L6.1016|
0001cc  7088              STRB     r0,[r1,#2]
;;;317    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*1+ BaseAddr;
0001ce  78e0              LDRB     r0,[r4,#3]
0001d0  eb0000c0          ADD      r0,r0,r0,LSL #3
0001d4  eb000040          ADD      r0,r0,r0,LSL #1
0001d8  211c              MOVS     r1,#0x1c
0001da  eb010040          ADD      r0,r1,r0,LSL #1
0001de  4428              ADD      r0,r0,r5
0001e0  4985              LDR      r1,|L6.1016|
0001e2  70c8              STRB     r0,[r1,#3]
;;;318    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*1+ BaseAddr;
0001e4  7920              LDRB     r0,[r4,#4]
0001e6  eb0000c0          ADD      r0,r0,r0,LSL #3
0001ea  eb000040          ADD      r0,r0,r0,LSL #1
0001ee  211c              MOVS     r1,#0x1c
0001f0  eb010040          ADD      r0,r1,r0,LSL #1
0001f4  4428              ADD      r0,r0,r5
0001f6  4980              LDR      r1,|L6.1016|
0001f8  7108              STRB     r0,[r1,#4]
;;;319    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*2+ BaseAddr;
0001fa  7960              LDRB     r0,[r4,#5]
0001fc  eb0000c0          ADD      r0,r0,r0,LSL #3
000200  eb000040          ADD      r0,r0,r0,LSL #1
000204  2138              MOVS     r1,#0x38
000206  eb010040          ADD      r0,r1,r0,LSL #1
00020a  4428              ADD      r0,r0,r5
00020c  497a              LDR      r1,|L6.1016|
00020e  7148              STRB     r0,[r1,#5]
;;;320    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*2+ BaseAddr;
000210  79a0              LDRB     r0,[r4,#6]
000212  eb0000c0          ADD      r0,r0,r0,LSL #3
000216  eb000040          ADD      r0,r0,r0,LSL #1
00021a  2138              MOVS     r1,#0x38
00021c  eb010040          ADD      r0,r1,r0,LSL #1
000220  4428              ADD      r0,r0,r5
000222  4975              LDR      r1,|L6.1016|
000224  7188              STRB     r0,[r1,#6]
;;;321    		break;
000226  e121              B        |L6.1132|
000228  e0e8              B        |L6.1020|
00022a  e0aa              B        |L6.898|
00022c  e071              B        |L6.786|
00022e  e038              B        |L6.674|
000230  e7ff              B        |L6.562|
                  |L6.562|
;;;322    		case 5:
;;;323    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*2+ BaseAddr;
000232  78a0              LDRB     r0,[r4,#2]
000234  eb0000c0          ADD      r0,r0,r0,LSL #3
000238  eb000040          ADD      r0,r0,r0,LSL #1
00023c  2138              MOVS     r1,#0x38
00023e  eb010040          ADD      r0,r1,r0,LSL #1
000242  4428              ADD      r0,r0,r5
000244  496c              LDR      r1,|L6.1016|
000246  7088              STRB     r0,[r1,#2]
;;;324    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*2+ BaseAddr;
000248  78e0              LDRB     r0,[r4,#3]
00024a  eb0000c0          ADD      r0,r0,r0,LSL #3
00024e  eb000040          ADD      r0,r0,r0,LSL #1
000252  2138              MOVS     r1,#0x38
000254  eb010040          ADD      r0,r1,r0,LSL #1
000258  4428              ADD      r0,r0,r5
00025a  4967              LDR      r1,|L6.1016|
00025c  70c8              STRB     r0,[r1,#3]
;;;325    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*1+ BaseAddr;
00025e  7920              LDRB     r0,[r4,#4]
000260  eb0000c0          ADD      r0,r0,r0,LSL #3
000264  eb000040          ADD      r0,r0,r0,LSL #1
000268  211c              MOVS     r1,#0x1c
00026a  eb010040          ADD      r0,r1,r0,LSL #1
00026e  4428              ADD      r0,r0,r5
000270  4961              LDR      r1,|L6.1016|
000272  7108              STRB     r0,[r1,#4]
;;;326    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*1+ BaseAddr;
000274  7960              LDRB     r0,[r4,#5]
000276  eb0000c0          ADD      r0,r0,r0,LSL #3
00027a  eb000040          ADD      r0,r0,r0,LSL #1
00027e  211c              MOVS     r1,#0x1c
000280  eb010040          ADD      r0,r1,r0,LSL #1
000284  4428              ADD      r0,r0,r5
000286  495c              LDR      r1,|L6.1016|
000288  7148              STRB     r0,[r1,#5]
;;;327    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*2+ BaseAddr;
00028a  79a0              LDRB     r0,[r4,#6]
00028c  eb0000c0          ADD      r0,r0,r0,LSL #3
000290  eb000040          ADD      r0,r0,r0,LSL #1
000294  2138              MOVS     r1,#0x38
000296  eb010040          ADD      r0,r1,r0,LSL #1
00029a  4428              ADD      r0,r0,r5
00029c  4956              LDR      r1,|L6.1016|
00029e  7188              STRB     r0,[r1,#6]
;;;328    		break;
0002a0  e0e4              B        |L6.1132|
                  |L6.674|
;;;329    		case 6:
;;;330    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*2+ BaseAddr;
0002a2  78a0              LDRB     r0,[r4,#2]
0002a4  eb0000c0          ADD      r0,r0,r0,LSL #3
0002a8  eb000040          ADD      r0,r0,r0,LSL #1
0002ac  2138              MOVS     r1,#0x38
0002ae  eb010040          ADD      r0,r1,r0,LSL #1
0002b2  4428              ADD      r0,r0,r5
0002b4  4950              LDR      r1,|L6.1016|
0002b6  7088              STRB     r0,[r1,#2]
;;;331    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*2+ BaseAddr;
0002b8  78e0              LDRB     r0,[r4,#3]
0002ba  eb0000c0          ADD      r0,r0,r0,LSL #3
0002be  eb000040          ADD      r0,r0,r0,LSL #1
0002c2  2138              MOVS     r1,#0x38
0002c4  eb010040          ADD      r0,r1,r0,LSL #1
0002c8  4428              ADD      r0,r0,r5
0002ca  494b              LDR      r1,|L6.1016|
0002cc  70c8              STRB     r0,[r1,#3]
;;;332    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*2+ BaseAddr;
0002ce  7920              LDRB     r0,[r4,#4]
0002d0  eb0000c0          ADD      r0,r0,r0,LSL #3
0002d4  eb000040          ADD      r0,r0,r0,LSL #1
0002d8  2138              MOVS     r1,#0x38
0002da  eb010040          ADD      r0,r1,r0,LSL #1
0002de  4428              ADD      r0,r0,r5
0002e0  4945              LDR      r1,|L6.1016|
0002e2  7108              STRB     r0,[r1,#4]
;;;333    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*1+ BaseAddr;
0002e4  7960              LDRB     r0,[r4,#5]
0002e6  eb0000c0          ADD      r0,r0,r0,LSL #3
0002ea  eb000040          ADD      r0,r0,r0,LSL #1
0002ee  211c              MOVS     r1,#0x1c
0002f0  eb010040          ADD      r0,r1,r0,LSL #1
0002f4  4428              ADD      r0,r0,r5
0002f6  4940              LDR      r1,|L6.1016|
0002f8  7148              STRB     r0,[r1,#5]
;;;334    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*1+ BaseAddr;
0002fa  79a0              LDRB     r0,[r4,#6]
0002fc  eb0000c0          ADD      r0,r0,r0,LSL #3
000300  eb000040          ADD      r0,r0,r0,LSL #1
000304  211c              MOVS     r1,#0x1c
000306  eb010040          ADD      r0,r1,r0,LSL #1
00030a  4428              ADD      r0,r0,r5
00030c  493a              LDR      r1,|L6.1016|
00030e  7188              STRB     r0,[r1,#6]
;;;335    		break;
000310  e0ac              B        |L6.1132|
                  |L6.786|
;;;336    		case 7:
;;;337    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*2+ BaseAddr;
000312  78a0              LDRB     r0,[r4,#2]
000314  eb0000c0          ADD      r0,r0,r0,LSL #3
000318  eb000040          ADD      r0,r0,r0,LSL #1
00031c  2138              MOVS     r1,#0x38
00031e  eb010040          ADD      r0,r1,r0,LSL #1
000322  4428              ADD      r0,r0,r5
000324  4934              LDR      r1,|L6.1016|
000326  7088              STRB     r0,[r1,#2]
;;;338    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*1+ BaseAddr;
000328  78e0              LDRB     r0,[r4,#3]
00032a  eb0000c0          ADD      r0,r0,r0,LSL #3
00032e  eb000040          ADD      r0,r0,r0,LSL #1
000332  211c              MOVS     r1,#0x1c
000334  eb010040          ADD      r0,r1,r0,LSL #1
000338  4428              ADD      r0,r0,r5
00033a  492f              LDR      r1,|L6.1016|
00033c  70c8              STRB     r0,[r1,#3]
;;;339    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*2+ BaseAddr;
00033e  7920              LDRB     r0,[r4,#4]
000340  eb0000c0          ADD      r0,r0,r0,LSL #3
000344  eb000040          ADD      r0,r0,r0,LSL #1
000348  2138              MOVS     r1,#0x38
00034a  eb010040          ADD      r0,r1,r0,LSL #1
00034e  4428              ADD      r0,r0,r5
000350  4929              LDR      r1,|L6.1016|
000352  7108              STRB     r0,[r1,#4]
;;;340    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*1+ BaseAddr;
000354  7960              LDRB     r0,[r4,#5]
000356  eb0000c0          ADD      r0,r0,r0,LSL #3
00035a  eb000040          ADD      r0,r0,r0,LSL #1
00035e  211c              MOVS     r1,#0x1c
000360  eb010040          ADD      r0,r1,r0,LSL #1
000364  4428              ADD      r0,r0,r5
000366  4924              LDR      r1,|L6.1016|
000368  7148              STRB     r0,[r1,#5]
;;;341    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*2+ BaseAddr;
00036a  79a0              LDRB     r0,[r4,#6]
00036c  eb0000c0          ADD      r0,r0,r0,LSL #3
000370  eb000040          ADD      r0,r0,r0,LSL #1
000374  2138              MOVS     r1,#0x38
000376  eb010040          ADD      r0,r1,r0,LSL #1
00037a  4428              ADD      r0,r0,r5
00037c  491e              LDR      r1,|L6.1016|
00037e  7188              STRB     r0,[r1,#6]
;;;342    		break;
000380  e074              B        |L6.1132|
                  |L6.898|
;;;343    		case 8:
;;;344    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*2+ BaseAddr;
000382  78a0              LDRB     r0,[r4,#2]
000384  eb0000c0          ADD      r0,r0,r0,LSL #3
000388  eb000040          ADD      r0,r0,r0,LSL #1
00038c  2138              MOVS     r1,#0x38
00038e  eb010040          ADD      r0,r1,r0,LSL #1
000392  4428              ADD      r0,r0,r5
000394  4918              LDR      r1,|L6.1016|
000396  7088              STRB     r0,[r1,#2]
;;;345    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*1+ BaseAddr;
000398  78e0              LDRB     r0,[r4,#3]
00039a  eb0000c0          ADD      r0,r0,r0,LSL #3
00039e  eb000040          ADD      r0,r0,r0,LSL #1
0003a2  211c              MOVS     r1,#0x1c
0003a4  eb010040          ADD      r0,r1,r0,LSL #1
0003a8  4428              ADD      r0,r0,r5
0003aa  4913              LDR      r1,|L6.1016|
0003ac  70c8              STRB     r0,[r1,#3]
;;;346    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*2+ BaseAddr;
0003ae  7920              LDRB     r0,[r4,#4]
0003b0  eb0000c0          ADD      r0,r0,r0,LSL #3
0003b4  eb000040          ADD      r0,r0,r0,LSL #1
0003b8  2138              MOVS     r1,#0x38
0003ba  eb010040          ADD      r0,r1,r0,LSL #1
0003be  4428              ADD      r0,r0,r5
0003c0  490d              LDR      r1,|L6.1016|
0003c2  7108              STRB     r0,[r1,#4]
;;;347    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*2+ BaseAddr;
0003c4  7960              LDRB     r0,[r4,#5]
0003c6  eb0000c0          ADD      r0,r0,r0,LSL #3
0003ca  eb000040          ADD      r0,r0,r0,LSL #1
0003ce  2138              MOVS     r1,#0x38
0003d0  eb010040          ADD      r0,r1,r0,LSL #1
0003d4  4428              ADD      r0,r0,r5
0003d6  4908              LDR      r1,|L6.1016|
0003d8  7148              STRB     r0,[r1,#5]
;;;348    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*1+ BaseAddr;
0003da  79a0              LDRB     r0,[r4,#6]
0003dc  eb0000c0          ADD      r0,r0,r0,LSL #3
0003e0  eb000040          ADD      r0,r0,r0,LSL #1
0003e4  211c              MOVS     r1,#0x1c
0003e6  eb010040          ADD      r0,r1,r0,LSL #1
0003ea  4428              ADD      r0,r0,r5
0003ec  4902              LDR      r1,|L6.1016|
0003ee  7188              STRB     r0,[r1,#6]
;;;349    		break;
0003f0  e03c              B        |L6.1132|
0003f2  0000              DCW      0x0000
                  |L6.1012|
                          DCD      0x00478fd2
                  |L6.1016|
                          DCD      BAR_PIC_ADDR
                  |L6.1020|
;;;350    		case 9:
;;;351    			BAR_PIC_ADDR[2]=BAR_NUM[2]*54+540*2+ BaseAddr;
0003fc  78a0              LDRB     r0,[r4,#2]
0003fe  eb0000c0          ADD      r0,r0,r0,LSL #3
000402  eb000040          ADD      r0,r0,r0,LSL #1
000406  2138              MOVS     r1,#0x38
000408  eb010040          ADD      r0,r1,r0,LSL #1
00040c  4428              ADD      r0,r0,r5
00040e  492e              LDR      r1,|L6.1224|
000410  7088              STRB     r0,[r1,#2]
;;;352    			BAR_PIC_ADDR[3]=BAR_NUM[3]*54+540*2+ BaseAddr;
000412  78e0              LDRB     r0,[r4,#3]
000414  eb0000c0          ADD      r0,r0,r0,LSL #3
000418  eb000040          ADD      r0,r0,r0,LSL #1
00041c  2138              MOVS     r1,#0x38
00041e  eb010040          ADD      r0,r1,r0,LSL #1
000422  4428              ADD      r0,r0,r5
000424  4928              LDR      r1,|L6.1224|
000426  70c8              STRB     r0,[r1,#3]
;;;353    			BAR_PIC_ADDR[4]=BAR_NUM[4]*54+540*1+ BaseAddr;
000428  7920              LDRB     r0,[r4,#4]
00042a  eb0000c0          ADD      r0,r0,r0,LSL #3
00042e  eb000040          ADD      r0,r0,r0,LSL #1
000432  211c              MOVS     r1,#0x1c
000434  eb010040          ADD      r0,r1,r0,LSL #1
000438  4428              ADD      r0,r0,r5
00043a  4923              LDR      r1,|L6.1224|
00043c  7108              STRB     r0,[r1,#4]
;;;354    			BAR_PIC_ADDR[5]=BAR_NUM[5]*54+540*2+ BaseAddr;
00043e  7960              LDRB     r0,[r4,#5]
000440  eb0000c0          ADD      r0,r0,r0,LSL #3
000444  eb000040          ADD      r0,r0,r0,LSL #1
000448  2138              MOVS     r1,#0x38
00044a  eb010040          ADD      r0,r1,r0,LSL #1
00044e  4428              ADD      r0,r0,r5
000450  491d              LDR      r1,|L6.1224|
000452  7148              STRB     r0,[r1,#5]
;;;355    			BAR_PIC_ADDR[6]=BAR_NUM[6]*54+540*1+ BaseAddr;
000454  79a0              LDRB     r0,[r4,#6]
000456  eb0000c0          ADD      r0,r0,r0,LSL #3
00045a  eb000040          ADD      r0,r0,r0,LSL #1
00045e  211c              MOVS     r1,#0x1c
000460  eb010040          ADD      r0,r1,r0,LSL #1
000464  4428              ADD      r0,r0,r5
000466  4918              LDR      r1,|L6.1224|
000468  7188              STRB     r0,[r1,#6]
;;;356    		break;
00046a  bf00              NOP      
                  |L6.1132|
00046c  bf00              NOP                            ;293
;;;357    	}
;;;358    	BAR_PIC_ADDR[7]=BAR_NUM[7]*54+540*3+ BaseAddr;
00046e  79e0              LDRB     r0,[r4,#7]
000470  eb0000c0          ADD      r0,r0,r0,LSL #3
000474  eb000040          ADD      r0,r0,r0,LSL #1
000478  2154              MOVS     r1,#0x54
00047a  eb010040          ADD      r0,r1,r0,LSL #1
00047e  4428              ADD      r0,r0,r5
000480  4911              LDR      r1,|L6.1224|
000482  71c8              STRB     r0,[r1,#7]
;;;359    	for(i=8;i<=11;i++)
000484  2608              MOVS     r6,#8
000486  e00b              B        |L6.1184|
                  |L6.1160|
;;;360    	{
;;;361    		BAR_PIC_ADDR[i]=BAR_NUM[i]*54+540*4+ BaseAddr;
000488  5da0              LDRB     r0,[r4,r6]
00048a  eb0000c0          ADD      r0,r0,r0,LSL #3
00048e  eb000040          ADD      r0,r0,r0,LSL #1
000492  2170              MOVS     r1,#0x70
000494  eb010040          ADD      r0,r1,r0,LSL #1
000498  4428              ADD      r0,r0,r5
00049a  490b              LDR      r1,|L6.1224|
00049c  5588              STRB     r0,[r1,r6]
00049e  1c76              ADDS     r6,r6,#1              ;359
                  |L6.1184|
0004a0  2e0b              CMP      r6,#0xb               ;359
0004a2  d9f1              BLS      |L6.1160|
;;;362    	}
;;;363    	BAR_PIC_ADDR[12]=BAR_NUM[12]*54+540*5+ BaseAddr;
0004a4  7b20              LDRB     r0,[r4,#0xc]
0004a6  eb0000c0          ADD      r0,r0,r0,LSL #3
0004aa  eb000040          ADD      r0,r0,r0,LSL #1
0004ae  218c              MOVS     r1,#0x8c
0004b0  eb010040          ADD      r0,r1,r0,LSL #1
0004b4  4428              ADD      r0,r0,r5
0004b6  4904              LDR      r1,|L6.1224|
0004b8  7308              STRB     r0,[r1,#0xc]
;;;364    	
;;;365    	memcpy(BAR_NUM,BAR_PIC_ADDR,140);	
0004ba  228c              MOVS     r2,#0x8c
0004bc  4620              MOV      r0,r4
0004be  f7fffffe          BL       __aeabi_memcpy
;;;366    	return BAR_PIC_ADDR[0];
0004c2  4801              LDR      r0,|L6.1224|
0004c4  7800              LDRB     r0,[r0,#0]  ; BAR_PIC_ADDR
;;;367    }
0004c6  bd70              POP      {r4-r6,pc}
;;;368    
                          ENDP

                  |L6.1224|
                          DCD      BAR_PIC_ADDR

                          AREA ||i.GT32L32_GetBatteryCode||, CODE, READONLY, ALIGN=2

                  GT32L32_GetBatteryCode PROC
;;;766    *******************************************************************************/
;;;767    u32 GT32L32_GetBatteryCode(u8	NUM,u8 *GetBuffer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;768    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;769      u32 lengh=24;
000008  2618              MOVS     r6,#0x18
;;;770    	u32 Address, BaseAdd=0x47ADAA;
00000a  f8df801c          LDR      r8,|L7.40|
;;;771    	Address=BaseAdd+NUM*24;
00000e  eb040044          ADD      r0,r4,r4,LSL #1
000012  eb0807c0          ADD      r7,r8,r0,LSL #3
;;;772      
;;;773      GT32L32_ReadBuffer(Address,lengh,GetBuffer);		//从字库中读数据并返回数据长度
000016  462a              MOV      r2,r5
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       GT32L32_ReadBuffer
;;;774      
;;;775    	return lengh;
000020  4630              MOV      r0,r6
;;;776    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;777    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      0x0047adaa

                          AREA ||i.GT32L32_GetBufferLen||, CODE, READONLY, ALIGN=1

                  GT32L32_GetBufferLen PROC
;;;224    ****************************************************************************************************/
;;;225    u32 GT32L32_GetBufferLen(u8 font, u8 c1, u8 c2, u8 c3, u8 c4) 
000000  b570              PUSH     {r4-r6,lr}
;;;226    {	
000002  4604              MOV      r4,r0
000004  9d04              LDR      r5,[sp,#0x10]
;;;227    	u32 lengh=0;
000006  2000              MOVS     r0,#0
;;;228    	//判断单字节与双字节字符（汉字通常为双字节）
;;;229    	if(c1>0x80)				//双字节，ASCII码表为（0x00~0x7F)
000008  2980              CMP      r1,#0x80
00000a  dd0f              BLE      |L8.44|
;;;230    	{	
;;;231    		//字体大小判断
;;;232    		if(font==12)
00000c  2c0c              CMP      r4,#0xc
00000e  d101              BNE      |L8.20|
;;;233    		{
;;;234    			lengh=24;		//12/8/1(列）x12（行）
000010  2018              MOVS     r0,#0x18
000012  e01a              B        |L8.74|
                  |L8.20|
;;;235    		}
;;;236    		else if(font==16)
000014  2c10              CMP      r4,#0x10
000016  d101              BNE      |L8.28|
;;;237    		{
;;;238    			lengh=32;		//16/8/1(列）x16（行）
000018  2020              MOVS     r0,#0x20
00001a  e016              B        |L8.74|
                  |L8.28|
;;;239    		}
;;;240    		else if(font==24)
00001c  2c18              CMP      r4,#0x18
00001e  d101              BNE      |L8.36|
;;;241    		{
;;;242    			lengh=72;		//24/8/1(列）x24（行）
000020  2048              MOVS     r0,#0x48
000022  e012              B        |L8.74|
                  |L8.36|
;;;243    		}
;;;244    		else if(font==32)
000024  2c20              CMP      r4,#0x20
000026  d110              BNE      |L8.74|
;;;245    		{
;;;246    			lengh=128;	//32/8/1(列）x32（行）
000028  2080              MOVS     r0,#0x80
00002a  e00e              B        |L8.74|
                  |L8.44|
;;;247    		}
;;;248    	}
;;;249    	else
;;;250    	{
;;;251    		//字体大小判断
;;;252    		if(font==12)
00002c  2c0c              CMP      r4,#0xc
00002e  d101              BNE      |L8.52|
;;;253    		{
;;;254    			lengh=16;		//12/8/2(列）x12（行）
000030  2010              MOVS     r0,#0x10
000032  e00a              B        |L8.74|
                  |L8.52|
;;;255    		}
;;;256    		else if(font==16)
000034  2c10              CMP      r4,#0x10
000036  d101              BNE      |L8.60|
;;;257    		{
;;;258    			lengh=16;		//16/8/2(列）x16（行）
000038  2010              MOVS     r0,#0x10
00003a  e006              B        |L8.74|
                  |L8.60|
;;;259    		}
;;;260    		else if(font==24)
00003c  2c18              CMP      r4,#0x18
00003e  d101              BNE      |L8.68|
;;;261    		{
;;;262    			lengh=48;		//24/8/2(列）x24（行）
000040  2030              MOVS     r0,#0x30
000042  e002              B        |L8.74|
                  |L8.68|
;;;263    		}
;;;264    		else if(font==32)
000044  2c20              CMP      r4,#0x20
000046  d100              BNE      |L8.74|
;;;265    		{
;;;266    			lengh=64;	//32/8/2(列）x32（行）
000048  2040              MOVS     r0,#0x40
                  |L8.74|
;;;267    		}
;;;268    	}
;;;269    	return lengh;	 
;;;270    }
00004a  bd70              POP      {r4-r6,pc}
;;;271    
                          ENDP


                          AREA ||i.GT32L32_GetCode||, CODE, READONLY, ALIGN=1

                  GT32L32_GetCode PROC
;;;785    *******************************************************************************/
;;;786    u16 GT32L32_GetCode(
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;787    												u8 font,								//字体大小
;;;788    												u16 word,								//字符内码值
;;;789                            u8 *ReadBuffer				  //接收数据的缓存
;;;790    											)
;;;791    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;792    	//____________定义变量
;;;793    	u32 i=0;
00000a  f04f0900          MOV      r9,#0
;;;794    	u32 Address=0;
00000e  46c8              MOV      r8,r9
;;;795    	u32 lengh=0;
000010  2500              MOVS     r5,#0
;;;796    	//区分单双字节
;;;797    	if(word>>8>=0x80)
000012  2080              MOVS     r0,#0x80
000014  ebb02f24          CMP      r0,r4,ASR #8
000018  dc12              BGT      |L9.64|
;;;798    	{
;;;799    		Address	=	GT32L32_GetAddress(font, (u8)(word>>8), (u8)word, 0, 0);		//获取地址
00001a  2000              MOVS     r0,#0
00001c  b2e2              UXTB     r2,r4
00001e  1221              ASRS     r1,r4,#8
000020  4603              MOV      r3,r0
000022  9000              STR      r0,[sp,#0]
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       GT32L32_GetAddress
00002a  4680              MOV      r8,r0
;;;800    		lengh= GT32L32_GetBufferLen(font, (u8)(word>>8), (u8)word, 0, 0);			//获取长度
00002c  2000              MOVS     r0,#0
00002e  b2e2              UXTB     r2,r4
000030  1221              ASRS     r1,r4,#8
000032  4603              MOV      r3,r0
000034  9000              STR      r0,[sp,#0]
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       GT32L32_GetBufferLen
00003c  4605              MOV      r5,r0
00003e  e011              B        |L9.100|
                  |L9.64|
;;;801    	}
;;;802    	else
;;;803    	{
;;;804    		Address	=	GT32L32_GetAddress(font, (u8)word, 0, 0, 0);			//获取地址
000040  2000              MOVS     r0,#0
000042  b2e1              UXTB     r1,r4
000044  4603              MOV      r3,r0
000046  4602              MOV      r2,r0
000048  9000              STR      r0,[sp,#0]
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       GT32L32_GetAddress
000050  4680              MOV      r8,r0
;;;805    		lengh= GT32L32_GetBufferLen(font, (u8)word, 0, 0, 0);			//获取长度
000052  2000              MOVS     r0,#0
000054  b2e1              UXTB     r1,r4
000056  4603              MOV      r3,r0
000058  4602              MOV      r2,r0
00005a  9000              STR      r0,[sp,#0]
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       GT32L32_GetBufferLen
000062  4605              MOV      r5,r0
                  |L9.100|
;;;806    	}	
;;;807      GT32L32_ReadBuffer(Address,lengh,ReadBuffer);		//读取数据
000064  463a              MOV      r2,r7
000066  4629              MOV      r1,r5
000068  4640              MOV      r0,r8
00006a  f7fffffe          BL       GT32L32_ReadBuffer
;;;808    	return lengh;
00006e  b2a8              UXTH     r0,r5
;;;809    }
000070  e8bd83f8          POP      {r3-r9,pc}
;;;810    
                          ENDP


                          AREA ||i.GT32L32_GetGB18030||, CODE, READONLY, ALIGN=2

                  GT32L32_GetGB18030 PROC
;;;82     ****************************************************************************************************/
;;;83     u32 GT32L32_GetGB18030(u8 c1, u8 c2, u8 c3, u8 c4) 
000000  b5f0              PUSH     {r4-r7,lr}
;;;84     { 
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;85     	u32 Address=0;						//Address：对应字符点阵在芯片中的字节地址。
000006  2200              MOVS     r2,#0
;;;86     	u32  BaseAdd=0x47AE10;		//32x32点阵字库起始地址：BaseAdd＝0x47AE10，
000008  4e4b              LDR      r6,|L10.312|
;;;87     	if(c2==0x7f) 
00000a  297f              CMP      r1,#0x7f
00000c  d101              BNE      |L10.18|
;;;88     	{
;;;89     		return (BaseAdd);
00000e  4630              MOV      r0,r6
                  |L10.16|
;;;90     	}
;;;91     	//====================Section 1
;;;92     	if((c1>=0xA1 && c1 <= 0xAB) && c2>=0xA1) 			//Section 1
;;;93     	{
;;;94     		Address= (c1 - 0xA1) * 94 + (c2 - 0xA1);
;;;95     	}
;;;96     	//====================Section 5	
;;;97     	else if((c1>=0xa8 && c1 <= 0xa9) && c2<0xa1) 	//Section 5
;;;98     	{ 
;;;99     		if(c2>0x7f)
;;;100    			c2--; 
;;;101    		Address=(c1-0xa8)*96 + (c2-0x40)+846; 
;;;102    	}
;;;103    	//====================Section 2
;;;104    	if((c1>=0xb0 && c1 <= 0xf7) && c2>=0xa1) 			//Section 2
;;;105    	{
;;;106    		Address= (c1 - 0xB0) * 94 + (c2 - 0xA1)	+	1038-192;
;;;107    	}
;;;108    	//====================Section 3
;;;109    	else if((c1<0xa1 && c1>=0x81) && c2>=0x40 ) 	//Section 3
;;;110    	{ 
;;;111    		if(c2>0x7f) 
;;;112    			c2--;
;;;113    		Address=(c1-0x81)*190 + (c2-0x40) + 1038 +	6768-192;
;;;114    	}
;;;115    	//====================Section 4
;;;116    	else if(c1>=0xaa && c2<0xa1) 								//Section 4
;;;117    	{ 
;;;118    		if(c2>0x7f) 
;;;119    			c2--; 
;;;120    		Address=(c1-0xaa)*96 + (c2-0x40) + 1038 +	12848-192; 
;;;121    	}
;;;122    	else if(c1==0x81 && c2>=0x39) 							//四字节区1 
;;;123    	{ 
;;;124    		Address =1038 + 21008+(c3-0xEE)*10+c4-0x39; 
;;;125    	} 
;;;126    	else if(c1==0x82)														//四字节区2 
;;;127    	{ 
;;;128    		Address =1038 + 21008+161+(c2-0x30)*1260+(c3-0x81)*10+c4-0x30; 
;;;129    	} 
;;;130    	return	Address;  
;;;131    }
000010  bdf0              POP      {r4-r7,pc}
                  |L10.18|
000012  2ca1              CMP      r4,#0xa1              ;92
000014  db0e              BLT      |L10.52|
000016  2cab              CMP      r4,#0xab              ;92
000018  dc0c              BGT      |L10.52|
00001a  29a1              CMP      r1,#0xa1              ;92
00001c  db0a              BLT      |L10.52|
00001e  f1a100a1          SUB      r0,r1,#0xa1           ;94
000022  f1a407a1          SUB      r7,r4,#0xa1           ;94
000026  ebc71c07          RSB      r12,r7,r7,LSL #4      ;94
00002a  eb0c1747          ADD      r7,r12,r7,LSL #5      ;94
00002e  eb000247          ADD      r2,r0,r7,LSL #1       ;94
000032  e013              B        |L10.92|
                  |L10.52|
000034  2ca8              CMP      r4,#0xa8              ;97
000036  db11              BLT      |L10.92|
000038  2ca9              CMP      r4,#0xa9              ;97
00003a  dc0f              BGT      |L10.92|
00003c  29a1              CMP      r1,#0xa1              ;97
00003e  da0d              BGE      |L10.92|
000040  297f              CMP      r1,#0x7f              ;99
000042  dd01              BLE      |L10.72|
000044  1e48              SUBS     r0,r1,#1              ;100
000046  b2c1              UXTB     r1,r0                 ;100
                  |L10.72|
000048  f1a10040          SUB      r0,r1,#0x40           ;101
00004c  f1a407a8          SUB      r7,r4,#0xa8           ;101
000050  eb070747          ADD      r7,r7,r7,LSL #1       ;101
000054  eb001047          ADD      r0,r0,r7,LSL #5       ;101
000058  f200324e          ADD      r2,r0,#0x34e          ;101
                  |L10.92|
00005c  2cb0              CMP      r4,#0xb0              ;104
00005e  db10              BLT      |L10.130|
000060  2cf7              CMP      r4,#0xf7              ;104
000062  dc0e              BGT      |L10.130|
000064  29a1              CMP      r1,#0xa1              ;104
000066  db0c              BLT      |L10.130|
000068  f1a100a1          SUB      r0,r1,#0xa1           ;106
00006c  f1a407b0          SUB      r7,r4,#0xb0           ;106
000070  ebc71c07          RSB      r12,r7,r7,LSL #4      ;106
000074  eb0c1747          ADD      r7,r12,r7,LSL #5      ;106
000078  eb000047          ADD      r0,r0,r7,LSL #1       ;106
00007c  f200324e          ADD      r2,r0,#0x34e          ;106
000080  e058              B        |L10.308|
                  |L10.130|
000082  2ca1              CMP      r4,#0xa1              ;109
000084  da19              BGE      |L10.186|
000086  2c81              CMP      r4,#0x81              ;109
000088  db17              BLT      |L10.186|
00008a  2940              CMP      r1,#0x40              ;109
00008c  db15              BLT      |L10.186|
00008e  297f              CMP      r1,#0x7f              ;111
000090  dd01              BLE      |L10.150|
000092  1e48              SUBS     r0,r1,#1              ;112
000094  b2c1              UXTB     r1,r0                 ;112
                  |L10.150|
000096  f1a10040          SUB      r0,r1,#0x40           ;113
00009a  f1a40781          SUB      r7,r4,#0x81           ;113
00009e  ebc71c47          RSB      r12,r7,r7,LSL #5      ;113
0000a2  eb0c1787          ADD      r7,r12,r7,LSL #6      ;113
0000a6  eb000047          ADD      r0,r0,r7,LSL #1       ;113
0000aa  f200400e          ADD      r0,r0,#0x40e          ;113
0000ae  f6412770          MOV      r7,#0x1a70            ;113
0000b2  4438              ADD      r0,r0,r7              ;113
0000b4  f1a002c0          SUB      r2,r0,#0xc0           ;113
0000b8  e03c              B        |L10.308|
                  |L10.186|
0000ba  2caa              CMP      r4,#0xaa              ;116
0000bc  db15              BLT      |L10.234|
0000be  29a1              CMP      r1,#0xa1              ;116
0000c0  da13              BGE      |L10.234|
0000c2  297f              CMP      r1,#0x7f              ;118
0000c4  dd01              BLE      |L10.202|
0000c6  1e48              SUBS     r0,r1,#1              ;119
0000c8  b2c1              UXTB     r1,r0                 ;119
                  |L10.202|
0000ca  f1a10040          SUB      r0,r1,#0x40           ;120
0000ce  f1a407aa          SUB      r7,r4,#0xaa           ;120
0000d2  eb070747          ADD      r7,r7,r7,LSL #1       ;120
0000d6  eb001047          ADD      r0,r0,r7,LSL #5       ;120
0000da  f200400e          ADD      r0,r0,#0x40e          ;120
0000de  f2432730          MOV      r7,#0x3230            ;120
0000e2  4438              ADD      r0,r0,r7              ;120
0000e4  f1a002c0          SUB      r2,r0,#0xc0           ;120
0000e8  e024              B        |L10.308|
                  |L10.234|
0000ea  2c81              CMP      r4,#0x81              ;122
0000ec  d10d              BNE      |L10.266|
0000ee  2939              CMP      r1,#0x39              ;122
0000f0  db0b              BLT      |L10.266|
0000f2  f1a500ee          SUB      r0,r5,#0xee           ;124
0000f6  eb000080          ADD      r0,r0,r0,LSL #2       ;124
0000fa  f245671e          MOV      r7,#0x561e            ;124
0000fe  eb070040          ADD      r0,r7,r0,LSL #1       ;124
000102  4418              ADD      r0,r0,r3              ;124
000104  f1a00239          SUB      r2,r0,#0x39           ;124
000108  e014              B        |L10.308|
                  |L10.266|
00010a  2c82              CMP      r4,#0x82              ;126
00010c  d112              BNE      |L10.308|
00010e  f1a10030          SUB      r0,r1,#0x30           ;128
000112  ebc01080          RSB      r0,r0,r0,LSL #6       ;128
000116  eb000080          ADD      r0,r0,r0,LSL #2       ;128
00011a  f24567bf          MOV      r7,#0x56bf            ;128
00011e  eb070780          ADD      r7,r7,r0,LSL #2       ;128
000122  f1a50081          SUB      r0,r5,#0x81           ;128
000126  eb000080          ADD      r0,r0,r0,LSL #2       ;128
00012a  eb070040          ADD      r0,r7,r0,LSL #1       ;128
00012e  4418              ADD      r0,r0,r3              ;128
000130  f1a00230          SUB      r2,r0,#0x30           ;128
                  |L10.308|
000134  4610              MOV      r0,r2                 ;130
000136  e76b              B        |L10.16|
;;;132    /*******************************************************************************
                          ENDP

                  |L10.312|
                          DCD      0x0047ae10

                          AREA ||i.GT32L32_Initialize||, CODE, READONLY, ALIGN=2

                  GT32L32_Initialize PROC
;;;63     *******************************************************************************/
;;;64     void GT32L32_Initialize(SPIDef *SpiPort)
000000  b510              PUSH     {r4,lr}
;;;65     {
000002  4604              MOV      r4,r0
;;;66       pSPI  = SpiPort;
000004  4806              LDR      r0,|L11.32|
000006  6004              STR      r4,[r0,#0]  ; pSPI
;;;67       SPI_Initialize(pSPI);				//普通SPI通讯方式配置
000008  6800              LDR      r0,[r0,#0]  ; pSPI
00000a  f7fffffe          BL       SPI_Initialize
;;;68     	SPI_CS_LOW(pSPI);
00000e  4804              LDR      r0,|L11.32|
000010  6800              LDR      r0,[r0,#0]  ; pSPI
000012  f7fffffe          BL       SPI_CS_LOW
;;;69     	SPI_CS_HIGH(pSPI);
000016  4802              LDR      r0,|L11.32|
000018  6800              LDR      r0,[r0,#0]  ; pSPI
00001a  f7fffffe          BL       SPI_CS_HIGH
;;;70     }
00001e  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  |L11.32|
                          DCD      pSPI

                          AREA ||i.GT32L32_ReadBuffer||, CODE, READONLY, ALIGN=2

                  GT32L32_ReadBuffer PROC
;;;703    *******************************************************************************/
;;;704    u16 GT32L32_ReadBuffer(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;705    												u32 Address,					  //起始地址
;;;706    												u32 lengh,						  //需要读取的长度
;;;707                            u8 *ReadBuffer				  //接收数据的缓存
;;;708    											)
;;;709    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;710    	//____________定义变量
;;;711    	u32 i=0;
00000a  2600              MOVS     r6,#0
;;;712    	//____________使能片选
;;;713    //	SPI_Cmd(pInfo->SPI.Port.SPIx, ENABLE);
;;;714    	SPI_CS_LOW(pSPI);
00000c  4816              LDR      r0,|L12.104|
00000e  6800              LDR      r0,[r0,#0]  ; pSPI
000010  f7fffffe          BL       SPI_CS_LOW
;;;715    	Address=Address|0x03000000;		//0x03指令字+地址。
000014  f0447440          ORR      r4,r4,#0x3000000
;;;716    	//Address=Address|0x0B000000;//0x0B指令字+地址。--快速
;;;717    
;;;718    	SPI_ReadWriteByteSPI(pSPI,Address>>24);				//发送地址高8位
000018  0e21              LSRS     r1,r4,#24
00001a  4813              LDR      r0,|L12.104|
00001c  6800              LDR      r0,[r0,#0]  ; pSPI
00001e  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;719    	SPI_ReadWriteByteSPI(pSPI,Address>>16);				//发送地址
000022  f3c44107          UBFX     r1,r4,#16,#8
000026  4810              LDR      r0,|L12.104|
000028  6800              LDR      r0,[r0,#0]  ; pSPI
00002a  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;720    	SPI_ReadWriteByteSPI(pSPI,Address>>8);				//发送地址
00002e  f3c42107          UBFX     r1,r4,#8,#8
000032  480d              LDR      r0,|L12.104|
000034  6800              LDR      r0,[r0,#0]  ; pSPI
000036  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;721    	SPI_ReadWriteByteSPI(pSPI,Address);						//发送地址
00003a  b2e1              UXTB     r1,r4
00003c  480a              LDR      r0,|L12.104|
00003e  6800              LDR      r0,[r0,#0]  ; pSPI
000040  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;722    	
;;;723    //	if((Address&0x0B000000)==0x0B000000)
;;;724    //		SPI_ReadWriteByteSPI(pInfo->SPI.Port.SPIx,0XFF);						//从字库读出点阵数据到数组中。
;;;725    //	while((Status=GT32L32_ReadStatus()&0x01)!=0x01);
;;;726    	for(i=0;i<lengh;i++)
000044  bf00              NOP      
000046  e006              B        |L12.86|
                  |L12.72|
;;;727    	{
;;;728    		ReadBuffer[i]=SPI_ReadWriteByteSPI(pSPI,0XFF);	//从字库读出点阵数据到数组中。
000048  21ff              MOVS     r1,#0xff
00004a  4807              LDR      r0,|L12.104|
00004c  6800              LDR      r0,[r0,#0]  ; pSPI
00004e  f7fffffe          BL       SPI_ReadWriteByteSPI
000052  55b8              STRB     r0,[r7,r6]
000054  1c76              ADDS     r6,r6,#1              ;726
                  |L12.86|
000056  42ae              CMP      r6,r5                 ;726
000058  d3f6              BCC      |L12.72|
;;;729    	}
;;;730    	//____________取消片选	
;;;731    	SPI_CS_HIGH(pSPI);
00005a  4803              LDR      r0,|L12.104|
00005c  6800              LDR      r0,[r0,#0]  ; pSPI
00005e  f7fffffe          BL       SPI_CS_HIGH
;;;732    //	SPI_Cmd(pInfo->SPI.Port.SPIx, DISABLE);
;;;733    //	pInfo->Data.Address			=	Address;
;;;734    //	pInfo->Data.BufferSize	=	lengh;
;;;735    	return lengh;	
000062  b2a8              UXTH     r0,r5
;;;736    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;737    /*******************************************************************************
                          ENDP

                  |L12.104|
                          DCD      pSPI

                          AREA ||i.GT32L32_ReadStatus||, CODE, READONLY, ALIGN=2

                  GT32L32_ReadStatus PROC
;;;645    *******************************************************************************/
;;;646    u8 GT32L32_ReadStatus(GT32L32Def *pInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;647    {
000002  4604              MOV      r4,r0
;;;648    	//____________定义变量
;;;649    	u8	ChipStatus=0;
000004  2500              MOVS     r5,#0
;;;650    	u8	Address=0x05;	//0X60 OR 0XC7
000006  2605              MOVS     r6,#5
;;;651    	//____________使能片选
;;;652    	GPIO_ResetBits(GPIOC,GPIO_Pin_6);
000008  2140              MOVS     r1,#0x40
00000a  480d              LDR      r0,|L13.64|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;653    	SPI_Cmd(pInfo->SPI.Port.SPIx, ENABLE);
000010  2101              MOVS     r1,#1
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       SPI_Cmd
;;;654    	//____________发送地址数据	
;;;655    	SPI_ReadWriteByteSPI(&pInfo->SPI,Address);						//发送地址
000018  4631              MOV      r1,r6
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SPI_ReadWriteByteSPI
;;;656    	//____________接收数据	
;;;657    	
;;;658    	ChipStatus=SPI_ReadWriteByteSPI(&pInfo->SPI,0XFF);// 从字库读出点阵数据到数组中。
000020  21ff              MOVS     r1,#0xff
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       SPI_ReadWriteByteSPI
000028  4605              MOV      r5,r0
;;;659    
;;;660    	//____________取消片选	
;;;661    	GPIO_SetBits(GPIOC,GPIO_Pin_6);
00002a  2140              MOVS     r1,#0x40
00002c  4804              LDR      r0,|L13.64|
00002e  f7fffffe          BL       GPIO_SetBits
;;;662    	SPI_Cmd(pInfo->SPI.Port.SPIx, DISABLE);
000032  2100              MOVS     r1,#0
000034  6820              LDR      r0,[r4,#0]
000036  f7fffffe          BL       SPI_Cmd
;;;663    
;;;664    	return ChipStatus;
00003a  4628              MOV      r0,r5
;;;665    }
00003c  bd70              POP      {r4-r6,pc}
;;;666    /*******************************************************************************
                          ENDP

00003e  0000              DCW      0x0000
                  |L13.64|
                          DCD      0x40011000

                          AREA ||i.GT32L32_U2G_13||, CODE, READONLY, ALIGN=2

                  GT32L32_U2G_13 PROC
;;;463    
;;;464    u16 GT32L32_U2G_13(u16 Unicode) 
000000  b570              PUSH     {r4-r6,lr}
;;;465    {
000002  b0b0              SUB      sp,sp,#0xc0
000004  4604              MOV      r4,r0
;;;466    	u16 GB_Code; 
;;;467    	u32 i; 
;;;468    	u16 UG[]={	0x3000,0x3001,0x3002,0x00b7,0x02c9,0x02c7,0x00a8,
000006  22bc              MOVS     r2,#0xbc
000008  4927              LDR      r1,|L14.168|
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;469    							0x3003,0x3005,0x2014, 0xff5e,0x2016,0x2026,0x2018,0x2019,0x201c,
;;;470    							0x201d,0x3014,0x3015,0x3008, 0x3009,0x300a,0x300b,0x300c,0x300d,
;;;471    							0x300e,0x300f,0x3016,0x3017,0x3010, 0x3011,0x00b1,0x00d7,0x00f7,
;;;472    							0x2236,0x2227,0x2228,0x2211,0x220f,0x222a, 0x2229,0x2208,0x2237,
;;;473    							0x221a,0x22a5,0x2225,0x2220,0x2312,0x2299,0x222b, 0x222e,0x2261,
;;;474    							0x224c,0x2248,0x223d,0x221d,0x2260,0x226e,0x226f,0x2264, 0x2265,
;;;475    							0x221e,0x2235,0x2234,0x2642,0x2640,0x00b0,0x2032,0x2033,0x2103,
;;;476    							0xff04,0x00a4,0xffe0,0xffe1,0x2030,0x00a7,0x2116,0x2606,0x2605,
;;;477    							0x25cb, 0x25cf,0x25ce,0x25c7,0x25c6,0x25a1,0x25a0,0x25b3,0x25b2,
;;;478    							0x203b,0x2192, 0x2190,0x2191,0x2193,0x3013
;;;479    						}; 
;;;480    
;;;481    	if(Unicode<=0xffe5&&Unicode>=0xff01)//section 3 
000010  f64f70e5          MOV      r0,#0xffe5
000014  4284              CMP      r4,r0
000016  dc2e              BGT      |L14.118|
000018  f5b44f7f          CMP      r4,#0xff00
00001c  dd2b              BLE      |L14.118|
;;;482    	{ 
;;;483    		if(Unicode==0xff04) 
00001e  f64f7004          MOV      r0,#0xff04
000022  4284              CMP      r4,r0
000024  d101              BNE      |L14.42|
;;;484    			GB_Code=0xa1e7;
000026  f24a16e7          MOV      r6,#0xa1e7
                  |L14.42|
;;;485    		if(Unicode==0xff5e) 
00002a  f64f705e          MOV      r0,#0xff5e
00002e  4284              CMP      r4,r0
000030  d101              BNE      |L14.54|
;;;486    			GB_Code=0xa1ab; 
000032  f24a16ab          MOV      r6,#0xa1ab
                  |L14.54|
;;;487    		if(Unicode==0xffe0) 
000036  f64f70e0          MOV      r0,#0xffe0
00003a  4284              CMP      r4,r0
00003c  d101              BNE      |L14.66|
;;;488    			GB_Code=0xa1e9; 
00003e  f24a16e9          MOV      r6,#0xa1e9
                  |L14.66|
;;;489    		if(Unicode==0xffe1) 
000042  f64f70e1          MOV      r0,#0xffe1
000046  4284              CMP      r4,r0
000048  d101              BNE      |L14.78|
;;;490    			GB_Code=0xa1ea; 
00004a  f24a16ea          MOV      r6,#0xa1ea
                  |L14.78|
;;;491    		if(Unicode==0xffe3) 
00004e  f64f70e3          MOV      r0,#0xffe3
000052  4284              CMP      r4,r0
000054  d101              BNE      |L14.90|
;;;492    			GB_Code=0xa3fe; 
000056  f24a36fe          MOV      r6,#0xa3fe
                  |L14.90|
;;;493    		if(Unicode==0xffe5) 
00005a  f64f70e5          MOV      r0,#0xffe5
00005e  4284              CMP      r4,r0
000060  d102              BNE      |L14.104|
;;;494    			GB_Code=0xa3a4; 
000062  f24a36a4          MOV      r6,#0xa3a4
000066  e006              B        |L14.118|
                  |L14.104|
;;;495    		else
;;;496    			GB_Code=Unicode-0xff01+0xa3a1; 
000068  f64f7001          MOV      r0,#0xff01
00006c  1a20              SUBS     r0,r4,r0
00006e  f24a31a1          MOV      r1,#0xa3a1
000072  4408              ADD      r0,r0,r1
000074  b286              UXTH     r6,r0
                  |L14.118|
;;;497    	} 
;;;498    	if(Unicode<=0x3013) 
000076  f2430013          MOV      r0,#0x3013
00007a  4284              CMP      r4,r0
00007c  dc0d              BGT      |L14.154|
;;;499    	{ 
;;;500    		for(i=0;i<94;i++) 
00007e  2500              MOVS     r5,#0
000080  e009              B        |L14.150|
                  |L14.130|
;;;501    		{ 
;;;502    			if(Unicode==UG[i]) 
000082  a801              ADD      r0,sp,#4
000084  f8300015          LDRH     r0,[r0,r5,LSL #1]
000088  42a0              CMP      r0,r4
00008a  d103              BNE      |L14.148|
;;;503    			GB_Code=0xa1a1+i; 
00008c  f24a10a1          MOV      r0,#0xa1a1
000090  4428              ADD      r0,r0,r5
000092  b286              UXTH     r6,r0
                  |L14.148|
000094  1c6d              ADDS     r5,r5,#1              ;500
                  |L14.150|
000096  2d5e              CMP      r5,#0x5e              ;500
000098  d3f3              BCC      |L14.130|
                  |L14.154|
;;;504    		} 
;;;505    	}
;;;506    	GBCode[0]=GB_Code>>8;
00009a  1230              ASRS     r0,r6,#8
00009c  4903              LDR      r1,|L14.172|
00009e  7008              STRB     r0,[r1,#0]
;;;507    	GBCode[1]=GB_Code&0xff;
0000a0  704e              STRB     r6,[r1,#1]
;;;508    	return GB_Code;
0000a2  4630              MOV      r0,r6
;;;509    }
0000a4  b030              ADD      sp,sp,#0xc0
0000a6  bd70              POP      {r4-r6,pc}
;;;510    
                          ENDP

                  |L14.168|
                          DCD      ||.constdata||
                  |L14.172|
                          DCD      GBCode

                          AREA ||i.GT32L32_UNICODE_To_GBK||, CODE, READONLY, ALIGN=2

                  GT32L32_UNICODE_To_GBK PROC
;;;520    ***************************************************************************/
;;;521    u32 GT32L32_UNICODE_To_GBK(u16 unicode,u8 *GetBuffer)
000000  b530              PUSH     {r4,r5,lr}
;;;522    {
000002  4602              MOV      r2,r0
000004  460d              MOV      r5,r1
;;;523    	u32 BaseAdd=0x46A90E;
000006  4b62              LDR      r3,|L15.400|
;;;524    	u32 Address,U_Start_Addr;
;;;525    	if(unicode<=0x0451&&unicode>=0x00a0) 
000008  f2404451          MOV      r4,#0x451
00000c  42a2              CMP      r2,r4
00000e  dc07              BGT      |L15.32|
000010  2aa0              CMP      r2,#0xa0
000012  db05              BLT      |L15.32|
;;;526    	{
;;;527    		U_Start_Addr	=	0;
000014  2100              MOVS     r1,#0
;;;528    		Address= U_Start_Addr +(unicode-0x00a0)*2; 
000016  f1a204a0          SUB      r4,r2,#0xa0
00001a  eb010044          ADD      r0,r1,r4,LSL #1
00001e  e0b5              B        |L15.396|
                  |L15.32|
;;;529    	} 
;;;530    	else if(unicode<=0x2642&&unicode>=0x2010) 
000020  f2426442          MOV      r4,#0x2642
000024  42a2              CMP      r2,r4
000026  dc09              BGT      |L15.60|
000028  f2420410          MOV      r4,#0x2010
00002c  42a2              CMP      r2,r4
00002e  db05              BLT      |L15.60|
;;;531    	{ 
;;;532    		U_Start_Addr =1892; 
000030  f2407164          MOV      r1,#0x764
;;;533    		Address= U_Start_Addr +(unicode-0x2010)*2; 
000034  1b14              SUBS     r4,r2,r4
000036  eb010044          ADD      r0,r1,r4,LSL #1
00003a  e0a7              B        |L15.396|
                  |L15.60|
;;;534    	} 
;;;535    	else if(unicode<=0x33d5&&unicode>=0x3000) 
00003c  f24334d5          MOV      r4,#0x33d5
000040  42a2              CMP      r2,r4
000042  dc09              BGT      |L15.88|
000044  f5b25f40          CMP      r2,#0x3000
000048  db06              BLT      |L15.88|
;;;536    	{ 
;;;537    		U_Start_Addr =5066; 
00004a  f24131ca          MOV      r1,#0x13ca
;;;538    		Address= U_Start_Addr +(unicode-0x3000)*2; 
00004e  f5a25440          SUB      r4,r2,#0x3000
000052  eb010044          ADD      r0,r1,r4,LSL #1
000056  e099              B        |L15.396|
                  |L15.88|
;;;539    	} 
;;;540    	else if(unicode<=0x9fa5&&unicode>=0x4e00) 
000058  f64974a5          MOV      r4,#0x9fa5
00005c  42a2              CMP      r2,r4
00005e  dc09              BGT      |L15.116|
000060  f5b24f9c          CMP      r2,#0x4e00
000064  db06              BLT      |L15.116|
;;;541    	{ 
;;;542    		U_Start_Addr =7030; 
000066  f6413176          MOV      r1,#0x1b76
;;;543    		Address= U_Start_Addr +(unicode-0x4e00)*2; 
00006a  f5a2449c          SUB      r4,r2,#0x4e00
00006e  eb010044          ADD      r0,r1,r4,LSL #1
000072  e08b              B        |L15.396|
                  |L15.116|
;;;544    	} 
;;;545    	else if(unicode<=0xfe6b&&unicode>=0xfe30) 
000074  f64f646b          MOV      r4,#0xfe6b
000078  42a2              CMP      r2,r4
00007a  dc09              BGT      |L15.144|
00007c  f64f6430          MOV      r4,#0xfe30
000080  42a2              CMP      r2,r4
000082  db05              BLT      |L15.144|
;;;546    	{ 
;;;547    		U_Start_Addr =48834; 
000084  f64b61c2          MOV      r1,#0xbec2
;;;548    		Address= U_Start_Addr +(unicode-0xfe30)*2; 
000088  1b14              SUBS     r4,r2,r4
00008a  eb010044          ADD      r0,r1,r4,LSL #1
00008e  e07d              B        |L15.396|
                  |L15.144|
;;;549    	} 
;;;550    	else if(unicode<=0xff5e&&unicode>=0xff01) 
000090  f64f745e          MOV      r4,#0xff5e
000094  42a2              CMP      r2,r4
000096  dc0a              BGT      |L15.174|
000098  f5b24f7f          CMP      r2,#0xff00
00009c  dd07              BLE      |L15.174|
;;;551    	{ 
;;;552    		U_Start_Addr =48954; 
00009e  f64b713a          MOV      r1,#0xbf3a
;;;553    		Address= U_Start_Addr +(unicode-0xff01)*2; 
0000a2  f64f7401          MOV      r4,#0xff01
0000a6  1b14              SUBS     r4,r2,r4
0000a8  eb010044          ADD      r0,r1,r4,LSL #1
0000ac  e06e              B        |L15.396|
                  |L15.174|
;;;554    	} 
;;;555    	else if(unicode<=0xffe5&&unicode>=0xffe0) 
0000ae  f64f74e5          MOV      r4,#0xffe5
0000b2  42a2              CMP      r2,r4
0000b4  dc08              BGT      |L15.200|
0000b6  1f64              SUBS     r4,r4,#5
0000b8  42a2              CMP      r2,r4
0000ba  db05              BLT      |L15.200|
;;;556    	{ 
;;;557    		U_Start_Addr =49142; 
0000bc  f64b71f6          MOV      r1,#0xbff6
;;;558    		Address= U_Start_Addr +(unicode-0xffe0)*2; 
0000c0  1b14              SUBS     r4,r2,r4
0000c2  eb010044          ADD      r0,r1,r4,LSL #1
0000c6  e061              B        |L15.396|
                  |L15.200|
;;;559    	} 
;;;560    	else if (unicode<=0xFA29&&unicode>=0xF92C) 
0000c8  f64f2429          MOV      r4,#0xfa29
0000cc  42a2              CMP      r2,r4
0000ce  dc09              BGT      |L15.228|
0000d0  f64f142c          MOV      r4,#0xf92c
0000d4  42a2              CMP      r2,r4
0000d6  db05              BLT      |L15.228|
;;;561    	{ 
;;;562    		U_Start_Addr =49312; 
0000d8  f24c01a0          MOV      r1,#0xc0a0
;;;563    		Address= U_Start_Addr +(unicode-0xF92C)*2; 
0000dc  1b14              SUBS     r4,r2,r4
0000de  eb010044          ADD      r0,r1,r4,LSL #1
0000e2  e053              B        |L15.396|
                  |L15.228|
;;;564    	} 
;;;565    	else if(unicode<=0xE864&&unicode>=0xE816) 
0000e4  f64e0464          MOV      r4,#0xe864
0000e8  42a2              CMP      r2,r4
0000ea  dc09              BGT      |L15.256|
0000ec  f64e0416          MOV      r4,#0xe816
0000f0  42a2              CMP      r2,r4
0000f2  db05              BLT      |L15.256|
;;;566    	{ 
;;;567    		U_Start_Addr =49820; 
0000f4  f24c219c          MOV      r1,#0xc29c
;;;568    		Address= U_Start_Addr +(unicode-0xE816)*2; 
0000f8  1b14              SUBS     r4,r2,r4
0000fa  eb010044          ADD      r0,r1,r4,LSL #1
0000fe  e045              B        |L15.396|
                  |L15.256|
;;;569    	}
;;;570    	else if(unicode<=0x2ECA&&unicode>=0x2E81) 
000100  f64264ca          MOV      r4,#0x2eca
000104  42a2              CMP      r2,r4
000106  dc0a              BGT      |L15.286|
000108  f5b25f3a          CMP      r2,#0x2e80
00010c  dd07              BLE      |L15.286|
;;;571    	{ 
;;;572    		U_Start_Addr =49978; 
00010e  f24c313a          MOV      r1,#0xc33a
;;;573    		Address= U_Start_Addr +(unicode-0x2E81)*2; 
000112  f6426481          MOV      r4,#0x2e81
000116  1b14              SUBS     r4,r2,r4
000118  eb010044          ADD      r0,r1,r4,LSL #1
00011c  e036              B        |L15.396|
                  |L15.286|
;;;574    	} 
;;;575    	else if(unicode<=0x49B7&&unicode>=0x4947) 
00011e  f64414b7          MOV      r4,#0x49b7
000122  42a2              CMP      r2,r4
000124  dc09              BGT      |L15.314|
000126  f6441447          MOV      r4,#0x4947
00012a  42a2              CMP      r2,r4
00012c  db05              BLT      |L15.314|
;;;576    	{ 
;;;577    		U_Start_Addr =50126; 
00012e  f24c31ce          MOV      r1,#0xc3ce
;;;578    		Address= U_Start_Addr +(unicode-0x4947)*2; 
000132  1b14              SUBS     r4,r2,r4
000134  eb010044          ADD      r0,r1,r4,LSL #1
000138  e028              B        |L15.396|
                  |L15.314|
;;;579    	} 
;;;580    	else if(unicode<=0x4DAE&&unicode>=0x4C77) 
00013a  f64454ae          MOV      r4,#0x4dae
00013e  42a2              CMP      r2,r4
000140  dc09              BGT      |L15.342|
000142  f6444477          MOV      r4,#0x4c77
000146  42a2              CMP      r2,r4
000148  db05              BLT      |L15.342|
;;;581    	{ 
;;;582    		U_Start_Addr =50352; 
00014a  f24c41b0          MOV      r1,#0xc4b0
;;;583    		Address= U_Start_Addr +(unicode-0x4C77)*2; 
00014e  1b14              SUBS     r4,r2,r4
000150  eb010044          ADD      r0,r1,r4,LSL #1
000154  e01a              B        |L15.396|
                  |L15.342|
;;;584    	} 
;;;585    	else if(unicode<=0x3CE0&&unicode>=0x3447) 
000156  f64344e0          MOV      r4,#0x3ce0
00015a  42a2              CMP      r2,r4
00015c  dc09              BGT      |L15.370|
00015e  f2434447          MOV      r4,#0x3447
000162  42a2              CMP      r2,r4
000164  db05              BLT      |L15.370|
;;;586    	{ 
;;;587    		U_Start_Addr =50976; 
000166  f24c7120          MOV      r1,#0xc720
;;;588    		Address= U_Start_Addr +(unicode-0x3447)*2; 
00016a  1b14              SUBS     r4,r2,r4
00016c  eb010044          ADD      r0,r1,r4,LSL #1
000170  e00c              B        |L15.396|
                  |L15.370|
;;;589    	} 
;;;590    	else if(unicode<=0x478D&&unicode>=0x4056) 
000172  f244748d          MOV      r4,#0x478d
000176  42a2              CMP      r2,r4
000178  dc08              BGT      |L15.396|
00017a  f2440456          MOV      r4,#0x4056
00017e  42a2              CMP      r2,r4
000180  db04              BLT      |L15.396|
;;;591    	{ 
;;;592    		U_Start_Addr =55380; 
000182  f64d0154          MOV      r1,#0xd854
;;;593    		Address= U_Start_Addr +(unicode-0x4056)*2; 
000186  1b14              SUBS     r4,r2,r4
000188  eb010044          ADD      r0,r1,r4,LSL #1
                  |L15.396|
;;;594    	} 
;;;595    	Address+=BaseAdd;
00018c  4418              ADD      r0,r0,r3
;;;596    	return Address; 
;;;597    }
00018e  bd30              POP      {r4,r5,pc}
;;;598    /***********************************************************
                          ENDP

                  |L15.400|
                          DCD      0x0046a90e

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  30003001          DCW      0x3000,0x3001
000004  300200b7          DCW      0x3002,0x00b7
000008  02c902c7          DCW      0x02c9,0x02c7
00000c  00a83003          DCW      0x00a8,0x3003
000010  30052014          DCW      0x3005,0x2014
000014  ff5e2016          DCW      0xff5e,0x2016
000018  20262018          DCW      0x2026,0x2018
00001c  2019201c          DCW      0x2019,0x201c
000020  201d3014          DCW      0x201d,0x3014
000024  30153008          DCW      0x3015,0x3008
000028  3009300a          DCW      0x3009,0x300a
00002c  300b300c          DCW      0x300b,0x300c
000030  300d300e          DCW      0x300d,0x300e
000034  300f3016          DCW      0x300f,0x3016
000038  30173010          DCW      0x3017,0x3010
00003c  301100b1          DCW      0x3011,0x00b1
000040  00d700f7          DCW      0x00d7,0x00f7
000044  22362227          DCW      0x2236,0x2227
000048  22282211          DCW      0x2228,0x2211
00004c  220f222a          DCW      0x220f,0x222a
000050  22292208          DCW      0x2229,0x2208
000054  2237221a          DCW      0x2237,0x221a
000058  22a52225          DCW      0x22a5,0x2225
00005c  22202312          DCW      0x2220,0x2312
000060  2299222b          DCW      0x2299,0x222b
000064  222e2261          DCW      0x222e,0x2261
000068  224c2248          DCW      0x224c,0x2248
00006c  223d221d          DCW      0x223d,0x221d
000070  2260226e          DCW      0x2260,0x226e
000074  226f2264          DCW      0x226f,0x2264
000078  2265221e          DCW      0x2265,0x221e
00007c  22352234          DCW      0x2235,0x2234
000080  26422640          DCW      0x2642,0x2640
000084  00b02032          DCW      0x00b0,0x2032
000088  20332103          DCW      0x2033,0x2103
00008c  ff0400a4          DCW      0xff04,0x00a4
000090  ffe0ffe1          DCW      0xffe0,0xffe1
000094  203000a7          DCW      0x2030,0x00a7
000098  21162606          DCW      0x2116,0x2606
00009c  260525cb          DCW      0x2605,0x25cb
0000a0  25cf25ce          DCW      0x25cf,0x25ce
0000a4  25c725c6          DCW      0x25c7,0x25c6
0000a8  25a125a0          DCW      0x25a1,0x25a0
0000ac  25b325b2          DCW      0x25b3,0x25b2
0000b0  203b2192          DCW      0x203b,0x2192
0000b4  21902191          DCW      0x2190,0x2191
0000b8  21933013          DCW      0x2193,0x3013

                          AREA ||.data||, DATA, ALIGN=2

                  pSPI
                          DCD      0x00000000
                  BAR_PIC_ADDR
000004  ff000000          DCB      0xff,0x00,0x00,0x00
                          %        60
                  GBCode
000044  ff000000          DCB      0xff,0x00,0x00,0x00
                          %        60
