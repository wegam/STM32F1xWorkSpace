; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_dma.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_dma.crf ..\..\Driver\WOW\SCR\STM32_DMA.C]
                          THUMB

                          AREA ||i.DMA_Configuration||, CODE, READONLY, ALIGN=2

                  DMA_Configuration PROC
;;;129    *******************************************************************************/
;;;130    void DMA_Configuration(Peripheral_Request_TypeDef	Request,u32 *MemoryAddr,u32 BufferSize)	//DMA配置
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;131    {
000004  b097              SUB      sp,sp,#0x5c
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;132    	DMA_InitTypeDef DMA_Initstructure;
;;;133    	NVIC_InitTypeDef NVIC_Initstructure;
;;;134    
;;;135    	DMA_Channel_TypeDef* DMAy_Channelx=0;											//-------DMA通道
00000c  2500              MOVS     r5,#0
;;;136    
;;;137    	FunctionalState	DMA_IT_Interruupt=ENABLE;									//-------DMA传输完成中断使能
00000e  2001              MOVS     r0,#1
000010  900a              STR      r0,[sp,#0x28]
;;;138    	u8	DMAy_Channelx_IRQChannel=DMA1_Channel1_IRQChannel;		//-------DMA中断源
000012  f04f080b          MOV      r8,#0xb
;;;139    	u32	DMAy_FLAG_GLx=0;																			//-------DMA全局中断标志
000016  2000              MOVS     r0,#0
000018  9009              STR      r0,[sp,#0x24]
;;;140    	
;;;141    	
;;;142    	u32 DMA_PeripheralBaseAddr=0;															//-------DMA外设基地址
00001a  4681              MOV      r9,r0
;;;143      u32 DMA_MemoryBaseAddr=(u32)MemoryAddr;										//-------DMA内存基地址
00001c  46b2              MOV      r10,r6
;;;144      u32 DMA_DIR=DMA_DIR_PeripheralSRC;												//-------DMA数据传输方向=============DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
00001e  4683              MOV      r11,r0
;;;145      u32 DMA_BufferSize=BufferSize;														//-------DMA通道的DMA缓存的大小======单位为数据单位。根据传输方向，数据单位等于结构中参数DMA_PeripheralDataSize或者参数DMA_MemoryDataSize的值。
000020  9708              STR      r7,[sp,#0x20]
;;;146      u32 DMA_PeripheralInc=DMA_PeripheralInc_Disable;					//-------DMA外设地址寄存器递增与否====DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变）
000022  9007              STR      r0,[sp,#0x1c]
;;;147      u32 DMA_MemoryInc=DMA_MemoryInc_Disable;									//-------DMA内存地址寄存器递增与否====DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
000024  9006              STR      r0,[sp,#0x18]
;;;148      u32 DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte;		//-------DMA外设数据宽度=============DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
000026  9005              STR      r0,[sp,#0x14]
;;;149      u32 DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;						//-------DMA内存数据宽度=============DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
000028  9004              STR      r0,[sp,#0x10]
;;;150      u32 DMA_Mode=DMA_Mode_Normal;															//-------DMA的工作模式===============DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
00002a  9003              STR      r0,[sp,#0xc]
;;;151    																														//-------注意：当指定DMA通道数据传输配置为内存到内存时，不能使用循环缓存模式
;;;152      u32 DMA_Priority=DMA_Priority_VeryHigh;										//-------DMA通道的转输优先级=========DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）																	
00002c  f44f5040          MOV      r0,#0x3000
000030  9002              STR      r0,[sp,#8]
;;;153      u32 DMA_M2M=DMA_M2M_Disable;															//-------DMA通道的内存到内存传输=====DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
000032  2000              MOVS     r0,#0
000034  9001              STR      r0,[sp,#4]
;;;154    	
;;;155    	
;;;156    //	assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;157    	assert_param(IS_Peripheral_Request(Request));
;;;158    //	assert_param(IS_FUNCTIONAL_STATE2(DISABLE));
;;;159    	//1)**********DMA通道选择
;;;160    	if(Request==ADC1_RQ)					//---DMA1_CH1
000036  2c01              CMP      r4,#1
000038  d115              BNE      |L1.102|
;;;161    	{
;;;162    		DMAy_Channelx=DMA1_Channel1;
00003a  4df3              LDR      r5,|L1.1032|
;;;163    		DMA_PeripheralBaseAddr=(u32)&ADC1->DR;										//-------DMA外设基地址
00003c  f8df93cc          LDR      r9,|L1.1036|
;;;164    		DMA_DIR=DMA_DIR_PeripheralSRC;														//-------DMA数据传输方向=============DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
000040  bf00              NOP      
;;;165    		DMA_PeripheralInc=DMA_PeripheralInc_Disable;							//-------DMA外设地址寄存器递增与否====DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变）
000042  9007              STR      r0,[sp,#0x1c]
;;;166    		DMA_MemoryInc=DMA_MemoryInc_Disable;											//-------DMA内存地址寄存器递增与否====DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
000044  9006              STR      r0,[sp,#0x18]
;;;167    		DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord;		//-------DMA外设数据宽度=============DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
000046  0220              LSLS     r0,r4,#8
000048  9005              STR      r0,[sp,#0x14]
;;;168    		DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;						//-------DMA内存数据宽度=============DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
00004a  0080              LSLS     r0,r0,#2
00004c  9004              STR      r0,[sp,#0x10]
;;;169    		DMA_Mode=DMA_Mode_Circular;																//-------DMA的工作模式===============DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
00004e  2020              MOVS     r0,#0x20
000050  9003              STR      r0,[sp,#0xc]
;;;170    		DMA_Priority=DMA_Priority_VeryHigh;												//-------DMA通道的转输优先级=========DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
000052  f44f5040          MOV      r0,#0x3000
000056  9002              STR      r0,[sp,#8]
;;;171    		DMA_M2M=DMA_M2M_Disable;																	//-------DMA通道的内存到内存传输=====DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
000058  2000              MOVS     r0,#0
00005a  9001              STR      r0,[sp,#4]
;;;172    		
;;;173    		DMAy_FLAG_GLx=DMA1_FLAG_GL1;															//-------DMA全局中断标志
00005c  2001              MOVS     r0,#1
00005e  9009              STR      r0,[sp,#0x24]
;;;174    		
;;;175    		DMA_IT_Interruupt=DISABLE;																//-------DMA传输完成中断使能
000060  2000              MOVS     r0,#0
000062  900a              STR      r0,[sp,#0x28]
000064  e183              B        |L1.878|
                  |L1.102|
;;;176    	}
;;;177    	else if(Request==TIM2_CH3)
000066  2c02              CMP      r4,#2
000068  d117              BNE      |L1.154|
;;;178    	{
;;;179    		DMAy_Channelx=DMA1_Channel1;
00006a  4de7              LDR      r5,|L1.1032|
;;;180    		DMA_PeripheralBaseAddr=(u32)&TIM2->CCR3;										//-------DMA外设基地址
00006c  f8df93a0          LDR      r9,|L1.1040|
;;;181    		DMA_DIR=DMA_DIR_PeripheralSRC;															//-------DMA数据传输方向=============DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
000070  f04f0b00          MOV      r11,#0
;;;182    		DMA_PeripheralInc=DMA_PeripheralInc_Disable;								//-------DMA外设地址寄存器递增与否====DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变）
000074  2000              MOVS     r0,#0
000076  9007              STR      r0,[sp,#0x1c]
;;;183    		DMA_MemoryInc=DMA_MemoryInc_Disable;												//-------DMA内存地址寄存器递增与否====DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
000078  9006              STR      r0,[sp,#0x18]
;;;184    		DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord;			//-------DMA外设数据宽度=============DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
00007a  01e0              LSLS     r0,r4,#7
00007c  9005              STR      r0,[sp,#0x14]
;;;185    		DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;							//-------DMA内存数据宽度=============DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
00007e  0080              LSLS     r0,r0,#2
000080  9004              STR      r0,[sp,#0x10]
;;;186    		DMA_Mode=DMA_Mode_Normal;																		//-------DMA的工作模式===============DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
000082  2000              MOVS     r0,#0
000084  9003              STR      r0,[sp,#0xc]
;;;187    		DMA_Priority=DMA_Priority_VeryHigh;													//-------DMA通道的转输优先级=========DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
000086  f44f5040          MOV      r0,#0x3000
00008a  9002              STR      r0,[sp,#8]
;;;188    		DMA_M2M=DMA_M2M_Disable;																		//-------DMA通道的内存到内存传输=====DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
00008c  2000              MOVS     r0,#0
00008e  9001              STR      r0,[sp,#4]
;;;189    		
;;;190    		DMAy_FLAG_GLx=DMA1_FLAG_GL1;																//-------DMA全局中断标志
000090  2001              MOVS     r0,#1
000092  9009              STR      r0,[sp,#0x24]
;;;191    		
;;;192    		DMA_IT_Interruupt=DISABLE;																	//-------DMA传输完成中断使能
000094  2000              MOVS     r0,#0
000096  900a              STR      r0,[sp,#0x28]
000098  e169              B        |L1.878|
                  |L1.154|
;;;193    	}
;;;194    	else if(Request==TIM4_CH1)
00009a  2c03              CMP      r4,#3
00009c  d113              BNE      |L1.198|
;;;195    	{
;;;196    		DMAy_Channelx=DMA1_Channel1;
00009e  4dda              LDR      r5,|L1.1032|
;;;197    		DMA_PeripheralBaseAddr=(u32)&TIM4->CCR1;										//-------DMA外设基地址
0000a0  f8df9370          LDR      r9,|L1.1044|
;;;198    		DMA_DIR=DMA_DIR_PeripheralSRC;															//-------DMA数据传输方向=============DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
0000a4  f04f0b00          MOV      r11,#0
;;;199    		DMA_PeripheralInc=DMA_PeripheralInc_Disable;								//-------DMA外设地址寄存器递增与否====DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变）
0000a8  2000              MOVS     r0,#0
0000aa  9007              STR      r0,[sp,#0x1c]
;;;200    		DMA_MemoryInc=DMA_MemoryInc_Disable;												//-------DMA内存地址寄存器递增与否====DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
0000ac  9006              STR      r0,[sp,#0x18]
;;;201    		DMA_PeripheralDataSize=DMA_PeripheralDataSize_Byte;					//-------DMA外设数据宽度=============DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
0000ae  9005              STR      r0,[sp,#0x14]
;;;202    		DMA_MemoryDataSize=DMA_MemoryDataSize_Byte;									//-------DMA内存数据宽度=============DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
0000b0  9004              STR      r0,[sp,#0x10]
;;;203    		DMA_Mode=DMA_Mode_Normal;																		//-------DMA的工作模式===============DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
0000b2  9003              STR      r0,[sp,#0xc]
;;;204    		DMA_Priority=DMA_Priority_VeryHigh;													//-------DMA通道的转输优先级=========DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
0000b4  0320              LSLS     r0,r4,#12
0000b6  9002              STR      r0,[sp,#8]
;;;205    		DMA_M2M=DMA_M2M_Disable;																		//-------DMA通道的内存到内存传输=====DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
0000b8  2000              MOVS     r0,#0
0000ba  9001              STR      r0,[sp,#4]
;;;206    		
;;;207    		DMAy_FLAG_GLx=DMA1_FLAG_GL1;																//-------DMA全局中断标志
0000bc  2001              MOVS     r0,#1
0000be  9009              STR      r0,[sp,#0x24]
;;;208    		
;;;209    		DMA_IT_Interruupt=DISABLE;																	//-------DMA传输完成中断使能
0000c0  2000              MOVS     r0,#0
0000c2  900a              STR      r0,[sp,#0x28]
0000c4  e153              B        |L1.878|
                  |L1.198|
;;;210    	}
;;;211    	else if(Request==USART3_TX)		//---DMA1_CH2
0000c6  2c04              CMP      r4,#4
0000c8  d102              BNE      |L1.208|
;;;212    	{
;;;213    		DMAy_Channelx=DMA1_Channel2;
0000ca  4dcf              LDR      r5,|L1.1032|
0000cc  3514              ADDS     r5,r5,#0x14
0000ce  e14e              B        |L1.878|
                  |L1.208|
;;;214    	}
;;;215    	else if(Request==TIM1_CH1)
0000d0  2c05              CMP      r4,#5
0000d2  d102              BNE      |L1.218|
;;;216    	{
;;;217    		DMAy_Channelx=DMA1_Channel2;
0000d4  4dcc              LDR      r5,|L1.1032|
0000d6  3514              ADDS     r5,r5,#0x14
0000d8  e149              B        |L1.878|
                  |L1.218|
;;;218    	}
;;;219    	else if(Request==TIM2_UP)
0000da  2c06              CMP      r4,#6
0000dc  d102              BNE      |L1.228|
;;;220    	{
;;;221    		DMAy_Channelx=DMA1_Channel2;
0000de  4dca              LDR      r5,|L1.1032|
0000e0  3514              ADDS     r5,r5,#0x14
0000e2  e144              B        |L1.878|
                  |L1.228|
;;;222    	}
;;;223    	else if(Request==TIM3_CH3)		
0000e4  2c07              CMP      r4,#7
0000e6  d102              BNE      |L1.238|
;;;224    	{
;;;225    		DMAy_Channelx=DMA1_Channel2;
0000e8  4dc7              LDR      r5,|L1.1032|
0000ea  3514              ADDS     r5,r5,#0x14
0000ec  e13f              B        |L1.878|
                  |L1.238|
;;;226    	}
;;;227    	else if(Request==SPI1_RX)
0000ee  2c08              CMP      r4,#8
0000f0  d102              BNE      |L1.248|
;;;228    	{
;;;229    		DMAy_Channelx=DMA1_Channel2;
0000f2  4dc5              LDR      r5,|L1.1032|
0000f4  3514              ADDS     r5,r5,#0x14
0000f6  e13a              B        |L1.878|
                  |L1.248|
;;;230    	}
;;;231    	else if(Request==USART3_RX)		//---DMA1_CH3
0000f8  2c09              CMP      r4,#9
0000fa  d102              BNE      |L1.258|
;;;232    	{
;;;233    		DMAy_Channelx=DMA1_Channel3;
0000fc  4dc2              LDR      r5,|L1.1032|
0000fe  3528              ADDS     r5,r5,#0x28
000100  e135              B        |L1.878|
                  |L1.258|
;;;234    	}
;;;235    	else if(Request==TIM1_CH2)
000102  2c0a              CMP      r4,#0xa
000104  d102              BNE      |L1.268|
;;;236    	{
;;;237    		DMAy_Channelx=DMA1_Channel3;
000106  4dc0              LDR      r5,|L1.1032|
000108  3528              ADDS     r5,r5,#0x28
00010a  e130              B        |L1.878|
                  |L1.268|
;;;238    	}
;;;239    	else if(Request==TIM3_CH4)
00010c  2c0b              CMP      r4,#0xb
00010e  d102              BNE      |L1.278|
;;;240    	{
;;;241    		DMAy_Channelx=DMA1_Channel3;
000110  4dbd              LDR      r5,|L1.1032|
000112  3528              ADDS     r5,r5,#0x28
000114  e12b              B        |L1.878|
                  |L1.278|
;;;242    	}
;;;243    	else if(Request==TIM3_UP)
000116  2c0c              CMP      r4,#0xc
000118  d102              BNE      |L1.288|
;;;244    	{
;;;245    		DMAy_Channelx=DMA1_Channel3;
00011a  4dbb              LDR      r5,|L1.1032|
00011c  3528              ADDS     r5,r5,#0x28
00011e  e126              B        |L1.878|
                  |L1.288|
;;;246    	}
;;;247    	else if(Request==SPI1_TX)
000120  2c0d              CMP      r4,#0xd
000122  d102              BNE      |L1.298|
;;;248    	{
;;;249    		DMAy_Channelx=DMA1_Channel3;
000124  4db8              LDR      r5,|L1.1032|
000126  3528              ADDS     r5,r5,#0x28
000128  e121              B        |L1.878|
                  |L1.298|
;;;250    	}
;;;251    	else if(Request==USART1_TX)		//---DMA1_CH4
00012a  2c0e              CMP      r4,#0xe
00012c  d119              BNE      |L1.354|
;;;252    	{
;;;253    		DMAy_Channelx=DMA1_Channel4;
00012e  4db6              LDR      r5,|L1.1032|
000130  353c              ADDS     r5,r5,#0x3c
;;;254    		DMA_PeripheralBaseAddr=(u32)&USART1->DR;									//-------DMA外设基地址
000132  f8df92e4          LDR      r9,|L1.1048|
;;;255    		DMA_DIR=DMA_DIR_PeripheralDST;														//-------DMA数据传输方向=============DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
000136  f04f0b10          MOV      r11,#0x10
;;;256    		DMA_PeripheralInc=DMA_PeripheralInc_Disable;							//-------DMA外设地址寄存器递增与否====DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变）
00013a  2000              MOVS     r0,#0
00013c  9007              STR      r0,[sp,#0x1c]
;;;257    		DMA_MemoryInc=DMA_MemoryInc_Enable;												//-------DMA内存地址寄存器递增与否====DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
00013e  2080              MOVS     r0,#0x80
000140  9006              STR      r0,[sp,#0x18]
;;;258    		DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord;		//-------DMA外设数据宽度=============DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
000142  0040              LSLS     r0,r0,#1
000144  9005              STR      r0,[sp,#0x14]
;;;259    		DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;						//-------DMA内存数据宽度=============DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
000146  0080              LSLS     r0,r0,#2
000148  9004              STR      r0,[sp,#0x10]
;;;260    		DMA_Mode=DMA_Mode_Normal;																	//-------DMA的工作模式===============DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
00014a  2000              MOVS     r0,#0
00014c  9003              STR      r0,[sp,#0xc]
;;;261    		DMA_Priority=DMA_Priority_VeryHigh;												//-------DMA通道的转输优先级=========DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
00014e  f44f5040          MOV      r0,#0x3000
000152  9002              STR      r0,[sp,#8]
;;;262    		DMA_M2M=DMA_M2M_Disable;																	//-------DMA通道的内存到内存传输=====DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
000154  2000              MOVS     r0,#0
000156  9001              STR      r0,[sp,#4]
;;;263    		
;;;264    		DMAy_FLAG_GLx=DMA1_FLAG_GL4;															//-------DMA全局中断标志
000158  14a8              ASRS     r0,r5,#18
00015a  9009              STR      r0,[sp,#0x24]
;;;265    		
;;;266    		DMA_IT_Interruupt=ENABLE;																	//-------DMA传输完成中断使能
00015c  2001              MOVS     r0,#1
00015e  900a              STR      r0,[sp,#0x28]
000160  e105              B        |L1.878|
                  |L1.354|
;;;267    	}
;;;268    	else if(Request==TIM1_CH4)
000162  2c0f              CMP      r4,#0xf
000164  d102              BNE      |L1.364|
;;;269    	{
;;;270    		DMAy_Channelx=DMA1_Channel4;
000166  4da8              LDR      r5,|L1.1032|
000168  353c              ADDS     r5,r5,#0x3c
00016a  e100              B        |L1.878|
                  |L1.364|
;;;271    	}
;;;272    	else if(Request==TIM1_TRIG)
00016c  2c10              CMP      r4,#0x10
00016e  d102              BNE      |L1.374|
;;;273    	{
;;;274    		DMAy_Channelx=DMA1_Channel4;
000170  4da5              LDR      r5,|L1.1032|
000172  353c              ADDS     r5,r5,#0x3c
000174  e0fb              B        |L1.878|
                  |L1.374|
;;;275    	}
;;;276    	else if(Request==TIM1_COM)
000176  2c11              CMP      r4,#0x11
000178  d102              BNE      |L1.384|
;;;277    	{
;;;278    		DMAy_Channelx=DMA1_Channel4;
00017a  4da3              LDR      r5,|L1.1032|
00017c  353c              ADDS     r5,r5,#0x3c
00017e  e0f6              B        |L1.878|
                  |L1.384|
;;;279    	}
;;;280    	else if(Request==TIM4_CH2)
000180  2c12              CMP      r4,#0x12
000182  d102              BNE      |L1.394|
;;;281    	{
;;;282    		DMAy_Channelx=DMA1_Channel4;
000184  4da0              LDR      r5,|L1.1032|
000186  353c              ADDS     r5,r5,#0x3c
000188  e0f1              B        |L1.878|
                  |L1.394|
;;;283    	}
;;;284    	else if(Request==SPI2_RX)
00018a  2c13              CMP      r4,#0x13
00018c  d102              BNE      |L1.404|
;;;285    	{
;;;286    		DMAy_Channelx=DMA1_Channel4;
00018e  4d9e              LDR      r5,|L1.1032|
000190  353c              ADDS     r5,r5,#0x3c
000192  e0ec              B        |L1.878|
                  |L1.404|
;;;287    	}
;;;288    	else if(Request==I2S2_RX)
000194  2c14              CMP      r4,#0x14
000196  d102              BNE      |L1.414|
;;;289    	{
;;;290    		DMAy_Channelx=DMA1_Channel4;
000198  4d9b              LDR      r5,|L1.1032|
00019a  353c              ADDS     r5,r5,#0x3c
00019c  e0e7              B        |L1.878|
                  |L1.414|
;;;291    	}
;;;292    	else if(Request==I2C2_TX)
00019e  2c15              CMP      r4,#0x15
0001a0  d102              BNE      |L1.424|
;;;293    	{
;;;294    		DMAy_Channelx=DMA1_Channel4;
0001a2  4d99              LDR      r5,|L1.1032|
0001a4  353c              ADDS     r5,r5,#0x3c
0001a6  e0e2              B        |L1.878|
                  |L1.424|
;;;295    	}
;;;296    	else if(Request==USART1_RX)		//---DMA1_CH5
0001a8  2c16              CMP      r4,#0x16
0001aa  d11a              BNE      |L1.482|
;;;297    	{
;;;298    		DMAy_Channelx=DMA1_Channel5;
0001ac  4d96              LDR      r5,|L1.1032|
0001ae  3550              ADDS     r5,r5,#0x50
;;;299    		DMA_PeripheralBaseAddr=(u32)&USART1->DR;									//-------DMA外设基地址
0001b0  f8df9264          LDR      r9,|L1.1048|
;;;300    		DMA_DIR=DMA_DIR_PeripheralSRC;														//-------DMA数据传输方向=============DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
0001b4  f04f0b00          MOV      r11,#0
;;;301    		DMA_PeripheralInc=DMA_PeripheralInc_Disable;							//-------DMA外设地址寄存器递增与否====DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变）
0001b8  2000              MOVS     r0,#0
0001ba  9007              STR      r0,[sp,#0x1c]
;;;302    		DMA_MemoryInc=DMA_MemoryInc_Enable;												//-------DMA内存地址寄存器递增与否====DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
0001bc  2080              MOVS     r0,#0x80
0001be  9006              STR      r0,[sp,#0x18]
;;;303    		DMA_PeripheralDataSize=DMA_PeripheralDataSize_HalfWord;		//-------DMA外设数据宽度=============DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
0001c0  0040              LSLS     r0,r0,#1
0001c2  9005              STR      r0,[sp,#0x14]
;;;304    		DMA_MemoryDataSize=DMA_MemoryDataSize_HalfWord;						//-------DMA内存数据宽度=============DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
0001c4  0080              LSLS     r0,r0,#2
0001c6  9004              STR      r0,[sp,#0x10]
;;;305    		DMA_Mode=DMA_Mode_Normal;																	//-------DMA的工作模式===============DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
0001c8  2000              MOVS     r0,#0
0001ca  9003              STR      r0,[sp,#0xc]
;;;306    		DMA_Priority=DMA_Priority_VeryHigh;												//-------DMA通道的转输优先级=========DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
0001cc  f44f5040          MOV      r0,#0x3000
0001d0  9002              STR      r0,[sp,#8]
;;;307    		DMA_M2M=DMA_M2M_Disable;																	//-------DMA通道的内存到内存传输=====DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
0001d2  2000              MOVS     r0,#0
0001d4  9001              STR      r0,[sp,#4]
;;;308    		
;;;309    		DMAy_FLAG_GLx=DMA1_FLAG_GL5;															//-------DMA全局中断标志
0001d6  f44f3080          MOV      r0,#0x10000
0001da  9009              STR      r0,[sp,#0x24]
;;;310    		
;;;311    		DMA_IT_Interruupt=DISABLE;																//-------DMA传输完成中断使能
0001dc  2000              MOVS     r0,#0
0001de  900a              STR      r0,[sp,#0x28]
0001e0  e0c5              B        |L1.878|
                  |L1.482|
;;;312    	}
;;;313    	else if(Request==TIM1_UP)
0001e2  2c17              CMP      r4,#0x17
0001e4  d102              BNE      |L1.492|
;;;314    	{
;;;315    		DMAy_Channelx=DMA1_Channel5;
0001e6  4d88              LDR      r5,|L1.1032|
0001e8  3550              ADDS     r5,r5,#0x50
0001ea  e0c0              B        |L1.878|
                  |L1.492|
;;;316    	}
;;;317    	else if(Request==SPI2_TX)
0001ec  2c18              CMP      r4,#0x18
0001ee  d102              BNE      |L1.502|
;;;318    	{
;;;319    		DMAy_Channelx=DMA1_Channel5;
0001f0  4d85              LDR      r5,|L1.1032|
0001f2  3550              ADDS     r5,r5,#0x50
0001f4  e0bb              B        |L1.878|
                  |L1.502|
;;;320    	}
;;;321    	else if(Request==I2S2_TX)
0001f6  2c19              CMP      r4,#0x19
0001f8  d102              BNE      |L1.512|
;;;322    	{
;;;323    		DMAy_Channelx=DMA1_Channel5;
0001fa  4d83              LDR      r5,|L1.1032|
0001fc  3550              ADDS     r5,r5,#0x50
0001fe  e0b6              B        |L1.878|
                  |L1.512|
;;;324    	}
;;;325    	else if(Request==I2C2_RX)
000200  2c1a              CMP      r4,#0x1a
000202  d102              BNE      |L1.522|
;;;326    	{
;;;327    		DMAy_Channelx=DMA1_Channel5;
000204  4d80              LDR      r5,|L1.1032|
000206  3550              ADDS     r5,r5,#0x50
000208  e0b1              B        |L1.878|
                  |L1.522|
;;;328    	}
;;;329    	else if(Request==TIM2_CH1)
00020a  2c1b              CMP      r4,#0x1b
00020c  d102              BNE      |L1.532|
;;;330    	{
;;;331    		DMAy_Channelx=DMA1_Channel5;
00020e  4d7e              LDR      r5,|L1.1032|
000210  3550              ADDS     r5,r5,#0x50
000212  e0ac              B        |L1.878|
                  |L1.532|
;;;332    	}
;;;333    	else if(Request==TIM4_CH3)
000214  2c1c              CMP      r4,#0x1c
000216  d102              BNE      |L1.542|
;;;334    	{
;;;335    		DMAy_Channelx=DMA1_Channel5;
000218  4d7b              LDR      r5,|L1.1032|
00021a  3550              ADDS     r5,r5,#0x50
00021c  e0a7              B        |L1.878|
                  |L1.542|
;;;336    	}
;;;337    	else if(Request==USART2_RX)		//---DMA1_CH6
00021e  2c1d              CMP      r4,#0x1d
000220  d102              BNE      |L1.552|
;;;338    	{
;;;339    		DMAy_Channelx=DMA1_Channel6;
000222  4d79              LDR      r5,|L1.1032|
000224  3564              ADDS     r5,r5,#0x64
000226  e0a2              B        |L1.878|
                  |L1.552|
;;;340    	}
;;;341    	else if(Request==TIM1_CH3)
000228  2c1e              CMP      r4,#0x1e
00022a  d102              BNE      |L1.562|
;;;342    	{
;;;343    		DMAy_Channelx=DMA1_Channel6;
00022c  4d76              LDR      r5,|L1.1032|
00022e  3564              ADDS     r5,r5,#0x64
000230  e09d              B        |L1.878|
                  |L1.562|
;;;344    	}
;;;345    	else if(Request==TIM3_CH1)
000232  2c1f              CMP      r4,#0x1f
000234  d102              BNE      |L1.572|
;;;346    	{
;;;347    		DMAy_Channelx=DMA1_Channel6;
000236  4d74              LDR      r5,|L1.1032|
000238  3564              ADDS     r5,r5,#0x64
00023a  e098              B        |L1.878|
                  |L1.572|
;;;348    	}
;;;349    	else if(Request==TIM3_TRIG)
00023c  2c20              CMP      r4,#0x20
00023e  d102              BNE      |L1.582|
;;;350    	{
;;;351    		DMAy_Channelx=DMA1_Channel6;
000240  4d71              LDR      r5,|L1.1032|
000242  3564              ADDS     r5,r5,#0x64
000244  e093              B        |L1.878|
                  |L1.582|
;;;352    	}
;;;353    	else if(Request==I2C1_TX)
000246  2c21              CMP      r4,#0x21
000248  d102              BNE      |L1.592|
;;;354    	{
;;;355    		DMAy_Channelx=DMA1_Channel6;
00024a  4d6f              LDR      r5,|L1.1032|
00024c  3564              ADDS     r5,r5,#0x64
00024e  e08e              B        |L1.878|
                  |L1.592|
;;;356    	}
;;;357    	else if(Request==USART2_TX)		//---DMA1_CH7
000250  2c22              CMP      r4,#0x22
000252  d102              BNE      |L1.602|
;;;358    	{
;;;359    		DMAy_Channelx=DMA1_Channel7;
000254  4d6c              LDR      r5,|L1.1032|
000256  3578              ADDS     r5,r5,#0x78
000258  e089              B        |L1.878|
                  |L1.602|
;;;360    	}
;;;361    	else if(Request==TIM2_CH2)
00025a  2c23              CMP      r4,#0x23
00025c  d102              BNE      |L1.612|
;;;362    	{
;;;363    		DMAy_Channelx=DMA1_Channel7;
00025e  4d6a              LDR      r5,|L1.1032|
000260  3578              ADDS     r5,r5,#0x78
000262  e084              B        |L1.878|
                  |L1.612|
;;;364    	}
;;;365    	else if(Request==TIM2_CH4)
000264  2c24              CMP      r4,#0x24
000266  d102              BNE      |L1.622|
;;;366    	{
;;;367    		DMAy_Channelx=DMA1_Channel7;
000268  4d67              LDR      r5,|L1.1032|
00026a  3578              ADDS     r5,r5,#0x78
00026c  e07f              B        |L1.878|
                  |L1.622|
;;;368    	}
;;;369    	else if(Request==TIM4_UP)
00026e  2c25              CMP      r4,#0x25
000270  d102              BNE      |L1.632|
;;;370    	{
;;;371    		DMAy_Channelx=DMA1_Channel7;
000272  4d65              LDR      r5,|L1.1032|
000274  3578              ADDS     r5,r5,#0x78
000276  e07a              B        |L1.878|
                  |L1.632|
;;;372    	}
;;;373    	else if(Request==I2C1_RX)
000278  2c26              CMP      r4,#0x26
00027a  d102              BNE      |L1.642|
;;;374    	{
;;;375    		DMAy_Channelx=DMA1_Channel7;
00027c  4d62              LDR      r5,|L1.1032|
00027e  3578              ADDS     r5,r5,#0x78
000280  e075              B        |L1.878|
                  |L1.642|
;;;376    	}
;;;377    	else if(Request==TIM5_CH4)		//---DMA2_CH1
000282  2c27              CMP      r4,#0x27
000284  d101              BNE      |L1.650|
;;;378    	{
;;;379    		DMAy_Channelx=DMA2_Channel1;
000286  4d65              LDR      r5,|L1.1052|
000288  e071              B        |L1.878|
                  |L1.650|
;;;380    	}
;;;381    	else if(Request==TIM5_TRIG)
00028a  2c28              CMP      r4,#0x28
00028c  d101              BNE      |L1.658|
;;;382    	{
;;;383    		DMAy_Channelx=DMA2_Channel1;
00028e  4d63              LDR      r5,|L1.1052|
000290  e06d              B        |L1.878|
                  |L1.658|
;;;384    	}
;;;385    	else if(Request==TIM8_CH3)
000292  2c29              CMP      r4,#0x29
000294  d101              BNE      |L1.666|
;;;386    	{
;;;387    		DMAy_Channelx=DMA2_Channel1;
000296  4d61              LDR      r5,|L1.1052|
000298  e069              B        |L1.878|
                  |L1.666|
;;;388    	}
;;;389    	else if(Request==TIM8_UP)
00029a  2c2a              CMP      r4,#0x2a
00029c  d101              BNE      |L1.674|
;;;390    	{
;;;391    		DMAy_Channelx=DMA2_Channel1;
00029e  4d5f              LDR      r5,|L1.1052|
0002a0  e065              B        |L1.878|
                  |L1.674|
;;;392    	}
;;;393    	else if(Request==SPI3_RX)
0002a2  2c2b              CMP      r4,#0x2b
0002a4  d101              BNE      |L1.682|
;;;394    	{
;;;395    		DMAy_Channelx=DMA2_Channel1;
0002a6  4d5d              LDR      r5,|L1.1052|
0002a8  e061              B        |L1.878|
                  |L1.682|
;;;396    	}
;;;397    	else if(Request==I2S3_RX)
0002aa  2c2c              CMP      r4,#0x2c
0002ac  d101              BNE      |L1.690|
;;;398    	{
;;;399    		DMAy_Channelx=DMA2_Channel1;
0002ae  4d5b              LDR      r5,|L1.1052|
0002b0  e05d              B        |L1.878|
                  |L1.690|
;;;400    	}
;;;401    	else if(Request==TIM8_CH4)		//---DMA2_CH2
0002b2  2c2d              CMP      r4,#0x2d
0002b4  d102              BNE      |L1.700|
;;;402    	{
;;;403    		DMAy_Channelx=DMA2_Channel2;
0002b6  4d59              LDR      r5,|L1.1052|
0002b8  3514              ADDS     r5,r5,#0x14
0002ba  e058              B        |L1.878|
                  |L1.700|
;;;404    	}
;;;405    	else if(Request==TIM8_TRIG)
0002bc  2c2e              CMP      r4,#0x2e
0002be  d102              BNE      |L1.710|
;;;406    	{
;;;407    		DMAy_Channelx=DMA2_Channel2;
0002c0  4d56              LDR      r5,|L1.1052|
0002c2  3514              ADDS     r5,r5,#0x14
0002c4  e053              B        |L1.878|
                  |L1.710|
;;;408    	}
;;;409    	else if(Request==TIM8_COM)
0002c6  2c2f              CMP      r4,#0x2f
0002c8  d102              BNE      |L1.720|
;;;410    	{
;;;411    		DMAy_Channelx=DMA2_Channel2;
0002ca  4d54              LDR      r5,|L1.1052|
0002cc  3514              ADDS     r5,r5,#0x14
0002ce  e04e              B        |L1.878|
                  |L1.720|
;;;412    	}
;;;413    	else if(Request==TIM5_CH3)
0002d0  2c30              CMP      r4,#0x30
0002d2  d102              BNE      |L1.730|
;;;414    	{
;;;415    		DMAy_Channelx=DMA2_Channel2;
0002d4  4d51              LDR      r5,|L1.1052|
0002d6  3514              ADDS     r5,r5,#0x14
0002d8  e049              B        |L1.878|
                  |L1.730|
;;;416    	}
;;;417    	else if(Request==TIM5_UP)
0002da  2c31              CMP      r4,#0x31
0002dc  d102              BNE      |L1.740|
;;;418    	{
;;;419    		DMAy_Channelx=DMA2_Channel2;
0002de  4d4f              LDR      r5,|L1.1052|
0002e0  3514              ADDS     r5,r5,#0x14
0002e2  e044              B        |L1.878|
                  |L1.740|
;;;420    	}
;;;421    	else if(Request==SPI3_TX)
0002e4  2c32              CMP      r4,#0x32
0002e6  d102              BNE      |L1.750|
;;;422    	{
;;;423    		DMAy_Channelx=DMA2_Channel2;
0002e8  4d4c              LDR      r5,|L1.1052|
0002ea  3514              ADDS     r5,r5,#0x14
0002ec  e03f              B        |L1.878|
                  |L1.750|
;;;424    	}
;;;425    	else if(Request==I2S3_TX)
0002ee  2c33              CMP      r4,#0x33
0002f0  d102              BNE      |L1.760|
;;;426    	{
;;;427    		DMAy_Channelx=DMA2_Channel2;
0002f2  4d4a              LDR      r5,|L1.1052|
0002f4  3514              ADDS     r5,r5,#0x14
0002f6  e03a              B        |L1.878|
                  |L1.760|
;;;428    	}
;;;429    	else if(Request==TIM8_CH1)		//---DMA2_CH3
0002f8  2c34              CMP      r4,#0x34
0002fa  d102              BNE      |L1.770|
;;;430    	{
;;;431    		DMAy_Channelx=DMA2_Channel3;
0002fc  4d47              LDR      r5,|L1.1052|
0002fe  3528              ADDS     r5,r5,#0x28
000300  e035              B        |L1.878|
                  |L1.770|
;;;432    	}
;;;433    	else if(Request==UART4_RX)
000302  2c35              CMP      r4,#0x35
000304  d102              BNE      |L1.780|
;;;434    	{
;;;435    		DMAy_Channelx=DMA2_Channel3;
000306  4d45              LDR      r5,|L1.1052|
000308  3528              ADDS     r5,r5,#0x28
00030a  e030              B        |L1.878|
                  |L1.780|
;;;436    	}
;;;437    	else if(Request==TIM6_UP)
00030c  2c36              CMP      r4,#0x36
00030e  d102              BNE      |L1.790|
;;;438    	{
;;;439    		DMAy_Channelx=DMA2_Channel3;
000310  4d42              LDR      r5,|L1.1052|
000312  3528              ADDS     r5,r5,#0x28
000314  e02b              B        |L1.878|
                  |L1.790|
;;;440    	}
;;;441    	else if(Request==DAC_CH1)
000316  2c37              CMP      r4,#0x37
000318  d102              BNE      |L1.800|
;;;442    	{
;;;443    		DMAy_Channelx=DMA2_Channel3;
00031a  4d40              LDR      r5,|L1.1052|
00031c  3528              ADDS     r5,r5,#0x28
00031e  e026              B        |L1.878|
                  |L1.800|
;;;444    	}
;;;445    	else if(Request==TIM5_CH2)		//---DMA2_CH4
000320  2c38              CMP      r4,#0x38
000322  d102              BNE      |L1.810|
;;;446    	{
;;;447    		DMAy_Channelx=DMA2_Channel4;
000324  4d3d              LDR      r5,|L1.1052|
000326  353c              ADDS     r5,r5,#0x3c
000328  e021              B        |L1.878|
                  |L1.810|
;;;448    	}
;;;449    	else if(Request==SDIO_RQ)
00032a  2c39              CMP      r4,#0x39
00032c  d102              BNE      |L1.820|
;;;450    	{
;;;451    		DMAy_Channelx=DMA2_Channel4;
00032e  4d3b              LDR      r5,|L1.1052|
000330  353c              ADDS     r5,r5,#0x3c
000332  e01c              B        |L1.878|
                  |L1.820|
;;;452    	}
;;;453    	else if(Request==TIM7_UP)
000334  2c3a              CMP      r4,#0x3a
000336  d102              BNE      |L1.830|
;;;454    	{
;;;455    		DMAy_Channelx=DMA2_Channel4;
000338  4d38              LDR      r5,|L1.1052|
00033a  353c              ADDS     r5,r5,#0x3c
00033c  e017              B        |L1.878|
                  |L1.830|
;;;456    	}
;;;457    	else if(Request==DAC_CH2)
00033e  2c3b              CMP      r4,#0x3b
000340  d102              BNE      |L1.840|
;;;458    	{
;;;459    		DMAy_Channelx=DMA2_Channel4;
000342  4d36              LDR      r5,|L1.1052|
000344  353c              ADDS     r5,r5,#0x3c
000346  e012              B        |L1.878|
                  |L1.840|
;;;460    	}
;;;461    	else if(Request==ADC3_RQ)		//---DMA2_CH5
000348  2c3c              CMP      r4,#0x3c
00034a  d102              BNE      |L1.850|
;;;462    	{
;;;463    		DMAy_Channelx=DMA2_Channel5;
00034c  4d33              LDR      r5,|L1.1052|
00034e  3550              ADDS     r5,r5,#0x50
000350  e00d              B        |L1.878|
                  |L1.850|
;;;464    	}
;;;465    	else if(Request==TIM8_CH2)
000352  2c3d              CMP      r4,#0x3d
000354  d102              BNE      |L1.860|
;;;466    	{
;;;467    		DMAy_Channelx=DMA2_Channel5;
000356  4d31              LDR      r5,|L1.1052|
000358  3550              ADDS     r5,r5,#0x50
00035a  e008              B        |L1.878|
                  |L1.860|
;;;468    	}
;;;469    	else if(Request==TIM5_CH1)
00035c  2c3e              CMP      r4,#0x3e
00035e  d102              BNE      |L1.870|
;;;470    	{
;;;471    		DMAy_Channelx=DMA2_Channel5;
000360  4d2e              LDR      r5,|L1.1052|
000362  3550              ADDS     r5,r5,#0x50
000364  e003              B        |L1.878|
                  |L1.870|
;;;472    	}
;;;473    	else if(Request==UART4_TX)
000366  2c3f              CMP      r4,#0x3f
000368  d101              BNE      |L1.878|
;;;474    	{
;;;475    		DMAy_Channelx=DMA2_Channel5;
00036a  4d2c              LDR      r5,|L1.1052|
00036c  3550              ADDS     r5,r5,#0x50
                  |L1.878|
;;;476    	}
;;;477    
;;;478    	
;;;479    	//2)**********开启DMA时钟	
;;;480    	if(DMAy_Channelx>=DMA1_Channel1||DMAy_Channelx<=DMA1_Channel7)
00036e  4826              LDR      r0,|L1.1032|
000370  4285              CMP      r5,r0
000372  d203              BCS      |L1.892|
000374  4824              LDR      r0,|L1.1032|
000376  3078              ADDS     r0,r0,#0x78
000378  4285              CMP      r5,r0
00037a  d804              BHI      |L1.902|
                  |L1.892|
;;;481    	{
;;;482    		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
00037c  2101              MOVS     r1,#1
00037e  4608              MOV      r0,r1
000380  f7fffffe          BL       RCC_AHBPeriphClockCmd
000384  e00a              B        |L1.924|
                  |L1.902|
;;;483    	}
;;;484    	else if(DMAy_Channelx>=DMA2_Channel1||DMAy_Channelx<=DMA2_Channel5)
000386  4825              LDR      r0,|L1.1052|
000388  4285              CMP      r5,r0
00038a  d203              BCS      |L1.916|
00038c  4823              LDR      r0,|L1.1052|
00038e  3050              ADDS     r0,r0,#0x50
000390  4285              CMP      r5,r0
000392  d803              BHI      |L1.924|
                  |L1.916|
;;;485    	{
;;;486    		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2,ENABLE);
000394  2101              MOVS     r1,#1
000396  2002              MOVS     r0,#2
000398  f7fffffe          BL       RCC_AHBPeriphClockCmd
                  |L1.924|
;;;487    	}
;;;488    
;;;489    	//1)**********打开相应GPIO时钟，配置GPIO	
;;;490    	//1)**********打开相应GPIO时钟，配置GPIO	
;;;491    	//1)**********打开相应GPIO时钟，配置GPIO	
;;;492    	
;;;493    		
;;;494    	
;;;495    	/* Enable the DMA1 Interrupt */
;;;496    	NVIC_Initstructure.NVIC_IRQChannel = DMAy_Channelx_IRQChannel;       			//通道设置为串口1中断
00039c  f88d802c          STRB     r8,[sp,#0x2c]
;;;497    	NVIC_Initstructure.NVIC_IRQChannelSubPriority = 0;     										//中断响应优先级0
0003a0  2000              MOVS     r0,#0
0003a2  f88d002e          STRB     r0,[sp,#0x2e]
;;;498    	NVIC_Initstructure.NVIC_IRQChannelPreemptionPriority=0;
0003a6  f88d002d          STRB     r0,[sp,#0x2d]
;;;499    	NVIC_Initstructure.NVIC_IRQChannelCmd = ENABLE;        										//打开中断
0003aa  2001              MOVS     r0,#1
0003ac  f88d002f          STRB     r0,[sp,#0x2f]
;;;500    	NVIC_Init(&NVIC_Initstructure);
0003b0  a80b              ADD      r0,sp,#0x2c
0003b2  f7fffffe          BL       NVIC_Init
;;;501    
;;;502    	/*DMA发送配置*/
;;;503    	DMA_Initstructure.DMA_PeripheralBaseAddr =  (u32)DMA_PeripheralBaseAddr;	//DMA外设源地址
0003b6  f8cd9030          STR      r9,[sp,#0x30]
;;;504    	DMA_Initstructure.DMA_MemoryBaseAddr     = (u32)DMA_MemoryBaseAddr;				//DMA数据内存地址
0003ba  f8cda034          STR      r10,[sp,#0x34]
;;;505    	DMA_Initstructure.DMA_DIR = (u32)DMA_DIR;																	//DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
0003be  f8cdb038          STR      r11,[sp,#0x38]
;;;506    	DMA_Initstructure.DMA_BufferSize = (u32)DMA_BufferSize; 									//指定DMA通道的DMA缓存的大小
0003c2  9808              LDR      r0,[sp,#0x20]
0003c4  900f              STR      r0,[sp,#0x3c]
;;;507    //	DMA_Initstructure.DMA_BufferSize = sizeof(MemoryAddr[0]); 							//指定DMA通道的DMA缓存的大小
;;;508    	DMA_Initstructure.DMA_PeripheralInc = (u32)DMA_PeripheralInc;							//DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变），
0003c6  9807              LDR      r0,[sp,#0x1c]
0003c8  9010              STR      r0,[sp,#0x40]
;;;509    	DMA_Initstructure.DMA_MemoryInc =(u32)DMA_MemoryInc;											//DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
0003ca  9806              LDR      r0,[sp,#0x18]
0003cc  9011              STR      r0,[sp,#0x44]
;;;510    	DMA_Initstructure.DMA_PeripheralDataSize = (u32)DMA_PeripheralDataSize;		//外设数据宽度--DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
0003ce  9805              LDR      r0,[sp,#0x14]
0003d0  9012              STR      r0,[sp,#0x48]
;;;511    	DMA_Initstructure.DMA_MemoryDataSize = (u32)DMA_MemoryDataSize;						//内存数据宽度--DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
0003d2  9804              LDR      r0,[sp,#0x10]
0003d4  9013              STR      r0,[sp,#0x4c]
;;;512    	DMA_Initstructure.DMA_Mode = (u32)DMA_Mode;																//DMA工作模式--DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
0003d6  9803              LDR      r0,[sp,#0xc]
0003d8  9014              STR      r0,[sp,#0x50]
;;;513    	DMA_Initstructure.DMA_Priority = (u32)DMA_Priority; 											//DMA通道的转输优先级--DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
0003da  9802              LDR      r0,[sp,#8]
0003dc  9015              STR      r0,[sp,#0x54]
;;;514    	DMA_Initstructure.DMA_M2M = (u32)DMA_M2M;																	//DMA通道的内存到内存传输--DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
0003de  9801              LDR      r0,[sp,#4]
0003e0  9016              STR      r0,[sp,#0x58]
;;;515    	DMA_Init(DMAy_Channelx,&DMA_Initstructure);																//初始化DMA
0003e2  a90c              ADD      r1,sp,#0x30
0003e4  4628              MOV      r0,r5
0003e6  f7fffffe          BL       DMA_Init
;;;516    
;;;517    	/* 清除DMA1通道4所有标志*/
;;;518    	DMA_ClearFlag(DMAy_FLAG_GLx);                                 						// 清除DMA全局中断标志
0003ea  9809              LDR      r0,[sp,#0x24]
0003ec  f7fffffe          BL       DMA_ClearFlag
;;;519    	/* 关闭DMA1通道5*/
;;;520    	DMA_Cmd(DMAy_Channelx,DISABLE);
0003f0  2100              MOVS     r1,#0
0003f2  4628              MOV      r0,r5
0003f4  f7fffffe          BL       DMA_Cmd
;;;521    	/* 使能DMA1通道4传输完成中断 */
;;;522    	DMA_ITConfig(DMAy_Channelx,DMA_IT_TC, DMA_IT_Interruupt);									//DMA开启传输完成中断
0003f8  2102              MOVS     r1,#2
0003fa  4628              MOV      r0,r5
0003fc  9a0a              LDR      r2,[sp,#0x28]
0003fe  f7fffffe          BL       DMA_ITConfig
;;;523    
;;;524    
;;;525    //	/*DMA接收配置*/
;;;526    //	DMA_Initstructure.DMA_PeripheralBaseAddr =  (u32)(&USART1->DR);					//DMA外设源地址
;;;527    //	DMA_Initstructure.DMA_MemoryBaseAddr     = 	(u32)MemoryAddr;						//DMA数据内存地址
;;;528    //	DMA_Initstructure.DMA_DIR = DMA_DIR_PeripheralSRC;											//DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
;;;529    //	DMA_Initstructure.DMA_BufferSize = BufferSize; 													//指定DMA通道的DMA缓存的大小
;;;530    //	DMA_Initstructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;				//DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变），
;;;531    //	DMA_Initstructure.DMA_MemoryInc =DMA_MemoryInc_Enable;									//DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
;;;532    //	DMA_Initstructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;	//外设数据宽度--DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
;;;533    //	DMA_Initstructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;					//内存数据宽度--DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
;;;534    //	DMA_Initstructure.DMA_Mode = DMA_Mode_Normal;														//DMA工作模式--DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
;;;535    //	DMA_Initstructure.DMA_Priority = DMA_Priority_High; 										//DMA通道的转输优先级--DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
;;;536    //	DMA_Initstructure.DMA_M2M = DMA_M2M_Disable;														//DMA通道的内存到内存传输--DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
;;;537    //	DMA_Init(DMA1_Channel5,&DMA_Initstructure);															//初始化DMA
;;;538    //	
;;;539    //	/* 清除DMA1通道5所有标志*/
;;;540    //	DMA_ClearFlag(DMA1_FLAG_GL5);                                 					// 清除DMA所有标志
;;;541    //	/* 启动DMA1通道5*/
;;;542    //	DMA_Cmd(DMA1_Channel5,ENABLE);
;;;543    }
000402  b017              ADD      sp,sp,#0x5c
000404  e8bd8ff0          POP      {r4-r11,pc}
;;;544    
                          ENDP

                  |L1.1032|
                          DCD      0x40020008
                  |L1.1036|
                          DCD      0x4001244c
                  |L1.1040|
                          DCD      0x4000003c
                  |L1.1044|
                          DCD      0x40000834
                  |L1.1048|
                          DCD      0x40013804
                  |L1.1052|
                          DCD      0x40020408

                          AREA ||i.DMA_Server||, CODE, READONLY, ALIGN=2

                  DMA_Server PROC
;;;552    *******************************************************************************/
;;;553    void DMA_Server(void)
000000  b510              PUSH     {r4,lr}
;;;554    { 
;;;555    	WOW_Server();				//服务函数
000002  f7fffffe          BL       WOW_Server
;;;556    //#ifdef	RS485_TO_USART_PRJ
;;;557    //	GPIO_ResetBits(GPIOB,GPIO_Pin_8);	
;;;558    //#endif
;;;559    //#ifdef	PD002T20_PRJ
;;;560    //	GPIO_ResetBits(GPIOA,GPIO_Pin_1);	
;;;561    //#endif
;;;562    		/***USART3-TXD***/
;;;563    	if(DMA_GetFlagStatus(DMA1_IT_GL2)== SET)
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       DMA_GetFlagStatus
00000c  2801              CMP      r0,#1
00000e  d107              BNE      |L2.32|
;;;564    	{
;;;565    			/*清除标志位*/
;;;566    		DMA_ClearFlag(DMA1_FLAG_GL2); 
000010  2010              MOVS     r0,#0x10
000012  f7fffffe          BL       DMA_ClearFlag
;;;567    		/*关闭DMA发送*/ 
;;;568    		DMA_Cmd(DMA1_Channel2,DISABLE); 
000016  2100              MOVS     r1,#0
000018  4817              LDR      r0,|L2.120|
00001a  f7fffffe          BL       DMA_Cmd
00001e  e029              B        |L2.116|
                  |L2.32|
;;;569    	}
;;;570    	/***USART-TXD***/
;;;571    	else if(DMA_GetFlagStatus(DMA1_IT_GL4)== SET)
000020  f44f5080          MOV      r0,#0x1000
000024  f7fffffe          BL       DMA_GetFlagStatus
000028  2801              CMP      r0,#1
00002a  d108              BNE      |L2.62|
;;;572    	{
;;;573    		/*清除标志位*/
;;;574    		DMA_ClearFlag(DMA1_FLAG_GL4); 
00002c  0300              LSLS     r0,r0,#12
00002e  f7fffffe          BL       DMA_ClearFlag
;;;575    		/*关闭DMA发送*/ 
;;;576    		DMA_Cmd(DMA1_Channel4,DISABLE);
000032  2100              MOVS     r1,#0
000034  4810              LDR      r0,|L2.120|
000036  3028              ADDS     r0,r0,#0x28
000038  f7fffffe          BL       DMA_Cmd
00003c  e01a              B        |L2.116|
                  |L2.62|
;;;577    	}
;;;578    	/***USART2-TXD***/
;;;579    	else if(DMA_GetFlagStatus(DMA1_IT_GL7)== SET)
00003e  f04f7080          MOV      r0,#0x1000000
000042  f7fffffe          BL       DMA_GetFlagStatus
000046  2801              CMP      r0,#1
000048  d108              BNE      |L2.92|
;;;580    	{
;;;581    			/*清除标志位*/
;;;582    		DMA_ClearFlag(DMA1_FLAG_GL7); 
00004a  0600              LSLS     r0,r0,#24
00004c  f7fffffe          BL       DMA_ClearFlag
;;;583    		/*关闭DMA发送*/ 
;;;584    		DMA_Cmd(DMA1_Channel7,DISABLE); 
000050  2100              MOVS     r1,#0
000052  4809              LDR      r0,|L2.120|
000054  3064              ADDS     r0,r0,#0x64
000056  f7fffffe          BL       DMA_Cmd
00005a  e00b              B        |L2.116|
                  |L2.92|
;;;585    	}
;;;586    
;;;587    	/***USART4-TXD***/
;;;588    	else if(DMA_GetFlagStatus(DMA2_IT_GL5)== SET)
00005c  4807              LDR      r0,|L2.124|
00005e  f7fffffe          BL       DMA_GetFlagStatus
000062  2801              CMP      r0,#1
000064  d106              BNE      |L2.116|
;;;589    	{
;;;590    			/*清除标志位*/
;;;591    		DMA_ClearFlag(DMA2_FLAG_GL5); 
000066  4805              LDR      r0,|L2.124|
000068  f7fffffe          BL       DMA_ClearFlag
;;;592    		/*关闭DMA发送*/ 
;;;593    		DMA_Cmd(DMA2_Channel5,DISABLE); 
00006c  2100              MOVS     r1,#0
00006e  4804              LDR      r0,|L2.128|
000070  f7fffffe          BL       DMA_Cmd
                  |L2.116|
;;;594    	}
;;;595    	
;;;596    /************************************************************************
;;;597    ***********************串口2收发****************************************
;;;598    
;;;599    if(USART_GetITStatus(USART2,USART_IT_IDLE))
;;;600      {
;;;601    			USART_ClearITPendingBit(USART2,USART_IT_IDLE); 					//清除空闲串口标志位
;;;602    			num = USART2->DR; 												//读出数据以完成清除标志
;;;603    			DMA_Cmd(DMA1_Channel6,DISABLE);    										//关闭接收DMA
;;;604    			num = DMA1_BufferSize -  DMA_GetCurrDataCounter(DMA1_Channel6);	//得到真正接收数据个数
;;;605    			DMA1_Channel7->CNDTR =num;										//设定待发送数据个数
;;;606    			DMA1_Channel6->CNDTR=DMA1_BufferSize;       					//重新设置接收数据个数				
;;;607    			DMA_Cmd(DMA1_Channel6,ENABLE);  								//开启接收DMA			
;;;608    			DMA_Cmd(DMA1_Channel7,ENABLE);									//DMA发送开启
;;;609    	}
;;;610    	else if(DMA_GetFlagStatus(DMA1_FLAG_GL7))
;;;611    	{
;;;612    		DMA_ClearFlag(DMA1_FLAG_GL7);
;;;613    		DMA_Cmd(DMA1_Channel7,DISABLE);									//DMA发送开启
;;;614    	}
;;;615    *************************************************************************
;;;616    ************************************************************************/
;;;617    	
;;;618    }
000074  bd10              POP      {r4,pc}
;;;619    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      0x4002001c
                  |L2.124|
                          DCD      0x10010000
                  |L2.128|
                          DCD      0x40020458
