; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\amp_cabv11.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\amp_cabv11.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\amp_cabv11.crf ..\..\Examples\WOW\AMP_CABV11.C]
                          THUMB

                          AREA ||i.AMPCABCOMM_Configuration||, CODE, READONLY, ALIGN=2

                  AMPCABCOMM_Configuration PROC
;;;459    *******************************************************************************/
;;;460    void AMPCABCOMM_Configuration(void)
000000  b500              PUSH     {lr}
;;;461    {
000002  b0ab              SUB      sp,sp,#0xac
;;;462      IOT5302Wdef IOT5302W;
;;;463      //-----------------------------PC接口USART1
;;;464      USART_DMA_ConfigurationNR	(CommPcPort,19200,gDatasize);	//USART_DMA配置--查询方式，不开中断
000004  2280              MOVS     r2,#0x80
000006  f44f4196          MOV      r1,#0x4b00
00000a  4816              LDR      r0,|L1.100|
00000c  f7fffffe          BL       USART_DMA_ConfigurationNR
;;;465      
;;;466      //-----------------------------读卡器接口USART3
;;;467      IOT5302W.Conf.IOT5302WPort.USARTx  = CommCardPort;
000010  4815              LDR      r0,|L1.104|
000012  9001              STR      r0,[sp,#4]
;;;468      IOT5302W.Conf.IOT5302WPort.RS485_CTL_PORT  = CommCardCTLPort;
000014  4815              LDR      r0,|L1.108|
000016  9002              STR      r0,[sp,#8]
;;;469      IOT5302W.Conf.IOT5302WPort.RS485_CTL_Pin   = CommCardCTLPin;
000018  2004              MOVS     r0,#4
00001a  f8ad000c          STRH     r0,[sp,#0xc]
;;;470      IOT5302W.Conf.USART_BaudRate  = CommCardBaudRate;
00001e  f44f4096          MOV      r0,#0x4b00
000022  9004              STR      r0,[sp,#0x10]
;;;471      API_IOT5302WConfiguration(&IOT5302W);
000024  a801              ADD      r0,sp,#4
000026  f7fffffe          BL       API_IOT5302WConfiguration
;;;472      //-----------------------------层板接口USART2
;;;473      stCbRS485Ly.USARTx  = CommLayPort;
00002a  4811              LDR      r0,|L1.112|
00002c  4911              LDR      r1,|L1.116|
00002e  6008              STR      r0,[r1,#0]  ; stCbRS485Ly
;;;474      stCbRS485Ly.RS485_CTL_PORT  = CommLayCTLPort;
000030  4811              LDR      r0,|L1.120|
000032  6048              STR      r0,[r1,#4]  ; stCbRS485Ly
;;;475      stCbRS485Ly.RS485_CTL_Pin   = CommLayCTLPin;
000034  f44f4000          MOV      r0,#0x8000
000038  8108              STRH     r0,[r1,#8]
;;;476      RS485_DMA_ConfigurationNR			(&stCbRS485Ly,19200,gDatasize);	//USART_DMA配置--查询方式，不开中断,配置完默认为接收状态
00003a  2280              MOVS     r2,#0x80
00003c  f44f4196          MOV      r1,#0x4b00
000040  480c              LDR      r0,|L1.116|
000042  f7fffffe          BL       RS485_DMA_ConfigurationNR
;;;477      //-----------------------------副柜接口UART4
;;;478      stCbRS485Cb.USARTx  = CommCbPort;
000046  480d              LDR      r0,|L1.124|
000048  490d              LDR      r1,|L1.128|
00004a  6008              STR      r0,[r1,#0]  ; stCbRS485Cb
;;;479      stCbRS485Cb.RS485_CTL_PORT  = CommCbCTLPort;
00004c  480a              LDR      r0,|L1.120|
00004e  6048              STR      r0,[r1,#4]  ; stCbRS485Cb
;;;480      stCbRS485Cb.RS485_CTL_Pin   = CommCbCTLPin;
000050  1580              ASRS     r0,r0,#22
000052  8108              STRH     r0,[r1,#8]
;;;481      RS485_DMA_ConfigurationNR			(&stCbRS485Cb,19200,gDatasize);	//USART_DMA配置--查询方式，不开中断,配置完默认为接收状态
000054  2280              MOVS     r2,#0x80
000056  f44f4196          MOV      r1,#0x4b00
00005a  4809              LDR      r0,|L1.128|
00005c  f7fffffe          BL       RS485_DMA_ConfigurationNR
;;;482    }
000060  b02b              ADD      sp,sp,#0xac
000062  bd00              POP      {pc}
;;;483    /*******************************************************************************
                          ENDP

                  |L1.100|
                          DCD      0x40004400
                  |L1.104|
                          DCD      0x40004800
                  |L1.108|
                          DCD      0x40010c00
                  |L1.112|
                          DCD      0x40004c00
                  |L1.116|
                          DCD      stCbRS485Ly
                  |L1.120|
                          DCD      0x40010800
                  |L1.124|
                          DCD      0x40013800
                  |L1.128|
                          DCD      stCbRS485Cb

                          AREA ||i.AMPCABSwitchID_Configuration||, CODE, READONLY, ALIGN=2

                  AMPCABSwitchID_Configuration PROC
;;;386    *******************************************************************************/
;;;387    void AMPCABSwitchID_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;388    {
;;;389      stCbSwitch.NumOfSW	=	8;
000002  2008              MOVS     r0,#8
000004  491d              LDR      r1,|L2.124|
000006  f881007e          STRB     r0,[r1,#0x7e]
;;;390      
;;;391      stCbSwitch.SW1_PORT	=	GPIOB;
00000a  481d              LDR      r0,|L2.128|
00000c  6008              STR      r0,[r1,#0]  ; stCbSwitch
;;;392      stCbSwitch.SW1_Pin	=	GPIO_Pin_9;
00000e  1540              ASRS     r0,r0,#21
000010  8088              STRH     r0,[r1,#4]
;;;393      
;;;394      stCbSwitch.SW2_PORT	=	GPIOB;
000012  481b              LDR      r0,|L2.128|
000014  6088              STR      r0,[r1,#8]  ; stCbSwitch
;;;395      stCbSwitch.SW2_Pin	=	GPIO_Pin_8;
000016  1580              ASRS     r0,r0,#22
000018  8188              STRH     r0,[r1,#0xc]
;;;396      
;;;397      stCbSwitch.SW3_PORT	=	GPIOB;
00001a  4819              LDR      r0,|L2.128|
00001c  6108              STR      r0,[r1,#0x10]  ; stCbSwitch
;;;398      stCbSwitch.SW3_Pin	=	GPIO_Pin_7;
00001e  2080              MOVS     r0,#0x80
000020  8288              STRH     r0,[r1,#0x14]
;;;399      
;;;400      stCbSwitch.SW4_PORT	=	GPIOB;
000022  4817              LDR      r0,|L2.128|
000024  6188              STR      r0,[r1,#0x18]  ; stCbSwitch
;;;401      stCbSwitch.SW4_Pin	=	GPIO_Pin_6;
000026  2040              MOVS     r0,#0x40
000028  8388              STRH     r0,[r1,#0x1c]
;;;402      
;;;403      stCbSwitch.SW5_PORT	=	GPIOB;
00002a  4815              LDR      r0,|L2.128|
00002c  6208              STR      r0,[r1,#0x20]  ; stCbSwitch
;;;404      stCbSwitch.SW5_Pin	=	GPIO_Pin_5;
00002e  2020              MOVS     r0,#0x20
000030  8488              STRH     r0,[r1,#0x24]
;;;405      
;;;406      stCbSwitch.SW6_PORT	=	GPIOB;
000032  4813              LDR      r0,|L2.128|
000034  6288              STR      r0,[r1,#0x28]  ; stCbSwitch
;;;407      stCbSwitch.SW6_Pin	=	GPIO_Pin_4;
000036  2010              MOVS     r0,#0x10
000038  8588              STRH     r0,[r1,#0x2c]
;;;408      
;;;409      stCbSwitch.SW7_PORT	=	GPIOB;
00003a  4811              LDR      r0,|L2.128|
00003c  6308              STR      r0,[r1,#0x30]  ; stCbSwitch
;;;410      stCbSwitch.SW7_Pin	=	GPIO_Pin_3;
00003e  2008              MOVS     r0,#8
000040  8688              STRH     r0,[r1,#0x34]
;;;411      
;;;412      stCbSwitch.SW8_PORT	=	GPIOD;
000042  4810              LDR      r0,|L2.132|
000044  6388              STR      r0,[r1,#0x38]  ; stCbSwitch
;;;413      stCbSwitch.SW8_Pin	=	GPIO_Pin_2;
000046  2004              MOVS     r0,#4
000048  8788              STRH     r0,[r1,#0x3c]
;;;414    
;;;415    	SwitchIdInitialize(&stCbSwitch);						//
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       SwitchIdInitialize
;;;416    
;;;417      CabAddr  = SWITCHID_ReadLeft(&stCbSwitch)&0x3F;  
000050  480a              LDR      r0,|L2.124|
000052  f7fffffe          BL       SWITCHID_ReadLeft
000056  f000003f          AND      r0,r0,#0x3f
00005a  490b              LDR      r1,|L2.136|
00005c  7008              STRB     r0,[r1,#0]
;;;418      
;;;419      if(SWITCHID_ReadLeft(&stCbSwitch)&0x80)
00005e  4807              LDR      r0,|L2.124|
000060  f7fffffe          BL       SWITCHID_ReadLeft
000064  f0000080          AND      r0,r0,#0x80
000068  b118              CBZ      r0,|L2.114|
;;;420      {
;;;421        MainFlag=1; //0--副柜，1--主柜
00006a  2001              MOVS     r0,#1
00006c  4907              LDR      r1,|L2.140|
00006e  7008              STRB     r0,[r1,#0]
000070  e002              B        |L2.120|
                  |L2.114|
;;;422      }
;;;423      else
;;;424      {
;;;425        MainFlag=0; //0--副柜，1--主柜
000072  2000              MOVS     r0,#0
000074  4905              LDR      r1,|L2.140|
000076  7008              STRB     r0,[r1,#0]
                  |L2.120|
;;;426      }
;;;427    }
000078  bd10              POP      {r4,pc}
;;;428    /*******************************************************************************
                          ENDP

00007a  0000              DCW      0x0000
                  |L2.124|
                          DCD      stCbSwitch
                  |L2.128|
                          DCD      0x40010c00
                  |L2.132|
                          DCD      0x40011400
                  |L2.136|
                          DCD      CabAddr
                  |L2.140|
                          DCD      MainFlag

                          AREA ||i.AMPCAB_BackLight||, CODE, READONLY, ALIGN=2

                  AMPCAB_BackLight PROC
;;;243    *******************************************************************************/
;;;244    void AMPCAB_BackLight(void)
000000  b510              PUSH     {r4,lr}
;;;245    {
;;;246      static unsigned short BLtime=0;
;;;247      if(0==CabAddr)   //未拨码
000002  4819              LDR      r0,|L3.104|
000004  7800              LDRB     r0,[r0,#0]  ; CabAddr
000006  b978              CBNZ     r0,|L3.40|
;;;248      {    
;;;249        if(BLtime++>200)
000008  4818              LDR      r0,|L3.108|
00000a  8801              LDRH     r1,[r0,#0]  ; BLtime
00000c  8800              LDRH     r0,[r0,#0]  ; BLtime
00000e  1c40              ADDS     r0,r0,#1
000010  4a16              LDR      r2,|L3.108|
000012  8010              STRH     r0,[r2,#0]
000014  29c8              CMP      r1,#0xc8
000016  dd06              BLE      |L3.38|
;;;250        {
;;;251          BLtime=0;
000018  2000              MOVS     r0,#0
00001a  4611              MOV      r1,r2
00001c  8008              STRH     r0,[r1,#0]
;;;252          GPIO_Toggle	(BackLightPort,BackLightPin);		//将GPIO相应管脚输出翻转----V20170605
00001e  2120              MOVS     r1,#0x20
000020  4813              LDR      r0,|L3.112|
000022  f7fffffe          BL       GPIO_Toggle
                  |L3.38|
;;;253        }
;;;254        return;
;;;255      }
;;;256      if(AMPPro.Req.BLon)      //背光开关控制
;;;257      {
;;;258        BackLightOn;
;;;259        AMPPro.Req.BLon=0;
;;;260      }
;;;261      else if(AMPPro.Req.BLoff)
;;;262      {
;;;263        BackLightOff;
;;;264        AMPPro.Req.BLoff=0;
;;;265      }
;;;266    }
000026  bd10              POP      {r4,pc}
                  |L3.40|
000028  4812              LDR      r0,|L3.116|
00002a  7c00              LDRB     r0,[r0,#0x10]         ;256  ; AMPPro
00002c  f3c01000          UBFX     r0,r0,#4,#1           ;256
000030  b148              CBZ      r0,|L3.70|
000032  2020              MOVS     r0,#0x20              ;258
000034  490e              LDR      r1,|L3.112|
000036  6108              STR      r0,[r1,#0x10]         ;258
000038  480e              LDR      r0,|L3.116|
00003a  8a00              LDRH     r0,[r0,#0x10]         ;259  ; AMPPro
00003c  f0200010          BIC      r0,r0,#0x10           ;259
000040  490c              LDR      r1,|L3.116|
000042  8208              STRH     r0,[r1,#0x10]         ;259
000044  e00d              B        |L3.98|
                  |L3.70|
000046  480b              LDR      r0,|L3.116|
000048  7c00              LDRB     r0,[r0,#0x10]         ;261  ; AMPPro
00004a  f3c01040          UBFX     r0,r0,#5,#1           ;261
00004e  b140              CBZ      r0,|L3.98|
000050  2020              MOVS     r0,#0x20              ;263
000052  4907              LDR      r1,|L3.112|
000054  6148              STR      r0,[r1,#0x14]         ;263
000056  4807              LDR      r0,|L3.116|
000058  8a00              LDRH     r0,[r0,#0x10]         ;264  ; AMPPro
00005a  f0200020          BIC      r0,r0,#0x20           ;264
00005e  4905              LDR      r1,|L3.116|
000060  8208              STRH     r0,[r1,#0x10]         ;264
                  |L3.98|
000062  bf00              NOP      
000064  e7df              B        |L3.38|
;;;267    /*******************************************************************************
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      CabAddr
                  |L3.108|
                          DCD      BLtime
                  |L3.112|
                          DCD      0x40011000
                  |L3.116|
                          DCD      AMPPro

                          AREA ||i.AMPCAB_GenyConfiguration||, CODE, READONLY, ALIGN=2

                  AMPCAB_GenyConfiguration PROC
;;;436    *******************************************************************************/
;;;437    void AMPCAB_GenyConfiguration(void)
000000  b510              PUSH     {r4,lr}
;;;438    {
;;;439      //---------------------锁接口配置
;;;440      GPIO_Configuration_OPP50(LockDrPort,LockDrPin);
000002  2101              MOVS     r1,#1
000004  480d              LDR      r0,|L4.60|
000006  f7fffffe          BL       GPIO_Configuration_OPP50
;;;441      GPIO_Configuration_IPU(LockSiPort,LockSiPin);
00000a  f44f5180          MOV      r1,#0x1000
00000e  480c              LDR      r0,|L4.64|
000010  f7fffffe          BL       GPIO_Configuration_IPU
;;;442      ResLock;    //释放锁驱动
000014  2001              MOVS     r0,#1
000016  4909              LDR      r1,|L4.60|
000018  3114              ADDS     r1,r1,#0x14
00001a  6008              STR      r0,[r1,#0]
;;;443      //---------------------背光接口配置
;;;444      GPIO_Configuration_OPP50(BackLightPort,BackLightPin);
00001c  2120              MOVS     r1,#0x20
00001e  4808              LDR      r0,|L4.64|
000020  f7fffffe          BL       GPIO_Configuration_OPP50
;;;445      BackLightOn;
000024  2020              MOVS     r0,#0x20
000026  4906              LDR      r1,|L4.64|
000028  6108              STR      r0,[r1,#0x10]
;;;446      //---------------------层板供电接口配置
;;;447      GPIO_Configuration_OPP50(LayPowerPort,LayPowerPin);
00002a  2102              MOVS     r1,#2
00002c  4803              LDR      r0,|L4.60|
00002e  f7fffffe          BL       GPIO_Configuration_OPP50
;;;448      LayPowerOn;   //开供电，配置读卡器
000032  2002              MOVS     r0,#2
000034  4901              LDR      r1,|L4.60|
000036  3110              ADDS     r1,r1,#0x10
000038  6008              STR      r0,[r1,#0]
;;;449    }
00003a  bd10              POP      {r4,pc}
;;;450    
                          ENDP

                  |L4.60|
                          DCD      0x40010c00
                  |L4.64|
                          DCD      0x40011000

                          AREA ||i.AMPCAB_Receive||, CODE, READONLY, ALIGN=2

                  AMPCAB_Receive PROC
;;;149    *******************************************************************************/
;;;150    void AMPCAB_Receive(void)
000000  b510              PUSH     {r4,lr}
;;;151    {
000002  b0c0              SUB      sp,sp,#0x100
;;;152      unsigned short RxNum  = 0;
000004  2400              MOVS     r4,#0
;;;153      unsigned char rxd[256]={0};
000006  f44f7180          MOV      r1,#0x100
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;154      //==========================================================接收查询
;;;155      //---------------------PC接口 USART1
;;;156      RxNum = USART_ReadBufferIDLE(CommPcPort,rxd);
000010  4669              MOV      r1,sp
000012  4816              LDR      r0,|L5.108|
000014  f7fffffe          BL       USART_ReadBufferIDLE
000018  4604              MOV      r4,r0
;;;157      if(RxNum)
00001a  b124              CBZ      r4,|L5.38|
;;;158      {
;;;159        Msg_ProcessCB(PcPort,rxd,RxNum);                //柜消息处理
00001c  4622              MOV      r2,r4
00001e  4669              MOV      r1,sp
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       Msg_ProcessCB
                  |L5.38|
;;;160      }
;;;161      //---------------------副柜接口 UART4
;;;162      RxNum = RS485_ReadBufferIDLE(&stCbRS485Cb,rxd);
000026  4669              MOV      r1,sp
000028  4811              LDR      r0,|L5.112|
00002a  f7fffffe          BL       RS485_ReadBufferIDLE
00002e  4604              MOV      r4,r0
;;;163      if(RxNum)
000030  b124              CBZ      r4,|L5.60|
;;;164      {
;;;165        Msg_ProcessCB(CabPort,rxd,RxNum);
000032  4622              MOV      r2,r4
000034  4669              MOV      r1,sp
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       Msg_ProcessCB
                  |L5.60|
;;;166      }  
;;;167      //---------------------层板接口 USART2
;;;168      RxNum = RS485_ReadBufferIDLE(&stCbRS485Ly,rxd);
00003c  4669              MOV      r1,sp
00003e  480d              LDR      r0,|L5.116|
000040  f7fffffe          BL       RS485_ReadBufferIDLE
000044  4604              MOV      r4,r0
;;;169      if(RxNum)
000046  b124              CBZ      r4,|L5.82|
;;;170      {
;;;171        Msg_ProcessCB(LayPort,rxd,RxNum);              //柜消息处理
000048  4622              MOV      r2,r4
00004a  4669              MOV      r1,sp
00004c  2003              MOVS     r0,#3
00004e  f7fffffe          BL       Msg_ProcessCB
                  |L5.82|
;;;172      }
;;;173      //---------------------读卡器接口 USART3
;;;174      RxNum = API_IOT5302WGetUID(rxd);
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       API_IOT5302WGetUID
000058  4604              MOV      r4,r0
;;;175      if(RxNum)
00005a  b124              CBZ      r4,|L5.102|
;;;176      {
;;;177        Msg_ProcessCB(CardPort,rxd,RxNum);
00005c  4622              MOV      r2,r4
00005e  4669              MOV      r1,sp
000060  2004              MOVS     r0,#4
000062  f7fffffe          BL       Msg_ProcessCB
                  |L5.102|
;;;178      }
;;;179    }
000066  b040              ADD      sp,sp,#0x100
000068  bd10              POP      {r4,pc}
;;;180    /*******************************************************************************
                          ENDP

00006a  0000              DCW      0x0000
                  |L5.108|
                          DCD      0x40004400
                  |L5.112|
                          DCD      stCbRS485Cb
                  |L5.116|
                          DCD      stCbRS485Ly

                          AREA ||i.AMPCAB_SYSLED||, CODE, READONLY, ALIGN=2

                  AMPCAB_SYSLED PROC
;;;218    *******************************************************************************/
;;;219    void AMPCAB_SYSLED(void)
000000  b510              PUSH     {r4,lr}
;;;220    {
;;;221      if(0==AMPPro.Time.SYSLEDTime)
000002  4809              LDR      r0,|L6.40|
000004  8880              LDRH     r0,[r0,#4]  ; AMPPro
000006  b970              CBNZ     r0,|L6.38|
;;;222      {    
;;;223        GPIO_Toggle	(SYSLEDPort,SYSLEDPin);		//将GPIO相应管脚输出翻转----V20170605
000008  2101              MOVS     r1,#1
00000a  4808              LDR      r0,|L6.44|
00000c  f7fffffe          BL       GPIO_Toggle
;;;224        if(CabAddr)   //已拨码，频率1Hz
000010  4807              LDR      r0,|L6.48|
000012  7800              LDRB     r0,[r0,#0]  ; CabAddr
000014  b120              CBZ      r0,|L6.32|
;;;225        {
;;;226          AMPPro.Time.SYSLEDTime=500;
000016  f44f70fa          MOV      r0,#0x1f4
00001a  4903              LDR      r1,|L6.40|
00001c  8088              STRH     r0,[r1,#4]
00001e  e002              B        |L6.38|
                  |L6.32|
;;;227        }
;;;228        else          //未拨码，频率5Hz
;;;229        {
;;;230          AMPPro.Time.SYSLEDTime=100;
000020  2064              MOVS     r0,#0x64
000022  4901              LDR      r1,|L6.40|
000024  8088              STRH     r0,[r1,#4]
                  |L6.38|
;;;231        }
;;;232      }
;;;233    }
000026  bd10              POP      {r4,pc}
;;;234    
                          ENDP

                  |L6.40|
                          DCD      AMPPro
                  |L6.44|
                          DCD      0x40010800
                  |L6.48|
                          DCD      CabAddr

                          AREA ||i.AMPCAB_SendBuff||, CODE, READONLY, ALIGN=2

                  AMPCAB_SendBuff PROC
;;;491    *******************************************************************************/
;;;492    unsigned short AMPCAB_SendBuff(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;493    { 
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;494      unsigned  short   sendedlen = 0;
00000a  2700              MOVS     r7,#0
;;;495      switch(Port)
00000c  2c05              CMP      r4,#5
00000e  d223              BCS      |L7.88|
000010  e8dff004          TBB      [pc,r4]
000014  03060d14          DCB      0x03,0x06,0x0d,0x14
000018  1b00              DCB      0x1b,0x00
;;;496      {
;;;497        case  NonPort   : return 0;   //不继续执行
00001a  2000              MOVS     r0,#0
                  |L7.28|
;;;498        case  PcPort    : sendedlen = USART_DMASend(CommPcPort,pBuffer,length);
;;;499          break;
;;;500        case  CabPort   : sendedlen = RS485_DMASend(&stCbRS485Cb,pBuffer,length);	//RS485-DMA发送程序
;;;501          break;
;;;502        case  LayPort   : sendedlen = RS485_DMASend(&stCbRS485Ly,pBuffer,length);	//RS485-DMA发送程序
;;;503          break;
;;;504        case  CardPort  : sendedlen = RS485_DMASend(&stCardRS485Ly,pBuffer,length);	//RS485-DMA发送程序
;;;505          break;
;;;506        default :return 0;      //不继续执行
;;;507      }
;;;508      return  sendedlen;
;;;509    }
00001c  e8bd81f0          POP      {r4-r8,pc}
000020  4632              MOV      r2,r6                 ;498
000022  4629              MOV      r1,r5                 ;498
000024  480f              LDR      r0,|L7.100|
000026  f7fffffe          BL       USART_DMASend
00002a  4607              MOV      r7,r0                 ;498
00002c  e016              B        |L7.92|
00002e  4632              MOV      r2,r6                 ;500
000030  4629              MOV      r1,r5                 ;500
000032  480d              LDR      r0,|L7.104|
000034  f7fffffe          BL       RS485_DMASend
000038  4607              MOV      r7,r0                 ;500
00003a  e00f              B        |L7.92|
00003c  4632              MOV      r2,r6                 ;502
00003e  4629              MOV      r1,r5                 ;502
000040  480a              LDR      r0,|L7.108|
000042  f7fffffe          BL       RS485_DMASend
000046  4607              MOV      r7,r0                 ;502
000048  e008              B        |L7.92|
00004a  4632              MOV      r2,r6                 ;504
00004c  4629              MOV      r1,r5                 ;504
00004e  4808              LDR      r0,|L7.112|
000050  f7fffffe          BL       RS485_DMASend
000054  4607              MOV      r7,r0                 ;504
000056  e001              B        |L7.92|
                  |L7.88|
000058  2000              MOVS     r0,#0                 ;506
00005a  e7df              B        |L7.28|
                  |L7.92|
00005c  bf00              NOP                            ;499
00005e  4638              MOV      r0,r7                 ;508
000060  e7dc              B        |L7.28|
;;;510    /*******************************************************************************
                          ENDP

000062  0000              DCW      0x0000
                  |L7.100|
                          DCD      0x40004400
                  |L7.104|
                          DCD      stCbRS485Cb
                  |L7.108|
                          DCD      stCbRS485Ly
                  |L7.112|
                          DCD      stCardRS485Ly

                          AREA ||i.AMPCAB_SwitchIDServer||, CODE, READONLY, ALIGN=2

                  AMPCAB_SwitchIDServer PROC
;;;188    *******************************************************************************/
;;;189    void AMPCAB_SwitchIDServer(void)
000000  b510              PUSH     {r4,lr}
;;;190    {
;;;191      unsigned char cabaddrbac=CabAddr;
000002  4810              LDR      r0,|L8.68|
000004  7804              LDRB     r4,[r0,#0]  ; CabAddr
;;;192      if(0==AMPPro.Time.swicthidtime)
000006  4810              LDR      r0,|L8.72|
000008  8840              LDRH     r0,[r0,#2]  ; AMPPro
00000a  b9c8              CBNZ     r0,|L8.64|
;;;193      {
;;;194        CabAddr  = SWITCHID_ReadLeft(&stCbSwitch)&0x3F;
00000c  480f              LDR      r0,|L8.76|
00000e  f7fffffe          BL       SWITCHID_ReadLeft
000012  f000003f          AND      r0,r0,#0x3f
000016  490b              LDR      r1,|L8.68|
000018  7008              STRB     r0,[r1,#0]
;;;195      
;;;196        if(SWITCHID_ReadLeft(&stCbSwitch)&0x80)
00001a  480c              LDR      r0,|L8.76|
00001c  f7fffffe          BL       SWITCHID_ReadLeft
000020  f0000080          AND      r0,r0,#0x80
000024  b118              CBZ      r0,|L8.46|
;;;197        {
;;;198          MainFlag=1; //0--副柜，1--主柜
000026  2001              MOVS     r0,#1
000028  4909              LDR      r1,|L8.80|
00002a  7008              STRB     r0,[r1,#0]
00002c  e002              B        |L8.52|
                  |L8.46|
;;;199        }
;;;200        else
;;;201        {
;;;202          MainFlag=0; //0--副柜，1--主柜
00002e  2000              MOVS     r0,#0
000030  4907              LDR      r1,|L8.80|
000032  7008              STRB     r0,[r1,#0]
                  |L8.52|
;;;203        }
;;;204        if(cabaddrbac!=CabAddr)
000034  4803              LDR      r0,|L8.68|
000036  7800              LDRB     r0,[r0,#0]  ; CabAddr
000038  4284              CMP      r4,r0
00003a  d001              BEQ      |L8.64|
;;;205        {
;;;206          AMPCABCOMM_Configuration();   //通讯配置
00003c  f7fffffe          BL       AMPCABCOMM_Configuration
                  |L8.64|
;;;207        }
;;;208      }
;;;209    }
000040  bd10              POP      {r4,pc}
;;;210    /*******************************************************************************
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      CabAddr
                  |L8.72|
                          DCD      AMPPro
                  |L8.76|
                          DCD      stCbSwitch
                  |L8.80|
                          DCD      MainFlag

                          AREA ||i.AMP_CABV11_Configuration||, CODE, READONLY, ALIGN=1

                  AMP_CABV11_Configuration PROC
;;;46     *******************************************************************************/
;;;47     void AMP_CABV11_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;48     {	
;;;49     	SYS_Configuration();					//系统配置---打开系统时钟 STM32_SYS.H	
000002  f7fffffe          BL       SYS_Configuration
;;;50       
;;;51       AMPCABSwitchID_Configuration();
000006  f7fffffe          BL       AMPCABSwitchID_Configuration
;;;52       
;;;53       AMPCAB_GenyConfiguration();   //常规接口配置，背光，锁，电源控制
00000a  f7fffffe          BL       AMPCAB_GenyConfiguration
;;;54         
;;;55       AMPCABCOMM_Configuration();   //通讯配置
00000e  f7fffffe          BL       AMPCABCOMM_Configuration
;;;56       
;;;57       SysTick_DeleymS(1000);				//SysTick延时nmS--等上电稳定
000012  f44f707a          MOV      r0,#0x3e8
000016  f7fffffe          BL       SysTick_DeleymS
;;;58     
;;;59     }
00001a  bd10              POP      {r4,pc}
;;;60     /*******************************************************************************
                          ENDP


                          AREA ||i.AMP_CABV11_Loop||, CODE, READONLY, ALIGN=1

                  AMP_CABV11_Loop PROC
;;;89     *******************************************************************************/
;;;90     void AMP_CABV11_Loop(void)
000000  b510              PUSH     {r4,lr}
;;;91     { 
;;;92       //========================读卡器已配置
;;;93       AMPCAB_Receive();
000002  f7fffffe          BL       AMPCAB_Receive
;;;94       Send_Server();
000006  f7fffffe          BL       Send_Server
;;;95       
;;;96     }
00000a  bd10              POP      {r4,pc}
;;;97     /*******************************************************************************
                          ENDP


                          AREA ||i.AMP_CABV11_Server||, CODE, READONLY, ALIGN=1

                  AMP_CABV11_Server PROC
;;;68     *******************************************************************************/
;;;69     void AMP_CABV11_Server(void)
000000  b510              PUSH     {r4,lr}
;;;70     {
;;;71       //========================读卡器已配置
;;;72       LockServer();       //锁
000002  f7fffffe          BL       LockServer
;;;73       RequestServer();    //请求命令处理
000006  f7fffffe          BL       RequestServer
;;;74       AMPCAB_SwitchIDServer();
00000a  f7fffffe          BL       AMPCAB_SwitchIDServer
;;;75       AMPCAB_SYSLED();
00000e  f7fffffe          BL       AMPCAB_SYSLED
;;;76       AMPCAB_BackLight();     //背光灯
000012  f7fffffe          BL       AMPCAB_BackLight
;;;77       API_IOT5302WServer();   //读卡器服务程序
000016  f7fffffe          BL       API_IOT5302WServer
;;;78     }
00001a  bd10              POP      {r4,pc}
;;;79     /*******************************************************************************
                          ENDP


                          AREA ||i.Cabinet_Send||, CODE, READONLY, ALIGN=1

                  Cabinet_Send PROC
;;;531    *******************************************************************************/
;;;532    unsigned short Cabinet_Send(unsigned char* pBuffer,unsigned short length)
000000  b570              PUSH     {r4-r6,lr}
;;;533    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;534      return(AddSendBuffer(CabPort,pBuffer,length));
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       AddSendBuffer
;;;535    }
000010  bd70              POP      {r4-r6,pc}
;;;536    /*******************************************************************************
                          ENDP


                          AREA ||i.CardDataSendUp||, CODE, READONLY, ALIGN=2

                  CardDataSendUp PROC
;;;963    *******************************************************************************/
;;;964    void CardDataSendUp(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  b5f0              PUSH     {r4-r7,lr}
;;;965    {
000002  b091              SUB      sp,sp,#0x44
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;966      //unsigned  char result       = 0; 
;;;967      //unsigned  char address      = 0;  
;;;968      unsigned  short framlength  = 0;  
00000a  2000              MOVS     r0,#0
00000c  9010              STR      r0,[sp,#0x40]
;;;969      //unsigned  char* paddrbac    = pBuffer;         //备份数据缓存起始地址
;;;970      
;;;971      stampphydef* ampframe=NULL;
00000e  2400              MOVS     r4,#0
;;;972      //stcmddef    Cmd;
;;;973      
;;;974      unsigned  char  databuffer[64]={0};   
000010  2140              MOVS     r1,#0x40
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       __aeabi_memclr4
;;;975      //-------------------------读卡器端口接收到数据
;;;976      memcpy(databuffer,pBuffer,length);
000018  462a              MOV      r2,r5
00001a  4631              MOV      r1,r6
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       __aeabi_memcpy
;;;977      framlength  = length;
000022  9510              STR      r5,[sp,#0x40]
;;;978      framlength  = PaketUpMsg(databuffer,AmpCmdCard,&framlength);
000024  aa10              ADD      r2,sp,#0x40
000026  2104              MOVS     r1,#4
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       PaketUpMsg
00002e  9010              STR      r0,[sp,#0x40]
;;;979      
;;;980      //-------------------------设置地址:柜控制板地址段为address1
;;;981      ampframe  = (stampphydef*)databuffer;
000030  466c              MOV      r4,sp
;;;982      ampframe->msg.addr.address1 = CabAddr;    //柜地址
000032  4814              LDR      r0,|L13.132|
000034  7801              LDRB     r1,[r0,#0]  ; CabAddr
000036  70e1              STRB     r1,[r4,#3]
;;;983      ampframe->msg.addr.address2 = 0;
000038  2100              MOVS     r1,#0
00003a  7121              STRB     r1,[r4,#4]
;;;984      ampframe->msg.addr.address3 = 0;
00003c  7161              STRB     r1,[r4,#5]
;;;985      //-------------------------设置CRC和结束符
;;;986      SetFrame(databuffer,&framlength);//补充消息的CRC和结束符，返回帧长度
00003e  a910              ADD      r1,sp,#0x40
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       SetFrame
;;;987      
;;;988      if(MainFlag)  //0--副柜，1--主柜
000046  4810              LDR      r0,|L13.136|
000048  7800              LDRB     r0,[r0,#0]  ; MainFlag
00004a  b160              CBZ      r0,|L13.102|
;;;989      {
;;;990        AMPPro.buffer.WaitAck.Pc=1;   //需要应答
00004c  480f              LDR      r0,|L13.140|
00004e  7dc0              LDRB     r0,[r0,#0x17]  ; AMPPro
000050  f0200001          BIC      r0,r0,#1
000054  1c40              ADDS     r0,r0,#1
000056  490d              LDR      r1,|L13.140|
000058  75c8              STRB     r0,[r1,#0x17]
;;;991        PCnet_Send(databuffer,framlength);    //往副柜发送消息
00005a  f8bd1040          LDRH     r1,[sp,#0x40]
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       PCnet_Send
000064  e00b              B        |L13.126|
                  |L13.102|
;;;992      }
;;;993      else
;;;994      {
;;;995        AMPPro.buffer.WaitAck.Cab=1;   //需要应答
000066  4809              LDR      r0,|L13.140|
000068  7dc0              LDRB     r0,[r0,#0x17]  ; AMPPro
00006a  f0200002          BIC      r0,r0,#2
00006e  1c80              ADDS     r0,r0,#2
000070  4906              LDR      r1,|L13.140|
000072  75c8              STRB     r0,[r1,#0x17]
;;;996        Cabinet_Send(databuffer,framlength);    //往副柜发送消息
000074  f8bd1040          LDRH     r1,[sp,#0x40]
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       Cabinet_Send
                  |L13.126|
;;;997      }
;;;998      return;
;;;999    }
00007e  b011              ADD      sp,sp,#0x44
000080  bdf0              POP      {r4-r7,pc}
;;;1000   /*******************************************************************************
                          ENDP

000082  0000              DCW      0x0000
                  |L13.132|
                          DCD      CabAddr
                  |L13.136|
                          DCD      MainFlag
                  |L13.140|
                          DCD      AMPPro

                          AREA ||i.CardPort_Send||, CODE, READONLY, ALIGN=1

                  CardPort_Send PROC
;;;557    *******************************************************************************/
;;;558    unsigned short CardPort_Send(unsigned char* pBuffer,unsigned short length)
000000  b570              PUSH     {r4-r6,lr}
;;;559    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;560      return(AddSendBuffer(CardPort,pBuffer,length));
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       AddSendBuffer
;;;561    }
000010  bd70              POP      {r4-r6,pc}
;;;562    
                          ENDP


                          AREA ||i.CardReaderInitLoop||, CODE, READONLY, ALIGN=2

                  CardReaderInitLoop PROC
;;;105    *******************************************************************************/
;;;106    void CardReaderInitLoop(void)
000000  b530              PUSH     {r4,r5,lr}
;;;107    {
000002  b091              SUB      sp,sp,#0x44
;;;108      unsigned char data[64]={0};
000004  2140              MOVS     r1,#0x40
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       __aeabi_memclr4
;;;109      unsigned char RxNum  = 0;
00000c  2500              MOVS     r5,#0
;;;110      //---------------------层板接口 USART2
;;;111      RxNum = RS485_ReadBufferIDLE(&stCardRS485Ly,data);
00000e  a901              ADD      r1,sp,#4
000010  4823              LDR      r0,|L15.160|
000012  f7fffffe          BL       RS485_ReadBufferIDLE
000016  b2c5              UXTB     r5,r0
;;;112      if(RxNum)
000018  2d00              CMP      r5,#0
00001a  d03e              BEQ      |L15.154|
;;;113      {
;;;114        unsigned char i=0;
00001c  2400              MOVS     r4,#0
;;;115        if(RxNum>64)
00001e  2d40              CMP      r5,#0x40
000020  dd00              BLE      |L15.36|
;;;116          RxNum=64;
000022  2540              MOVS     r5,#0x40
                  |L15.36|
;;;117        
;;;118        memcpy(&CardData[CardNum],data,RxNum);
000024  491f              LDR      r1,|L15.164|
000026  4a20              LDR      r2,|L15.168|
000028  7812              LDRB     r2,[r2,#0]  ; CardNum
00002a  1888              ADDS     r0,r1,r2
00002c  462a              MOV      r2,r5
00002e  a901              ADD      r1,sp,#4
000030  f7fffffe          BL       __aeabi_memcpy
;;;119        CardNum+=RxNum;
000034  481c              LDR      r0,|L15.168|
000036  7800              LDRB     r0,[r0,#0]  ; CardNum
000038  4428              ADD      r0,r0,r5
00003a  491b              LDR      r1,|L15.168|
00003c  7008              STRB     r0,[r1,#0]
;;;120        if(CardNum>=64)
00003e  4608              MOV      r0,r1
000040  7800              LDRB     r0,[r0,#0]  ; CardNum
000042  2840              CMP      r0,#0x40
000044  db01              BLT      |L15.74|
;;;121        {
;;;122          CardNum=0;
000046  2000              MOVS     r0,#0
000048  7008              STRB     r0,[r1,#0]
                  |L15.74|
;;;123        }
;;;124        for(i=0;i<64;i++)
00004a  2400              MOVS     r4,#0
00004c  e022              B        |L15.148|
                  |L15.78|
;;;125        {
;;;126          if(CardData[i]==0xAA)
00004e  4815              LDR      r0,|L15.164|
000050  5d00              LDRB     r0,[r0,r4]
000052  28aa              CMP      r0,#0xaa
000054  d11c              BNE      |L15.144|
;;;127          {
;;;128            if((CardData[i+2]==0x02)  /*长度*/
000056  4913              LDR      r1,|L15.164|
000058  1ca0              ADDS     r0,r4,#2
00005a  5c08              LDRB     r0,[r1,r0]
00005c  2802              CMP      r0,#2
00005e  d117              BNE      |L15.144|
;;;129              &&(CardData[i+3]==0x00) /*状态*/
000060  1ce0              ADDS     r0,r4,#3
000062  5c08              LDRB     r0,[r1,r0]
000064  b9a0              CBNZ     r0,|L15.144|
;;;130            &&(CardData[i+4]==0x01)   /*波特率代码19200*/
000066  1d20              ADDS     r0,r4,#4
000068  5c08              LDRB     r0,[r1,r0]
00006a  2801              CMP      r0,#1
00006c  d110              BNE      |L15.144|
;;;131            &&(CardData[i+6]==0xBB))  /*结束符*/
00006e  1da0              ADDS     r0,r4,#6
000070  5c08              LDRB     r0,[r1,r0]
000072  28bb              CMP      r0,#0xbb
000074  d10c              BNE      |L15.144|
;;;132            {
;;;133              InitCardReaderFlag=1;
000076  2001              MOVS     r0,#1
000078  490c              LDR      r1,|L15.172|
00007a  7008              STRB     r0,[r1,#0]
;;;134              InitCardUSART_BaudRate=19200;
00007c  f44f4096          MOV      r0,#0x4b00
000080  490b              LDR      r1,|L15.176|
000082  6008              STR      r0,[r1,#0]  ; InitCardUSART_BaudRate
;;;135              RS485_DMA_ConfigurationNR(&stCardRS485Ly,InitCardUSART_BaudRate,gDatasize);	//USART_DMA配置--查询方式，不开中断,配置完默认为接收状态
000084  2280              MOVS     r2,#0x80
000086  4608              MOV      r0,r1
000088  6801              LDR      r1,[r0,#0]  ; InitCardUSART_BaudRate
00008a  4805              LDR      r0,|L15.160|
00008c  f7fffffe          BL       RS485_DMA_ConfigurationNR
                  |L15.144|
000090  1c60              ADDS     r0,r4,#1              ;124
000092  b2c4              UXTB     r4,r0                 ;124
                  |L15.148|
000094  2c40              CMP      r4,#0x40              ;124
000096  dbda              BLT      |L15.78|
;;;136            }
;;;137          }
;;;138        }
;;;139      } 
000098  bf00              NOP      
                  |L15.154|
;;;140    }
00009a  b011              ADD      sp,sp,#0x44
00009c  bd30              POP      {r4,r5,pc}
;;;141    /*******************************************************************************
                          ENDP

00009e  0000              DCW      0x0000
                  |L15.160|
                          DCD      stCardRS485Ly
                  |L15.164|
                          DCD      CardData
                  |L15.168|
                          DCD      CardNum
                  |L15.172|
                          DCD      InitCardReaderFlag
                  |L15.176|
                          DCD      InitCardUSART_BaudRate

                          AREA ||i.CommTimeOutUpdata||, CODE, READONLY, ALIGN=2

                  CommTimeOutUpdata PROC
;;;1086   *******************************************************************************/
;;;1087   void CommTimeOutUpdata(enCCPortDef Port,stampaddrdef address)
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;1088   {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
;;;1089     unsigned char databuffer[32]={0};
000006  2120              MOVS     r1,#0x20
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memclr4
;;;1090     unsigned short framlength = 0;  //生成的消息长度
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;1091     unsigned short datalength = 2;  //需要上报的数据字节数
000012  2002              MOVS     r0,#2
000014  9001              STR      r0,[sp,#4]
;;;1092     stampphydef* ampframe=NULL;
000016  2400              MOVS     r4,#0
;;;1093     //-------------------------锁状态上报：第一字节为锁标识，第二字节为状态
;;;1094     databuffer[0] = AmpStsComm;       //连接状态标识
000018  f88d000c          STRB     r0,[sp,#0xc]
;;;1095     databuffer[1] = AmpCommTimeOut;   //连接超时
00001c  2001              MOVS     r0,#1
00001e  f88d000d          STRB     r0,[sp,#0xd]
;;;1096     //-------------------------按状态上报类型打包消息
;;;1097     framlength  = PaketUpMsg(databuffer,AmpCmdSta,&datalength); 
000022  aa01              ADD      r2,sp,#4
000024  2106              MOVS     r1,#6
000026  a803              ADD      r0,sp,#0xc
000028  f7fffffe          BL       PaketUpMsg
00002c  9002              STR      r0,[sp,#8]
;;;1098     //-------------------------打包完成的数据转换为消息帧
;;;1099     ampframe  = (stampphydef*)databuffer;
00002e  ac03              ADD      r4,sp,#0xc
;;;1100     //-------------------------添加地址
;;;1101     ampframe->msg.addr.address1 = address.address1;  //当前柜地址
000030  f89d1030          LDRB     r1,[sp,#0x30]
000034  70e1              STRB     r1,[r4,#3]
;;;1102     ampframe->msg.addr.address2 = address.address2;
000036  f89d1031          LDRB     r1,[sp,#0x31]
00003a  7121              STRB     r1,[r4,#4]
;;;1103     ampframe->msg.addr.address3 = address.address3;
00003c  f89d1032          LDRB     r1,[sp,#0x32]
000040  7161              STRB     r1,[r4,#5]
;;;1104     
;;;1105     switch(Port)
000042  2d05              CMP      r5,#5
000044  d210              BCS      |L16.104|
000046  e8dff005          TBB      [pc,r5]
00004a  0305              DCB      0x03,0x05
00004c  060a0b00          DCB      0x06,0x0a,0x0b,0x00
                  |L16.80|
;;;1106     {
;;;1107       case  NonPort   : return ;   //不继续执行
;;;1108       case  PcPort    : return;    //PC接口发送缓存
;;;1109         break;
;;;1110       case  CabPort   ://柜接口发送缓存
;;;1111                         ampframe->msg.addr.address2 = 0;
;;;1112                         ampframe->msg.addr.address3 = 0;
;;;1113         break;
;;;1114       case  LayPort   ://层接口发送缓存
;;;1115         break;
;;;1116       case  CardPort  ://读卡器接口发送缓存
;;;1117                         ampframe->msg.addr.address2 = 0;
;;;1118                         ampframe->msg.addr.address3 = 0;
;;;1119         break;
;;;1120       default :return;      //不继续执行 
;;;1121     }
;;;1122     //-------------------------设置CRC和结束符
;;;1123     framlength  = SetFrame(databuffer,&framlength);//补充消息的CRC和结束符，返回帧长度
;;;1124     //-------------------------选择上报路径
;;;1125     if(MainFlag)  //0--副柜，1--主柜
;;;1126     {
;;;1127       AMPPro.buffer.WaitAck.Pc=1;   //需要应答
;;;1128       PCnet_Send(databuffer,framlength);    //往副柜发送消息
;;;1129     }
;;;1130     else
;;;1131     {
;;;1132       AMPPro.buffer.WaitAck.Cab=1;   //需要应答
;;;1133       Cabinet_Send(databuffer,framlength);    //往副柜发送消息
;;;1134     }
;;;1135   }
000050  b00d              ADD      sp,sp,#0x34
000052  bd30              POP      {r4,r5,pc}
000054  e7fc              B        |L16.80|
000056  2100              MOVS     r1,#0                 ;1111
000058  7121              STRB     r1,[r4,#4]            ;1111
00005a  7161              STRB     r1,[r4,#5]            ;1112
00005c  e005              B        |L16.106|
00005e  e004              B        |L16.106|
000060  2100              MOVS     r1,#0                 ;1117
000062  7121              STRB     r1,[r4,#4]            ;1117
000064  7161              STRB     r1,[r4,#5]            ;1118
000066  e000              B        |L16.106|
                  |L16.104|
000068  e7f2              B        |L16.80|
                  |L16.106|
00006a  bf00              NOP                            ;1109
00006c  a902              ADD      r1,sp,#8              ;1123
00006e  a803              ADD      r0,sp,#0xc            ;1123
000070  f7fffffe          BL       SetFrame
000074  9002              STR      r0,[sp,#8]            ;1123
000076  480f              LDR      r0,|L16.180|
000078  7800              LDRB     r0,[r0,#0]            ;1125  ; MainFlag
00007a  b160              CBZ      r0,|L16.150|
00007c  480e              LDR      r0,|L16.184|
00007e  7dc0              LDRB     r0,[r0,#0x17]         ;1127  ; AMPPro
000080  f0200001          BIC      r0,r0,#1              ;1127
000084  1c40              ADDS     r0,r0,#1              ;1127
000086  490c              LDR      r1,|L16.184|
000088  75c8              STRB     r0,[r1,#0x17]         ;1127
00008a  f8bd1008          LDRH     r1,[sp,#8]            ;1128
00008e  a803              ADD      r0,sp,#0xc            ;1128
000090  f7fffffe          BL       PCnet_Send
000094  e00b              B        |L16.174|
                  |L16.150|
000096  4808              LDR      r0,|L16.184|
000098  7dc0              LDRB     r0,[r0,#0x17]         ;1132  ; AMPPro
00009a  f0200002          BIC      r0,r0,#2              ;1132
00009e  1c80              ADDS     r0,r0,#2              ;1132
0000a0  4905              LDR      r1,|L16.184|
0000a2  75c8              STRB     r0,[r1,#0x17]         ;1132
0000a4  f8bd1008          LDRH     r1,[sp,#8]            ;1133
0000a8  a803              ADD      r0,sp,#0xc            ;1133
0000aa  f7fffffe          BL       Cabinet_Send
                  |L16.174|
0000ae  bf00              NOP      
0000b0  e7ce              B        |L16.80|
;;;1136   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L16.180|
                          DCD      MainFlag
                  |L16.184|
                          DCD      AMPPro

                          AREA ||i.Laynet_Send||, CODE, READONLY, ALIGN=1

                  Laynet_Send PROC
;;;544    *******************************************************************************/
;;;545    unsigned short Laynet_Send(unsigned char* pBuffer,unsigned short length)
000000  b570              PUSH     {r4-r6,lr}
;;;546    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;547      return(AddSendBuffer(LayPort,pBuffer,length));
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2003              MOVS     r0,#3
00000c  f7fffffe          BL       AddSendBuffer
;;;548    }
000010  bd70              POP      {r4-r6,pc}
;;;549    /*******************************************************************************
                          ENDP


                          AREA ||i.LockServer||, CODE, READONLY, ALIGN=2

                  LockServer PROC
;;;275    *******************************************************************************/
;;;276    void LockServer(void)
000000  b510              PUSH     {r4,lr}
;;;277    {
;;;278        //-----------------------------------未拨码自动开锁
;;;279        if(0  ==  CabAddr)    //未拨码--自动开锁
000002  4873              LDR      r0,|L18.464|
000004  7800              LDRB     r0,[r0,#0]  ; CabAddr
000006  b968              CBNZ     r0,|L18.36|
;;;280        {
;;;281          if(GetLockSts)  //如果锁为关闭状态，则开锁
000008  4872              LDR      r0,|L18.468|
00000a  6880              LDR      r0,[r0,#8]
00000c  f4005080          AND      r0,r0,#0x1000
000010  b118              CBZ      r0,|L18.26|
;;;282          {
;;;283            UnLock;
000012  2001              MOVS     r0,#1
000014  4970              LDR      r1,|L18.472|
000016  6008              STR      r0,[r1,#0]
000018  e003              B        |L18.34|
                  |L18.26|
;;;284          }
;;;285          else
;;;286          {
;;;287            ResLock;
00001a  2001              MOVS     r0,#1
00001c  496e              LDR      r1,|L18.472|
00001e  1d09              ADDS     r1,r1,#4
000020  6008              STR      r0,[r1,#0]
                  |L18.34|
;;;288          }
;;;289          return;
;;;290        }
;;;291        //-----------------------------------正在执行开锁动作
;;;292        if(1==AMPPro.Req.unlockrun)   //正在执行开锁动作
;;;293        {
;;;294          if(AMPPro.Time.LockTime>unlockOuttime-10)//10ms后开始检查锁状态
;;;295          {
;;;296            return;
;;;297          }
;;;298          if(GetLockSts)    //锁未开
;;;299          {
;;;300            AMPPro.Sta.lockstd  = 1;    //锁状态为ON--锁住
;;;301            if(AMPPro.Time.LockTime==0) //超过开锁时间
;;;302            {
;;;303              AMPPro.Req.unlockrun  = 0;  //开锁标志关闭
;;;304              AMPPro.Time.LockTime  = 0;  //开锁时间清除
;;;305              LockStatusUpdata(AmpCmdLock,AmpLockOpenFailed);  //开锁失败
;;;306              ResLock;
;;;307            }
;;;308          }
;;;309          //----------------------------锁已打开，需要延时关闭锁驱动
;;;310          else
;;;311          {
;;;312            if(0==AMPPro.Req.reslockqust) //延时释放锁驱动
;;;313            {
;;;314              AMPPro.Req.reslockqust  = 1;  //释放锁驱动请求
;;;315              AMPPro.Time.LockTime    = reslockdelaytime;  //延时Nms
;;;316            }
;;;317            else
;;;318            {
;;;319              if(0==AMPPro.Time.LockTime)//延时计时时间到
;;;320              { 
;;;321                AMPPro.Sta.lockstd    = 0;  //锁开状态
;;;322                AMPPro.Req.unlockrun  = 0;
;;;323                AMPPro.Req.reslockqust= 0;  //释放锁驱动请求标志清除
;;;324                AMPPro.Sta.unlockerr  = 0;
;;;325                AMPPro.Time.LockTime  = 0;
;;;326                ResLock;
;;;327                
;;;328                LockStatusUpdata(AmpCmdLock,AmpLockOpen);  //锁已打开
;;;329              }
;;;330            }                
;;;331          }      
;;;332        }
;;;333        //-----------------------------------有开锁请求时数据处理
;;;334        if(1==AMPPro.Req.unlockqust)  //开锁请求
;;;335        {
;;;336          AMPPro.Req.unlockrun  = 1;
;;;337          AMPPro.Req.unlockqust = 0;
;;;338          AMPPro.Req.reslock    = 0;
;;;339          AMPPro.Req.reslockqust=0;   //释放锁驱动请求标志清除
;;;340          AMPPro.Sta.unlockerr  = 0;
;;;341          
;;;342          
;;;343          AMPPro.Req.BLon=1;   //开锁需要开背光
;;;344          AMPPro.Req.PLon=1;   //开锁层板需要供电
;;;345          
;;;346          AMPPro.Time.LockTime   = unlockOuttime;    //开锁超时倒计时时间
;;;347          UnLock;
;;;348        }
;;;349        
;;;350        //-----------------------------关锁动作
;;;351        if(GetLockSts)    //锁未开
;;;352        {
;;;353          //检查是否为关锁动作
;;;354          if(0==AMPPro.Sta.lockstd)//原状态为锁已打开
;;;355          {
;;;356            AMPPro.Req.BLoff = 1;  //请求关背光
;;;357            AMPPro.Req.PLoff = 1;  //请求关闭层板电源
;;;358            AMPPro.Flag.LayPownOn=0; 
;;;359            
;;;360            LockStatusUpdata(AmpCmdLock,AmpLockOn);  //锁已关闭
;;;361          }      
;;;362          AMPPro.Sta.lockstd  = 1;
;;;363          
;;;364        }
;;;365        else
;;;366        {
;;;367          if(1==AMPPro.Sta.lockstd) //原状态锁为关闭---手动开锁
;;;368          {
;;;369            AMPPro.Req.BLon = 1;  //请求打开背光
;;;370            AMPPro.Req.PLon = 1;  //请求打开层板电源
;;;371            AMPPro.Flag.LayPownOn=1;
;;;372            
;;;373            LockStatusUpdata(AmpCmdLock,AmpLockOpen);  //锁已打开
;;;374          }
;;;375          AMPPro.Sta.lockstd  = 0;
;;;376        }
;;;377    }
000022  bd10              POP      {r4,pc}
                  |L18.36|
000024  486d              LDR      r0,|L18.476|
000026  7c00              LDRB     r0,[r0,#0x10]         ;292  ; AMPPro
000028  f3c00040          UBFX     r0,r0,#1,#1           ;292
00002c  2800              CMP      r0,#0                 ;292
00002e  d057              BEQ      |L18.224|
000030  486a              LDR      r0,|L18.476|
000032  88c0              LDRH     r0,[r0,#6]            ;294  ; AMPPro
000034  f24071c6          MOV      r1,#0x7c6             ;294
000038  4288              CMP      r0,r1                 ;294
00003a  dd00              BLE      |L18.62|
00003c  e7f1              B        |L18.34|
                  |L18.62|
00003e  4865              LDR      r0,|L18.468|
000040  6880              LDR      r0,[r0,#8]            ;298
000042  f4005080          AND      r0,r0,#0x1000         ;298
000046  b1d0              CBZ      r0,|L18.126|
000048  4864              LDR      r0,|L18.476|
00004a  8a40              LDRH     r0,[r0,#0x12]         ;300  ; AMPPro
00004c  f0200001          BIC      r0,r0,#1              ;300
000050  1c40              ADDS     r0,r0,#1              ;300
000052  4962              LDR      r1,|L18.476|
000054  8248              STRH     r0,[r1,#0x12]         ;300
000056  4608              MOV      r0,r1                 ;301
000058  88c0              LDRH     r0,[r0,#6]            ;301  ; AMPPro
00005a  2800              CMP      r0,#0                 ;301
00005c  d140              BNE      |L18.224|
00005e  4608              MOV      r0,r1                 ;303
000060  8a00              LDRH     r0,[r0,#0x10]         ;303  ; AMPPro
000062  f0200002          BIC      r0,r0,#2              ;303
000066  8208              STRH     r0,[r1,#0x10]         ;303
000068  2000              MOVS     r0,#0                 ;304
00006a  80c8              STRH     r0,[r1,#6]            ;304
00006c  2102              MOVS     r1,#2                 ;305
00006e  2003              MOVS     r0,#3                 ;305
000070  f7fffffe          BL       LockStatusUpdata
000074  2001              MOVS     r0,#1                 ;306
000076  4958              LDR      r1,|L18.472|
000078  1d09              ADDS     r1,r1,#4              ;306
00007a  6008              STR      r0,[r1,#0]            ;306
00007c  e030              B        |L18.224|
                  |L18.126|
00007e  4857              LDR      r0,|L18.476|
000080  7c00              LDRB     r0,[r0,#0x10]         ;312  ; AMPPro
000082  f3c000c0          UBFX     r0,r0,#3,#1           ;312
000086  b948              CBNZ     r0,|L18.156|
000088  4854              LDR      r0,|L18.476|
00008a  8a00              LDRH     r0,[r0,#0x10]         ;314  ; AMPPro
00008c  f0200008          BIC      r0,r0,#8              ;314
000090  3008              ADDS     r0,r0,#8              ;314
000092  4952              LDR      r1,|L18.476|
000094  8208              STRH     r0,[r1,#0x10]         ;314
000096  20c8              MOVS     r0,#0xc8              ;315
000098  80c8              STRH     r0,[r1,#6]            ;315
00009a  e021              B        |L18.224|
                  |L18.156|
00009c  484f              LDR      r0,|L18.476|
00009e  88c0              LDRH     r0,[r0,#6]            ;319  ; AMPPro
0000a0  b9f0              CBNZ     r0,|L18.224|
0000a2  484e              LDR      r0,|L18.476|
0000a4  8a40              LDRH     r0,[r0,#0x12]         ;321  ; AMPPro
0000a6  f0200001          BIC      r0,r0,#1              ;321
0000aa  494c              LDR      r1,|L18.476|
0000ac  8248              STRH     r0,[r1,#0x12]         ;321
0000ae  4608              MOV      r0,r1                 ;322
0000b0  8a00              LDRH     r0,[r0,#0x10]         ;322  ; AMPPro
0000b2  f0200002          BIC      r0,r0,#2              ;322
0000b6  8208              STRH     r0,[r1,#0x10]         ;322
0000b8  4608              MOV      r0,r1                 ;323
0000ba  8a00              LDRH     r0,[r0,#0x10]         ;323  ; AMPPro
0000bc  f0200008          BIC      r0,r0,#8              ;323
0000c0  8208              STRH     r0,[r1,#0x10]         ;323
0000c2  4608              MOV      r0,r1                 ;324
0000c4  8a40              LDRH     r0,[r0,#0x12]         ;324  ; AMPPro
0000c6  f0200002          BIC      r0,r0,#2              ;324
0000ca  8248              STRH     r0,[r1,#0x12]         ;324
0000cc  2000              MOVS     r0,#0                 ;325
0000ce  80c8              STRH     r0,[r1,#6]            ;325
0000d0  2001              MOVS     r0,#1                 ;326
0000d2  4941              LDR      r1,|L18.472|
0000d4  1d09              ADDS     r1,r1,#4              ;326
0000d6  6008              STR      r0,[r1,#0]            ;326
0000d8  2100              MOVS     r1,#0                 ;328
0000da  2003              MOVS     r0,#3                 ;328
0000dc  f7fffffe          BL       LockStatusUpdata
                  |L18.224|
0000e0  483e              LDR      r0,|L18.476|
0000e2  7c00              LDRB     r0,[r0,#0x10]         ;334  ; AMPPro
0000e4  f0000001          AND      r0,r0,#1              ;334
0000e8  b360              CBZ      r0,|L18.324|
0000ea  483c              LDR      r0,|L18.476|
0000ec  8a00              LDRH     r0,[r0,#0x10]         ;336  ; AMPPro
0000ee  f0200002          BIC      r0,r0,#2              ;336
0000f2  1c80              ADDS     r0,r0,#2              ;336
0000f4  4939              LDR      r1,|L18.476|
0000f6  8208              STRH     r0,[r1,#0x10]         ;336
0000f8  4608              MOV      r0,r1                 ;337
0000fa  8a00              LDRH     r0,[r0,#0x10]         ;337  ; AMPPro
0000fc  f0200001          BIC      r0,r0,#1              ;337
000100  8208              STRH     r0,[r1,#0x10]         ;337
000102  4608              MOV      r0,r1                 ;338
000104  8a00              LDRH     r0,[r0,#0x10]         ;338  ; AMPPro
000106  f0200004          BIC      r0,r0,#4              ;338
00010a  8208              STRH     r0,[r1,#0x10]         ;338
00010c  4608              MOV      r0,r1                 ;339
00010e  8a00              LDRH     r0,[r0,#0x10]         ;339  ; AMPPro
000110  f0200008          BIC      r0,r0,#8              ;339
000114  8208              STRH     r0,[r1,#0x10]         ;339
000116  4608              MOV      r0,r1                 ;340
000118  8a40              LDRH     r0,[r0,#0x12]         ;340  ; AMPPro
00011a  f0200002          BIC      r0,r0,#2              ;340
00011e  8248              STRH     r0,[r1,#0x12]         ;340
000120  4608              MOV      r0,r1                 ;343
000122  8a00              LDRH     r0,[r0,#0x10]         ;343  ; AMPPro
000124  f0200010          BIC      r0,r0,#0x10           ;343
000128  3010              ADDS     r0,r0,#0x10           ;343
00012a  8208              STRH     r0,[r1,#0x10]         ;343
00012c  4608              MOV      r0,r1                 ;344
00012e  8a00              LDRH     r0,[r0,#0x10]         ;344  ; AMPPro
000130  f0200040          BIC      r0,r0,#0x40           ;344
000134  3040              ADDS     r0,r0,#0x40           ;344
000136  8208              STRH     r0,[r1,#0x10]         ;344
000138  f44f60fa          MOV      r0,#0x7d0             ;346
00013c  80c8              STRH     r0,[r1,#6]            ;346
00013e  2001              MOVS     r0,#1                 ;347
000140  4925              LDR      r1,|L18.472|
000142  6008              STR      r0,[r1,#0]            ;347
                  |L18.324|
000144  4823              LDR      r0,|L18.468|
000146  6880              LDR      r0,[r0,#8]            ;351
000148  f4005080          AND      r0,r0,#0x1000         ;351
00014c  b1f8              CBZ      r0,|L18.398|
00014e  4823              LDR      r0,|L18.476|
000150  7c80              LDRB     r0,[r0,#0x12]         ;354  ; AMPPro
000152  f0000001          AND      r0,r0,#1              ;354
000156  b990              CBNZ     r0,|L18.382|
000158  4820              LDR      r0,|L18.476|
00015a  8a00              LDRH     r0,[r0,#0x10]         ;356  ; AMPPro
00015c  f0200020          BIC      r0,r0,#0x20           ;356
000160  3020              ADDS     r0,r0,#0x20           ;356
000162  491e              LDR      r1,|L18.476|
000164  8208              STRH     r0,[r1,#0x10]         ;356
000166  4608              MOV      r0,r1                 ;357
000168  8a00              LDRH     r0,[r0,#0x10]         ;357  ; AMPPro
00016a  f0200080          BIC      r0,r0,#0x80           ;357
00016e  3080              ADDS     r0,r0,#0x80           ;357
000170  8208              STRH     r0,[r1,#0x10]         ;357
000172  2000              MOVS     r0,#0                 ;358
000174  8288              STRH     r0,[r1,#0x14]         ;358
000176  2101              MOVS     r1,#1                 ;360
000178  2003              MOVS     r0,#3                 ;360
00017a  f7fffffe          BL       LockStatusUpdata
                  |L18.382|
00017e  4817              LDR      r0,|L18.476|
000180  8a40              LDRH     r0,[r0,#0x12]         ;362  ; AMPPro
000182  f0200001          BIC      r0,r0,#1              ;362
000186  1c40              ADDS     r0,r0,#1              ;362
000188  4914              LDR      r1,|L18.476|
00018a  8248              STRH     r0,[r1,#0x12]         ;362
00018c  e01d              B        |L18.458|
                  |L18.398|
00018e  4813              LDR      r0,|L18.476|
000190  7c80              LDRB     r0,[r0,#0x12]         ;367  ; AMPPro
000192  f0000001          AND      r0,r0,#1              ;367
000196  b190              CBZ      r0,|L18.446|
000198  4810              LDR      r0,|L18.476|
00019a  8a00              LDRH     r0,[r0,#0x10]         ;369  ; AMPPro
00019c  f0200010          BIC      r0,r0,#0x10           ;369
0001a0  3010              ADDS     r0,r0,#0x10           ;369
0001a2  490e              LDR      r1,|L18.476|
0001a4  8208              STRH     r0,[r1,#0x10]         ;369
0001a6  4608              MOV      r0,r1                 ;370
0001a8  8a00              LDRH     r0,[r0,#0x10]         ;370  ; AMPPro
0001aa  f0200040          BIC      r0,r0,#0x40           ;370
0001ae  3040              ADDS     r0,r0,#0x40           ;370
0001b0  8208              STRH     r0,[r1,#0x10]         ;370
0001b2  2001              MOVS     r0,#1                 ;371
0001b4  8288              STRH     r0,[r1,#0x14]         ;371
0001b6  2100              MOVS     r1,#0                 ;373
0001b8  2003              MOVS     r0,#3                 ;373
0001ba  f7fffffe          BL       LockStatusUpdata
                  |L18.446|
0001be  4807              LDR      r0,|L18.476|
0001c0  8a40              LDRH     r0,[r0,#0x12]         ;375  ; AMPPro
0001c2  f0200001          BIC      r0,r0,#1              ;375
0001c6  4905              LDR      r1,|L18.476|
0001c8  8248              STRH     r0,[r1,#0x12]         ;375
                  |L18.458|
0001ca  bf00              NOP      
0001cc  e729              B        |L18.34|
;;;378    /*******************************************************************************
                          ENDP

0001ce  0000              DCW      0x0000
                  |L18.464|
                          DCD      CabAddr
                  |L18.468|
                          DCD      0x40011000
                  |L18.472|
                          DCD      0x40010c10
                  |L18.476|
                          DCD      AMPPro

                          AREA ||i.LockStatusUpdata||, CODE, READONLY, ALIGN=2

                  LockStatusUpdata PROC
;;;1046   *******************************************************************************/
;;;1047   void LockStatusUpdata(eucmddef Cmd,eLockStsdef std)
000000  b570              PUSH     {r4-r6,lr}
;;;1048   {
000002  b08a              SUB      sp,sp,#0x28
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1049     unsigned char databuffer[32]={0};
000008  2120              MOVS     r1,#0x20
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       __aeabi_memclr4
;;;1050     unsigned short framlength = 0;  //生成的消息长度
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
;;;1051     unsigned short datalength = 2;  //需要上报的数据字节数
000014  2002              MOVS     r0,#2
000016  9000              STR      r0,[sp,#0]
;;;1052     stampphydef* ampframe=NULL;
000018  2400              MOVS     r4,#0
;;;1053     //-------------------------锁状态上报：第一字节为锁标识，第二字节为状态
;;;1054     databuffer[0] = AmpStsLock;
00001a  2001              MOVS     r0,#1
00001c  f88d0008          STRB     r0,[sp,#8]
;;;1055     databuffer[1] = std;
000020  f88d6009          STRB     r6,[sp,#9]
;;;1056     //-------------------------按状态上报类型打包消息
;;;1057     framlength  = PaketUpMsg(databuffer,Cmd,&datalength); 
000024  466a              MOV      r2,sp
000026  4629              MOV      r1,r5
000028  a802              ADD      r0,sp,#8
00002a  f7fffffe          BL       PaketUpMsg
00002e  9001              STR      r0,[sp,#4]
;;;1058     //-------------------------打包完成的数据转换为消息帧
;;;1059     ampframe  = (stampphydef*)databuffer;
000030  ac02              ADD      r4,sp,#8
;;;1060     //-------------------------添加地址
;;;1061     ampframe->msg.addr.address1 = CabAddr;  //当前柜地址
000032  4814              LDR      r0,|L19.132|
000034  7801              LDRB     r1,[r0,#0]  ; CabAddr
000036  70e1              STRB     r1,[r4,#3]
;;;1062     ampframe->msg.addr.address2 = 0;
000038  2100              MOVS     r1,#0
00003a  7121              STRB     r1,[r4,#4]
;;;1063     ampframe->msg.addr.address3 = 0;
00003c  7161              STRB     r1,[r4,#5]
;;;1064     //-------------------------设置CRC和结束符
;;;1065     framlength  = SetFrame(databuffer,&framlength);//补充消息的CRC和结束符，返回帧长度
00003e  a901              ADD      r1,sp,#4
000040  a802              ADD      r0,sp,#8
000042  f7fffffe          BL       SetFrame
000046  9001              STR      r0,[sp,#4]
;;;1066     //-------------------------选择上报路径
;;;1067     if(MainFlag)  //0--副柜，1--主柜
000048  480f              LDR      r0,|L19.136|
00004a  7800              LDRB     r0,[r0,#0]  ; MainFlag
00004c  b160              CBZ      r0,|L19.104|
;;;1068     {
;;;1069       AMPPro.buffer.WaitAck.Pc=1;   //需要应答
00004e  480f              LDR      r0,|L19.140|
000050  7dc0              LDRB     r0,[r0,#0x17]  ; AMPPro
000052  f0200001          BIC      r0,r0,#1
000056  1c40              ADDS     r0,r0,#1
000058  490c              LDR      r1,|L19.140|
00005a  75c8              STRB     r0,[r1,#0x17]
;;;1070       PCnet_Send(databuffer,framlength);    //往副柜发送消息
00005c  f8bd1004          LDRH     r1,[sp,#4]
000060  a802              ADD      r0,sp,#8
000062  f7fffffe          BL       PCnet_Send
000066  e00b              B        |L19.128|
                  |L19.104|
;;;1071     }
;;;1072     else
;;;1073     {
;;;1074       AMPPro.buffer.WaitAck.Cab=1;   //需要应答
000068  4808              LDR      r0,|L19.140|
00006a  7dc0              LDRB     r0,[r0,#0x17]  ; AMPPro
00006c  f0200002          BIC      r0,r0,#2
000070  1c80              ADDS     r0,r0,#2
000072  4906              LDR      r1,|L19.140|
000074  75c8              STRB     r0,[r1,#0x17]
;;;1075       Cabinet_Send(databuffer,framlength);    //往副柜发送消息
000076  f8bd1004          LDRH     r1,[sp,#4]
00007a  a802              ADD      r0,sp,#8
00007c  f7fffffe          BL       Cabinet_Send
                  |L19.128|
;;;1076     }
;;;1077   }
000080  b00a              ADD      sp,sp,#0x28
000082  bd70              POP      {r4-r6,pc}
;;;1078   /*******************************************************************************
                          ENDP

                  |L19.132|
                          DCD      CabAddr
                  |L19.136|
                          DCD      MainFlag
                  |L19.140|
                          DCD      AMPPro

                          AREA ||i.Msg_ProcessCB||, CODE, READONLY, ALIGN=1

                  Msg_ProcessCB PROC
;;;571    *******************************************************************************/
;;;572    void Msg_ProcessCB(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  b570              PUSH     {r4-r6,lr}
;;;573    {  
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;574      switch(Port)
000008  2c01              CMP      r4,#1
00000a  d006              BEQ      |L20.26|
00000c  2c02              CMP      r4,#2
00000e  d00a              BEQ      |L20.38|
000010  2c03              CMP      r4,#3
000012  d00e              BEQ      |L20.50|
000014  2c04              CMP      r4,#4
000016  d118              BNE      |L20.74|
000018  e011              B        |L20.62|
                  |L20.26|
;;;575      {
;;;576        case PcPort:Msg_ProcessPcPort(Port,pBuffer,length);     //PC端口
00001a  4632              MOV      r2,r6
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       Msg_ProcessPcPort
;;;577          break;
000024  e012              B        |L20.76|
                  |L20.38|
;;;578        case CabPort:Msg_ProcessCbPort(Port,pBuffer,length);    //柜端口
000026  4632              MOV      r2,r6
000028  4629              MOV      r1,r5
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Msg_ProcessCbPort
;;;579          break;
000030  e00c              B        |L20.76|
                  |L20.50|
;;;580        case LayPort:Msg_ProcessLyPort(Port,pBuffer,length);    //层端口
000032  4632              MOV      r2,r6
000034  4629              MOV      r1,r5
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       Msg_ProcessLyPort
;;;581          break;
00003c  e006              B        |L20.76|
                  |L20.62|
;;;582        case CardPort:Msg_ProcessCaPort(Port,pBuffer,length);   //读卡器端口
00003e  4632              MOV      r2,r6
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       Msg_ProcessCaPort
;;;583          break;
000048  e000              B        |L20.76|
                  |L20.74|
;;;584        default:
;;;585          break;
00004a  bf00              NOP      
                  |L20.76|
00004c  bf00              NOP                            ;577
;;;586      }
;;;587    }
00004e  bd70              POP      {r4-r6,pc}
;;;588    /*******************************************************************************
                          ENDP


                          AREA ||i.Msg_ProcessCaPort||, CODE, READONLY, ALIGN=1

                  Msg_ProcessCaPort PROC
;;;867    *******************************************************************************/
;;;868    void Msg_ProcessCaPort(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  b570              PUSH     {r4-r6,lr}
;;;869    {  
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;870      CardDataSendUp(Port,pBuffer,length);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       CardDataSendUp
;;;871    }
000012  bd70              POP      {r4-r6,pc}
;;;872    /*******************************************************************************
                          ENDP


                          AREA ||i.Msg_ProcessCbPort||, CODE, READONLY, ALIGN=2

                  Msg_ProcessCbPort PROC
;;;736    *******************************************************************************/
;;;737    void Msg_ProcessCbPort(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;738    {  
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;739      unsigned  char result       = 0; 
000008  f04f0a00          MOV      r10,#0
;;;740      unsigned  char address      = 0;  
00000c  2700              MOVS     r7,#0
;;;741      unsigned  short framlength  = 0; 
00000e  46b9              MOV      r9,r7
;;;742      unsigned  char  Cmd         = 0;  
000010  2600              MOVS     r6,#0
;;;743      unsigned  char* paddrbac    = pBuffer;         //备份数据缓存起始地址
000012  46ab              MOV      r11,r5
;;;744      
;;;745      stampphydef* ampframe=NULL;
000014  2400              MOVS     r4,#0
;;;746      //-------------------------检查端口是否为层接口及缓存地址是否为空
;;;747      if(CabPort!=Port||NULL==pBuffer)
000016  f1b80f02          CMP      r8,#2
00001a  d100              BNE      |L22.30|
00001c  b90d              CBNZ     r5,|L22.34|
                  |L22.30|
;;;748      {
;;;749        return;
;;;750      } 
;;;751      //-------------------------协议检查
;;;752      framlength	=	getframe(pBuffer,&length);    //判断帧消息内容是否符合协议
;;;753      if(0== framlength)
;;;754      {
;;;755        memset(paddrbac,0x00,gDatasize);             //清除数据
;;;756        return;
;;;757      }
;;;758      result  = ackcheck(pBuffer);                //检查是否为应答消息,应答消息返回1  
;;;759      if(1==result)
;;;760      {
;;;761        if(AMPPro.buffer.WaitAck.Cab)           //如果为等待应答状态，则释放一个缓存
;;;762        {
;;;763          AMPPro.buffer.WaitAck.Cab=0;
;;;764          Releas_OneBuffer(Port);               //释放一个发送缓存
;;;765        }
;;;766        return;
;;;767      }  
;;;768      //-------------------------根据地址转发数据：广播数据发送到副柜和本柜层板
;;;769      ampframe  = (stampphydef*)pBuffer;
;;;770      Cmd = ampframe->msg.cmd.cmd;  
;;;771      
;;;772      //-------------------------上传数据:柜接口
;;;773      //主柜：接收到的数据上传到PC并向下应答
;;;774      //副柜：接收到下发数据判断地址,如果地址为本地址，向上应答(广播地址不应答)，如果是上传数据，不处理
;;;775      //1）-----------------上传数据:PC接口只接收下发数据
;;;776      if(ampframe->msg.cmd.dir)   //0-down,1-up---高8位
;;;777      {
;;;778        if(MainFlag)    //0--副柜，1--主柜
;;;779        {
;;;780          ackFrame(Port,0); //向下应答---主柜应答副柜
;;;781          AMPPro.buffer.WaitAck.Pc=1;   //需要PC应答
;;;782          PCnet_Send((unsigned char*)ampframe,framlength);      //往PC发送消息
;;;783        }
;;;784        return;   //任务完成
;;;785      }
;;;786      //2）-----------------下发数据：地址为本地址或者广播地址(0xFF)需要进行处理，如果地址为本地址，向上应答(广播地址不应答)
;;;787      address=ampframe->msg.addr.address1;
;;;788      if(0==address)      //柜地址为空
;;;789      {
;;;790        return;
;;;791      }
;;;792      if((CabAddr!=address)&&(0xFF!=address))  //不属于此柜消息
;;;793      {
;;;794        return;
;;;795      }
;;;796      if(CabAddr==address)
;;;797        ackFrame(Port,1);             //向上应答
;;;798      //===================================接收到的数据为本柜可接收数据(本柜地址或者广播地址(0xFF))
;;;799      if(AmpCmdLed ==  Cmd)       //LED/LCD控制
;;;800      {
;;;801        if((0x00==ampframe->msg.addr.address2)||(0x00==ampframe->msg.addr.address3))//广播地址
;;;802        {
;;;803          return;   //退出---层或者柜地址不正确
;;;804        }
;;;805        else if((0xFF==ampframe->msg.addr.address2)||(0xFF==ampframe->msg.addr.address3))//广播地址
;;;806        {
;;;807          AMPPro.buffer.WaitAck.Lay=0;   //不需要应答
;;;808        }
;;;809        else
;;;810        {
;;;811          AMPPro.buffer.WaitAck.Lay=1;   //需要应答
;;;812        }
;;;813        AMPPro.Req.PLon  =1;    //层板供电
;;;814        AMPPro.Req.PLoff =0;
;;;815        Laynet_Send((unsigned char*)ampframe,framlength);     //往层板发送消息
;;;816      }
;;;817      else if(AmpCmdPwr ==  Cmd)   //层板供电控制命令
;;;818      {
;;;819        AMPPro.Req.PLon  =0;
;;;820        AMPPro.Req.PLoff =0;
;;;821        
;;;822        if(ampframe->msg.data[0])
;;;823          AMPPro.Req.PLon=1;
;;;824        else
;;;825          AMPPro.Req.PLoff=1;
;;;826      }
;;;827      else if(AmpCmdLock ==  Cmd)   //锁控制命令
;;;828      {
;;;829        AMPPro.Req.reslock  =0;
;;;830        AMPPro.Req.unlockqust =0;
;;;831        
;;;832        if(ampframe->msg.data[0])
;;;833          AMPPro.Req.unlockqust=1;
;;;834        else
;;;835          AMPPro.Req.reslock=1;
;;;836      }
;;;837      else if(AmpCmdBKligth ==  Cmd)   //背光控制指令
;;;838      {
;;;839        AMPPro.Req.BLon     =0;
;;;840        AMPPro.Req.BLoff    =0;
;;;841        
;;;842        if(ampframe->msg.data[0])
;;;843          AMPPro.Req.BLon=1;
;;;844        else
;;;845          AMPPro.Req.BLoff=1;    
;;;846      }
;;;847      else if(AmpCmdSta ==  Cmd)   //查询状态
;;;848      {
;;;849        if(0==AMPPro.Sta.lockstd) //开状态
;;;850        {
;;;851          LockStatusUpdata(AmpCmdSta,AmpLockOpen);  //锁---开状态
;;;852        }
;;;853        else
;;;854        {
;;;855          LockStatusUpdata(AmpCmdSta,AmpLockOn);    //锁---关状态
;;;856        }
;;;857      }
;;;858    }
00001e  e8bd8ffe          POP      {r1-r11,pc}
                  |L22.34|
000022  a902              ADD      r1,sp,#8              ;752
000024  4628              MOV      r0,r5                 ;752
000026  f7fffffe          BL       getframe
00002a  4681              MOV      r9,r0                 ;752
00002c  f1b90f00          CMP      r9,#0                 ;753
000030  d104              BNE      |L22.60|
000032  2180              MOVS     r1,#0x80              ;755
000034  4658              MOV      r0,r11                ;755
000036  f7fffffe          BL       __aeabi_memclr
00003a  e7f0              B        |L22.30|
                  |L22.60|
00003c  4628              MOV      r0,r5                 ;758
00003e  f7fffffe          BL       ackcheck
000042  4682              MOV      r10,r0                ;758
000044  f1ba0f01          CMP      r10,#1                ;759
000048  d10e              BNE      |L22.104|
00004a  4869              LDR      r0,|L22.496|
00004c  7dc0              LDRB     r0,[r0,#0x17]         ;761  ; AMPPro
00004e  f3c00040          UBFX     r0,r0,#1,#1           ;761
000052  b140              CBZ      r0,|L22.102|
000054  4866              LDR      r0,|L22.496|
000056  7dc0              LDRB     r0,[r0,#0x17]         ;763  ; AMPPro
000058  f0200002          BIC      r0,r0,#2              ;763
00005c  4964              LDR      r1,|L22.496|
00005e  75c8              STRB     r0,[r1,#0x17]         ;763
000060  4640              MOV      r0,r8                 ;764
000062  f7fffffe          BL       Releas_OneBuffer
                  |L22.102|
000066  e7da              B        |L22.30|
                  |L22.104|
000068  462c              MOV      r4,r5                 ;769
00006a  78a0              LDRB     r0,[r4,#2]            ;770
00006c  f000063f          AND      r6,r0,#0x3f           ;770
000070  78a0              LDRB     r0,[r4,#2]            ;776
000072  09c0              LSRS     r0,r0,#7              ;776
000074  b190              CBZ      r0,|L22.156|
000076  485f              LDR      r0,|L22.500|
000078  7800              LDRB     r0,[r0,#0]            ;778  ; MainFlag
00007a  b170              CBZ      r0,|L22.154|
00007c  2100              MOVS     r1,#0                 ;780
00007e  4640              MOV      r0,r8                 ;780
000080  f7fffffe          BL       ackFrame
000084  485a              LDR      r0,|L22.496|
000086  7dc0              LDRB     r0,[r0,#0x17]         ;781  ; AMPPro
000088  f0200001          BIC      r0,r0,#1              ;781
00008c  1c40              ADDS     r0,r0,#1              ;781
00008e  4958              LDR      r1,|L22.496|
000090  75c8              STRB     r0,[r1,#0x17]         ;781
000092  4649              MOV      r1,r9                 ;782
000094  4620              MOV      r0,r4                 ;782
000096  f7fffffe          BL       PCnet_Send
                  |L22.154|
00009a  e7c0              B        |L22.30|
                  |L22.156|
00009c  78e7              LDRB     r7,[r4,#3]            ;787
00009e  b907              CBNZ     r7,|L22.162|
0000a0  e7bd              B        |L22.30|
                  |L22.162|
0000a2  4855              LDR      r0,|L22.504|
0000a4  7800              LDRB     r0,[r0,#0]            ;792  ; CabAddr
0000a6  42b8              CMP      r0,r7                 ;792
0000a8  d002              BEQ      |L22.176|
0000aa  2fff              CMP      r7,#0xff              ;792
0000ac  d000              BEQ      |L22.176|
0000ae  e7b6              B        |L22.30|
                  |L22.176|
0000b0  4851              LDR      r0,|L22.504|
0000b2  7800              LDRB     r0,[r0,#0]            ;796  ; CabAddr
0000b4  42b8              CMP      r0,r7                 ;796
0000b6  d103              BNE      |L22.192|
0000b8  2101              MOVS     r1,#1                 ;797
0000ba  4640              MOV      r0,r8                 ;797
0000bc  f7fffffe          BL       ackFrame
                  |L22.192|
0000c0  2e02              CMP      r6,#2                 ;799
0000c2  d129              BNE      |L22.280|
0000c4  7920              LDRB     r0,[r4,#4]            ;801
0000c6  b108              CBZ      r0,|L22.204|
0000c8  7960              LDRB     r0,[r4,#5]            ;801
0000ca  b900              CBNZ     r0,|L22.206|
                  |L22.204|
0000cc  e7a7              B        |L22.30|
                  |L22.206|
0000ce  7920              LDRB     r0,[r4,#4]            ;805
0000d0  28ff              CMP      r0,#0xff              ;805
0000d2  d002              BEQ      |L22.218|
0000d4  7960              LDRB     r0,[r4,#5]            ;805
0000d6  28ff              CMP      r0,#0xff              ;805
0000d8  d106              BNE      |L22.232|
                  |L22.218|
0000da  4845              LDR      r0,|L22.496|
0000dc  7dc0              LDRB     r0,[r0,#0x17]         ;807  ; AMPPro
0000de  f0200004          BIC      r0,r0,#4              ;807
0000e2  4943              LDR      r1,|L22.496|
0000e4  75c8              STRB     r0,[r1,#0x17]         ;807
0000e6  e006              B        |L22.246|
                  |L22.232|
0000e8  4841              LDR      r0,|L22.496|
0000ea  7dc0              LDRB     r0,[r0,#0x17]         ;811  ; AMPPro
0000ec  f0200004          BIC      r0,r0,#4              ;811
0000f0  1d00              ADDS     r0,r0,#4              ;811
0000f2  493f              LDR      r1,|L22.496|
0000f4  75c8              STRB     r0,[r1,#0x17]         ;811
                  |L22.246|
0000f6  483e              LDR      r0,|L22.496|
0000f8  8a00              LDRH     r0,[r0,#0x10]         ;813  ; AMPPro
0000fa  f0200040          BIC      r0,r0,#0x40           ;813
0000fe  3040              ADDS     r0,r0,#0x40           ;813
000100  493b              LDR      r1,|L22.496|
000102  8208              STRH     r0,[r1,#0x10]         ;813
000104  4608              MOV      r0,r1                 ;814
000106  8a00              LDRH     r0,[r0,#0x10]         ;814  ; AMPPro
000108  f0200080          BIC      r0,r0,#0x80           ;814
00010c  8208              STRH     r0,[r1,#0x10]         ;814
00010e  4649              MOV      r1,r9                 ;815
000110  4620              MOV      r0,r4                 ;815
000112  f7fffffe          BL       Laynet_Send
000116  e069              B        |L22.492|
                  |L22.280|
000118  2e05              CMP      r6,#5                 ;817
00011a  d11b              BNE      |L22.340|
00011c  4834              LDR      r0,|L22.496|
00011e  8a00              LDRH     r0,[r0,#0x10]         ;819  ; AMPPro
000120  f0200040          BIC      r0,r0,#0x40           ;819
000124  4932              LDR      r1,|L22.496|
000126  8208              STRH     r0,[r1,#0x10]         ;819
000128  4608              MOV      r0,r1                 ;820
00012a  8a00              LDRH     r0,[r0,#0x10]         ;820  ; AMPPro
00012c  f0200080          BIC      r0,r0,#0x80           ;820
000130  8208              STRH     r0,[r1,#0x10]         ;820
000132  79a0              LDRB     r0,[r4,#6]            ;822
000134  b130              CBZ      r0,|L22.324|
000136  4608              MOV      r0,r1                 ;823
000138  8a00              LDRH     r0,[r0,#0x10]         ;823  ; AMPPro
00013a  f0200040          BIC      r0,r0,#0x40           ;823
00013e  3040              ADDS     r0,r0,#0x40           ;823
000140  8208              STRH     r0,[r1,#0x10]         ;823
000142  e053              B        |L22.492|
                  |L22.324|
000144  482a              LDR      r0,|L22.496|
000146  8a00              LDRH     r0,[r0,#0x10]         ;825  ; AMPPro
000148  f0200080          BIC      r0,r0,#0x80           ;825
00014c  3080              ADDS     r0,r0,#0x80           ;825
00014e  4928              LDR      r1,|L22.496|
000150  8208              STRH     r0,[r1,#0x10]         ;825
000152  e04b              B        |L22.492|
                  |L22.340|
000154  2e03              CMP      r6,#3                 ;827
000156  d11b              BNE      |L22.400|
000158  4825              LDR      r0,|L22.496|
00015a  8a00              LDRH     r0,[r0,#0x10]         ;829  ; AMPPro
00015c  f0200004          BIC      r0,r0,#4              ;829
000160  4923              LDR      r1,|L22.496|
000162  8208              STRH     r0,[r1,#0x10]         ;829
000164  4608              MOV      r0,r1                 ;830
000166  8a00              LDRH     r0,[r0,#0x10]         ;830  ; AMPPro
000168  f0200001          BIC      r0,r0,#1              ;830
00016c  8208              STRH     r0,[r1,#0x10]         ;830
00016e  79a0              LDRB     r0,[r4,#6]            ;832
000170  b130              CBZ      r0,|L22.384|
000172  4608              MOV      r0,r1                 ;833
000174  8a00              LDRH     r0,[r0,#0x10]         ;833  ; AMPPro
000176  f0200001          BIC      r0,r0,#1              ;833
00017a  1c40              ADDS     r0,r0,#1              ;833
00017c  8208              STRH     r0,[r1,#0x10]         ;833
00017e  e035              B        |L22.492|
                  |L22.384|
000180  481b              LDR      r0,|L22.496|
000182  8a00              LDRH     r0,[r0,#0x10]         ;835  ; AMPPro
000184  f0200004          BIC      r0,r0,#4              ;835
000188  1d00              ADDS     r0,r0,#4              ;835
00018a  4919              LDR      r1,|L22.496|
00018c  8208              STRH     r0,[r1,#0x10]         ;835
00018e  e02d              B        |L22.492|
                  |L22.400|
000190  2e08              CMP      r6,#8                 ;837
000192  d11b              BNE      |L22.460|
000194  4816              LDR      r0,|L22.496|
000196  8a00              LDRH     r0,[r0,#0x10]         ;839  ; AMPPro
000198  f0200010          BIC      r0,r0,#0x10           ;839
00019c  4914              LDR      r1,|L22.496|
00019e  8208              STRH     r0,[r1,#0x10]         ;839
0001a0  4608              MOV      r0,r1                 ;840
0001a2  8a00              LDRH     r0,[r0,#0x10]         ;840  ; AMPPro
0001a4  f0200020          BIC      r0,r0,#0x20           ;840
0001a8  8208              STRH     r0,[r1,#0x10]         ;840
0001aa  79a0              LDRB     r0,[r4,#6]            ;842
0001ac  b130              CBZ      r0,|L22.444|
0001ae  4608              MOV      r0,r1                 ;843
0001b0  8a00              LDRH     r0,[r0,#0x10]         ;843  ; AMPPro
0001b2  f0200010          BIC      r0,r0,#0x10           ;843
0001b6  3010              ADDS     r0,r0,#0x10           ;843
0001b8  8208              STRH     r0,[r1,#0x10]         ;843
0001ba  e017              B        |L22.492|
                  |L22.444|
0001bc  480c              LDR      r0,|L22.496|
0001be  8a00              LDRH     r0,[r0,#0x10]         ;845  ; AMPPro
0001c0  f0200020          BIC      r0,r0,#0x20           ;845
0001c4  3020              ADDS     r0,r0,#0x20           ;845
0001c6  490a              LDR      r1,|L22.496|
0001c8  8208              STRH     r0,[r1,#0x10]         ;845
0001ca  e00f              B        |L22.492|
                  |L22.460|
0001cc  2e06              CMP      r6,#6                 ;847
0001ce  d10d              BNE      |L22.492|
0001d0  4807              LDR      r0,|L22.496|
0001d2  7c80              LDRB     r0,[r0,#0x12]         ;849  ; AMPPro
0001d4  f0000001          AND      r0,r0,#1              ;849
0001d8  b920              CBNZ     r0,|L22.484|
0001da  2100              MOVS     r1,#0                 ;851
0001dc  2006              MOVS     r0,#6                 ;851
0001de  f7fffffe          BL       LockStatusUpdata
0001e2  e003              B        |L22.492|
                  |L22.484|
0001e4  2101              MOVS     r1,#1                 ;855
0001e6  2006              MOVS     r0,#6                 ;855
0001e8  f7fffffe          BL       LockStatusUpdata
                  |L22.492|
0001ec  bf00              NOP      
0001ee  e716              B        |L22.30|
;;;859    /*******************************************************************************
                          ENDP

                  |L22.496|
                          DCD      AMPPro
                  |L22.500|
                          DCD      MainFlag
                  |L22.504|
                          DCD      CabAddr

                          AREA ||i.Msg_ProcessLyPort||, CODE, READONLY, ALIGN=2

                  Msg_ProcessLyPort PROC
;;;880    *******************************************************************************/
;;;881    void Msg_ProcessLyPort(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;882    {  
000004  b091              SUB      sp,sp,#0x44
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
;;;883      unsigned  char result       = 0; 
00000c  f04f0900          MOV      r9,#0
;;;884      //unsigned  char address      = 0;  
;;;885      unsigned  short framlength  = 0; 
000010  2000              MOVS     r0,#0
000012  9010              STR      r0,[sp,#0x40]
;;;886      //unsigned  char  Cmd         = 0;  
;;;887      unsigned  char* paddrbac    = pBuffer;         //备份数据缓存起始地址
000014  4626              MOV      r6,r4
;;;888      
;;;889      stampphydef* ampframe=NULL;
000016  2700              MOVS     r7,#0
;;;890      
;;;891      framlength=length;
000018  9510              STR      r5,[sp,#0x40]
;;;892      
;;;893      //-------------------------协议检查
;;;894      framlength	=	getframe(paddrbac,&framlength);    //判断帧消息内容是否符合协议
00001a  a910              ADD      r1,sp,#0x40
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       getframe
000022  9010              STR      r0,[sp,#0x40]
;;;895      if(0== framlength)    //不符合协议，做透传---读卡器
000024  f8bd0040          LDRH     r0,[sp,#0x40]
000028  b910              CBNZ     r0,|L23.48|
                  |L23.42|
;;;896      {
;;;897    //    CardDataSendUp(Port,pBuffer,length);
;;;898        return;
;;;899      }
;;;900      
;;;901      pBuffer=paddrbac;  
;;;902      result  = ackcheck(pBuffer);                //检查是否为应答消息,应答消息返回1  
;;;903      if(1==result)
;;;904      {
;;;905        if(AMPPro.buffer.WaitAck.Lay)      //如果为等待应答状态，则释放一个缓存
;;;906        {
;;;907          AMPPro.buffer.WaitAck.Lay=0;
;;;908          Releas_OneBuffer(Port);        //释放一个发送缓存
;;;909        }
;;;910        return;
;;;911      }  
;;;912      //-------------------------根据地址转发数据：广播数据发送到副柜和本柜层板
;;;913      ampframe  = (stampphydef*)pBuffer;
;;;914      //Cmd = ampframe->msg.cmd.cmd;
;;;915      
;;;916      //-------------------------处理说明：柜板--LyPort口根据方向判断为层板还是柜板，柜板下发，层板上传
;;;917      //-------------------------上传数据:柜接口
;;;918      //柜板：接收的数据方向为上传，应答或者数据，不符合协议的内容则透传
;;;919      //层板：接收到的数据为下发数据，应答或者命令，不符合协议的内容不处理
;;;920      //1）-----------------上传数据:柜接收的数据为上传数据，如果不是应答，则需要加上柜地址，再打包通过柜/PC接口上传
;;;921      if(1==ampframe->msg.cmd.dir)
;;;922      {
;;;923        unsigned  char  databuffer[64]={0};
;;;924        
;;;925        ackFrame(Port,0); //向下应答    
;;;926           
;;;927        //-------------------------读卡器端口接收到数据
;;;928        memcpy(databuffer,pBuffer,length);
;;;929        framlength  = length;
;;;930        framlength  = PaketUpMsg(databuffer,AmpCmdCard,&framlength);
;;;931        //-------------------------设置地址:柜控制板地址段为address1
;;;932        ampframe  = (stampphydef*)databuffer;
;;;933        ampframe->msg.addr.address1 = CabAddr;
;;;934        //-------------------------设置CRC和结束符
;;;935        SetFrame(databuffer,&framlength);   //补充消息的CRC和结束符，返回帧长度
;;;936        //-------------------------检查本柜是否为主柜
;;;937        if(1==MainFlag)   //主柜--通过PC接口上传
;;;938        {
;;;939          AMPPro.buffer.WaitAck.Pc=1;   //需要应答
;;;940          PCnet_Send(databuffer,framlength);
;;;941        }
;;;942        else  //副柜--通过副柜接口上传
;;;943        {
;;;944          AMPPro.buffer.WaitAck.Cab=1;   //需要应答
;;;945          Cabinet_Send(databuffer,framlength);     //往副柜发送消息
;;;946        }    
;;;947        return;
;;;948      }
;;;949      //2）-----------------下发数据：只有层板会接收下发数据
;;;950      else
;;;951      {
;;;952        return;
;;;953      }
;;;954    }
00002a  b011              ADD      sp,sp,#0x44
00002c  e8bd83f0          POP      {r4-r9,pc}
                  |L23.48|
000030  4634              MOV      r4,r6                 ;901
000032  4620              MOV      r0,r4                 ;902
000034  f7fffffe          BL       ackcheck
000038  4681              MOV      r9,r0                 ;902
00003a  f1b90f01          CMP      r9,#1                 ;903
00003e  d10e              BNE      |L23.94|
000040  4828              LDR      r0,|L23.228|
000042  7dc0              LDRB     r0,[r0,#0x17]         ;905  ; AMPPro
000044  f3c00080          UBFX     r0,r0,#2,#1           ;905
000048  b140              CBZ      r0,|L23.92|
00004a  4826              LDR      r0,|L23.228|
00004c  7dc0              LDRB     r0,[r0,#0x17]         ;907  ; AMPPro
00004e  f0200004          BIC      r0,r0,#4              ;907
000052  4924              LDR      r1,|L23.228|
000054  75c8              STRB     r0,[r1,#0x17]         ;907
000056  4640              MOV      r0,r8                 ;908
000058  f7fffffe          BL       Releas_OneBuffer
                  |L23.92|
00005c  e7e5              B        |L23.42|
                  |L23.94|
00005e  4627              MOV      r7,r4                 ;913
000060  78b8              LDRB     r0,[r7,#2]            ;921
000062  2101              MOVS     r1,#1                 ;921
000064  ebb11fd0          CMP      r1,r0,LSR #7          ;921
000068  d139              BNE      |L23.222|
00006a  2140              MOVS     r1,#0x40              ;923
00006c  4668              MOV      r0,sp                 ;923
00006e  f7fffffe          BL       __aeabi_memclr4
000072  2100              MOVS     r1,#0                 ;925
000074  4640              MOV      r0,r8                 ;925
000076  f7fffffe          BL       ackFrame
00007a  462a              MOV      r2,r5                 ;928
00007c  4621              MOV      r1,r4                 ;928
00007e  4668              MOV      r0,sp                 ;928
000080  f7fffffe          BL       __aeabi_memcpy
000084  9510              STR      r5,[sp,#0x40]         ;929
000086  aa10              ADD      r2,sp,#0x40           ;930
000088  2104              MOVS     r1,#4                 ;930
00008a  4668              MOV      r0,sp                 ;930
00008c  f7fffffe          BL       PaketUpMsg
000090  9010              STR      r0,[sp,#0x40]         ;930
000092  466f              MOV      r7,sp                 ;932
000094  4814              LDR      r0,|L23.232|
000096  7801              LDRB     r1,[r0,#0]            ;933  ; CabAddr
000098  70f9              STRB     r1,[r7,#3]            ;933
00009a  a910              ADD      r1,sp,#0x40           ;935
00009c  4668              MOV      r0,sp                 ;935
00009e  f7fffffe          BL       SetFrame
0000a2  4812              LDR      r0,|L23.236|
0000a4  7800              LDRB     r0,[r0,#0]            ;937  ; MainFlag
0000a6  2801              CMP      r0,#1                 ;937
0000a8  d10c              BNE      |L23.196|
0000aa  480e              LDR      r0,|L23.228|
0000ac  7dc0              LDRB     r0,[r0,#0x17]         ;939  ; AMPPro
0000ae  f0200001          BIC      r0,r0,#1              ;939
0000b2  1c40              ADDS     r0,r0,#1              ;939
0000b4  490b              LDR      r1,|L23.228|
0000b6  75c8              STRB     r0,[r1,#0x17]         ;939
0000b8  f8bd1040          LDRH     r1,[sp,#0x40]         ;940
0000bc  4668              MOV      r0,sp                 ;940
0000be  f7fffffe          BL       PCnet_Send
0000c2  e00b              B        |L23.220|
                  |L23.196|
0000c4  4807              LDR      r0,|L23.228|
0000c6  7dc0              LDRB     r0,[r0,#0x17]         ;944  ; AMPPro
0000c8  f0200002          BIC      r0,r0,#2              ;944
0000cc  1c80              ADDS     r0,r0,#2              ;944
0000ce  4905              LDR      r1,|L23.228|
0000d0  75c8              STRB     r0,[r1,#0x17]         ;944
0000d2  f8bd1040          LDRH     r1,[sp,#0x40]         ;945
0000d6  4668              MOV      r0,sp                 ;945
0000d8  f7fffffe          BL       Cabinet_Send
                  |L23.220|
0000dc  e7a5              B        |L23.42|
                  |L23.222|
0000de  bf00              NOP                            ;952
0000e0  e7a3              B        |L23.42|
;;;955    /*******************************************************************************
                          ENDP

0000e2  0000              DCW      0x0000
                  |L23.228|
                          DCD      AMPPro
                  |L23.232|
                          DCD      CabAddr
                  |L23.236|
                          DCD      MainFlag

                          AREA ||i.Msg_ProcessPcPort||, CODE, READONLY, ALIGN=2

                  Msg_ProcessPcPort PROC
;;;596    *******************************************************************************/
;;;597    void Msg_ProcessPcPort(enCCPortDef Port,unsigned char* pBuffer,unsigned short length)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;598    {  
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;599      unsigned  char result       = 0; 
000008  f04f0a00          MOV      r10,#0
;;;600      unsigned  char address      = 0;  
00000c  2700              MOVS     r7,#0
;;;601      unsigned  short framlength  = 0; 
00000e  46b9              MOV      r9,r7
;;;602      unsigned  char  Cmd         = 0;  
000010  2600              MOVS     r6,#0
;;;603      unsigned  char* paddrbac    = pBuffer;         //备份数据缓存起始地址
000012  46ab              MOV      r11,r5
;;;604      
;;;605      stampphydef* ampframe=NULL;
000014  2400              MOVS     r4,#0
;;;606      //-------------------------检查端口是否为层接口及缓存地址是否为空
;;;607      if(PcPort!=Port||NULL==pBuffer)
000016  f1b80f01          CMP      r8,#1
00001a  d100              BNE      |L24.30|
00001c  b90d              CBNZ     r5,|L24.34|
                  |L24.30|
;;;608      {
;;;609        return;
;;;610      } 
;;;611      //-------------------------协议检查
;;;612      framlength	=	getframe(pBuffer,&length);    //判断帧消息内容是否符合协议
;;;613      if(0== framlength)
;;;614      {
;;;615        memset(paddrbac,0x00,gDatasize);          //清除数据
;;;616        return;
;;;617      }
;;;618      result  = ackcheck(pBuffer);                //检查是否为应答消息,应答消息返回1  
;;;619      if(1==result)
;;;620      {
;;;621        if(AMPPro.buffer.WaitAck.Pc)      //如果为等待应答状态，则释放一个缓存
;;;622        {
;;;623          AMPPro.buffer.WaitAck.Pc=0;
;;;624          Releas_OneBuffer(Port);        //释放一个发送缓存
;;;625        }
;;;626        return;
;;;627      }  
;;;628      //-------------------------根据地址转发数据：广播数据发送到副柜和本柜层板
;;;629      ampframe  = (stampphydef*)pBuffer;
;;;630      Cmd = ampframe->msg.cmd.cmd;  
;;;631      
;;;632      //-------------------------上传数据:柜接口
;;;633      //主柜：接收到的数据上传到PC并向下应答
;;;634      //副柜：接收到下发数据判断地址,如果地址为本地址，向上应答(广播地址不应答)，如果是上传数据，不处理
;;;635      //1）-----------------上传数据:PC接口只接收下发数据
;;;636    
;;;637      //2）-----------------下发数据：地址为本地址或者广播地址(0xFF)需要进行处理，如果地址为本地址，向上应答(广播地址不应答)
;;;638      if(MainFlag)  //0--副柜，1--主柜
;;;639      {
;;;640      }
;;;641      address=ampframe->msg.addr.address1;
;;;642      if(0==address)      //柜地址为空
;;;643      {
;;;644        return;
;;;645      }
;;;646      //----------------------------PC接口都要应答
;;;647      ackFrame(Port,1);             //向上应答---取消PC应答
;;;648      
;;;649      if((CabAddr!=address))  //不属于主柜消息
;;;650      {
;;;651        
;;;652        Cabinet_Send((unsigned char*)ampframe,framlength);//往副柜发送
;;;653        if(0xFF==address) //广播地址
;;;654        {      
;;;655          AMPPro.buffer.WaitAck.Cab=0;   //不需要副柜应答      
;;;656        }
;;;657        else
;;;658        {
;;;659          //ackFrame(Port,1);             //向上应答
;;;660          AMPPro.buffer.WaitAck.Cab=1;  //需要副柜应答
;;;661          return;       //其它柜数据，退出
;;;662        }
;;;663      }
;;;664      //===================================接收到的数据为本柜可接收数据(本柜地址或者广播地址(0xFF))
;;;665      //1)-----------------检查层地址，判断是否需要将数据发往层，发往层时，需要开锁，开背光灯
;;;666      
;;;667      //2)-----------------层地址为0，不需要往下发，只在柜控制板处理：灯控制/锁控制/供电
;;;668      if(AmpCmdLed ==  Cmd)       //LED/LCD控制
;;;669      {
;;;670        if((0x00==ampframe->msg.addr.address2)||(0x00==ampframe->msg.addr.address3))//广播地址
;;;671        {
;;;672          return;   //层或者柜地址不正确
;;;673        }
;;;674        else if((0xFF==ampframe->msg.addr.address2)||(0xFF==ampframe->msg.addr.address3))//广播地址
;;;675        {
;;;676          AMPPro.buffer.WaitAck.Lay=0;   //不需要应答
;;;677        }
;;;678        else
;;;679        {
;;;680          AMPPro.buffer.WaitAck.Lay=1;   //需要应答
;;;681        }
;;;682        AMPPro.Req.PLon  =1;    //层板供电
;;;683        AMPPro.Req.PLoff =0;    
;;;684        Laynet_Send((unsigned char*)ampframe,framlength);     //往层板发送消息
;;;685      }
;;;686      else if(AmpCmdPwr ==  Cmd)   //层板供电控制命令
;;;687      {
;;;688        AMPPro.Req.PLon  =0;
;;;689        AMPPro.Req.PLoff =0;
;;;690        
;;;691        if(ampframe->msg.data[0])
;;;692          AMPPro.Req.PLon=1;
;;;693        else
;;;694          AMPPro.Req.PLoff=1;
;;;695      }
;;;696      else if(AmpCmdLock ==  Cmd)   //锁控制命令
;;;697      {
;;;698        AMPPro.Req.reslock  =0;
;;;699        AMPPro.Req.unlockqust =0;
;;;700        
;;;701        if(ampframe->msg.data[0])
;;;702          AMPPro.Req.unlockqust=1;
;;;703        else
;;;704          AMPPro.Req.reslock=1;
;;;705      }
;;;706      else if(AmpCmdBKligth ==  Cmd)   //背光控制指令
;;;707      {
;;;708        AMPPro.Req.BLon     =0;
;;;709        AMPPro.Req.BLoff    =0;
;;;710        
;;;711        if(ampframe->msg.data[0])
;;;712          AMPPro.Req.BLon=1;
;;;713        else
;;;714          AMPPro.Req.BLoff=1;    
;;;715      }
;;;716      else if(AmpCmdSta ==  Cmd)   //查询状态
;;;717      {
;;;718        if(0==AMPPro.Sta.lockstd) //开状态
;;;719        {
;;;720          LockStatusUpdata(AmpCmdSta,AmpLockOpen);  //锁---开状态
;;;721        }
;;;722        else
;;;723        {
;;;724          LockStatusUpdata(AmpCmdSta,AmpLockOn);  //锁---关状态
;;;725        }
;;;726      }
;;;727    }
00001e  e8bd8ffe          POP      {r1-r11,pc}
                  |L24.34|
000022  a902              ADD      r1,sp,#8              ;612
000024  4628              MOV      r0,r5                 ;612
000026  f7fffffe          BL       getframe
00002a  4681              MOV      r9,r0                 ;612
00002c  f1b90f00          CMP      r9,#0                 ;613
000030  d104              BNE      |L24.60|
000032  2180              MOVS     r1,#0x80              ;615
000034  4658              MOV      r0,r11                ;615
000036  f7fffffe          BL       __aeabi_memclr
00003a  e7f0              B        |L24.30|
                  |L24.60|
00003c  4628              MOV      r0,r5                 ;618
00003e  f7fffffe          BL       ackcheck
000042  4682              MOV      r10,r0                ;618
000044  f1ba0f01          CMP      r10,#1                ;619
000048  d10e              BNE      |L24.104|
00004a  4865              LDR      r0,|L24.480|
00004c  7dc0              LDRB     r0,[r0,#0x17]         ;621  ; AMPPro
00004e  f0000001          AND      r0,r0,#1              ;621
000052  b140              CBZ      r0,|L24.102|
000054  4862              LDR      r0,|L24.480|
000056  7dc0              LDRB     r0,[r0,#0x17]         ;623  ; AMPPro
000058  f0200001          BIC      r0,r0,#1              ;623
00005c  4960              LDR      r1,|L24.480|
00005e  75c8              STRB     r0,[r1,#0x17]         ;623
000060  4640              MOV      r0,r8                 ;624
000062  f7fffffe          BL       Releas_OneBuffer
                  |L24.102|
000066  e7da              B        |L24.30|
                  |L24.104|
000068  462c              MOV      r4,r5                 ;629
00006a  78a0              LDRB     r0,[r4,#2]            ;630
00006c  f000063f          AND      r6,r0,#0x3f           ;630
000070  78e7              LDRB     r7,[r4,#3]            ;641
000072  b907              CBNZ     r7,|L24.118|
000074  e7d3              B        |L24.30|
                  |L24.118|
000076  2101              MOVS     r1,#1                 ;647
000078  4640              MOV      r0,r8                 ;647
00007a  f7fffffe          BL       ackFrame
00007e  4859              LDR      r0,|L24.484|
000080  7800              LDRB     r0,[r0,#0]            ;649  ; CabAddr
000082  42b8              CMP      r0,r7                 ;649
000084  d014              BEQ      |L24.176|
000086  4649              MOV      r1,r9                 ;652
000088  4620              MOV      r0,r4                 ;652
00008a  f7fffffe          BL       Cabinet_Send
00008e  2fff              CMP      r7,#0xff              ;653
000090  d106              BNE      |L24.160|
000092  4853              LDR      r0,|L24.480|
000094  7dc0              LDRB     r0,[r0,#0x17]         ;655  ; AMPPro
000096  f0200002          BIC      r0,r0,#2              ;655
00009a  4951              LDR      r1,|L24.480|
00009c  75c8              STRB     r0,[r1,#0x17]         ;655
00009e  e007              B        |L24.176|
                  |L24.160|
0000a0  484f              LDR      r0,|L24.480|
0000a2  7dc0              LDRB     r0,[r0,#0x17]         ;660  ; AMPPro
0000a4  f0200002          BIC      r0,r0,#2              ;660
0000a8  1c80              ADDS     r0,r0,#2              ;660
0000aa  494d              LDR      r1,|L24.480|
0000ac  75c8              STRB     r0,[r1,#0x17]         ;660
0000ae  e7b6              B        |L24.30|
                  |L24.176|
0000b0  2e02              CMP      r6,#2                 ;668
0000b2  d129              BNE      |L24.264|
0000b4  7920              LDRB     r0,[r4,#4]            ;670
0000b6  b108              CBZ      r0,|L24.188|
0000b8  7960              LDRB     r0,[r4,#5]            ;670
0000ba  b900              CBNZ     r0,|L24.190|
                  |L24.188|
0000bc  e7af              B        |L24.30|
                  |L24.190|
0000be  7920              LDRB     r0,[r4,#4]            ;674
0000c0  28ff              CMP      r0,#0xff              ;674
0000c2  d002              BEQ      |L24.202|
0000c4  7960              LDRB     r0,[r4,#5]            ;674
0000c6  28ff              CMP      r0,#0xff              ;674
0000c8  d106              BNE      |L24.216|
                  |L24.202|
0000ca  4845              LDR      r0,|L24.480|
0000cc  7dc0              LDRB     r0,[r0,#0x17]         ;676  ; AMPPro
0000ce  f0200004          BIC      r0,r0,#4              ;676
0000d2  4943              LDR      r1,|L24.480|
0000d4  75c8              STRB     r0,[r1,#0x17]         ;676
0000d6  e006              B        |L24.230|
                  |L24.216|
0000d8  4841              LDR      r0,|L24.480|
0000da  7dc0              LDRB     r0,[r0,#0x17]         ;680  ; AMPPro
0000dc  f0200004          BIC      r0,r0,#4              ;680
0000e0  1d00              ADDS     r0,r0,#4              ;680
0000e2  493f              LDR      r1,|L24.480|
0000e4  75c8              STRB     r0,[r1,#0x17]         ;680
                  |L24.230|
0000e6  483e              LDR      r0,|L24.480|
0000e8  8a00              LDRH     r0,[r0,#0x10]         ;682  ; AMPPro
0000ea  f0200040          BIC      r0,r0,#0x40           ;682
0000ee  3040              ADDS     r0,r0,#0x40           ;682
0000f0  493b              LDR      r1,|L24.480|
0000f2  8208              STRH     r0,[r1,#0x10]         ;682
0000f4  4608              MOV      r0,r1                 ;683
0000f6  8a00              LDRH     r0,[r0,#0x10]         ;683  ; AMPPro
0000f8  f0200080          BIC      r0,r0,#0x80           ;683
0000fc  8208              STRH     r0,[r1,#0x10]         ;683
0000fe  4649              MOV      r1,r9                 ;684
000100  4620              MOV      r0,r4                 ;684
000102  f7fffffe          BL       Laynet_Send
000106  e069              B        |L24.476|
                  |L24.264|
000108  2e05              CMP      r6,#5                 ;686
00010a  d11b              BNE      |L24.324|
00010c  4834              LDR      r0,|L24.480|
00010e  8a00              LDRH     r0,[r0,#0x10]         ;688  ; AMPPro
000110  f0200040          BIC      r0,r0,#0x40           ;688
000114  4932              LDR      r1,|L24.480|
000116  8208              STRH     r0,[r1,#0x10]         ;688
000118  4608              MOV      r0,r1                 ;689
00011a  8a00              LDRH     r0,[r0,#0x10]         ;689  ; AMPPro
00011c  f0200080          BIC      r0,r0,#0x80           ;689
000120  8208              STRH     r0,[r1,#0x10]         ;689
000122  79a0              LDRB     r0,[r4,#6]            ;691
000124  b130              CBZ      r0,|L24.308|
000126  4608              MOV      r0,r1                 ;692
000128  8a00              LDRH     r0,[r0,#0x10]         ;692  ; AMPPro
00012a  f0200040          BIC      r0,r0,#0x40           ;692
00012e  3040              ADDS     r0,r0,#0x40           ;692
000130  8208              STRH     r0,[r1,#0x10]         ;692
000132  e053              B        |L24.476|
                  |L24.308|
000134  482a              LDR      r0,|L24.480|
000136  8a00              LDRH     r0,[r0,#0x10]         ;694  ; AMPPro
000138  f0200080          BIC      r0,r0,#0x80           ;694
00013c  3080              ADDS     r0,r0,#0x80           ;694
00013e  4928              LDR      r1,|L24.480|
000140  8208              STRH     r0,[r1,#0x10]         ;694
000142  e04b              B        |L24.476|
                  |L24.324|
000144  2e03              CMP      r6,#3                 ;696
000146  d11b              BNE      |L24.384|
000148  4825              LDR      r0,|L24.480|
00014a  8a00              LDRH     r0,[r0,#0x10]         ;698  ; AMPPro
00014c  f0200004          BIC      r0,r0,#4              ;698
000150  4923              LDR      r1,|L24.480|
000152  8208              STRH     r0,[r1,#0x10]         ;698
000154  4608              MOV      r0,r1                 ;699
000156  8a00              LDRH     r0,[r0,#0x10]         ;699  ; AMPPro
000158  f0200001          BIC      r0,r0,#1              ;699
00015c  8208              STRH     r0,[r1,#0x10]         ;699
00015e  79a0              LDRB     r0,[r4,#6]            ;701
000160  b130              CBZ      r0,|L24.368|
000162  4608              MOV      r0,r1                 ;702
000164  8a00              LDRH     r0,[r0,#0x10]         ;702  ; AMPPro
000166  f0200001          BIC      r0,r0,#1              ;702
00016a  1c40              ADDS     r0,r0,#1              ;702
00016c  8208              STRH     r0,[r1,#0x10]         ;702
00016e  e035              B        |L24.476|
                  |L24.368|
000170  481b              LDR      r0,|L24.480|
000172  8a00              LDRH     r0,[r0,#0x10]         ;704  ; AMPPro
000174  f0200004          BIC      r0,r0,#4              ;704
000178  1d00              ADDS     r0,r0,#4              ;704
00017a  4919              LDR      r1,|L24.480|
00017c  8208              STRH     r0,[r1,#0x10]         ;704
00017e  e02d              B        |L24.476|
                  |L24.384|
000180  2e08              CMP      r6,#8                 ;706
000182  d11b              BNE      |L24.444|
000184  4816              LDR      r0,|L24.480|
000186  8a00              LDRH     r0,[r0,#0x10]         ;708  ; AMPPro
000188  f0200010          BIC      r0,r0,#0x10           ;708
00018c  4914              LDR      r1,|L24.480|
00018e  8208              STRH     r0,[r1,#0x10]         ;708
000190  4608              MOV      r0,r1                 ;709
000192  8a00              LDRH     r0,[r0,#0x10]         ;709  ; AMPPro
000194  f0200020          BIC      r0,r0,#0x20           ;709
000198  8208              STRH     r0,[r1,#0x10]         ;709
00019a  79a0              LDRB     r0,[r4,#6]            ;711
00019c  b130              CBZ      r0,|L24.428|
00019e  4608              MOV      r0,r1                 ;712
0001a0  8a00              LDRH     r0,[r0,#0x10]         ;712  ; AMPPro
0001a2  f0200010          BIC      r0,r0,#0x10           ;712
0001a6  3010              ADDS     r0,r0,#0x10           ;712
0001a8  8208              STRH     r0,[r1,#0x10]         ;712
0001aa  e017              B        |L24.476|
                  |L24.428|
0001ac  480c              LDR      r0,|L24.480|
0001ae  8a00              LDRH     r0,[r0,#0x10]         ;714  ; AMPPro
0001b0  f0200020          BIC      r0,r0,#0x20           ;714
0001b4  3020              ADDS     r0,r0,#0x20           ;714
0001b6  490a              LDR      r1,|L24.480|
0001b8  8208              STRH     r0,[r1,#0x10]         ;714
0001ba  e00f              B        |L24.476|
                  |L24.444|
0001bc  2e06              CMP      r6,#6                 ;716
0001be  d10d              BNE      |L24.476|
0001c0  4807              LDR      r0,|L24.480|
0001c2  7c80              LDRB     r0,[r0,#0x12]         ;718  ; AMPPro
0001c4  f0000001          AND      r0,r0,#1              ;718
0001c8  b920              CBNZ     r0,|L24.468|
0001ca  2100              MOVS     r1,#0                 ;720
0001cc  2006              MOVS     r0,#6                 ;720
0001ce  f7fffffe          BL       LockStatusUpdata
0001d2  e003              B        |L24.476|
                  |L24.468|
0001d4  2101              MOVS     r1,#1                 ;724
0001d6  2006              MOVS     r0,#6                 ;724
0001d8  f7fffffe          BL       LockStatusUpdata
                  |L24.476|
0001dc  bf00              NOP      
0001de  e71e              B        |L24.30|
;;;728    /*******************************************************************************
                          ENDP

                  |L24.480|
                          DCD      AMPPro
                  |L24.484|
                          DCD      CabAddr

                          AREA ||i.PCnet_Send||, CODE, READONLY, ALIGN=1

                  PCnet_Send PROC
;;;518    *******************************************************************************/
;;;519    unsigned short PCnet_Send(unsigned char* pBuffer,unsigned short length)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;521      return(AddSendBuffer(PcPort,pBuffer,length));
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       AddSendBuffer
;;;522    }
000010  bd70              POP      {r4-r6,pc}
;;;523    /*******************************************************************************
                          ENDP


                          AREA ||i.RequestServer||, CODE, READONLY, ALIGN=2

                  RequestServer PROC
;;;1008   *******************************************************************************/
;;;1009   void RequestServer(void)
000000  4811              LDR      r0,|L26.72|
;;;1010   {    
;;;1011     //-------------------层板供电
;;;1012       if(AMPPro.Req.PLon)    //层板供电控制
000002  7c00              LDRB     r0,[r0,#0x10]  ; AMPPro
000004  f3c01080          UBFX     r0,r0,#6,#1
000008  b158              CBZ      r0,|L26.34|
;;;1013       {      
;;;1014         LayPowerOn;
00000a  2002              MOVS     r0,#2
00000c  490f              LDR      r1,|L26.76|
00000e  6008              STR      r0,[r1,#0]
;;;1015         AMPPro.Req.PLon=0;
000010  480d              LDR      r0,|L26.72|
000012  8a00              LDRH     r0,[r0,#0x10]  ; AMPPro
000014  f0200040          BIC      r0,r0,#0x40
000018  490b              LDR      r1,|L26.72|
00001a  8208              STRH     r0,[r1,#0x10]
;;;1016         AMPPro.Flag.LayPownOn=1;
00001c  2001              MOVS     r0,#1
00001e  8288              STRH     r0,[r1,#0x14]
000020  e010              B        |L26.68|
                  |L26.34|
;;;1017       }
;;;1018       else if(AMPPro.Req.PLoff)
000022  4809              LDR      r0,|L26.72|
000024  7c00              LDRB     r0,[r0,#0x10]  ; AMPPro
000026  f3c010c0          UBFX     r0,r0,#7,#1
00002a  b158              CBZ      r0,|L26.68|
;;;1019       {
;;;1020         LayPowerOff;
00002c  2002              MOVS     r0,#2
00002e  4907              LDR      r1,|L26.76|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;1021         AMPPro.Req.PLoff=0;
000034  4804              LDR      r0,|L26.72|
000036  8a00              LDRH     r0,[r0,#0x10]  ; AMPPro
000038  f0200080          BIC      r0,r0,#0x80
00003c  4902              LDR      r1,|L26.72|
00003e  8208              STRH     r0,[r1,#0x10]
;;;1022         AMPPro.Flag.LayPownOn=0;
000040  2000              MOVS     r0,#0
000042  8288              STRH     r0,[r1,#0x14]
                  |L26.68|
;;;1023       }
;;;1024   //    //-------------------背光
;;;1025   //    if(AMPPro.Req.BLon)
;;;1026   //    {
;;;1027   //      BackLightOn;
;;;1028   //      AMPPro.Req.BLon=0;
;;;1029   //      AMPPro.Flag.LayPownOn=0;
;;;1030   //    }
;;;1031   //    else if(AMPPro.Req.BLoff)
;;;1032   //    {
;;;1033   //      BackLightOff;
;;;1034   //      AMPPro.Req.BLoff=0;
;;;1035   //      AMPPro.Flag.LayPownOn=0;
;;;1036   //    }
;;;1037   }
000044  4770              BX       lr
;;;1038   /*******************************************************************************
                          ENDP

000046  0000              DCW      0x0000
                  |L26.72|
                          DCD      AMPPro
                  |L26.76|
                          DCD      0x40010c10

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  stCbRS485Ly
                          %        12
                  stCbRS485Cb
                          %        12
                  stCardRS485Ly
                          %        12
                  stCbSwitch
                          %        132
                  CardData
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  CardNum
000000  0000              DCB      0x00,0x00
                  InitCardReaderTimeOut
000002  0000              DCW      0x0000
                  InitCardReaderFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  InitCardUSART_BaudRate
                          DCD      0x00000000
                  CabAddr
00000c  00                DCB      0x00
                  MainFlag
00000d  00                DCB      0x00
                  BLtime
00000e  0000              DCW      0x0000
