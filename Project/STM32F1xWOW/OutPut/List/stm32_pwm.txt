; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_pwm.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_pwm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_pwm.crf ..\..\Driver\WOW\SCR\STM32_PWM.C]
                          THUMB

                          AREA ||i.PWM_OUT||, CODE, READONLY, ALIGN=2

                  PWM_OUT PROC
;;;66     *******************************************************************************/
;;;67     void PWM_OUT			//PWM输出配置
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;68     (
;;;69     	TIM_TypeDef* TIMx,											//所使用的定时器
;;;70     	PWM_OUTChannelTypeDef PWM_OUTChanneln,	//PWM输出通道号
;;;71     	double PWM_Frequency,										//输出频率，最小频率0.02Hz		
;;;72     	u16 PWM_Ratio														//输出占空比，分辨率1/1000
;;;73     )
;;;74     {
000004  b099              SUB      sp,sp,#0x64
000006  4682              MOV      r10,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  f8dd9088          LDR      r9,[sp,#0x88]
;;;75     	//*1,结构体定义
;;;76     	//*2,变量定义
;;;77     	//*3,管脚确认
;;;78     	//*4,打开相应的时钟
;;;79     	//*5,管脚配置（初始化）
;;;80     	//*6,定时器配置（初始化）
;;;81     	//*7,PWM输出配置（初始化）
;;;82     	//*8,占空比配置	
;;;83     	
;;;84     	//*1,结构体定义***********************************************************************
;;;85     	GPIO_InitTypeDef GPIO_InitStructure;
;;;86     	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义
;;;87     	TIM_OCInitTypeDef TIMOCInitStructure;
;;;88     	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值	
;;;89     	//*2,变量定义*************************************************************************	
;;;90     	GPIO_TypeDef* GPIOx				=	0;			//x=A/B/C/D/E/F/G
000012  2000              MOVS     r0,#0
000014  900a              STR      r0,[sp,#0x28]
;;;91     	u16 GPIO_Pin_n						=	0xFF;		//n=0~15;
000016  20ff              MOVS     r0,#0xff
000018  9009              STR      r0,[sp,#0x24]
;;;92     	u32 RCC_APB2Periph_GPIOx	=	0x00;		//x=A/B/C/D/E/F/G	
00001a  2000              MOVS     r0,#0
00001c  9008              STR      r0,[sp,#0x20]
;;;93     	u32	TIMx_Frequency=0;								//	定时器时钟
00001e  9007              STR      r0,[sp,#0x1c]
;;;94     	u16 TIMx_Prescaler				=	0	;			//	定时器时钟分频值		取值范围：0x0000~0xFFFF
000020  9006              STR      r0,[sp,#0x18]
;;;95       u16 TIMx_Period						=	0	;			//	定时器自动重装载值	取值范围：0x0000~0xFFFF
000022  4683              MOV      r11,r0
;;;96     //	u32	Microsecond						=	0	;		//	微秒
;;;97     //	u32	Nanosecond						=	0	;		//	纳秒
;;;98     	double	Tim_num1					=	0	;			//	临时变量1
000024  bf00              NOP      
;;;99     //	u8	Tim_flg								=	0	;			//	临时变量2
;;;100    	//*3,管脚配置--根据输入参数选择相应的GPIO************************************************
;;;101    	switch (*(u32*)&TIMx)
000026  49fe              LDR      r1,|L1.1056|
000028  ebaa0001          SUB      r0,r10,r1
00002c  458a              CMP      r10,r1
00002e  d077              BEQ      |L1.288|
000030  dc0d              BGT      |L1.78|
000032  f1ba4f80          CMP      r10,#0x40000000
000036  d03e              BEQ      |L1.182|
000038  48fa              LDR      r0,|L1.1060|
00003a  4450              ADD      r0,r0,r10
00003c  2800              CMP      r0,#0
00003e  d063              BEQ      |L1.264|
000040  f5b06f80          CMP      r0,#0x400
000044  d06d              BEQ      |L1.290|
000046  f5b06f00          CMP      r0,#0x800
                  |L1.74|
00004a  d16b              BNE      |L1.292|
00004c  e0b4              B        |L1.440|
                  |L1.78|
00004e  f5b06f80          CMP      r0,#0x400
000052  d068              BEQ      |L1.294|
000054  f5b03f8e          CMP      r0,#0x11c00
000058  d003              BEQ      |L1.98|
00005a  f5b03f92          CMP      r0,#0x12400
00005e  d1f4              BNE      |L1.74|
000060  e0b9              B        |L1.470|
                  |L1.98|
;;;102    	{
;;;103    		case TIM1_BASE:
;;;104    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
000062  2101              MOVS     r1,#1
000064  02c8              LSLS     r0,r1,#11
000066  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;105    			switch(PWM_OUTChanneln)
00006a  b136              CBZ      r6,|L1.122|
00006c  2e01              CMP      r6,#1
00006e  d00b              BEQ      |L1.136|
000070  2e02              CMP      r6,#2
000072  d010              BEQ      |L1.150|
000074  2e03              CMP      r6,#3
000076  d11c              BNE      |L1.178|
000078  e014              B        |L1.164|
                  |L1.122|
;;;106    			{
;;;107    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_8;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;	
00007a  48eb              LDR      r0,|L1.1064|
00007c  900a              STR      r0,[sp,#0x28]
00007e  1580              ASRS     r0,r0,#22
000080  9009              STR      r0,[sp,#0x24]
000082  2004              MOVS     r0,#4
000084  9008              STR      r0,[sp,#0x20]
;;;108    															break;
000086  e014              B        |L1.178|
                  |L1.136|
;;;109    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_9;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000088  48e7              LDR      r0,|L1.1064|
00008a  900a              STR      r0,[sp,#0x28]
00008c  1540              ASRS     r0,r0,#21
00008e  9009              STR      r0,[sp,#0x24]
000090  2004              MOVS     r0,#4
000092  9008              STR      r0,[sp,#0x20]
;;;110    															break;
000094  e00d              B        |L1.178|
                  |L1.150|
;;;111    				case PWM_OUTChannel3:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_10;	RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000096  48e4              LDR      r0,|L1.1064|
000098  900a              STR      r0,[sp,#0x28]
00009a  1500              ASRS     r0,r0,#20
00009c  9009              STR      r0,[sp,#0x24]
00009e  2004              MOVS     r0,#4
0000a0  9008              STR      r0,[sp,#0x20]
;;;112    															break;
0000a2  e006              B        |L1.178|
                  |L1.164|
;;;113    				case PWM_OUTChannel4:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_11;	RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000a4  48e0              LDR      r0,|L1.1064|
0000a6  900a              STR      r0,[sp,#0x28]
0000a8  14c0              ASRS     r0,r0,#19
0000aa  9009              STR      r0,[sp,#0x24]
0000ac  2004              MOVS     r0,#4
0000ae  9008              STR      r0,[sp,#0x20]
;;;114    															break;
0000b0  bf00              NOP      
                  |L1.178|
0000b2  bf00              NOP                            ;108
;;;115    			}
;;;116    			break;
0000b4  e095              B        |L1.482|
                  |L1.182|
;;;117    		
;;;118    		case TIM2_BASE:
;;;119    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
0000b6  2101              MOVS     r1,#1
0000b8  4608              MOV      r0,r1
0000ba  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;120    			switch(PWM_OUTChanneln)
0000be  b136              CBZ      r6,|L1.206|
0000c0  2e01              CMP      r6,#1
0000c2  d00b              BEQ      |L1.220|
0000c4  2e02              CMP      r6,#2
0000c6  d010              BEQ      |L1.234|
0000c8  2e03              CMP      r6,#3
0000ca  d11b              BNE      |L1.260|
0000cc  e013              B        |L1.246|
                  |L1.206|
;;;121    			{
;;;122    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_0;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000ce  48d6              LDR      r0,|L1.1064|
0000d0  900a              STR      r0,[sp,#0x28]
0000d2  2001              MOVS     r0,#1
0000d4  9009              STR      r0,[sp,#0x24]
0000d6  2004              MOVS     r0,#4
0000d8  9008              STR      r0,[sp,#0x20]
;;;123    															break;
0000da  e013              B        |L1.260|
                  |L1.220|
;;;124    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_1;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000dc  48d2              LDR      r0,|L1.1064|
0000de  900a              STR      r0,[sp,#0x28]
0000e0  2002              MOVS     r0,#2
0000e2  9009              STR      r0,[sp,#0x24]
0000e4  2004              MOVS     r0,#4
0000e6  9008              STR      r0,[sp,#0x20]
;;;125    															break;
0000e8  e00c              B        |L1.260|
                  |L1.234|
;;;126    				case PWM_OUTChannel3:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_2;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000ea  48cf              LDR      r0,|L1.1064|
0000ec  900a              STR      r0,[sp,#0x28]
0000ee  2004              MOVS     r0,#4
0000f0  9009              STR      r0,[sp,#0x24]
0000f2  9008              STR      r0,[sp,#0x20]
;;;127    															break;
0000f4  e006              B        |L1.260|
                  |L1.246|
;;;128    				case PWM_OUTChannel4:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_3;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000f6  48cc              LDR      r0,|L1.1064|
0000f8  900a              STR      r0,[sp,#0x28]
0000fa  2008              MOVS     r0,#8
0000fc  9009              STR      r0,[sp,#0x24]
0000fe  2004              MOVS     r0,#4
000100  9008              STR      r0,[sp,#0x20]
;;;129    															break;
000102  bf00              NOP      
                  |L1.260|
000104  bf00              NOP                            ;123
;;;130    			}
;;;131    			break;
000106  e06c              B        |L1.482|
                  |L1.264|
;;;132    		
;;;133    		case TIM3_BASE:
;;;134    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000108  2101              MOVS     r1,#1
00010a  2002              MOVS     r0,#2
00010c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;135    			switch(PWM_OUTChanneln)
000110  b156              CBZ      r6,|L1.296|
000112  2e01              CMP      r6,#1
000114  d00f              BEQ      |L1.310|
000116  2e02              CMP      r6,#2
000118  d014              BEQ      |L1.324|
00011a  2e03              CMP      r6,#3
00011c  d120              BNE      |L1.352|
00011e  e018              B        |L1.338|
                  |L1.288|
000120  e04f              B        |L1.450|
                  |L1.290|
000122  e01f              B        |L1.356|
                  |L1.292|
000124  e05c              B        |L1.480|
                  |L1.294|
000126  e051              B        |L1.460|
                  |L1.296|
;;;136    			{
;;;137    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_6;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000128  48bf              LDR      r0,|L1.1064|
00012a  900a              STR      r0,[sp,#0x28]
00012c  2040              MOVS     r0,#0x40
00012e  9009              STR      r0,[sp,#0x24]
000130  2004              MOVS     r0,#4
000132  9008              STR      r0,[sp,#0x20]
;;;138    															break;
000134  e014              B        |L1.352|
                  |L1.310|
;;;139    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_7;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000136  48bc              LDR      r0,|L1.1064|
000138  900a              STR      r0,[sp,#0x28]
00013a  2080              MOVS     r0,#0x80
00013c  9009              STR      r0,[sp,#0x24]
00013e  2004              MOVS     r0,#4
000140  9008              STR      r0,[sp,#0x20]
;;;140    															break;
000142  e00d              B        |L1.352|
                  |L1.324|
;;;141    				case PWM_OUTChannel3:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_0;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000144  48b9              LDR      r0,|L1.1068|
000146  900a              STR      r0,[sp,#0x28]
000148  2001              MOVS     r0,#1
00014a  9009              STR      r0,[sp,#0x24]
00014c  2008              MOVS     r0,#8
00014e  9008              STR      r0,[sp,#0x20]
;;;142    															break;
000150  e006              B        |L1.352|
                  |L1.338|
;;;143    				case PWM_OUTChannel4:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_1;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000152  48b6              LDR      r0,|L1.1068|
000154  900a              STR      r0,[sp,#0x28]
000156  2002              MOVS     r0,#2
000158  9009              STR      r0,[sp,#0x24]
00015a  2008              MOVS     r0,#8
00015c  9008              STR      r0,[sp,#0x20]
;;;144    															break;
00015e  bf00              NOP      
                  |L1.352|
000160  bf00              NOP                            ;138
;;;145    			}
;;;146    			break;
000162  e03e              B        |L1.482|
                  |L1.356|
;;;147    		
;;;148    		case TIM4_BASE:
;;;149    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000164  2101              MOVS     r1,#1
000166  2004              MOVS     r0,#4
000168  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;150    			switch(PWM_OUTChanneln)
00016c  b136              CBZ      r6,|L1.380|
00016e  2e01              CMP      r6,#1
000170  d00b              BEQ      |L1.394|
000172  2e02              CMP      r6,#2
000174  d010              BEQ      |L1.408|
000176  2e03              CMP      r6,#3
000178  d11c              BNE      |L1.436|
00017a  e014              B        |L1.422|
                  |L1.380|
;;;151    			{
;;;152    				case PWM_OUTChannel1:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_6;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
00017c  48ab              LDR      r0,|L1.1068|
00017e  900a              STR      r0,[sp,#0x28]
000180  2040              MOVS     r0,#0x40
000182  9009              STR      r0,[sp,#0x24]
000184  2008              MOVS     r0,#8
000186  9008              STR      r0,[sp,#0x20]
;;;153    															break;
000188  e014              B        |L1.436|
                  |L1.394|
;;;154    				case PWM_OUTChannel2:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_7;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
00018a  48a8              LDR      r0,|L1.1068|
00018c  900a              STR      r0,[sp,#0x28]
00018e  2080              MOVS     r0,#0x80
000190  9009              STR      r0,[sp,#0x24]
000192  2008              MOVS     r0,#8
000194  9008              STR      r0,[sp,#0x20]
;;;155    															break;
000196  e00d              B        |L1.436|
                  |L1.408|
;;;156    				case PWM_OUTChannel3:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_8;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000198  48a4              LDR      r0,|L1.1068|
00019a  900a              STR      r0,[sp,#0x28]
00019c  1580              ASRS     r0,r0,#22
00019e  9009              STR      r0,[sp,#0x24]
0001a0  2008              MOVS     r0,#8
0001a2  9008              STR      r0,[sp,#0x20]
;;;157    															break;
0001a4  e006              B        |L1.436|
                  |L1.422|
;;;158    				case PWM_OUTChannel4:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_9;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
0001a6  48a1              LDR      r0,|L1.1068|
0001a8  900a              STR      r0,[sp,#0x28]
0001aa  1540              ASRS     r0,r0,#21
0001ac  9009              STR      r0,[sp,#0x24]
0001ae  2008              MOVS     r0,#8
0001b0  9008              STR      r0,[sp,#0x20]
;;;159    															break;
0001b2  bf00              NOP      
                  |L1.436|
0001b4  bf00              NOP                            ;153
;;;160    			}
;;;161    			break;
0001b6  e014              B        |L1.482|
                  |L1.440|
;;;162    		
;;;163    		case TIM5_BASE:
;;;164    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
0001b8  2101              MOVS     r1,#1
0001ba  2008              MOVS     r0,#8
0001bc  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;165    			break;
0001c0  e00f              B        |L1.482|
                  |L1.450|
;;;166    		
;;;167    		case TIM6_BASE:
;;;168    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
0001c2  2101              MOVS     r1,#1
0001c4  2010              MOVS     r0,#0x10
0001c6  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;169    			break;
0001ca  e00a              B        |L1.482|
                  |L1.460|
;;;170    		
;;;171    		case TIM7_BASE:
;;;172    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
0001cc  2101              MOVS     r1,#1
0001ce  2020              MOVS     r0,#0x20
0001d0  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;173    			break;
0001d4  e005              B        |L1.482|
                  |L1.470|
;;;174    		
;;;175    		case TIM8_BASE:
;;;176    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
0001d6  2101              MOVS     r1,#1
0001d8  0348              LSLS     r0,r1,#13
0001da  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;177    			break;
0001de  e000              B        |L1.482|
                  |L1.480|
;;;178    		
;;;179    		default:
;;;180    			break;		
0001e0  bf00              NOP      
                  |L1.482|
0001e2  bf00              NOP                            ;116
;;;181    	}
;;;182    	
;;;183    	
;;;184    	//*4,打开相应的时钟*********************************************************************
;;;185    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);	//使能复用时钟
0001e4  2101              MOVS     r1,#1
0001e6  4608              MOV      r0,r1
0001e8  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;186    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOx, ENABLE);	//使能引脚时钟	
0001ec  2101              MOVS     r1,#1
0001ee  9808              LDR      r0,[sp,#0x20]
0001f0  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;187    	//*5,管脚配置（初始化）*****************************************************************
;;;188    	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_n;
0001f4  9809              LDR      r0,[sp,#0x24]
0001f6  f8ad005c          STRH     r0,[sp,#0x5c]
;;;189    	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
0001fa  2003              MOVS     r0,#3
0001fc  f88d005e          STRB     r0,[sp,#0x5e]
;;;190    	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP ;//复用推挽输出
000200  2018              MOVS     r0,#0x18
000202  f88d005f          STRB     r0,[sp,#0x5f]
;;;191    	GPIO_Init(GPIOx,&GPIO_InitStructure);	
000206  a917              ADD      r1,sp,#0x5c
000208  980a              LDR      r0,[sp,#0x28]
00020a  f7fffffe          BL       GPIO_Init
;;;192    	//*6,获取TIMx时钟**********************************************************************
;;;193    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;194    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;195    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
00020e  a80b              ADD      r0,sp,#0x2c
000210  f7fffffe          BL       RCC_GetClocksFreq
;;;196    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;
000214  980b              LDR      r0,[sp,#0x2c]
000216  9007              STR      r0,[sp,#0x1c]
;;;197    	if (((*(u32*)&TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
000218  4885              LDR      r0,|L1.1072|
00021a  ea0a0000          AND      r0,r10,r0
00021e  4984              LDR      r1,|L1.1072|
000220  4288              CMP      r0,r1
000222  d102              BNE      |L1.554|
;;;198      {
;;;199        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2		//最大72MHz
000224  980e              LDR      r0,[sp,#0x38]
000226  9007              STR      r0,[sp,#0x1c]
000228  e001              B        |L1.558|
                  |L1.554|
;;;200      }
;;;201      else
;;;202      {
;;;203        TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1		//最大36MHz
00022a  980d              LDR      r0,[sp,#0x34]
00022c  9007              STR      r0,[sp,#0x1c]
                  |L1.558|
;;;204      }
;;;205    	//*7,计算定时器参数*********************************************************************
;;;206    	//Fsys==Fpwm*Count==Fpwm*(Prescaler*Period)	
;;;207    	//	TIMx_Prescaler				=	72-1		;		// 	定时器时钟分频值
;;;208    	//	TIMx_Period						=	1000-1	;		// 	定时器自动重装载值
;;;209    	//	Tim_num1							=	0				;		//	临时变量1
;;;210    	if(1/PWM_Frequency>10)	//小于0.1HZ
00022e  463a              MOV      r2,r7
000230  4643              MOV      r3,r8
000232  2000              MOVS     r0,#0
000234  497f              LDR      r1,|L1.1076|
000236  f7fffffe          BL       __aeabi_ddiv
00023a  2200              MOVS     r2,#0
00023c  4b7e              LDR      r3,|L1.1080|
00023e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000242  f7fffffe          BL       __aeabi_cdrcmple
000246  d22d              BCS      |L1.676|
;;;211    	{
;;;212    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency*100);							//根据定时器输出频率计算计数值
000248  2200              MOVS     r2,#0
00024a  4b7c              LDR      r3,|L1.1084|
00024c  4638              MOV      r0,r7
00024e  4641              MOV      r1,r8
000250  f7fffffe          BL       __aeabi_dmul
000254  e9cd0104          STRD     r0,r1,[sp,#0x10]
000258  9807              LDR      r0,[sp,#0x1c]
00025a  f7fffffe          BL       __aeabi_ui2d
00025e  e9cd0102          STRD     r0,r1,[sp,#8]
000262  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000266  f7fffffe          BL       __aeabi_ddiv
00026a  4604              MOV      r4,r0
00026c  460d              MOV      r5,r1
;;;213    		TIMx_Prescaler=60000;
00026e  f64e2060          MOV      r0,#0xea60
000272  9006              STR      r0,[sp,#0x18]
;;;214    		TIMx_Period=(u16)(((double)Tim_num1/(double)TIMx_Prescaler)*200);
000274  9806              LDR      r0,[sp,#0x18]
000276  f7fffffe          BL       __aeabi_ui2d
00027a  4602              MOV      r2,r0
00027c  460b              MOV      r3,r1
00027e  e9cd0100          STRD     r0,r1,[sp,#0]
000282  4620              MOV      r0,r4
000284  4629              MOV      r1,r5
000286  f7fffffe          BL       __aeabi_ddiv
00028a  2200              MOVS     r2,#0
00028c  4b6c              LDR      r3,|L1.1088|
00028e  e9cd0102          STRD     r0,r1,[sp,#8]
000292  f7fffffe          BL       __aeabi_dmul
000296  e9cd0104          STRD     r0,r1,[sp,#0x10]
00029a  f7fffffe          BL       __aeabi_d2uiz
00029e  fa1ffb80          UXTH     r11,r0
0002a2  e0f3              B        |L1.1164|
                  |L1.676|
;;;215    	}
;;;216    	else if(1/PWM_Frequency>1.0)//小于1HZ
0002a4  463a              MOV      r2,r7
0002a6  4643              MOV      r3,r8
0002a8  2000              MOVS     r0,#0
0002aa  4962              LDR      r1,|L1.1076|
0002ac  f7fffffe          BL       __aeabi_ddiv
0002b0  2200              MOVS     r2,#0
0002b2  4b60              LDR      r3,|L1.1076|
0002b4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002b8  f7fffffe          BL       __aeabi_cdrcmple
0002bc  d22d              BCS      |L1.794|
;;;217    	{
;;;218    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency*10);							//根据定时器输出频率计算计数值
0002be  2200              MOVS     r2,#0
0002c0  4b5d              LDR      r3,|L1.1080|
0002c2  4638              MOV      r0,r7
0002c4  4641              MOV      r1,r8
0002c6  f7fffffe          BL       __aeabi_dmul
0002ca  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002ce  9807              LDR      r0,[sp,#0x1c]
0002d0  f7fffffe          BL       __aeabi_ui2d
0002d4  e9cd0102          STRD     r0,r1,[sp,#8]
0002d8  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0002dc  f7fffffe          BL       __aeabi_ddiv
0002e0  4604              MOV      r4,r0
0002e2  460d              MOV      r5,r1
;;;219    		TIMx_Prescaler=60000;
0002e4  f64e2060          MOV      r0,#0xea60
0002e8  9006              STR      r0,[sp,#0x18]
;;;220    		TIMx_Period=(u16)(((double)Tim_num1/(double)TIMx_Prescaler)*20);
0002ea  9806              LDR      r0,[sp,#0x18]
0002ec  f7fffffe          BL       __aeabi_ui2d
0002f0  4602              MOV      r2,r0
0002f2  460b              MOV      r3,r1
0002f4  e9cd0100          STRD     r0,r1,[sp,#0]
0002f8  4620              MOV      r0,r4
0002fa  4629              MOV      r1,r5
0002fc  f7fffffe          BL       __aeabi_ddiv
000300  2200              MOVS     r2,#0
000302  4b50              LDR      r3,|L1.1092|
000304  e9cd0102          STRD     r0,r1,[sp,#8]
000308  f7fffffe          BL       __aeabi_dmul
00030c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000310  f7fffffe          BL       __aeabi_d2uiz
000314  fa1ffb80          UXTH     r11,r0
000318  e0b8              B        |L1.1164|
                  |L1.794|
;;;221    	}
;;;222    	else if(PWM_Frequency>=1.0)//大于等于1HZ
00031a  2200              MOVS     r2,#0
00031c  4b45              LDR      r3,|L1.1076|
00031e  4638              MOV      r0,r7
000320  4641              MOV      r1,r8
000322  f7fffffe          BL       __aeabi_cdrcmple
000326  d82e              BHI      |L1.902|
;;;223    	{
;;;224    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency);							//根据定时器输出频率计算计数值
000328  9807              LDR      r0,[sp,#0x1c]
00032a  f7fffffe          BL       __aeabi_ui2d
00032e  463a              MOV      r2,r7
000330  4643              MOV      r3,r8
000332  e9cd0104          STRD     r0,r1,[sp,#0x10]
000336  f7fffffe          BL       __aeabi_ddiv
00033a  4604              MOV      r4,r0
00033c  460d              MOV      r5,r1
;;;225    		Tim_num1=(double)(Tim_num1*2.0);
00033e  2200              MOVS     r2,#0
000340  f04f4380          MOV      r3,#0x40000000
000344  4620              MOV      r0,r4
000346  4629              MOV      r1,r5
000348  f7fffffe          BL       __aeabi_dmul
00034c  4604              MOV      r4,r0
00034e  460d              MOV      r5,r1
;;;226    		if(Tim_num1>=10000000)
000350  2200              MOVS     r2,#0
000352  4b3d              LDR      r3,|L1.1096|
000354  4620              MOV      r0,r4
000356  4629              MOV      r1,r5
000358  f7fffffe          BL       __aeabi_cdrcmple
00035c  d814              BHI      |L1.904|
;;;227    		{
;;;228    			TIMx_Prescaler=2000;
00035e  f44f60fa          MOV      r0,#0x7d0
000362  9006              STR      r0,[sp,#0x18]
;;;229    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000364  9806              LDR      r0,[sp,#0x18]
000366  f7fffffe          BL       __aeabi_ui2d
00036a  4602              MOV      r2,r0
00036c  460b              MOV      r3,r1
00036e  e9cd0102          STRD     r0,r1,[sp,#8]
000372  4620              MOV      r0,r4
000374  4629              MOV      r1,r5
000376  f7fffffe          BL       __aeabi_ddiv
00037a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00037e  f7fffffe          BL       __aeabi_d2uiz
000382  fa1ffb80          UXTH     r11,r0
                  |L1.902|
000386  e081              B        |L1.1164|
                  |L1.904|
;;;230    		}
;;;231    		else if(Tim_num1>=1000000)
000388  2200              MOVS     r2,#0
00038a  4b30              LDR      r3,|L1.1100|
00038c  4620              MOV      r0,r4
00038e  4629              MOV      r1,r5
000390  f7fffffe          BL       __aeabi_cdrcmple
000394  d813              BHI      |L1.958|
;;;232    		{
;;;233    			TIMx_Prescaler=200;
000396  20c8              MOVS     r0,#0xc8
000398  9006              STR      r0,[sp,#0x18]
;;;234    			TIMx_Period=Tim_num1/TIMx_Prescaler;
00039a  9806              LDR      r0,[sp,#0x18]
00039c  f7fffffe          BL       __aeabi_ui2d
0003a0  4602              MOV      r2,r0
0003a2  460b              MOV      r3,r1
0003a4  e9cd0102          STRD     r0,r1,[sp,#8]
0003a8  4620              MOV      r0,r4
0003aa  4629              MOV      r1,r5
0003ac  f7fffffe          BL       __aeabi_ddiv
0003b0  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003b4  f7fffffe          BL       __aeabi_d2uiz
0003b8  fa1ffb80          UXTH     r11,r0
0003bc  e066              B        |L1.1164|
                  |L1.958|
;;;235    		}
;;;236    		else if(Tim_num1>=100000)
0003be  2200              MOVS     r2,#0
0003c0  4b23              LDR      r3,|L1.1104|
0003c2  4620              MOV      r0,r4
0003c4  4629              MOV      r1,r5
0003c6  f7fffffe          BL       __aeabi_cdrcmple
0003ca  d813              BHI      |L1.1012|
;;;237    		{
;;;238    			TIMx_Prescaler=20;
0003cc  2014              MOVS     r0,#0x14
0003ce  9006              STR      r0,[sp,#0x18]
;;;239    			TIMx_Period=Tim_num1/TIMx_Prescaler;
0003d0  9806              LDR      r0,[sp,#0x18]
0003d2  f7fffffe          BL       __aeabi_ui2d
0003d6  4602              MOV      r2,r0
0003d8  460b              MOV      r3,r1
0003da  e9cd0102          STRD     r0,r1,[sp,#8]
0003de  4620              MOV      r0,r4
0003e0  4629              MOV      r1,r5
0003e2  f7fffffe          BL       __aeabi_ddiv
0003e6  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003ea  f7fffffe          BL       __aeabi_d2uiz
0003ee  fa1ffb80          UXTH     r11,r0
0003f2  e04b              B        |L1.1164|
                  |L1.1012|
;;;240    		}
;;;241    		else if(Tim_num1>=65530)
0003f4  2200              MOVS     r2,#0
0003f6  4b17              LDR      r3,|L1.1108|
0003f8  4620              MOV      r0,r4
0003fa  4629              MOV      r1,r5
0003fc  f7fffffe          BL       __aeabi_cdrcmple
000400  d831              BHI      |L1.1126|
;;;242    		{
;;;243    			TIMx_Prescaler=2;
000402  2002              MOVS     r0,#2
000404  9006              STR      r0,[sp,#0x18]
;;;244    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000406  9806              LDR      r0,[sp,#0x18]
000408  f7fffffe          BL       __aeabi_ui2d
00040c  4602              MOV      r2,r0
00040e  460b              MOV      r3,r1
000410  e9cd0102          STRD     r0,r1,[sp,#8]
000414  4620              MOV      r0,r4
000416  4629              MOV      r1,r5
000418  f7fffffe          BL       __aeabi_ddiv
00041c  e01c              B        |L1.1112|
00041e  0000              DCW      0x0000
                  |L1.1056|
                          DCD      0x40001000
                  |L1.1060|
                          DCD      0xbffffc00
                  |L1.1064|
                          DCD      0x40010800
                  |L1.1068|
                          DCD      0x40010c00
                  |L1.1072|
                          DCD      0x40010000
                  |L1.1076|
                          DCD      0x3ff00000
                  |L1.1080|
                          DCD      0x40240000
                  |L1.1084|
                          DCD      0x40590000
                  |L1.1088|
                          DCD      0x40690000
                  |L1.1092|
                          DCD      0x40340000
                  |L1.1096|
                          DCD      0x416312d0
                  |L1.1100|
                          DCD      0x412e8480
                  |L1.1104|
                          DCD      0x40f86a00
                  |L1.1108|
                          DCD      0x40efff40
                  |L1.1112|
000458  e9cd0104          STRD     r0,r1,[sp,#0x10]
00045c  f7fffffe          BL       __aeabi_d2uiz
000460  fa1ffb80          UXTH     r11,r0
000464  e012              B        |L1.1164|
                  |L1.1126|
;;;245    		}
;;;246    		else
;;;247    		{
;;;248    			TIMx_Prescaler=1;
000466  2001              MOVS     r0,#1
000468  9006              STR      r0,[sp,#0x18]
;;;249    			TIMx_Period=Tim_num1/TIMx_Prescaler;
00046a  9806              LDR      r0,[sp,#0x18]
00046c  f7fffffe          BL       __aeabi_ui2d
000470  4602              MOV      r2,r0
000472  460b              MOV      r3,r1
000474  e9cd0102          STRD     r0,r1,[sp,#8]
000478  4620              MOV      r0,r4
00047a  4629              MOV      r1,r5
00047c  f7fffffe          BL       __aeabi_ddiv
000480  e9cd0104          STRD     r0,r1,[sp,#0x10]
000484  f7fffffe          BL       __aeabi_d2uiz
000488  fa1ffb80          UXTH     r11,r0
                  |L1.1164|
;;;250    		}
;;;251    	}	
;;;252    	//8)**********定时器初始化
;;;253    	TIM_TimeBaseStructure.TIM_Prescaler = TIMx_Prescaler-1; 				//设定分频值
00048c  9806              LDR      r0,[sp,#0x18]
00048e  1e40              SUBS     r0,r0,#1
000490  b280              UXTH     r0,r0
000492  f8ad0050          STRH     r0,[sp,#0x50]
;;;254    	TIM_TimeBaseStructure.TIM_Period 		= TIMx_Period-1;        		//设定自动重装载值
000496  f1ab0001          SUB      r0,r11,#1
00049a  b280              UXTH     r0,r0
00049c  f8ad0054          STRH     r0,[sp,#0x54]
;;;255    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  				//不分割
0004a0  2000              MOVS     r0,#0
0004a2  f8ad0056          STRH     r0,[sp,#0x56]
;;;256    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  		//向上计数
0004a6  f8ad0052          STRH     r0,[sp,#0x52]
;;;257    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化	
0004aa  a914              ADD      r1,sp,#0x50
0004ac  4650              MOV      r0,r10
0004ae  f7fffffe          BL       TIM_TimeBaseInit
;;;258    	//9）定时器配置（初始化*******************************************************************
;;;259    	if((TIMx_Period*(u32)PWM_Ratio)>1000)
0004b2  fb0bf009          MUL      r0,r11,r9
0004b6  f5b07f7a          CMP      r0,#0x3e8
0004ba  d908              BLS      |L1.1230|
;;;260    		PWM_Ratio=(u16)((u32)(TIMx_Period*PWM_Ratio)/1000);
0004bc  fb0bf009          MUL      r0,r11,r9
0004c0  f44f717a          MOV      r1,#0x3e8
0004c4  fbb0f0f1          UDIV     r0,r0,r1
0004c8  fa1ff980          UXTH     r9,r0
0004cc  e004              B        |L1.1240|
                  |L1.1230|
;;;261    	else if(PWM_Ratio!=0)
0004ce  f1b90f00          CMP      r9,#0
0004d2  d001              BEQ      |L1.1240|
;;;262    		PWM_Ratio=1;
0004d4  f04f0901          MOV      r9,#1
                  |L1.1240|
;;;263    		
;;;264    	TIMOCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 								//选择定时器模式:TIM脉冲宽度调制模式1
0004d8  2060              MOVS     r0,#0x60
0004da  f8ad0040          STRH     r0,[sp,#0x40]
;;;265    	TIMOCInitStructure.TIM_Pulse =(u16)PWM_Ratio;										//占空比=(CCRx/ARR)*1000%
0004de  f8ad9046          STRH     r9,[sp,#0x46]
;;;266    	TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;				//输出极性:TIM输出比较极性高
0004e2  2000              MOVS     r0,#0
0004e4  f8ad0048          STRH     r0,[sp,#0x48]
;;;267    	TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;		//比较输出使能
0004e8  2001              MOVS     r0,#1
0004ea  f8ad0042          STRH     r0,[sp,#0x42]
;;;268    	//10）定时器配置（初始化*******************************************************************
;;;269    	switch(PWM_OUTChanneln)
0004ee  b136              CBZ      r6,|L1.1278|
0004f0  2e01              CMP      r6,#1
0004f2  d009              BEQ      |L1.1288|
0004f4  2e02              CMP      r6,#2
0004f6  d00c              BEQ      |L1.1298|
0004f8  2e03              CMP      r6,#3
0004fa  d114              BNE      |L1.1318|
0004fc  e00e              B        |L1.1308|
                  |L1.1278|
;;;270    	{
;;;271    		case PWM_OUTChannel1:	TIM_OC1Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
0004fe  a910              ADD      r1,sp,#0x40
000500  4650              MOV      r0,r10
000502  f7fffffe          BL       TIM_OC1Init
;;;272    		break;
000506  e00f              B        |L1.1320|
                  |L1.1288|
;;;273    		case PWM_OUTChannel2:	TIM_OC2Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
000508  a910              ADD      r1,sp,#0x40
00050a  4650              MOV      r0,r10
00050c  f7fffffe          BL       TIM_OC2Init
;;;274    		break;
000510  e00a              B        |L1.1320|
                  |L1.1298|
;;;275    		case PWM_OUTChannel3:	TIM_OC3Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
000512  a910              ADD      r1,sp,#0x40
000514  4650              MOV      r0,r10
000516  f7fffffe          BL       TIM_OC3Init
;;;276    		break;
00051a  e005              B        |L1.1320|
                  |L1.1308|
;;;277    		case PWM_OUTChannel4:	TIM_OC4Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
00051c  a910              ADD      r1,sp,#0x40
00051e  4650              MOV      r0,r10
000520  f7fffffe          BL       TIM_OC4Init
;;;278    		break;
000524  e000              B        |L1.1320|
                  |L1.1318|
;;;279    		default:
;;;280    		break;
000526  bf00              NOP      
                  |L1.1320|
000528  bf00              NOP                            ;272
;;;281    	}	
;;;282    	TIM_CtrlPWMOutputs(TIMx,ENABLE);																//设置TIM2的PWM输出使能
00052a  2101              MOVS     r1,#1
00052c  4650              MOV      r0,r10
00052e  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;283    	//11）定时器配置（初始化*******************************************************************
;;;284    	switch(PWM_OUTChanneln)			//使能TIM在CCR上的预装载寄存器
000532  b136              CBZ      r6,|L1.1346|
000534  2e01              CMP      r6,#1
000536  d009              BEQ      |L1.1356|
000538  2e02              CMP      r6,#2
00053a  d00c              BEQ      |L1.1366|
00053c  2e03              CMP      r6,#3
00053e  d114              BNE      |L1.1386|
000540  e00e              B        |L1.1376|
                  |L1.1346|
;;;285    	{
;;;286    		case PWM_OUTChannel1:	TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
000542  2108              MOVS     r1,#8
000544  4650              MOV      r0,r10
000546  f7fffffe          BL       TIM_OC1PreloadConfig
;;;287    				break;
00054a  e00e              B        |L1.1386|
                  |L1.1356|
;;;288    		case PWM_OUTChannel2:	TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
00054c  2108              MOVS     r1,#8
00054e  4650              MOV      r0,r10
000550  f7fffffe          BL       TIM_OC2PreloadConfig
;;;289    				break;
000554  e009              B        |L1.1386|
                  |L1.1366|
;;;290    		case PWM_OUTChannel3:	TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
000556  2108              MOVS     r1,#8
000558  4650              MOV      r0,r10
00055a  f7fffffe          BL       TIM_OC3PreloadConfig
;;;291    				break;
00055e  e004              B        |L1.1386|
                  |L1.1376|
;;;292    		case PWM_OUTChannel4:	TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
000560  2108              MOVS     r1,#8
000562  4650              MOV      r0,r10
000564  f7fffffe          BL       TIM_OC4PreloadConfig
;;;293    				break;
000568  bf00              NOP      
                  |L1.1386|
00056a  bf00              NOP                            ;287
;;;294    	}	
;;;295    	
;;;296    	TIM_ARRPreloadConfig(TIMx, ENABLE);			//ARPE使能 
00056c  2101              MOVS     r1,#1
00056e  4650              MOV      r0,r10
000570  f7fffffe          BL       TIM_ARRPreloadConfig
;;;297    	
;;;298    	TIM_Cmd(TIMx, ENABLE); 									//使能TIM
000574  2101              MOVS     r1,#1
000576  4650              MOV      r0,r10
000578  f7fffffe          BL       TIM_Cmd
;;;299    }
00057c  b019              ADD      sp,sp,#0x64
00057e  e8bd8ff0          POP      {r4-r11,pc}
;;;300    /*******************************************************************************
                          ENDP


                          AREA ||i.PWM_OUT2||, CODE, READONLY, ALIGN=2

                  PWM_OUT2 PROC
;;;546    *******************************************************************************/
;;;547    void PWM_OUT2			//PWM输出配置
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;548    (
;;;549    	TIM_TypeDef* TIMx,											//所使用的定时器
;;;550    	PWM_OUTChannelTypeDef PWM_OUTChanneln,	//PWM输出通道号
;;;551    	double PWM_Frequency,										//输出频率，最小频率0.02Hz		
;;;552    	u16 PWM_Ratio														//输出占空比，分辨率1/1000
;;;553    )
;;;554    {
000004  b099              SUB      sp,sp,#0x64
000006  4682              MOV      r10,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  f8dd9088          LDR      r9,[sp,#0x88]
;;;555    	//*1,结构体定义
;;;556    	//*2,变量定义
;;;557    	//*3,管脚确认
;;;558    	//*4,打开相应的时钟
;;;559    	//*5,管脚配置（初始化）
;;;560    	//*6,定时器配置（初始化）
;;;561    	//*7,PWM输出配置（初始化）
;;;562    	//*8,占空比配置	
;;;563    	
;;;564    	//*1,结构体定义***********************************************************************
;;;565    	GPIO_InitTypeDef GPIO_InitStructure;
;;;566    	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义
;;;567    	TIM_OCInitTypeDef TIMOCInitStructure;
;;;568    	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值	
;;;569    	//*2,变量定义*************************************************************************	
;;;570    	GPIO_TypeDef* GPIOx				=	0;			//x=A/B/C/D/E/F/G
000012  2000              MOVS     r0,#0
000014  900a              STR      r0,[sp,#0x28]
;;;571    	u16 GPIO_Pin_n						=	0xFF;		//n=0~15;
000016  20ff              MOVS     r0,#0xff
000018  9009              STR      r0,[sp,#0x24]
;;;572    	u32 RCC_APB2Periph_GPIOx	=	0x00;		//x=A/B/C/D/E/F/G	
00001a  2000              MOVS     r0,#0
00001c  9008              STR      r0,[sp,#0x20]
;;;573    	u32	TIMx_Frequency=0;								//	定时器时钟
00001e  9007              STR      r0,[sp,#0x1c]
;;;574    	u16 TIMx_Prescaler				=	0	;			//	定时器时钟分频值		取值范围：0x0000~0xFFFF
000020  9006              STR      r0,[sp,#0x18]
;;;575      u16 TIMx_Period						=	0	;			//	定时器自动重装载值	取值范围：0x0000~0xFFFF
000022  4683              MOV      r11,r0
;;;576    //	u32	Microsecond						=	0	;		//	微秒
;;;577    //	u32	Nanosecond						=	0	;		//	纳秒
;;;578    	double	Tim_num1					=	0	;			//	临时变量1
000024  bf00              NOP      
;;;579    //	u8	Tim_flg								=	0	;			//	临时变量2
;;;580    	//*3,管脚配置--根据输入参数选择相应的GPIO************************************************
;;;581    	switch (*(u32*)&TIMx)
000026  49fe              LDR      r1,|L2.1056|
000028  ebaa0001          SUB      r0,r10,r1
00002c  458a              CMP      r10,r1
00002e  d077              BEQ      |L2.288|
000030  dc0d              BGT      |L2.78|
000032  f1ba4f80          CMP      r10,#0x40000000
000036  d03e              BEQ      |L2.182|
000038  48fa              LDR      r0,|L2.1060|
00003a  4450              ADD      r0,r0,r10
00003c  2800              CMP      r0,#0
00003e  d063              BEQ      |L2.264|
000040  f5b06f80          CMP      r0,#0x400
000044  d06d              BEQ      |L2.290|
000046  f5b06f00          CMP      r0,#0x800
                  |L2.74|
00004a  d16b              BNE      |L2.292|
00004c  e0b4              B        |L2.440|
                  |L2.78|
00004e  f5b06f80          CMP      r0,#0x400
000052  d068              BEQ      |L2.294|
000054  f5b03f8e          CMP      r0,#0x11c00
000058  d003              BEQ      |L2.98|
00005a  f5b03f92          CMP      r0,#0x12400
00005e  d1f4              BNE      |L2.74|
000060  e0b9              B        |L2.470|
                  |L2.98|
;;;582    	{
;;;583    		case TIM1_BASE:
;;;584    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
000062  2101              MOVS     r1,#1
000064  02c8              LSLS     r0,r1,#11
000066  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;585    			switch(PWM_OUTChanneln)
00006a  b136              CBZ      r6,|L2.122|
00006c  2e01              CMP      r6,#1
00006e  d00b              BEQ      |L2.136|
000070  2e02              CMP      r6,#2
000072  d010              BEQ      |L2.150|
000074  2e03              CMP      r6,#3
000076  d11c              BNE      |L2.178|
000078  e014              B        |L2.164|
                  |L2.122|
;;;586    			{
;;;587    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_8;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;	
00007a  48eb              LDR      r0,|L2.1064|
00007c  900a              STR      r0,[sp,#0x28]
00007e  1580              ASRS     r0,r0,#22
000080  9009              STR      r0,[sp,#0x24]
000082  2004              MOVS     r0,#4
000084  9008              STR      r0,[sp,#0x20]
;;;588    															break;
000086  e014              B        |L2.178|
                  |L2.136|
;;;589    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_9;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000088  48e7              LDR      r0,|L2.1064|
00008a  900a              STR      r0,[sp,#0x28]
00008c  1540              ASRS     r0,r0,#21
00008e  9009              STR      r0,[sp,#0x24]
000090  2004              MOVS     r0,#4
000092  9008              STR      r0,[sp,#0x20]
;;;590    															break;
000094  e00d              B        |L2.178|
                  |L2.150|
;;;591    				case PWM_OUTChannel3:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_10;	RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000096  48e4              LDR      r0,|L2.1064|
000098  900a              STR      r0,[sp,#0x28]
00009a  1500              ASRS     r0,r0,#20
00009c  9009              STR      r0,[sp,#0x24]
00009e  2004              MOVS     r0,#4
0000a0  9008              STR      r0,[sp,#0x20]
;;;592    															break;
0000a2  e006              B        |L2.178|
                  |L2.164|
;;;593    				case PWM_OUTChannel4:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_11;	RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000a4  48e0              LDR      r0,|L2.1064|
0000a6  900a              STR      r0,[sp,#0x28]
0000a8  14c0              ASRS     r0,r0,#19
0000aa  9009              STR      r0,[sp,#0x24]
0000ac  2004              MOVS     r0,#4
0000ae  9008              STR      r0,[sp,#0x20]
;;;594    															break;
0000b0  bf00              NOP      
                  |L2.178|
0000b2  bf00              NOP                            ;588
;;;595    			}
;;;596    			break;
0000b4  e095              B        |L2.482|
                  |L2.182|
;;;597    		
;;;598    		case TIM2_BASE:
;;;599    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
0000b6  2101              MOVS     r1,#1
0000b8  4608              MOV      r0,r1
0000ba  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;600    			switch(PWM_OUTChanneln)
0000be  b136              CBZ      r6,|L2.206|
0000c0  2e01              CMP      r6,#1
0000c2  d00b              BEQ      |L2.220|
0000c4  2e02              CMP      r6,#2
0000c6  d010              BEQ      |L2.234|
0000c8  2e03              CMP      r6,#3
0000ca  d11b              BNE      |L2.260|
0000cc  e013              B        |L2.246|
                  |L2.206|
;;;601    			{
;;;602    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_0;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000ce  48d6              LDR      r0,|L2.1064|
0000d0  900a              STR      r0,[sp,#0x28]
0000d2  2001              MOVS     r0,#1
0000d4  9009              STR      r0,[sp,#0x24]
0000d6  2004              MOVS     r0,#4
0000d8  9008              STR      r0,[sp,#0x20]
;;;603    															break;
0000da  e013              B        |L2.260|
                  |L2.220|
;;;604    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_1;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000dc  48d2              LDR      r0,|L2.1064|
0000de  900a              STR      r0,[sp,#0x28]
0000e0  2002              MOVS     r0,#2
0000e2  9009              STR      r0,[sp,#0x24]
0000e4  2004              MOVS     r0,#4
0000e6  9008              STR      r0,[sp,#0x20]
;;;605    															break;
0000e8  e00c              B        |L2.260|
                  |L2.234|
;;;606    				case PWM_OUTChannel3:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_2;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000ea  48cf              LDR      r0,|L2.1064|
0000ec  900a              STR      r0,[sp,#0x28]
0000ee  2004              MOVS     r0,#4
0000f0  9009              STR      r0,[sp,#0x24]
0000f2  9008              STR      r0,[sp,#0x20]
;;;607    															break;
0000f4  e006              B        |L2.260|
                  |L2.246|
;;;608    				case PWM_OUTChannel4:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_3;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000f6  48cc              LDR      r0,|L2.1064|
0000f8  900a              STR      r0,[sp,#0x28]
0000fa  2008              MOVS     r0,#8
0000fc  9009              STR      r0,[sp,#0x24]
0000fe  2004              MOVS     r0,#4
000100  9008              STR      r0,[sp,#0x20]
;;;609    															break;
000102  bf00              NOP      
                  |L2.260|
000104  bf00              NOP                            ;603
;;;610    			}
;;;611    			break;
000106  e06c              B        |L2.482|
                  |L2.264|
;;;612    		
;;;613    		case TIM3_BASE:
;;;614    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000108  2101              MOVS     r1,#1
00010a  2002              MOVS     r0,#2
00010c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;615    			switch(PWM_OUTChanneln)
000110  b156              CBZ      r6,|L2.296|
000112  2e01              CMP      r6,#1
000114  d00f              BEQ      |L2.310|
000116  2e02              CMP      r6,#2
000118  d014              BEQ      |L2.324|
00011a  2e03              CMP      r6,#3
00011c  d120              BNE      |L2.352|
00011e  e018              B        |L2.338|
                  |L2.288|
000120  e04f              B        |L2.450|
                  |L2.290|
000122  e01f              B        |L2.356|
                  |L2.292|
000124  e05c              B        |L2.480|
                  |L2.294|
000126  e051              B        |L2.460|
                  |L2.296|
;;;616    			{
;;;617    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_6;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000128  48bf              LDR      r0,|L2.1064|
00012a  900a              STR      r0,[sp,#0x28]
00012c  2040              MOVS     r0,#0x40
00012e  9009              STR      r0,[sp,#0x24]
000130  2004              MOVS     r0,#4
000132  9008              STR      r0,[sp,#0x20]
;;;618    															break;
000134  e014              B        |L2.352|
                  |L2.310|
;;;619    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_7;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000136  48bc              LDR      r0,|L2.1064|
000138  900a              STR      r0,[sp,#0x28]
00013a  2080              MOVS     r0,#0x80
00013c  9009              STR      r0,[sp,#0x24]
00013e  2004              MOVS     r0,#4
000140  9008              STR      r0,[sp,#0x20]
;;;620    															break;
000142  e00d              B        |L2.352|
                  |L2.324|
;;;621    				case PWM_OUTChannel3:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_0;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000144  48b9              LDR      r0,|L2.1068|
000146  900a              STR      r0,[sp,#0x28]
000148  2001              MOVS     r0,#1
00014a  9009              STR      r0,[sp,#0x24]
00014c  2008              MOVS     r0,#8
00014e  9008              STR      r0,[sp,#0x20]
;;;622    															break;
000150  e006              B        |L2.352|
                  |L2.338|
;;;623    				case PWM_OUTChannel4:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_1;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000152  48b6              LDR      r0,|L2.1068|
000154  900a              STR      r0,[sp,#0x28]
000156  2002              MOVS     r0,#2
000158  9009              STR      r0,[sp,#0x24]
00015a  2008              MOVS     r0,#8
00015c  9008              STR      r0,[sp,#0x20]
;;;624    															break;
00015e  bf00              NOP      
                  |L2.352|
000160  bf00              NOP                            ;618
;;;625    			}
;;;626    			break;
000162  e03e              B        |L2.482|
                  |L2.356|
;;;627    		
;;;628    		case TIM4_BASE:
;;;629    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000164  2101              MOVS     r1,#1
000166  2004              MOVS     r0,#4
000168  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;630    			switch(PWM_OUTChanneln)
00016c  b136              CBZ      r6,|L2.380|
00016e  2e01              CMP      r6,#1
000170  d00b              BEQ      |L2.394|
000172  2e02              CMP      r6,#2
000174  d010              BEQ      |L2.408|
000176  2e03              CMP      r6,#3
000178  d11c              BNE      |L2.436|
00017a  e014              B        |L2.422|
                  |L2.380|
;;;631    			{
;;;632    				case PWM_OUTChannel1:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_6;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
00017c  48ab              LDR      r0,|L2.1068|
00017e  900a              STR      r0,[sp,#0x28]
000180  2040              MOVS     r0,#0x40
000182  9009              STR      r0,[sp,#0x24]
000184  2008              MOVS     r0,#8
000186  9008              STR      r0,[sp,#0x20]
;;;633    															break;
000188  e014              B        |L2.436|
                  |L2.394|
;;;634    				case PWM_OUTChannel2:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_7;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
00018a  48a8              LDR      r0,|L2.1068|
00018c  900a              STR      r0,[sp,#0x28]
00018e  2080              MOVS     r0,#0x80
000190  9009              STR      r0,[sp,#0x24]
000192  2008              MOVS     r0,#8
000194  9008              STR      r0,[sp,#0x20]
;;;635    															break;
000196  e00d              B        |L2.436|
                  |L2.408|
;;;636    				case PWM_OUTChannel3:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_8;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000198  48a4              LDR      r0,|L2.1068|
00019a  900a              STR      r0,[sp,#0x28]
00019c  1580              ASRS     r0,r0,#22
00019e  9009              STR      r0,[sp,#0x24]
0001a0  2008              MOVS     r0,#8
0001a2  9008              STR      r0,[sp,#0x20]
;;;637    															break;
0001a4  e006              B        |L2.436|
                  |L2.422|
;;;638    				case PWM_OUTChannel4:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_9;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
0001a6  48a1              LDR      r0,|L2.1068|
0001a8  900a              STR      r0,[sp,#0x28]
0001aa  1540              ASRS     r0,r0,#21
0001ac  9009              STR      r0,[sp,#0x24]
0001ae  2008              MOVS     r0,#8
0001b0  9008              STR      r0,[sp,#0x20]
;;;639    															break;
0001b2  bf00              NOP      
                  |L2.436|
0001b4  bf00              NOP                            ;633
;;;640    			}
;;;641    			break;
0001b6  e014              B        |L2.482|
                  |L2.440|
;;;642    		
;;;643    		case TIM5_BASE:
;;;644    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
0001b8  2101              MOVS     r1,#1
0001ba  2008              MOVS     r0,#8
0001bc  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;645    			break;
0001c0  e00f              B        |L2.482|
                  |L2.450|
;;;646    		
;;;647    		case TIM6_BASE:
;;;648    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
0001c2  2101              MOVS     r1,#1
0001c4  2010              MOVS     r0,#0x10
0001c6  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;649    			break;
0001ca  e00a              B        |L2.482|
                  |L2.460|
;;;650    		
;;;651    		case TIM7_BASE:
;;;652    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
0001cc  2101              MOVS     r1,#1
0001ce  2020              MOVS     r0,#0x20
0001d0  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;653    			break;
0001d4  e005              B        |L2.482|
                  |L2.470|
;;;654    		
;;;655    		case TIM8_BASE:
;;;656    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
0001d6  2101              MOVS     r1,#1
0001d8  0348              LSLS     r0,r1,#13
0001da  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;657    			break;
0001de  e000              B        |L2.482|
                  |L2.480|
;;;658    		
;;;659    		default:
;;;660    			break;		
0001e0  bf00              NOP      
                  |L2.482|
0001e2  bf00              NOP                            ;596
;;;661    	}
;;;662    	
;;;663    	
;;;664    	//*4,打开相应的时钟*********************************************************************
;;;665    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);	//使能复用时钟
0001e4  2101              MOVS     r1,#1
0001e6  4608              MOV      r0,r1
0001e8  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;666    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOx, ENABLE);	//使能引脚时钟	
0001ec  2101              MOVS     r1,#1
0001ee  9808              LDR      r0,[sp,#0x20]
0001f0  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;667    	//*5,管脚配置（初始化）*****************************************************************
;;;668    	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_n;
0001f4  9809              LDR      r0,[sp,#0x24]
0001f6  f8ad005c          STRH     r0,[sp,#0x5c]
;;;669    	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
0001fa  2003              MOVS     r0,#3
0001fc  f88d005e          STRB     r0,[sp,#0x5e]
;;;670    	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP ;//复用推挽输出
000200  2018              MOVS     r0,#0x18
000202  f88d005f          STRB     r0,[sp,#0x5f]
;;;671    	GPIO_Init(GPIOx,&GPIO_InitStructure);	
000206  a917              ADD      r1,sp,#0x5c
000208  980a              LDR      r0,[sp,#0x28]
00020a  f7fffffe          BL       GPIO_Init
;;;672    	//*6,获取TIMx时钟**********************************************************************
;;;673    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;674    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;675    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
00020e  a80b              ADD      r0,sp,#0x2c
000210  f7fffffe          BL       RCC_GetClocksFreq
;;;676    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;;
000214  980b              LDR      r0,[sp,#0x2c]
000216  9007              STR      r0,[sp,#0x1c]
;;;677    	if (((*(u32*)&TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
000218  4885              LDR      r0,|L2.1072|
00021a  ea0a0000          AND      r0,r10,r0
00021e  4984              LDR      r1,|L2.1072|
000220  4288              CMP      r0,r1
000222  d102              BNE      |L2.554|
;;;678      {
;;;679        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2
000224  980e              LDR      r0,[sp,#0x38]
000226  9007              STR      r0,[sp,#0x1c]
000228  e001              B        |L2.558|
                  |L2.554|
;;;680      }
;;;681      else
;;;682      {
;;;683        TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1
00022a  980d              LDR      r0,[sp,#0x34]
00022c  9007              STR      r0,[sp,#0x1c]
                  |L2.558|
;;;684      }
;;;685    	//*7,计算定时器参数*********************************************************************
;;;686    	//Fsys==Fpwm*Count==Fpwm*(Prescaler*Period)	
;;;687    	//	TIMx_Prescaler				=	72-1		;		// 	定时器时钟分频值
;;;688    	//	TIMx_Period						=	1000-1	;		// 	定时器自动重装载值
;;;689    	//	Tim_num1							=	0				;		//	临时变量1
;;;690    	if(1/PWM_Frequency>10)
00022e  463a              MOV      r2,r7
000230  4643              MOV      r3,r8
000232  2000              MOVS     r0,#0
000234  497f              LDR      r1,|L2.1076|
000236  f7fffffe          BL       __aeabi_ddiv
00023a  2200              MOVS     r2,#0
00023c  4b7e              LDR      r3,|L2.1080|
00023e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000242  f7fffffe          BL       __aeabi_cdrcmple
000246  d22d              BCS      |L2.676|
;;;691    	{
;;;692    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency*100);							//根据定时器输出频率计算计数值
000248  2200              MOVS     r2,#0
00024a  4b7c              LDR      r3,|L2.1084|
00024c  4638              MOV      r0,r7
00024e  4641              MOV      r1,r8
000250  f7fffffe          BL       __aeabi_dmul
000254  e9cd0104          STRD     r0,r1,[sp,#0x10]
000258  9807              LDR      r0,[sp,#0x1c]
00025a  f7fffffe          BL       __aeabi_ui2d
00025e  e9cd0102          STRD     r0,r1,[sp,#8]
000262  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000266  f7fffffe          BL       __aeabi_ddiv
00026a  4604              MOV      r4,r0
00026c  460d              MOV      r5,r1
;;;693    		TIMx_Prescaler=60000;
00026e  f64e2060          MOV      r0,#0xea60
000272  9006              STR      r0,[sp,#0x18]
;;;694    		TIMx_Period=(u16)(((double)Tim_num1/(double)TIMx_Prescaler)*200);
000274  9806              LDR      r0,[sp,#0x18]
000276  f7fffffe          BL       __aeabi_ui2d
00027a  4602              MOV      r2,r0
00027c  460b              MOV      r3,r1
00027e  e9cd0100          STRD     r0,r1,[sp,#0]
000282  4620              MOV      r0,r4
000284  4629              MOV      r1,r5
000286  f7fffffe          BL       __aeabi_ddiv
00028a  2200              MOVS     r2,#0
00028c  4b6c              LDR      r3,|L2.1088|
00028e  e9cd0102          STRD     r0,r1,[sp,#8]
000292  f7fffffe          BL       __aeabi_dmul
000296  e9cd0104          STRD     r0,r1,[sp,#0x10]
00029a  f7fffffe          BL       __aeabi_d2uiz
00029e  fa1ffb80          UXTH     r11,r0
0002a2  e0f3              B        |L2.1164|
                  |L2.676|
;;;695    	}
;;;696    	else if(1/PWM_Frequency>1.0)
0002a4  463a              MOV      r2,r7
0002a6  4643              MOV      r3,r8
0002a8  2000              MOVS     r0,#0
0002aa  4962              LDR      r1,|L2.1076|
0002ac  f7fffffe          BL       __aeabi_ddiv
0002b0  2200              MOVS     r2,#0
0002b2  4b60              LDR      r3,|L2.1076|
0002b4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002b8  f7fffffe          BL       __aeabi_cdrcmple
0002bc  d22d              BCS      |L2.794|
;;;697    	{
;;;698    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency*10);							//根据定时器输出频率计算计数值
0002be  2200              MOVS     r2,#0
0002c0  4b5d              LDR      r3,|L2.1080|
0002c2  4638              MOV      r0,r7
0002c4  4641              MOV      r1,r8
0002c6  f7fffffe          BL       __aeabi_dmul
0002ca  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002ce  9807              LDR      r0,[sp,#0x1c]
0002d0  f7fffffe          BL       __aeabi_ui2d
0002d4  e9cd0102          STRD     r0,r1,[sp,#8]
0002d8  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0002dc  f7fffffe          BL       __aeabi_ddiv
0002e0  4604              MOV      r4,r0
0002e2  460d              MOV      r5,r1
;;;699    		TIMx_Prescaler=60000;
0002e4  f64e2060          MOV      r0,#0xea60
0002e8  9006              STR      r0,[sp,#0x18]
;;;700    		TIMx_Period=(u16)(((double)Tim_num1/(double)TIMx_Prescaler)*20);
0002ea  9806              LDR      r0,[sp,#0x18]
0002ec  f7fffffe          BL       __aeabi_ui2d
0002f0  4602              MOV      r2,r0
0002f2  460b              MOV      r3,r1
0002f4  e9cd0100          STRD     r0,r1,[sp,#0]
0002f8  4620              MOV      r0,r4
0002fa  4629              MOV      r1,r5
0002fc  f7fffffe          BL       __aeabi_ddiv
000300  2200              MOVS     r2,#0
000302  4b50              LDR      r3,|L2.1092|
000304  e9cd0102          STRD     r0,r1,[sp,#8]
000308  f7fffffe          BL       __aeabi_dmul
00030c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000310  f7fffffe          BL       __aeabi_d2uiz
000314  fa1ffb80          UXTH     r11,r0
000318  e0b8              B        |L2.1164|
                  |L2.794|
;;;701    	}
;;;702    	else if(PWM_Frequency>=1.0)
00031a  2200              MOVS     r2,#0
00031c  4b45              LDR      r3,|L2.1076|
00031e  4638              MOV      r0,r7
000320  4641              MOV      r1,r8
000322  f7fffffe          BL       __aeabi_cdrcmple
000326  d82e              BHI      |L2.902|
;;;703    	{
;;;704    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency);							//根据定时器输出频率计算计数值
000328  9807              LDR      r0,[sp,#0x1c]
00032a  f7fffffe          BL       __aeabi_ui2d
00032e  463a              MOV      r2,r7
000330  4643              MOV      r3,r8
000332  e9cd0104          STRD     r0,r1,[sp,#0x10]
000336  f7fffffe          BL       __aeabi_ddiv
00033a  4604              MOV      r4,r0
00033c  460d              MOV      r5,r1
;;;705    		Tim_num1=(double)(Tim_num1*2.0);
00033e  2200              MOVS     r2,#0
000340  f04f4380          MOV      r3,#0x40000000
000344  4620              MOV      r0,r4
000346  4629              MOV      r1,r5
000348  f7fffffe          BL       __aeabi_dmul
00034c  4604              MOV      r4,r0
00034e  460d              MOV      r5,r1
;;;706    		if(Tim_num1>=10000000)
000350  2200              MOVS     r2,#0
000352  4b3d              LDR      r3,|L2.1096|
000354  4620              MOV      r0,r4
000356  4629              MOV      r1,r5
000358  f7fffffe          BL       __aeabi_cdrcmple
00035c  d814              BHI      |L2.904|
;;;707    		{
;;;708    			TIMx_Prescaler=2000;
00035e  f44f60fa          MOV      r0,#0x7d0
000362  9006              STR      r0,[sp,#0x18]
;;;709    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000364  9806              LDR      r0,[sp,#0x18]
000366  f7fffffe          BL       __aeabi_ui2d
00036a  4602              MOV      r2,r0
00036c  460b              MOV      r3,r1
00036e  e9cd0102          STRD     r0,r1,[sp,#8]
000372  4620              MOV      r0,r4
000374  4629              MOV      r1,r5
000376  f7fffffe          BL       __aeabi_ddiv
00037a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00037e  f7fffffe          BL       __aeabi_d2uiz
000382  fa1ffb80          UXTH     r11,r0
                  |L2.902|
000386  e081              B        |L2.1164|
                  |L2.904|
;;;710    		}
;;;711    		else if(Tim_num1>=1000000)
000388  2200              MOVS     r2,#0
00038a  4b30              LDR      r3,|L2.1100|
00038c  4620              MOV      r0,r4
00038e  4629              MOV      r1,r5
000390  f7fffffe          BL       __aeabi_cdrcmple
000394  d813              BHI      |L2.958|
;;;712    		{
;;;713    			TIMx_Prescaler=200;
000396  20c8              MOVS     r0,#0xc8
000398  9006              STR      r0,[sp,#0x18]
;;;714    			TIMx_Period=Tim_num1/TIMx_Prescaler;
00039a  9806              LDR      r0,[sp,#0x18]
00039c  f7fffffe          BL       __aeabi_ui2d
0003a0  4602              MOV      r2,r0
0003a2  460b              MOV      r3,r1
0003a4  e9cd0102          STRD     r0,r1,[sp,#8]
0003a8  4620              MOV      r0,r4
0003aa  4629              MOV      r1,r5
0003ac  f7fffffe          BL       __aeabi_ddiv
0003b0  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003b4  f7fffffe          BL       __aeabi_d2uiz
0003b8  fa1ffb80          UXTH     r11,r0
0003bc  e066              B        |L2.1164|
                  |L2.958|
;;;715    		}
;;;716    		else if(Tim_num1>=100000)
0003be  2200              MOVS     r2,#0
0003c0  4b23              LDR      r3,|L2.1104|
0003c2  4620              MOV      r0,r4
0003c4  4629              MOV      r1,r5
0003c6  f7fffffe          BL       __aeabi_cdrcmple
0003ca  d813              BHI      |L2.1012|
;;;717    		{
;;;718    			TIMx_Prescaler=20;
0003cc  2014              MOVS     r0,#0x14
0003ce  9006              STR      r0,[sp,#0x18]
;;;719    			TIMx_Period=Tim_num1/TIMx_Prescaler;
0003d0  9806              LDR      r0,[sp,#0x18]
0003d2  f7fffffe          BL       __aeabi_ui2d
0003d6  4602              MOV      r2,r0
0003d8  460b              MOV      r3,r1
0003da  e9cd0102          STRD     r0,r1,[sp,#8]
0003de  4620              MOV      r0,r4
0003e0  4629              MOV      r1,r5
0003e2  f7fffffe          BL       __aeabi_ddiv
0003e6  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003ea  f7fffffe          BL       __aeabi_d2uiz
0003ee  fa1ffb80          UXTH     r11,r0
0003f2  e04b              B        |L2.1164|
                  |L2.1012|
;;;720    		}
;;;721    		else if(Tim_num1>=65530)
0003f4  2200              MOVS     r2,#0
0003f6  4b17              LDR      r3,|L2.1108|
0003f8  4620              MOV      r0,r4
0003fa  4629              MOV      r1,r5
0003fc  f7fffffe          BL       __aeabi_cdrcmple
000400  d831              BHI      |L2.1126|
;;;722    		{
;;;723    			TIMx_Prescaler=2;
000402  2002              MOVS     r0,#2
000404  9006              STR      r0,[sp,#0x18]
;;;724    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000406  9806              LDR      r0,[sp,#0x18]
000408  f7fffffe          BL       __aeabi_ui2d
00040c  4602              MOV      r2,r0
00040e  460b              MOV      r3,r1
000410  e9cd0102          STRD     r0,r1,[sp,#8]
000414  4620              MOV      r0,r4
000416  4629              MOV      r1,r5
000418  f7fffffe          BL       __aeabi_ddiv
00041c  e01c              B        |L2.1112|
00041e  0000              DCW      0x0000
                  |L2.1056|
                          DCD      0x40001000
                  |L2.1060|
                          DCD      0xbffffc00
                  |L2.1064|
                          DCD      0x40010800
                  |L2.1068|
                          DCD      0x40010c00
                  |L2.1072|
                          DCD      0x40010000
                  |L2.1076|
                          DCD      0x3ff00000
                  |L2.1080|
                          DCD      0x40240000
                  |L2.1084|
                          DCD      0x40590000
                  |L2.1088|
                          DCD      0x40690000
                  |L2.1092|
                          DCD      0x40340000
                  |L2.1096|
                          DCD      0x416312d0
                  |L2.1100|
                          DCD      0x412e8480
                  |L2.1104|
                          DCD      0x40f86a00
                  |L2.1108|
                          DCD      0x40efff40
                  |L2.1112|
000458  e9cd0104          STRD     r0,r1,[sp,#0x10]
00045c  f7fffffe          BL       __aeabi_d2uiz
000460  fa1ffb80          UXTH     r11,r0
000464  e012              B        |L2.1164|
                  |L2.1126|
;;;725    		}
;;;726    		else
;;;727    		{
;;;728    			TIMx_Prescaler=1;
000466  2001              MOVS     r0,#1
000468  9006              STR      r0,[sp,#0x18]
;;;729    			TIMx_Period=Tim_num1/TIMx_Prescaler;
00046a  9806              LDR      r0,[sp,#0x18]
00046c  f7fffffe          BL       __aeabi_ui2d
000470  4602              MOV      r2,r0
000472  460b              MOV      r3,r1
000474  e9cd0102          STRD     r0,r1,[sp,#8]
000478  4620              MOV      r0,r4
00047a  4629              MOV      r1,r5
00047c  f7fffffe          BL       __aeabi_ddiv
000480  e9cd0104          STRD     r0,r1,[sp,#0x10]
000484  f7fffffe          BL       __aeabi_d2uiz
000488  fa1ffb80          UXTH     r11,r0
                  |L2.1164|
;;;730    		}
;;;731    	}	
;;;732    	//8)**********定时器初始化
;;;733    	TIM_TimeBaseStructure.TIM_Prescaler = TIMx_Prescaler-1; 				//设定分频值
00048c  9806              LDR      r0,[sp,#0x18]
00048e  1e40              SUBS     r0,r0,#1
000490  b280              UXTH     r0,r0
000492  f8ad0050          STRH     r0,[sp,#0x50]
;;;734    	TIM_TimeBaseStructure.TIM_Period 		= TIMx_Period-1;        		//设定自动重装载值
000496  f1ab0001          SUB      r0,r11,#1
00049a  b280              UXTH     r0,r0
00049c  f8ad0054          STRH     r0,[sp,#0x54]
;;;735    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  				//不分割
0004a0  2000              MOVS     r0,#0
0004a2  f8ad0056          STRH     r0,[sp,#0x56]
;;;736    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  		//向上计数
0004a6  f8ad0052          STRH     r0,[sp,#0x52]
;;;737    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化	
0004aa  a914              ADD      r1,sp,#0x50
0004ac  4650              MOV      r0,r10
0004ae  f7fffffe          BL       TIM_TimeBaseInit
;;;738    	//9）定时器配置（初始化*******************************************************************
;;;739    	if((TIMx_Period*(u32)PWM_Ratio)>1200)
0004b2  fb0bf009          MUL      r0,r11,r9
0004b6  f5b06f96          CMP      r0,#0x4b0
0004ba  d908              BLS      |L2.1230|
;;;740    		PWM_Ratio=(u16)((u32)(TIMx_Period*PWM_Ratio)/1200);
0004bc  fb0bf009          MUL      r0,r11,r9
0004c0  f44f6196          MOV      r1,#0x4b0
0004c4  fbb0f0f1          UDIV     r0,r0,r1
0004c8  fa1ff980          UXTH     r9,r0
0004cc  e004              B        |L2.1240|
                  |L2.1230|
;;;741    	else if(PWM_Ratio!=0)
0004ce  f1b90f00          CMP      r9,#0
0004d2  d001              BEQ      |L2.1240|
;;;742    		PWM_Ratio=1;
0004d4  f04f0901          MOV      r9,#1
                  |L2.1240|
;;;743    		
;;;744    	TIMOCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 								//选择定时器模式:TIM脉冲宽度调制模式1
0004d8  2060              MOVS     r0,#0x60
0004da  f8ad0040          STRH     r0,[sp,#0x40]
;;;745    	TIMOCInitStructure.TIM_Pulse =(u16)PWM_Ratio;										//占空比=(CCRx/ARR)*1000%
0004de  f8ad9046          STRH     r9,[sp,#0x46]
;;;746    	TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;				//输出极性:TIM输出比较极性高
0004e2  2000              MOVS     r0,#0
0004e4  f8ad0048          STRH     r0,[sp,#0x48]
;;;747    	TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;		//比较输出使能
0004e8  2001              MOVS     r0,#1
0004ea  f8ad0042          STRH     r0,[sp,#0x42]
;;;748    	//10）定时器配置（初始化*******************************************************************
;;;749    	switch(PWM_OUTChanneln)
0004ee  b136              CBZ      r6,|L2.1278|
0004f0  2e01              CMP      r6,#1
0004f2  d009              BEQ      |L2.1288|
0004f4  2e02              CMP      r6,#2
0004f6  d00c              BEQ      |L2.1298|
0004f8  2e03              CMP      r6,#3
0004fa  d114              BNE      |L2.1318|
0004fc  e00e              B        |L2.1308|
                  |L2.1278|
;;;750    	{
;;;751    		case PWM_OUTChannel1:	TIM_OC1Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
0004fe  a910              ADD      r1,sp,#0x40
000500  4650              MOV      r0,r10
000502  f7fffffe          BL       TIM_OC1Init
;;;752    		break;
000506  e00f              B        |L2.1320|
                  |L2.1288|
;;;753    		case PWM_OUTChannel2:	TIM_OC2Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
000508  a910              ADD      r1,sp,#0x40
00050a  4650              MOV      r0,r10
00050c  f7fffffe          BL       TIM_OC2Init
;;;754    		break;
000510  e00a              B        |L2.1320|
                  |L2.1298|
;;;755    		case PWM_OUTChannel3:	TIM_OC3Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
000512  a910              ADD      r1,sp,#0x40
000514  4650              MOV      r0,r10
000516  f7fffffe          BL       TIM_OC3Init
;;;756    		break;
00051a  e005              B        |L2.1320|
                  |L2.1308|
;;;757    		case PWM_OUTChannel4:	TIM_OC4Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
00051c  a910              ADD      r1,sp,#0x40
00051e  4650              MOV      r0,r10
000520  f7fffffe          BL       TIM_OC4Init
;;;758    		break;
000524  e000              B        |L2.1320|
                  |L2.1318|
;;;759    		default:
;;;760    		break;
000526  bf00              NOP      
                  |L2.1320|
000528  bf00              NOP                            ;752
;;;761    	}	
;;;762    	TIM_CtrlPWMOutputs(TIMx,ENABLE);																//设置TIM2的PWM输出使能
00052a  2101              MOVS     r1,#1
00052c  4650              MOV      r0,r10
00052e  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;763    	//11）定时器配置（初始化*******************************************************************
;;;764    	switch(PWM_OUTChanneln)			//使能TIM在CCR上的预装载寄存器
000532  b136              CBZ      r6,|L2.1346|
000534  2e01              CMP      r6,#1
000536  d009              BEQ      |L2.1356|
000538  2e02              CMP      r6,#2
00053a  d00c              BEQ      |L2.1366|
00053c  2e03              CMP      r6,#3
00053e  d114              BNE      |L2.1386|
000540  e00e              B        |L2.1376|
                  |L2.1346|
;;;765    	{
;;;766    		case PWM_OUTChannel1:	TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
000542  2108              MOVS     r1,#8
000544  4650              MOV      r0,r10
000546  f7fffffe          BL       TIM_OC1PreloadConfig
;;;767    				break;
00054a  e00e              B        |L2.1386|
                  |L2.1356|
;;;768    		case PWM_OUTChannel2:	TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
00054c  2108              MOVS     r1,#8
00054e  4650              MOV      r0,r10
000550  f7fffffe          BL       TIM_OC2PreloadConfig
;;;769    				break;
000554  e009              B        |L2.1386|
                  |L2.1366|
;;;770    		case PWM_OUTChannel3:	TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
000556  2108              MOVS     r1,#8
000558  4650              MOV      r0,r10
00055a  f7fffffe          BL       TIM_OC3PreloadConfig
;;;771    				break;
00055e  e004              B        |L2.1386|
                  |L2.1376|
;;;772    		case PWM_OUTChannel4:	TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
000560  2108              MOVS     r1,#8
000562  4650              MOV      r0,r10
000564  f7fffffe          BL       TIM_OC4PreloadConfig
;;;773    				break;
000568  bf00              NOP      
                  |L2.1386|
00056a  bf00              NOP                            ;767
;;;774    	}	
;;;775    	
;;;776    	TIM_ARRPreloadConfig(TIMx, ENABLE);			//ARPE使能 
00056c  2101              MOVS     r1,#1
00056e  4650              MOV      r0,r10
000570  f7fffffe          BL       TIM_ARRPreloadConfig
;;;777    	
;;;778    	TIM_Cmd(TIMx, ENABLE); 									//使能TIM
000574  2101              MOVS     r1,#1
000576  4650              MOV      r0,r10
000578  f7fffffe          BL       TIM_Cmd
;;;779    }
00057c  b019              ADD      sp,sp,#0x64
00057e  e8bd8ff0          POP      {r4-r11,pc}
;;;780    
                          ENDP


                          AREA ||i.PWM_OUTRemap||, CODE, READONLY, ALIGN=2

                  PWM_OUTRemap PROC
;;;306    *******************************************************************************/
;;;307    void PWM_OUTRemap			//PWM输出配置
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;308    (
;;;309    	TIM_TypeDef* TIMx,											//所使用的定时器
;;;310    	PWM_OUTChannelTypeDef PWM_OUTChanneln,	//PWM输出通道号
;;;311    	double PWM_Frequency,										//输出频率，最小频率0.02Hz		
;;;312    	u16 PWM_Ratio														//输出占空比，分辨率1/1000
;;;313    )
;;;314    {
000004  b099              SUB      sp,sp,#0x64
000006  4682              MOV      r10,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  f8dd9088          LDR      r9,[sp,#0x88]
;;;315    	//*1,结构体定义
;;;316    	//*2,变量定义
;;;317    	//*3,管脚确认
;;;318    	//*4,打开相应的时钟
;;;319    	//*5,管脚配置（初始化）
;;;320    	//*6,定时器配置（初始化）
;;;321    	//*7,PWM输出配置（初始化）
;;;322    	//*8,占空比配置	
;;;323    	
;;;324    	//*1,结构体定义***********************************************************************
;;;325    	GPIO_InitTypeDef GPIO_InitStructure;
;;;326    	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义
;;;327    	TIM_OCInitTypeDef TIMOCInitStructure;
;;;328    	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值	
;;;329    	//*2,变量定义*************************************************************************	
;;;330    	GPIO_TypeDef* GPIOx				=	0;			//x=A/B/C/D/E/F/G
000012  2000              MOVS     r0,#0
000014  900a              STR      r0,[sp,#0x28]
;;;331    	u16 GPIO_Pin_n						=	0xFF;		//n=0~15;
000016  20ff              MOVS     r0,#0xff
000018  9009              STR      r0,[sp,#0x24]
;;;332    	u32 RCC_APB2Periph_GPIOx	=	0x00;		//x=A/B/C/D/E/F/G	
00001a  2000              MOVS     r0,#0
00001c  9008              STR      r0,[sp,#0x20]
;;;333    	u32	TIMx_Frequency=0;								//	定时器时钟
00001e  9007              STR      r0,[sp,#0x1c]
;;;334    	u16 TIMx_Prescaler				=	0	;			//	定时器时钟分频值		取值范围：0x0000~0xFFFF
000020  9006              STR      r0,[sp,#0x18]
;;;335      u16 TIMx_Period						=	0	;			//	定时器自动重装载值	取值范围：0x0000~0xFFFF
000022  4683              MOV      r11,r0
;;;336    //	u32	Microsecond						=	0	;		//	微秒
;;;337    //	u32	Nanosecond						=	0	;		//	纳秒
;;;338    	double	Tim_num1					=	0	;			//	临时变量1
000024  bf00              NOP      
;;;339    //	u8	Tim_flg								=	0	;			//	临时变量2
;;;340    	//*3,管脚配置--根据输入参数选择相应的GPIO************************************************
;;;341    	switch (*(u32*)&TIMx)
000026  49fe              LDR      r1,|L3.1056|
000028  ebaa0001          SUB      r0,r10,r1
00002c  458a              CMP      r10,r1
00002e  d076              BEQ      |L3.286|
000030  dc0d              BGT      |L3.78|
000032  f1ba4f80          CMP      r10,#0x40000000
000036  d03e              BEQ      |L3.182|
000038  48fa              LDR      r0,|L3.1060|
00003a  4450              ADD      r0,r0,r10
00003c  2800              CMP      r0,#0
00003e  d062              BEQ      |L3.262|
000040  f5b06f80          CMP      r0,#0x400
000044  d06c              BEQ      |L3.288|
000046  f5b06f00          CMP      r0,#0x800
                  |L3.74|
00004a  d16a              BNE      |L3.290|
00004c  e0b3              B        |L3.438|
                  |L3.78|
00004e  f5b06f80          CMP      r0,#0x400
000052  d067              BEQ      |L3.292|
000054  f5b03f8e          CMP      r0,#0x11c00
000058  d003              BEQ      |L3.98|
00005a  f5b03f92          CMP      r0,#0x12400
00005e  d1f4              BNE      |L3.74|
000060  e0b8              B        |L3.468|
                  |L3.98|
;;;342    	{
;;;343    		case TIM1_BASE:
;;;344    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
000062  2101              MOVS     r1,#1
000064  02c8              LSLS     r0,r1,#11
000066  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;345    			switch(PWM_OUTChanneln)
00006a  b136              CBZ      r6,|L3.122|
00006c  2e01              CMP      r6,#1
00006e  d00b              BEQ      |L3.136|
000070  2e02              CMP      r6,#2
000072  d010              BEQ      |L3.150|
000074  2e03              CMP      r6,#3
000076  d11c              BNE      |L3.178|
000078  e014              B        |L3.164|
                  |L3.122|
;;;346    			{
;;;347    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_8;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;	
00007a  48eb              LDR      r0,|L3.1064|
00007c  900a              STR      r0,[sp,#0x28]
00007e  1580              ASRS     r0,r0,#22
000080  9009              STR      r0,[sp,#0x24]
000082  2004              MOVS     r0,#4
000084  9008              STR      r0,[sp,#0x20]
;;;348    															break;
000086  e014              B        |L3.178|
                  |L3.136|
;;;349    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_9;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000088  48e7              LDR      r0,|L3.1064|
00008a  900a              STR      r0,[sp,#0x28]
00008c  1540              ASRS     r0,r0,#21
00008e  9009              STR      r0,[sp,#0x24]
000090  2004              MOVS     r0,#4
000092  9008              STR      r0,[sp,#0x20]
;;;350    															break;
000094  e00d              B        |L3.178|
                  |L3.150|
;;;351    				case PWM_OUTChannel3:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_10;	RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000096  48e4              LDR      r0,|L3.1064|
000098  900a              STR      r0,[sp,#0x28]
00009a  1500              ASRS     r0,r0,#20
00009c  9009              STR      r0,[sp,#0x24]
00009e  2004              MOVS     r0,#4
0000a0  9008              STR      r0,[sp,#0x20]
;;;352    															break;
0000a2  e006              B        |L3.178|
                  |L3.164|
;;;353    				case PWM_OUTChannel4:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_11;	RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000a4  48e0              LDR      r0,|L3.1064|
0000a6  900a              STR      r0,[sp,#0x28]
0000a8  14c0              ASRS     r0,r0,#19
0000aa  9009              STR      r0,[sp,#0x24]
0000ac  2004              MOVS     r0,#4
0000ae  9008              STR      r0,[sp,#0x20]
;;;354    															break;
0000b0  bf00              NOP      
                  |L3.178|
0000b2  bf00              NOP                            ;348
;;;355    			}
;;;356    			break;
0000b4  e094              B        |L3.480|
                  |L3.182|
;;;357    		
;;;358    		case TIM2_BASE:
;;;359    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
0000b6  2101              MOVS     r1,#1
0000b8  4608              MOV      r0,r1
0000ba  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;360    			switch(PWM_OUTChanneln)
0000be  b136              CBZ      r6,|L3.206|
0000c0  2e01              CMP      r6,#1
0000c2  d00b              BEQ      |L3.220|
0000c4  2e02              CMP      r6,#2
0000c6  d00f              BEQ      |L3.232|
0000c8  2e03              CMP      r6,#3
0000ca  d11a              BNE      |L3.258|
0000cc  e012              B        |L3.244|
                  |L3.206|
;;;361    			{
;;;362    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_0;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000ce  48d6              LDR      r0,|L3.1064|
0000d0  900a              STR      r0,[sp,#0x28]
0000d2  2001              MOVS     r0,#1
0000d4  9009              STR      r0,[sp,#0x24]
0000d6  2004              MOVS     r0,#4
0000d8  9008              STR      r0,[sp,#0x20]
;;;363    															break;
0000da  e012              B        |L3.258|
                  |L3.220|
;;;364    				case PWM_OUTChannel2:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_3;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
0000dc  48d3              LDR      r0,|L3.1068|
0000de  900a              STR      r0,[sp,#0x28]
0000e0  2008              MOVS     r0,#8
0000e2  9009              STR      r0,[sp,#0x24]
0000e4  9008              STR      r0,[sp,#0x20]
;;;365    															break;
0000e6  e00c              B        |L3.258|
                  |L3.232|
;;;366    				case PWM_OUTChannel3:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_2;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000e8  48cf              LDR      r0,|L3.1064|
0000ea  900a              STR      r0,[sp,#0x28]
0000ec  2004              MOVS     r0,#4
0000ee  9009              STR      r0,[sp,#0x24]
0000f0  9008              STR      r0,[sp,#0x20]
;;;367    															break;
0000f2  e006              B        |L3.258|
                  |L3.244|
;;;368    				case PWM_OUTChannel4:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_3;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
0000f4  48cc              LDR      r0,|L3.1064|
0000f6  900a              STR      r0,[sp,#0x28]
0000f8  2008              MOVS     r0,#8
0000fa  9009              STR      r0,[sp,#0x24]
0000fc  2004              MOVS     r0,#4
0000fe  9008              STR      r0,[sp,#0x20]
;;;369    															break;
000100  bf00              NOP      
                  |L3.258|
000102  bf00              NOP                            ;363
;;;370    			}
;;;371    			break;
000104  e06c              B        |L3.480|
                  |L3.262|
;;;372    		
;;;373    		case TIM3_BASE:
;;;374    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000106  2101              MOVS     r1,#1
000108  2002              MOVS     r0,#2
00010a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;375    			switch(PWM_OUTChanneln)
00010e  b156              CBZ      r6,|L3.294|
000110  2e01              CMP      r6,#1
000112  d00f              BEQ      |L3.308|
000114  2e02              CMP      r6,#2
000116  d014              BEQ      |L3.322|
000118  2e03              CMP      r6,#3
00011a  d120              BNE      |L3.350|
00011c  e018              B        |L3.336|
                  |L3.286|
00011e  e04f              B        |L3.448|
                  |L3.288|
000120  e01f              B        |L3.354|
                  |L3.290|
000122  e05c              B        |L3.478|
                  |L3.292|
000124  e051              B        |L3.458|
                  |L3.294|
;;;376    			{
;;;377    				case PWM_OUTChannel1:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_6;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000126  48c0              LDR      r0,|L3.1064|
000128  900a              STR      r0,[sp,#0x28]
00012a  2040              MOVS     r0,#0x40
00012c  9009              STR      r0,[sp,#0x24]
00012e  2004              MOVS     r0,#4
000130  9008              STR      r0,[sp,#0x20]
;;;378    															break;
000132  e014              B        |L3.350|
                  |L3.308|
;;;379    				case PWM_OUTChannel2:	GPIOx	=	GPIOA;	GPIO_Pin_n	=	GPIO_Pin_7;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOA;
000134  48bc              LDR      r0,|L3.1064|
000136  900a              STR      r0,[sp,#0x28]
000138  2080              MOVS     r0,#0x80
00013a  9009              STR      r0,[sp,#0x24]
00013c  2004              MOVS     r0,#4
00013e  9008              STR      r0,[sp,#0x20]
;;;380    															break;
000140  e00d              B        |L3.350|
                  |L3.322|
;;;381    				case PWM_OUTChannel3:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_0;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000142  48ba              LDR      r0,|L3.1068|
000144  900a              STR      r0,[sp,#0x28]
000146  2001              MOVS     r0,#1
000148  9009              STR      r0,[sp,#0x24]
00014a  2008              MOVS     r0,#8
00014c  9008              STR      r0,[sp,#0x20]
;;;382    															break;
00014e  e006              B        |L3.350|
                  |L3.336|
;;;383    				case PWM_OUTChannel4:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_1;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000150  48b6              LDR      r0,|L3.1068|
000152  900a              STR      r0,[sp,#0x28]
000154  2002              MOVS     r0,#2
000156  9009              STR      r0,[sp,#0x24]
000158  2008              MOVS     r0,#8
00015a  9008              STR      r0,[sp,#0x20]
;;;384    															break;
00015c  bf00              NOP      
                  |L3.350|
00015e  bf00              NOP                            ;378
;;;385    			}
;;;386    			break;
000160  e03e              B        |L3.480|
                  |L3.354|
;;;387    		
;;;388    		case TIM4_BASE:
;;;389    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000162  2101              MOVS     r1,#1
000164  2004              MOVS     r0,#4
000166  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;390    			switch(PWM_OUTChanneln)
00016a  b136              CBZ      r6,|L3.378|
00016c  2e01              CMP      r6,#1
00016e  d00b              BEQ      |L3.392|
000170  2e02              CMP      r6,#2
000172  d010              BEQ      |L3.406|
000174  2e03              CMP      r6,#3
000176  d11c              BNE      |L3.434|
000178  e014              B        |L3.420|
                  |L3.378|
;;;391    			{
;;;392    				case PWM_OUTChannel1:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_6;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
00017a  48ac              LDR      r0,|L3.1068|
00017c  900a              STR      r0,[sp,#0x28]
00017e  2040              MOVS     r0,#0x40
000180  9009              STR      r0,[sp,#0x24]
000182  2008              MOVS     r0,#8
000184  9008              STR      r0,[sp,#0x20]
;;;393    															break;
000186  e014              B        |L3.434|
                  |L3.392|
;;;394    				case PWM_OUTChannel2:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_7;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000188  48a8              LDR      r0,|L3.1068|
00018a  900a              STR      r0,[sp,#0x28]
00018c  2080              MOVS     r0,#0x80
00018e  9009              STR      r0,[sp,#0x24]
000190  2008              MOVS     r0,#8
000192  9008              STR      r0,[sp,#0x20]
;;;395    															break;
000194  e00d              B        |L3.434|
                  |L3.406|
;;;396    				case PWM_OUTChannel3:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_8;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
000196  48a5              LDR      r0,|L3.1068|
000198  900a              STR      r0,[sp,#0x28]
00019a  1580              ASRS     r0,r0,#22
00019c  9009              STR      r0,[sp,#0x24]
00019e  2008              MOVS     r0,#8
0001a0  9008              STR      r0,[sp,#0x20]
;;;397    															break;
0001a2  e006              B        |L3.434|
                  |L3.420|
;;;398    				case PWM_OUTChannel4:	GPIOx	=	GPIOB;	GPIO_Pin_n	=	GPIO_Pin_9;		RCC_APB2Periph_GPIOx	=	RCC_APB2Periph_GPIOB;
0001a4  48a1              LDR      r0,|L3.1068|
0001a6  900a              STR      r0,[sp,#0x28]
0001a8  1540              ASRS     r0,r0,#21
0001aa  9009              STR      r0,[sp,#0x24]
0001ac  2008              MOVS     r0,#8
0001ae  9008              STR      r0,[sp,#0x20]
;;;399    															break;
0001b0  bf00              NOP      
                  |L3.434|
0001b2  bf00              NOP                            ;393
;;;400    			}
;;;401    			break;
0001b4  e014              B        |L3.480|
                  |L3.438|
;;;402    		
;;;403    		case TIM5_BASE:
;;;404    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
0001b6  2101              MOVS     r1,#1
0001b8  2008              MOVS     r0,#8
0001ba  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;405    			break;
0001be  e00f              B        |L3.480|
                  |L3.448|
;;;406    		
;;;407    		case TIM6_BASE:
;;;408    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
0001c0  2101              MOVS     r1,#1
0001c2  2010              MOVS     r0,#0x10
0001c4  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;409    			break;
0001c8  e00a              B        |L3.480|
                  |L3.458|
;;;410    		
;;;411    		case TIM7_BASE:
;;;412    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
0001ca  2101              MOVS     r1,#1
0001cc  2020              MOVS     r0,#0x20
0001ce  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;413    			break;
0001d2  e005              B        |L3.480|
                  |L3.468|
;;;414    		
;;;415    		case TIM8_BASE:
;;;416    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
0001d4  2101              MOVS     r1,#1
0001d6  0348              LSLS     r0,r1,#13
0001d8  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;417    			break;
0001dc  e000              B        |L3.480|
                  |L3.478|
;;;418    		
;;;419    		default:
;;;420    			break;		
0001de  bf00              NOP      
                  |L3.480|
0001e0  bf00              NOP                            ;356
;;;421    	}
;;;422    	
;;;423    	
;;;424    	//*4,打开相应的时钟*********************************************************************
;;;425    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);	//使能复用时钟
0001e2  2101              MOVS     r1,#1
0001e4  4608              MOV      r0,r1
0001e6  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;426    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOx, ENABLE);	//使能引脚时钟	
0001ea  2101              MOVS     r1,#1
0001ec  9808              LDR      r0,[sp,#0x20]
0001ee  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;427    	//*5,管脚配置（初始化）*****************************************************************
;;;428    	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_n;
0001f2  9809              LDR      r0,[sp,#0x24]
0001f4  f8ad005c          STRH     r0,[sp,#0x5c]
;;;429    	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
0001f8  2003              MOVS     r0,#3
0001fa  f88d005e          STRB     r0,[sp,#0x5e]
;;;430    	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP ;//复用推挽输出
0001fe  2018              MOVS     r0,#0x18
000200  f88d005f          STRB     r0,[sp,#0x5f]
;;;431    	GPIO_Init(GPIOx,&GPIO_InitStructure);	
000204  a917              ADD      r1,sp,#0x5c
000206  980a              LDR      r0,[sp,#0x28]
000208  f7fffffe          BL       GPIO_Init
;;;432    	//*6,获取TIMx时钟**********************************************************************
;;;433    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;434    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;435    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
00020c  a80b              ADD      r0,sp,#0x2c
00020e  f7fffffe          BL       RCC_GetClocksFreq
;;;436    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;
000212  980b              LDR      r0,[sp,#0x2c]
000214  9007              STR      r0,[sp,#0x1c]
;;;437    	if (((*(u32*)&TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
000216  4886              LDR      r0,|L3.1072|
000218  ea0a0000          AND      r0,r10,r0
00021c  4984              LDR      r1,|L3.1072|
00021e  4288              CMP      r0,r1
000220  d102              BNE      |L3.552|
;;;438      {
;;;439        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2
000222  980e              LDR      r0,[sp,#0x38]
000224  9007              STR      r0,[sp,#0x1c]
000226  e001              B        |L3.556|
                  |L3.552|
;;;440      }
;;;441      else
;;;442      {
;;;443        TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1
000228  980d              LDR      r0,[sp,#0x34]
00022a  9007              STR      r0,[sp,#0x1c]
                  |L3.556|
;;;444      }
;;;445    	//*7,计算定时器参数*********************************************************************
;;;446    	//Fsys==Fpwm*Count==Fpwm*(Prescaler*Period)	
;;;447    	//	TIMx_Prescaler				=	72-1		;		// 	定时器时钟分频值
;;;448    	//	TIMx_Period						=	1000-1	;		// 	定时器自动重装载值
;;;449    	//	Tim_num1							=	0				;		//	临时变量1
;;;450    	if(1/PWM_Frequency>10)
00022c  463a              MOV      r2,r7
00022e  4643              MOV      r3,r8
000230  2000              MOVS     r0,#0
000232  4980              LDR      r1,|L3.1076|
000234  f7fffffe          BL       __aeabi_ddiv
000238  2200              MOVS     r2,#0
00023a  4b7f              LDR      r3,|L3.1080|
00023c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000240  f7fffffe          BL       __aeabi_cdrcmple
000244  d22d              BCS      |L3.674|
;;;451    	{
;;;452    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency*100);							//根据定时器输出频率计算计数值
000246  2200              MOVS     r2,#0
000248  4b7c              LDR      r3,|L3.1084|
00024a  4638              MOV      r0,r7
00024c  4641              MOV      r1,r8
00024e  f7fffffe          BL       __aeabi_dmul
000252  e9cd0104          STRD     r0,r1,[sp,#0x10]
000256  9807              LDR      r0,[sp,#0x1c]
000258  f7fffffe          BL       __aeabi_ui2d
00025c  e9cd0102          STRD     r0,r1,[sp,#8]
000260  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000264  f7fffffe          BL       __aeabi_ddiv
000268  4604              MOV      r4,r0
00026a  460d              MOV      r5,r1
;;;453    		TIMx_Prescaler=60000;
00026c  f64e2060          MOV      r0,#0xea60
000270  9006              STR      r0,[sp,#0x18]
;;;454    		TIMx_Period=(u16)(((double)Tim_num1/(double)TIMx_Prescaler)*200);
000272  9806              LDR      r0,[sp,#0x18]
000274  f7fffffe          BL       __aeabi_ui2d
000278  4602              MOV      r2,r0
00027a  460b              MOV      r3,r1
00027c  e9cd0100          STRD     r0,r1,[sp,#0]
000280  4620              MOV      r0,r4
000282  4629              MOV      r1,r5
000284  f7fffffe          BL       __aeabi_ddiv
000288  2200              MOVS     r2,#0
00028a  4b6d              LDR      r3,|L3.1088|
00028c  e9cd0102          STRD     r0,r1,[sp,#8]
000290  f7fffffe          BL       __aeabi_dmul
000294  e9cd0104          STRD     r0,r1,[sp,#0x10]
000298  f7fffffe          BL       __aeabi_d2uiz
00029c  fa1ffb80          UXTH     r11,r0
0002a0  e0f2              B        |L3.1160|
                  |L3.674|
;;;455    	}
;;;456    	else if(1/PWM_Frequency>1.0)
0002a2  463a              MOV      r2,r7
0002a4  4643              MOV      r3,r8
0002a6  2000              MOVS     r0,#0
0002a8  4962              LDR      r1,|L3.1076|
0002aa  f7fffffe          BL       __aeabi_ddiv
0002ae  2200              MOVS     r2,#0
0002b0  4b60              LDR      r3,|L3.1076|
0002b2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002b6  f7fffffe          BL       __aeabi_cdrcmple
0002ba  d22d              BCS      |L3.792|
;;;457    	{
;;;458    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency*10);							//根据定时器输出频率计算计数值
0002bc  2200              MOVS     r2,#0
0002be  4b5e              LDR      r3,|L3.1080|
0002c0  4638              MOV      r0,r7
0002c2  4641              MOV      r1,r8
0002c4  f7fffffe          BL       __aeabi_dmul
0002c8  e9cd0104          STRD     r0,r1,[sp,#0x10]
0002cc  9807              LDR      r0,[sp,#0x1c]
0002ce  f7fffffe          BL       __aeabi_ui2d
0002d2  e9cd0102          STRD     r0,r1,[sp,#8]
0002d6  e9dd2304          LDRD     r2,r3,[sp,#0x10]
0002da  f7fffffe          BL       __aeabi_ddiv
0002de  4604              MOV      r4,r0
0002e0  460d              MOV      r5,r1
;;;459    		TIMx_Prescaler=60000;
0002e2  f64e2060          MOV      r0,#0xea60
0002e6  9006              STR      r0,[sp,#0x18]
;;;460    		TIMx_Period=(u16)(((double)Tim_num1/(double)TIMx_Prescaler)*20);
0002e8  9806              LDR      r0,[sp,#0x18]
0002ea  f7fffffe          BL       __aeabi_ui2d
0002ee  4602              MOV      r2,r0
0002f0  460b              MOV      r3,r1
0002f2  e9cd0100          STRD     r0,r1,[sp,#0]
0002f6  4620              MOV      r0,r4
0002f8  4629              MOV      r1,r5
0002fa  f7fffffe          BL       __aeabi_ddiv
0002fe  2200              MOVS     r2,#0
000300  4b50              LDR      r3,|L3.1092|
000302  e9cd0102          STRD     r0,r1,[sp,#8]
000306  f7fffffe          BL       __aeabi_dmul
00030a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00030e  f7fffffe          BL       __aeabi_d2uiz
000312  fa1ffb80          UXTH     r11,r0
000316  e0b7              B        |L3.1160|
                  |L3.792|
;;;461    	}
;;;462    	else if(PWM_Frequency>=1.0)
000318  2200              MOVS     r2,#0
00031a  4b46              LDR      r3,|L3.1076|
00031c  4638              MOV      r0,r7
00031e  4641              MOV      r1,r8
000320  f7fffffe          BL       __aeabi_cdrcmple
000324  d82e              BHI      |L3.900|
;;;463    	{
;;;464    		Tim_num1=(double)(TIMx_Frequency)/(PWM_Frequency);							//根据定时器输出频率计算计数值
000326  9807              LDR      r0,[sp,#0x1c]
000328  f7fffffe          BL       __aeabi_ui2d
00032c  463a              MOV      r2,r7
00032e  4643              MOV      r3,r8
000330  e9cd0104          STRD     r0,r1,[sp,#0x10]
000334  f7fffffe          BL       __aeabi_ddiv
000338  4604              MOV      r4,r0
00033a  460d              MOV      r5,r1
;;;465    		Tim_num1=(double)(Tim_num1*2.0);
00033c  2200              MOVS     r2,#0
00033e  f04f4380          MOV      r3,#0x40000000
000342  4620              MOV      r0,r4
000344  4629              MOV      r1,r5
000346  f7fffffe          BL       __aeabi_dmul
00034a  4604              MOV      r4,r0
00034c  460d              MOV      r5,r1
;;;466    		if(Tim_num1>=10000000)
00034e  2200              MOVS     r2,#0
000350  4b3d              LDR      r3,|L3.1096|
000352  4620              MOV      r0,r4
000354  4629              MOV      r1,r5
000356  f7fffffe          BL       __aeabi_cdrcmple
00035a  d814              BHI      |L3.902|
;;;467    		{
;;;468    			TIMx_Prescaler=2000;
00035c  f44f60fa          MOV      r0,#0x7d0
000360  9006              STR      r0,[sp,#0x18]
;;;469    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000362  9806              LDR      r0,[sp,#0x18]
000364  f7fffffe          BL       __aeabi_ui2d
000368  4602              MOV      r2,r0
00036a  460b              MOV      r3,r1
00036c  e9cd0102          STRD     r0,r1,[sp,#8]
000370  4620              MOV      r0,r4
000372  4629              MOV      r1,r5
000374  f7fffffe          BL       __aeabi_ddiv
000378  e9cd0104          STRD     r0,r1,[sp,#0x10]
00037c  f7fffffe          BL       __aeabi_d2uiz
000380  fa1ffb80          UXTH     r11,r0
                  |L3.900|
000384  e080              B        |L3.1160|
                  |L3.902|
;;;470    		}
;;;471    		else if(Tim_num1>=1000000)
000386  2200              MOVS     r2,#0
000388  4b30              LDR      r3,|L3.1100|
00038a  4620              MOV      r0,r4
00038c  4629              MOV      r1,r5
00038e  f7fffffe          BL       __aeabi_cdrcmple
000392  d813              BHI      |L3.956|
;;;472    		{
;;;473    			TIMx_Prescaler=200;
000394  20c8              MOVS     r0,#0xc8
000396  9006              STR      r0,[sp,#0x18]
;;;474    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000398  9806              LDR      r0,[sp,#0x18]
00039a  f7fffffe          BL       __aeabi_ui2d
00039e  4602              MOV      r2,r0
0003a0  460b              MOV      r3,r1
0003a2  e9cd0102          STRD     r0,r1,[sp,#8]
0003a6  4620              MOV      r0,r4
0003a8  4629              MOV      r1,r5
0003aa  f7fffffe          BL       __aeabi_ddiv
0003ae  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003b2  f7fffffe          BL       __aeabi_d2uiz
0003b6  fa1ffb80          UXTH     r11,r0
0003ba  e065              B        |L3.1160|
                  |L3.956|
;;;475    		}
;;;476    		else if(Tim_num1>=100000)
0003bc  2200              MOVS     r2,#0
0003be  4b24              LDR      r3,|L3.1104|
0003c0  4620              MOV      r0,r4
0003c2  4629              MOV      r1,r5
0003c4  f7fffffe          BL       __aeabi_cdrcmple
0003c8  d813              BHI      |L3.1010|
;;;477    		{
;;;478    			TIMx_Prescaler=20;
0003ca  2014              MOVS     r0,#0x14
0003cc  9006              STR      r0,[sp,#0x18]
;;;479    			TIMx_Period=Tim_num1/TIMx_Prescaler;
0003ce  9806              LDR      r0,[sp,#0x18]
0003d0  f7fffffe          BL       __aeabi_ui2d
0003d4  4602              MOV      r2,r0
0003d6  460b              MOV      r3,r1
0003d8  e9cd0102          STRD     r0,r1,[sp,#8]
0003dc  4620              MOV      r0,r4
0003de  4629              MOV      r1,r5
0003e0  f7fffffe          BL       __aeabi_ddiv
0003e4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0003e8  f7fffffe          BL       __aeabi_d2uiz
0003ec  fa1ffb80          UXTH     r11,r0
0003f0  e04a              B        |L3.1160|
                  |L3.1010|
;;;480    		}
;;;481    		else if(Tim_num1>=65530)
0003f2  2200              MOVS     r2,#0
0003f4  4b17              LDR      r3,|L3.1108|
0003f6  4620              MOV      r0,r4
0003f8  4629              MOV      r1,r5
0003fa  f7fffffe          BL       __aeabi_cdrcmple
0003fe  d830              BHI      |L3.1122|
;;;482    		{
;;;483    			TIMx_Prescaler=2;
000400  2002              MOVS     r0,#2
000402  9006              STR      r0,[sp,#0x18]
;;;484    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000404  9806              LDR      r0,[sp,#0x18]
000406  f7fffffe          BL       __aeabi_ui2d
00040a  4602              MOV      r2,r0
00040c  460b              MOV      r3,r1
00040e  e9cd0102          STRD     r0,r1,[sp,#8]
000412  4620              MOV      r0,r4
000414  4629              MOV      r1,r5
000416  f7fffffe          BL       __aeabi_ddiv
00041a  e9cd0104          STRD     r0,r1,[sp,#0x10]
00041e  e01b              B        |L3.1112|
                  |L3.1056|
                          DCD      0x40001000
                  |L3.1060|
                          DCD      0xbffffc00
                  |L3.1064|
                          DCD      0x40010800
                  |L3.1068|
                          DCD      0x40010c00
                  |L3.1072|
                          DCD      0x40010000
                  |L3.1076|
                          DCD      0x3ff00000
                  |L3.1080|
                          DCD      0x40240000
                  |L3.1084|
                          DCD      0x40590000
                  |L3.1088|
                          DCD      0x40690000
                  |L3.1092|
                          DCD      0x40340000
                  |L3.1096|
                          DCD      0x416312d0
                  |L3.1100|
                          DCD      0x412e8480
                  |L3.1104|
                          DCD      0x40f86a00
                  |L3.1108|
                          DCD      0x40efff40
                  |L3.1112|
000458  f7fffffe          BL       __aeabi_d2uiz
00045c  fa1ffb80          UXTH     r11,r0
000460  e012              B        |L3.1160|
                  |L3.1122|
;;;485    		}
;;;486    		else
;;;487    		{
;;;488    			TIMx_Prescaler=1;
000462  2001              MOVS     r0,#1
000464  9006              STR      r0,[sp,#0x18]
;;;489    			TIMx_Period=Tim_num1/TIMx_Prescaler;
000466  9806              LDR      r0,[sp,#0x18]
000468  f7fffffe          BL       __aeabi_ui2d
00046c  4602              MOV      r2,r0
00046e  460b              MOV      r3,r1
000470  e9cd0102          STRD     r0,r1,[sp,#8]
000474  4620              MOV      r0,r4
000476  4629              MOV      r1,r5
000478  f7fffffe          BL       __aeabi_ddiv
00047c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000480  f7fffffe          BL       __aeabi_d2uiz
000484  fa1ffb80          UXTH     r11,r0
                  |L3.1160|
;;;490    		}
;;;491    	}	
;;;492    	//8)**********定时器初始化
;;;493    	TIM_TimeBaseStructure.TIM_Prescaler = TIMx_Prescaler-1; 				//设定分频值
000488  9806              LDR      r0,[sp,#0x18]
00048a  1e40              SUBS     r0,r0,#1
00048c  b280              UXTH     r0,r0
00048e  f8ad0050          STRH     r0,[sp,#0x50]
;;;494    	TIM_TimeBaseStructure.TIM_Period 		= TIMx_Period-1;        		//设定自动重装载值
000492  f1ab0001          SUB      r0,r11,#1
000496  b280              UXTH     r0,r0
000498  f8ad0054          STRH     r0,[sp,#0x54]
;;;495    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  				//不分割
00049c  2000              MOVS     r0,#0
00049e  f8ad0056          STRH     r0,[sp,#0x56]
;;;496    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  		//向上计数
0004a2  f8ad0052          STRH     r0,[sp,#0x52]
;;;497    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化	
0004a6  a914              ADD      r1,sp,#0x50
0004a8  4650              MOV      r0,r10
0004aa  f7fffffe          BL       TIM_TimeBaseInit
;;;498    	//9）定时器配置（初始化*******************************************************************
;;;499    	if((TIMx_Period*(u32)PWM_Ratio)>1000)
0004ae  fb0bf009          MUL      r0,r11,r9
0004b2  f5b07f7a          CMP      r0,#0x3e8
0004b6  d908              BLS      |L3.1226|
;;;500    		PWM_Ratio=(u16)((u32)(TIMx_Period*PWM_Ratio)/1000);
0004b8  fb0bf009          MUL      r0,r11,r9
0004bc  f44f717a          MOV      r1,#0x3e8
0004c0  fbb0f0f1          UDIV     r0,r0,r1
0004c4  fa1ff980          UXTH     r9,r0
0004c8  e004              B        |L3.1236|
                  |L3.1226|
;;;501    	else if(PWM_Ratio!=0)
0004ca  f1b90f00          CMP      r9,#0
0004ce  d001              BEQ      |L3.1236|
;;;502    		PWM_Ratio=1;
0004d0  f04f0901          MOV      r9,#1
                  |L3.1236|
;;;503    		
;;;504    	TIMOCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 								//选择定时器模式:TIM脉冲宽度调制模式1
0004d4  2060              MOVS     r0,#0x60
0004d6  f8ad0040          STRH     r0,[sp,#0x40]
;;;505    	TIMOCInitStructure.TIM_Pulse =(u16)PWM_Ratio;										//占空比=(CCRx/ARR)*1000%
0004da  f8ad9046          STRH     r9,[sp,#0x46]
;;;506    	TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;				//输出极性:TIM输出比较极性高
0004de  2000              MOVS     r0,#0
0004e0  f8ad0048          STRH     r0,[sp,#0x48]
;;;507    	TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;		//比较输出使能
0004e4  2001              MOVS     r0,#1
0004e6  f8ad0042          STRH     r0,[sp,#0x42]
;;;508    	//10）定时器配置（初始化*******************************************************************
;;;509    	switch(PWM_OUTChanneln)
0004ea  b136              CBZ      r6,|L3.1274|
0004ec  2e01              CMP      r6,#1
0004ee  d009              BEQ      |L3.1284|
0004f0  2e02              CMP      r6,#2
0004f2  d00c              BEQ      |L3.1294|
0004f4  2e03              CMP      r6,#3
0004f6  d114              BNE      |L3.1314|
0004f8  e00e              B        |L3.1304|
                  |L3.1274|
;;;510    	{
;;;511    		case PWM_OUTChannel1:	TIM_OC1Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
0004fa  a910              ADD      r1,sp,#0x40
0004fc  4650              MOV      r0,r10
0004fe  f7fffffe          BL       TIM_OC1Init
;;;512    		break;
000502  e00f              B        |L3.1316|
                  |L3.1284|
;;;513    		case PWM_OUTChannel2:	TIM_OC2Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
000504  a910              ADD      r1,sp,#0x40
000506  4650              MOV      r0,r10
000508  f7fffffe          BL       TIM_OC2Init
;;;514    		break;
00050c  e00a              B        |L3.1316|
                  |L3.1294|
;;;515    		case PWM_OUTChannel3:	TIM_OC3Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
00050e  a910              ADD      r1,sp,#0x40
000510  4650              MOV      r0,r10
000512  f7fffffe          BL       TIM_OC3Init
;;;516    		break;
000516  e005              B        |L3.1316|
                  |L3.1304|
;;;517    		case PWM_OUTChannel4:	TIM_OC4Init(TIMx, &TIMOCInitStructure);												//TIM2的CH1输出使能
000518  a910              ADD      r1,sp,#0x40
00051a  4650              MOV      r0,r10
00051c  f7fffffe          BL       TIM_OC4Init
;;;518    		break;
000520  e000              B        |L3.1316|
                  |L3.1314|
;;;519    		default:
;;;520    		break;
000522  bf00              NOP      
                  |L3.1316|
000524  bf00              NOP                            ;512
;;;521    	}	
;;;522    	TIM_CtrlPWMOutputs(TIMx,ENABLE);																//设置TIM2的PWM输出使能
000526  2101              MOVS     r1,#1
000528  4650              MOV      r0,r10
00052a  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;523    	//11）定时器配置（初始化*******************************************************************
;;;524    	switch(PWM_OUTChanneln)			//使能TIM在CCR上的预装载寄存器
00052e  b136              CBZ      r6,|L3.1342|
000530  2e01              CMP      r6,#1
000532  d009              BEQ      |L3.1352|
000534  2e02              CMP      r6,#2
000536  d00c              BEQ      |L3.1362|
000538  2e03              CMP      r6,#3
00053a  d114              BNE      |L3.1382|
00053c  e00e              B        |L3.1372|
                  |L3.1342|
;;;525    	{
;;;526    		case PWM_OUTChannel1:	TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
00053e  2108              MOVS     r1,#8
000540  4650              MOV      r0,r10
000542  f7fffffe          BL       TIM_OC1PreloadConfig
;;;527    				break;
000546  e00e              B        |L3.1382|
                  |L3.1352|
;;;528    		case PWM_OUTChannel2:	TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
000548  2108              MOVS     r1,#8
00054a  4650              MOV      r0,r10
00054c  f7fffffe          BL       TIM_OC2PreloadConfig
;;;529    				break;
000550  e009              B        |L3.1382|
                  |L3.1362|
;;;530    		case PWM_OUTChannel3:	TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
000552  2108              MOVS     r1,#8
000554  4650              MOV      r0,r10
000556  f7fffffe          BL       TIM_OC3PreloadConfig
;;;531    				break;
00055a  e004              B        |L3.1382|
                  |L3.1372|
;;;532    		case PWM_OUTChannel4:	TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
00055c  2108              MOVS     r1,#8
00055e  4650              MOV      r0,r10
000560  f7fffffe          BL       TIM_OC4PreloadConfig
;;;533    				break;
000564  bf00              NOP      
                  |L3.1382|
000566  bf00              NOP                            ;527
;;;534    	}	
;;;535    	
;;;536    	TIM_ARRPreloadConfig(TIMx, ENABLE);			//ARPE使能 
000568  2101              MOVS     r1,#1
00056a  4650              MOV      r0,r10
00056c  f7fffffe          BL       TIM_ARRPreloadConfig
;;;537    	
;;;538    	TIM_Cmd(TIMx, ENABLE); 									//使能TIM
000570  2101              MOVS     r1,#1
000572  4650              MOV      r0,r10
000574  f7fffffe          BL       TIM_Cmd
;;;539    }
000578  b019              ADD      sp,sp,#0x64
00057a  e8bd8ff0          POP      {r4-r11,pc}
;;;540    /*******************************************************************************
                          ENDP


                          AREA ||i.PWM_OUT_SetCount||, CODE, READONLY, ALIGN=2

                  PWM_OUT_SetCount PROC
;;;1043   *******************************************************************************/
;;;1044   void PWM_OUT_SetCount(PWM_TimDef* PWM_Tim,u32 PWM_Count)			//设置输出个数
000000  b570              PUSH     {r4-r6,lr}
;;;1045   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1046   	if(PWM_Count	!=	0)
000006  b185              CBZ      r5,|L4.42|
;;;1047   	{
;;;1048   		PWM_Tim->PWM_BasicData.PWM_Count	=	2*PWM_Count;
000008  0068              LSLS     r0,r5,#1
00000a  6220              STR      r0,[r4,#0x20]
;;;1049   		PWM_Tim->PWM_RunData.PWM_Pulse	=	0;
00000c  2100              MOVS     r1,#0
00000e  62e1              STR      r1,[r4,#0x2c]
;;;1050   		PWM_Tim->PWM_RunData.PWM_Cycle	=	0;	
000010  2000              MOVS     r0,#0
000012  8520              STRH     r0,[r4,#0x28]
;;;1051   		
;;;1052   		
;;;1053   		PWM_Tim->PWM_BasicData.GPIOx->BRR = PWM_Tim->PWM_BasicData.GPIO_Pin_n;			//GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin);						//输出低
000014  8920              LDRH     r0,[r4,#8]
000016  6861              LDR      r1,[r4,#4]
000018  6148              STR      r0,[r1,#0x14]
;;;1054   		TIM1->CNT	=	1;
00001a  2001              MOVS     r0,#1
00001c  4909              LDR      r1,|L4.68|
00001e  8008              STRH     r0,[r1,#0]
;;;1055   		TIM_Cmd(PWM_Tim->PWM_BasicData.TIMx, ENABLE); 															//使能TIM		//输出高
000020  2101              MOVS     r1,#1
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_Cmd
000028  e00b              B        |L4.66|
                  |L4.42|
;;;1056   	}
;;;1057   	else
;;;1058   	{
;;;1059   		PWM_Tim->PWM_BasicData.PWM_Count	=	0;
00002a  2000              MOVS     r0,#0
00002c  6220              STR      r0,[r4,#0x20]
;;;1060   		PWM_Tim->PWM_RunData.PWM_Pulse	=	0;
00002e  2100              MOVS     r1,#0
000030  62e1              STR      r1,[r4,#0x2c]
;;;1061   		PWM_Tim->PWM_RunData.PWM_Cycle	=	0;
000032  8520              STRH     r0,[r4,#0x28]
;;;1062   		
;;;1063   		PWM_Tim->PWM_BasicData.GPIOx->BRR = PWM_Tim->PWM_BasicData.GPIO_Pin_n;			//GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin);						//输出低
000034  8920              LDRH     r0,[r4,#8]
000036  6861              LDR      r1,[r4,#4]
000038  6148              STR      r0,[r1,#0x14]
;;;1064   		TIM_Cmd(PWM_Tim->PWM_BasicData.TIMx, DISABLE); 															//禁止TIM
00003a  2100              MOVS     r1,#0
00003c  6820              LDR      r0,[r4,#0]
00003e  f7fffffe          BL       TIM_Cmd
                  |L4.66|
;;;1065   	}
;;;1066   }
000042  bd70              POP      {r4-r6,pc}
;;;1067   /*******************************************************************************
                          ENDP

                  |L4.68|
                          DCD      0x40012c24

                          AREA ||i.PWM_OUT_SetFre||, CODE, READONLY, ALIGN=2

                  PWM_OUT_SetFre PROC
;;;973    *******************************************************************************/
;;;974    void PWM_OUT_SetFre(PWM_TimDef* PWM_Tim,double PWM_Frequency)			//PWM输出频率最大10MHz计算
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;975    {
000004  b08d              SUB      sp,sp,#0x34
000006  4681              MOV      r9,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;976    
;;;977    	//*1,结构体定义***********************************************************************
;;;978    	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值	
;;;979    	
;;;980    	//*2,变量定义*************************************************************************		
;;;981    
;;;982    	TIM_TypeDef * TIMx		=	PWM_Tim->PWM_BasicData.TIMx;
00000c  f8d96000          LDR      r6,[r9,#0]
;;;983    	
;;;984    	u32	TIMx_Frequency	=	0	;			//定时器频率
000010  2000              MOVS     r0,#0
000012  9006              STR      r0,[sp,#0x18]
;;;985    	u16 TIMx_Prescaler	=	0	;			//定时器时钟分频值		取值范围：0x0000~0xFFFF
000014  9005              STR      r0,[sp,#0x14]
;;;986      u16 TIMx_Period			=	0	;			//定时器自动重装载值	取值范围：0x0000~0xFFFF
000016  9004              STR      r0,[sp,#0x10]
;;;987    	
;;;988    	PWM_Frequency				=	2*(PWM_Frequency);	//由于翻转需要双倍频率
000018  4622              MOV      r2,r4
00001a  462b              MOV      r3,r5
00001c  f04f4180          MOV      r1,#0x40000000
000020  f7fffffe          BL       __aeabi_dmul
000024  4604              MOV      r4,r0
000026  460d              MOV      r5,r1
;;;989    	//*6.2.3,获取TIMx时钟**********************************************************************
;;;990    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;991    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;992    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
000028  a807              ADD      r0,sp,#0x1c
00002a  f7fffffe          BL       RCC_GetClocksFreq
;;;993    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;;
00002e  9807              LDR      r0,[sp,#0x1c]
000030  9006              STR      r0,[sp,#0x18]
;;;994    	if ((((u32)TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
000032  485d              LDR      r0,|L5.424|
000034  4030              ANDS     r0,r0,r6
000036  495c              LDR      r1,|L5.424|
000038  4288              CMP      r0,r1
00003a  d102              BNE      |L5.66|
;;;995      {
;;;996        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2
00003c  980a              LDR      r0,[sp,#0x28]
00003e  9006              STR      r0,[sp,#0x18]
000040  e001              B        |L5.70|
                  |L5.66|
;;;997      }
;;;998      else
;;;999      {
;;;1000       TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1
000042  9809              LDR      r0,[sp,#0x24]
000044  9006              STR      r0,[sp,#0x18]
                  |L5.70|
;;;1001     }
;;;1002   	//*6.2.4,计算定时器参数*********************************************************************
;;;1003   	if(PWM_Frequency>100000)		//>100KHz
000046  2200              MOVS     r2,#0
000048  4b58              LDR      r3,|L5.428|
00004a  4620              MOV      r0,r4
00004c  4629              MOV      r1,r5
00004e  f7fffffe          BL       __aeabi_cdrcmple
000052  d215              BCS      |L5.128|
;;;1004   	{
;;;1005   		TIMx_Prescaler=0;
000054  2000              MOVS     r0,#0
000056  9005              STR      r0,[sp,#0x14]
;;;1006   		TIMx_Period=(u16)(TIMx_Frequency/PWM_Frequency-1);
000058  9806              LDR      r0,[sp,#0x18]
00005a  f7fffffe          BL       __aeabi_ui2d
00005e  4622              MOV      r2,r4
000060  462b              MOV      r3,r5
000062  e9cd0102          STRD     r0,r1,[sp,#8]
000066  f7fffffe          BL       __aeabi_ddiv
00006a  4682              MOV      r10,r0
00006c  2200              MOVS     r2,#0
00006e  4b50              LDR      r3,|L5.432|
000070  f7fffffe          BL       __aeabi_dsub
000074  4607              MOV      r7,r0
000076  f7fffffe          BL       __aeabi_d2uiz
00007a  b280              UXTH     r0,r0
00007c  9004              STR      r0,[sp,#0x10]
00007e  e08c              B        |L5.410|
                  |L5.128|
;;;1007   	}
;;;1008   	else if(PWM_Frequency>1000)	//>1KHz
000080  2200              MOVS     r2,#0
000082  4b4c              LDR      r3,|L5.436|
000084  4620              MOV      r0,r4
000086  4629              MOV      r1,r5
000088  f7fffffe          BL       __aeabi_cdrcmple
00008c  d21b              BCS      |L5.198|
;;;1009   	{
;;;1010   		TIMx_Prescaler=10-1;
00008e  2009              MOVS     r0,#9
000090  9005              STR      r0,[sp,#0x14]
;;;1011   		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/10-1);
000092  9806              LDR      r0,[sp,#0x18]
000094  f7fffffe          BL       __aeabi_ui2d
000098  4682              MOV      r10,r0
00009a  4622              MOV      r2,r4
00009c  462b              MOV      r3,r5
00009e  f7fffffe          BL       __aeabi_ddiv
0000a2  4607              MOV      r7,r0
0000a4  2200              MOVS     r2,#0
0000a6  4b44              LDR      r3,|L5.440|
0000a8  f7fffffe          BL       __aeabi_ddiv
0000ac  2200              MOVS     r2,#0
0000ae  4b40              LDR      r3,|L5.432|
0000b0  e9cd0100          STRD     r0,r1,[sp,#0]
0000b4  f7fffffe          BL       __aeabi_dsub
0000b8  e9cd0102          STRD     r0,r1,[sp,#8]
0000bc  f7fffffe          BL       __aeabi_d2uiz
0000c0  b280              UXTH     r0,r0
0000c2  9004              STR      r0,[sp,#0x10]
0000c4  e069              B        |L5.410|
                  |L5.198|
;;;1012   	}
;;;1013   	else if(PWM_Frequency>100)		//>100Hz
0000c6  2200              MOVS     r2,#0
0000c8  4b3c              LDR      r3,|L5.444|
0000ca  4620              MOV      r0,r4
0000cc  4629              MOV      r1,r5
0000ce  f7fffffe          BL       __aeabi_cdrcmple
0000d2  d21b              BCS      |L5.268|
;;;1014   	{
;;;1015   		TIMx_Prescaler=100-1;
0000d4  2063              MOVS     r0,#0x63
0000d6  9005              STR      r0,[sp,#0x14]
;;;1016   		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/100-1);
0000d8  9806              LDR      r0,[sp,#0x18]
0000da  f7fffffe          BL       __aeabi_ui2d
0000de  4607              MOV      r7,r0
0000e0  4622              MOV      r2,r4
0000e2  462b              MOV      r3,r5
0000e4  f7fffffe          BL       __aeabi_ddiv
0000e8  2200              MOVS     r2,#0
0000ea  4b34              LDR      r3,|L5.444|
0000ec  e9cd0100          STRD     r0,r1,[sp,#0]
0000f0  f7fffffe          BL       __aeabi_ddiv
0000f4  4682              MOV      r10,r0
0000f6  2200              MOVS     r2,#0
0000f8  4b2d              LDR      r3,|L5.432|
0000fa  f7fffffe          BL       __aeabi_dsub
0000fe  e9cd0102          STRD     r0,r1,[sp,#8]
000102  f7fffffe          BL       __aeabi_d2uiz
000106  b280              UXTH     r0,r0
000108  9004              STR      r0,[sp,#0x10]
00010a  e046              B        |L5.410|
                  |L5.268|
;;;1017   	}
;;;1018   	else if(PWM_Frequency>10)		//>10Hz
00010c  2200              MOVS     r2,#0
00010e  4b2a              LDR      r3,|L5.440|
000110  4620              MOV      r0,r4
000112  4629              MOV      r1,r5
000114  f7fffffe          BL       __aeabi_cdrcmple
000118  d21c              BCS      |L5.340|
;;;1019   	{
;;;1020   		TIMx_Prescaler=1000-1;
00011a  f24030e7          MOV      r0,#0x3e7
00011e  9005              STR      r0,[sp,#0x14]
;;;1021   		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/1000-1);
000120  9806              LDR      r0,[sp,#0x18]
000122  f7fffffe          BL       __aeabi_ui2d
000126  4682              MOV      r10,r0
000128  4622              MOV      r2,r4
00012a  462b              MOV      r3,r5
00012c  f7fffffe          BL       __aeabi_ddiv
000130  4607              MOV      r7,r0
000132  2200              MOVS     r2,#0
000134  4b1f              LDR      r3,|L5.436|
000136  f7fffffe          BL       __aeabi_ddiv
00013a  2200              MOVS     r2,#0
00013c  4b1c              LDR      r3,|L5.432|
00013e  e9cd0100          STRD     r0,r1,[sp,#0]
000142  f7fffffe          BL       __aeabi_dsub
000146  e9cd0102          STRD     r0,r1,[sp,#8]
00014a  f7fffffe          BL       __aeabi_d2uiz
00014e  b280              UXTH     r0,r0
000150  9004              STR      r0,[sp,#0x10]
000152  e022              B        |L5.410|
                  |L5.340|
;;;1022   	}
;;;1023   	else if(PWM_Frequency<=10)		//<=10Hz
000154  2200              MOVS     r2,#0
000156  4b18              LDR      r3,|L5.440|
000158  4620              MOV      r0,r4
00015a  4629              MOV      r1,r5
00015c  f7fffffe          BL       __aeabi_cdcmple
000160  d81b              BHI      |L5.410|
;;;1024   	{
;;;1025   		TIMx_Prescaler=2000-1;
000162  f24070cf          MOV      r0,#0x7cf
000166  9005              STR      r0,[sp,#0x14]
;;;1026   		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/2000-1);
000168  9806              LDR      r0,[sp,#0x18]
00016a  f7fffffe          BL       __aeabi_ui2d
00016e  4682              MOV      r10,r0
000170  4622              MOV      r2,r4
000172  462b              MOV      r3,r5
000174  f7fffffe          BL       __aeabi_ddiv
000178  4607              MOV      r7,r0
00017a  2200              MOVS     r2,#0
00017c  4b10              LDR      r3,|L5.448|
00017e  f7fffffe          BL       __aeabi_ddiv
000182  2200              MOVS     r2,#0
000184  4b0a              LDR      r3,|L5.432|
000186  e9cd0100          STRD     r0,r1,[sp,#0]
00018a  f7fffffe          BL       __aeabi_dsub
00018e  e9cd0102          STRD     r0,r1,[sp,#8]
000192  f7fffffe          BL       __aeabi_d2uiz
000196  b280              UXTH     r0,r0
000198  9004              STR      r0,[sp,#0x10]
                  |L5.410|
;;;1027   	}
;;;1028   	//6.3定时器初始化*********************************************************************
;;;1029   	
;;;1030   	/* Set the Autoreload value */
;;;1031     TIMx->ARR = TIMx_Period;        		//设定自动重装载值
00019a  9804              LDR      r0,[sp,#0x10]
00019c  85b0              STRH     r0,[r6,#0x2c]
;;;1032   
;;;1033     /* Set the Prescaler value */
;;;1034     TIMx->PSC = TIMx_Prescaler; 				//设定分频值
00019e  9805              LDR      r0,[sp,#0x14]
0001a0  8530              STRH     r0,[r6,#0x28]
;;;1035   	
;;;1036   //	TIMx->CNT	=	1;
;;;1037   }
0001a2  b00d              ADD      sp,sp,#0x34
0001a4  e8bd8ff0          POP      {r4-r11,pc}
;;;1038   /*******************************************************************************
                          ENDP

                  |L5.424|
                          DCD      0x40010000
                  |L5.428|
                          DCD      0x40f86a00
                  |L5.432|
                          DCD      0x3ff00000
                  |L5.436|
                          DCD      0x408f4000
                  |L5.440|
                          DCD      0x40240000
                  |L5.444|
                          DCD      0x40590000
                  |L5.448|
                          DCD      0x409f4000

                          AREA ||i.PWM_OUT_TIMConf||, CODE, READONLY, ALIGN=2

                  PWM_OUT_TIMConf PROC
;;;806    *******************************************************************************/
;;;807    void PWM_OUT_TIMConf(PWM_TimDef* PWM_Tim)			//PWM输出配置---最大100KHz
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;808    {
000004  b091              SUB      sp,sp,#0x44
000006  4606              MOV      r6,r0
;;;809    	//*1,结构体定义***********************************************************************
;;;810    	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义	
;;;811    	RCC_ClocksTypeDef RCC_ClocksStatus;							//时钟状态---时钟值
;;;812    	NVIC_InitTypeDef	NVIC_InitStructure;						//中断结构体
;;;813    	
;;;814    	
;;;815    	//*2,变量定义*************************************************************************	
;;;816    	
;;;817    //	GPIO_TypeDef* GPIOx		=	PWM_Tim->PWM_BasicData.GPIOx;			//x=A/B/C/D/E/F/G
;;;818    	TIM_TypeDef * TIMx		=	PWM_Tim->PWM_BasicData.TIMx;
000008  f8d69000          LDR      r9,[r6,#0]
;;;819    //	u16 GPIO_Pin_n				=	PWM_Tim->PWM_BasicData.GPIO_Pin_n;
;;;820    	double PWM_Frequency	=	2*(PWM_Tim->PWM_BasicData.PWM_Frequency);
00000c  e9d67304          LDRD     r7,r3,[r6,#0x10]
000010  463a              MOV      r2,r7
000012  2000              MOVS     r0,#0
000014  f04f4180          MOV      r1,#0x40000000
000018  f7fffffe          BL       __aeabi_dmul
00001c  4604              MOV      r4,r0
00001e  460d              MOV      r5,r1
;;;821    	
;;;822    	u8 TIM_IRQChannel=0;
000020  2000              MOVS     r0,#0
000022  9007              STR      r0,[sp,#0x1c]
;;;823    
;;;824    //	u32 RCC_APB2Periph_GPIOx	=	0x00;		//x=A/B/C/D/E/F/G	
;;;825    	u32	TIMx_Frequency				=	0;			//	定时器时钟
000024  9006              STR      r0,[sp,#0x18]
;;;826    	u16 TIMx_Prescaler				=	0	;			//	定时器时钟分频值		取值范围：0x0000~0xFFFF
000026  9005              STR      r0,[sp,#0x14]
;;;827      u16 TIMx_Period						=	0	;			//	定时器自动重装载值	取值范围：0x0000~0xFFFF
000028  9004              STR      r0,[sp,#0x10]
;;;828    	
;;;829    	//*3,参数设置**************************************************************************	
;;;830    	
;;;831    	//*5,GPIO配置============================================================================	
;;;832    	//*5.1,打开相应的时钟*********************************************************************
;;;833    	GPIO_Configuration_OPP50(PWM_Tim->PWM_BasicData.GPIOx,PWM_Tim->PWM_BasicData.GPIO_Pin_n);
00002a  8931              LDRH     r1,[r6,#8]
00002c  6870              LDR      r0,[r6,#4]
00002e  f7fffffe          BL       GPIO_Configuration_OPP50
;;;834    
;;;835    	//*6,定时器配置============================================================================
;;;836    	//*6.1,打开相应的时钟*********************************************************************
;;;837    	switch ((u32)TIMx)
000032  49a3              LDR      r1,|L6.704|
000034  eba90001          SUB      r0,r9,r1
000038  4589              CMP      r9,r1
00003a  d03d              BEQ      |L6.184|
00003c  dc0c              BGT      |L6.88|
00003e  f1b94f80          CMP      r9,#0x40000000
000042  d01d              BEQ      |L6.128|
000044  489f              LDR      r0,|L6.708|
000046  4448              ADD      r0,r0,r9
000048  b308              CBZ      r0,|L6.142|
00004a  f5b06f80          CMP      r0,#0x400
00004e  d025              BEQ      |L6.156|
000050  f5b06f00          CMP      r0,#0x800
000054  d148              BNE      |L6.232|
000056  e028              B        |L6.170|
                  |L6.88|
000058  f5b06f80          CMP      r0,#0x400
00005c  d033              BEQ      |L6.198|
00005e  f5b03f8e          CMP      r0,#0x11c00
000062  d003              BEQ      |L6.108|
000064  f5b03f92          CMP      r0,#0x12400
000068  d13e              BNE      |L6.232|
00006a  e033              B        |L6.212|
                  |L6.108|
;;;838    	{
;;;839    		case TIM1_BASE:
;;;840    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  02c8              LSLS     r0,r1,#11
000070  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;841    			TIM_IRQChannel=TIM1_UP_IRQChannel;	
000074  2019              MOVS     r0,#0x19
000076  9007              STR      r0,[sp,#0x1c]
;;;842    			TIM_TimeBaseStructure.TIM_RepetitionCounter	=	0;
000078  2000              MOVS     r0,#0
00007a  f88d0040          STRB     r0,[sp,#0x40]
;;;843    			break;
00007e  e034              B        |L6.234|
                  |L6.128|
;;;844    		
;;;845    		case TIM2_BASE:
;;;846    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000080  2101              MOVS     r1,#1
000082  4608              MOV      r0,r1
000084  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;847    			TIM_IRQChannel=TIM2_IRQChannel;
000088  201c              MOVS     r0,#0x1c
00008a  9007              STR      r0,[sp,#0x1c]
;;;848    			break;
00008c  e02d              B        |L6.234|
                  |L6.142|
;;;849    		
;;;850    		case TIM3_BASE:
;;;851    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00008e  2101              MOVS     r1,#1
000090  2002              MOVS     r0,#2
000092  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;852    			TIM_IRQChannel=TIM3_IRQChannel;
000096  201d              MOVS     r0,#0x1d
000098  9007              STR      r0,[sp,#0x1c]
;;;853    			break;
00009a  e026              B        |L6.234|
                  |L6.156|
;;;854    		
;;;855    		case TIM4_BASE:
;;;856    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
00009c  2101              MOVS     r1,#1
00009e  2004              MOVS     r0,#4
0000a0  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;857    			TIM_IRQChannel=TIM4_IRQChannel;
0000a4  201e              MOVS     r0,#0x1e
0000a6  9007              STR      r0,[sp,#0x1c]
;;;858    			break;
0000a8  e01f              B        |L6.234|
                  |L6.170|
;;;859    		
;;;860    		case TIM5_BASE:
;;;861    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  2008              MOVS     r0,#8
0000ae  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;862    			TIM_IRQChannel=TIM5_IRQChannel;
0000b2  2032              MOVS     r0,#0x32
0000b4  9007              STR      r0,[sp,#0x1c]
;;;863    			break;
0000b6  e018              B        |L6.234|
                  |L6.184|
;;;864    		
;;;865    		case TIM6_BASE:
;;;866    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
0000b8  2101              MOVS     r1,#1
0000ba  2010              MOVS     r0,#0x10
0000bc  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;867    			TIM_IRQChannel=TIM6_IRQChannel;
0000c0  2036              MOVS     r0,#0x36
0000c2  9007              STR      r0,[sp,#0x1c]
;;;868    			break;
0000c4  e011              B        |L6.234|
                  |L6.198|
;;;869    		
;;;870    		case TIM7_BASE:
;;;871    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
0000c6  2101              MOVS     r1,#1
0000c8  2020              MOVS     r0,#0x20
0000ca  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;872    			TIM_IRQChannel=TIM7_IRQChannel;
0000ce  2037              MOVS     r0,#0x37
0000d0  9007              STR      r0,[sp,#0x1c]
;;;873    			break;
0000d2  e00a              B        |L6.234|
                  |L6.212|
;;;874    		
;;;875    		case TIM8_BASE:
;;;876    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
0000d4  2101              MOVS     r1,#1
0000d6  0348              LSLS     r0,r1,#13
0000d8  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;877    			TIM_IRQChannel=TIM8_UP_IRQChannel;
0000dc  202c              MOVS     r0,#0x2c
0000de  9007              STR      r0,[sp,#0x1c]
;;;878    			TIM_TimeBaseStructure.TIM_RepetitionCounter	=	0;
0000e0  2000              MOVS     r0,#0
0000e2  f88d0040          STRB     r0,[sp,#0x40]
;;;879    			break;
0000e6  e000              B        |L6.234|
                  |L6.232|
;;;880    		
;;;881    		default:
;;;882    			break;		
0000e8  bf00              NOP      
                  |L6.234|
0000ea  bf00              NOP                            ;843
;;;883    	}
;;;884    	//*6.2,计算定时时间**********************************************************************
;;;885    	//*6.2.1,计算最大公约数（减少中断次数）****************************************************
;;;886    //	c	=	a	%	b;
;;;887    //	while(c	!=	0)
;;;888    //	{
;;;889    //		a	=	b;
;;;890    //		b	=	c;
;;;891    //		c	=	a	%	b;	
;;;892    //	}
;;;893    
;;;894    	PWM_Tim->PWM_BasicData.PWM_Count	=	0;
0000ec  2000              MOVS     r0,#0
0000ee  6230              STR      r0,[r6,#0x20]
;;;895    	PWM_Tim->PWM_RunData.PWM_Cycle	=	0;
0000f0  8530              STRH     r0,[r6,#0x28]
;;;896    //	PWM_Tim->PWM_RunData.PWM_Pulse	=	0;
;;;897    
;;;898    	//*6.2.2,计算实际运行频率******************************************************************
;;;899    //	PWM_Frequency	=	(double)(PWM_Frequency	*	PWM_Tim->PWM_RunData.PWM_Cycle);
;;;900    	
;;;901    	//*6.2.3,获取TIMx时钟**********************************************************************
;;;902    	//1）-----分频值及自动重装载值计算（PWM_Frequency 频率，单位Hz）
;;;903    	//--------1MHz 1us=1000ns,1KHz 10us=10000ns
;;;904    	RCC_GetClocksFreq(&RCC_ClocksStatus);	//获取时钟参数
0000f2  a809              ADD      r0,sp,#0x24
0000f4  f7fffffe          BL       RCC_GetClocksFreq
;;;905    	TIMx_Frequency = RCC_ClocksStatus.SYSCLK_Frequency;
0000f8  9809              LDR      r0,[sp,#0x24]
0000fa  9006              STR      r0,[sp,#0x18]
;;;906    	if ((((u32)TIMx)&APB2PERIPH_BASE) == APB2PERIPH_BASE)
0000fc  4872              LDR      r0,|L6.712|
0000fe  ea090000          AND      r0,r9,r0
000102  4971              LDR      r1,|L6.712|
000104  4288              CMP      r0,r1
000106  d102              BNE      |L6.270|
;;;907      {
;;;908        TIMx_Frequency = RCC_ClocksStatus.PCLK2_Frequency;	//APB2
000108  980c              LDR      r0,[sp,#0x30]
00010a  9006              STR      r0,[sp,#0x18]
00010c  e001              B        |L6.274|
                  |L6.270|
;;;909      }
;;;910      else
;;;911      {
;;;912        TIMx_Frequency = RCC_ClocksStatus.PCLK1_Frequency;	//APB1
00010e  980b              LDR      r0,[sp,#0x2c]
000110  9006              STR      r0,[sp,#0x18]
                  |L6.274|
;;;913      }
;;;914    //	TIMx_Frequency = 72000000;
;;;915    	//*6.2.4,计算定时器参数*********************************************************************
;;;916    	//Fsys==Fpwm*Count==Fpwm*(Prescaler*Period)	
;;;917    	//	TIMx_Prescaler				=	72-1		;		// 	定时器时钟分频值
;;;918    	//	TIMx_Period						=	1000-1	;		// 	定时器自动重装载值
;;;919    	//	Tim_num1							=	0				;		//	临时变量1
;;;920    	if(PWM_Frequency>100000)		//>100KHz
000112  2200              MOVS     r2,#0
000114  4b6d              LDR      r3,|L6.716|
000116  4620              MOV      r0,r4
000118  4629              MOV      r1,r5
00011a  f7fffffe          BL       __aeabi_cdrcmple
00011e  d215              BCS      |L6.332|
;;;921    	{
;;;922    		TIMx_Prescaler=0;
000120  2000              MOVS     r0,#0
000122  9005              STR      r0,[sp,#0x14]
;;;923    		TIMx_Period=(u16)(TIMx_Frequency/PWM_Frequency-1);
000124  9806              LDR      r0,[sp,#0x18]
000126  f7fffffe          BL       __aeabi_ui2d
00012a  4622              MOV      r2,r4
00012c  462b              MOV      r3,r5
00012e  e9cd0102          STRD     r0,r1,[sp,#8]
000132  f7fffffe          BL       __aeabi_ddiv
000136  4682              MOV      r10,r0
000138  2200              MOVS     r2,#0
00013a  4b65              LDR      r3,|L6.720|
00013c  f7fffffe          BL       __aeabi_dsub
000140  4607              MOV      r7,r0
000142  f7fffffe          BL       __aeabi_d2uiz
000146  b280              UXTH     r0,r0
000148  9004              STR      r0,[sp,#0x10]
00014a  e08c              B        |L6.614|
                  |L6.332|
;;;924    	}
;;;925    	else if(PWM_Frequency>1000)	//>1KHz
00014c  2200              MOVS     r2,#0
00014e  4b61              LDR      r3,|L6.724|
000150  4620              MOV      r0,r4
000152  4629              MOV      r1,r5
000154  f7fffffe          BL       __aeabi_cdrcmple
000158  d21b              BCS      |L6.402|
;;;926    	{
;;;927    		TIMx_Prescaler=10-1;
00015a  2009              MOVS     r0,#9
00015c  9005              STR      r0,[sp,#0x14]
;;;928    		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/10-1);
00015e  9806              LDR      r0,[sp,#0x18]
000160  f7fffffe          BL       __aeabi_ui2d
000164  4607              MOV      r7,r0
000166  4622              MOV      r2,r4
000168  462b              MOV      r3,r5
00016a  f7fffffe          BL       __aeabi_ddiv
00016e  4682              MOV      r10,r0
000170  2200              MOVS     r2,#0
000172  4b59              LDR      r3,|L6.728|
000174  f7fffffe          BL       __aeabi_ddiv
000178  2200              MOVS     r2,#0
00017a  4b55              LDR      r3,|L6.720|
00017c  e9cd0100          STRD     r0,r1,[sp,#0]
000180  f7fffffe          BL       __aeabi_dsub
000184  e9cd0102          STRD     r0,r1,[sp,#8]
000188  f7fffffe          BL       __aeabi_d2uiz
00018c  b280              UXTH     r0,r0
00018e  9004              STR      r0,[sp,#0x10]
000190  e069              B        |L6.614|
                  |L6.402|
;;;929    	}
;;;930    	else if(PWM_Frequency>100)		//>100Hz
000192  2200              MOVS     r2,#0
000194  4b51              LDR      r3,|L6.732|
000196  4620              MOV      r0,r4
000198  4629              MOV      r1,r5
00019a  f7fffffe          BL       __aeabi_cdrcmple
00019e  d21b              BCS      |L6.472|
;;;931    	{
;;;932    		TIMx_Prescaler=100-1;
0001a0  2063              MOVS     r0,#0x63
0001a2  9005              STR      r0,[sp,#0x14]
;;;933    		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/100-1);
0001a4  9806              LDR      r0,[sp,#0x18]
0001a6  f7fffffe          BL       __aeabi_ui2d
0001aa  4607              MOV      r7,r0
0001ac  4622              MOV      r2,r4
0001ae  462b              MOV      r3,r5
0001b0  f7fffffe          BL       __aeabi_ddiv
0001b4  2200              MOVS     r2,#0
0001b6  4b49              LDR      r3,|L6.732|
0001b8  e9cd0100          STRD     r0,r1,[sp,#0]
0001bc  f7fffffe          BL       __aeabi_ddiv
0001c0  4682              MOV      r10,r0
0001c2  2200              MOVS     r2,#0
0001c4  4b42              LDR      r3,|L6.720|
0001c6  f7fffffe          BL       __aeabi_dsub
0001ca  e9cd0102          STRD     r0,r1,[sp,#8]
0001ce  f7fffffe          BL       __aeabi_d2uiz
0001d2  b280              UXTH     r0,r0
0001d4  9004              STR      r0,[sp,#0x10]
0001d6  e046              B        |L6.614|
                  |L6.472|
;;;934    	}
;;;935    	else if(PWM_Frequency>10)		//>10Hz
0001d8  2200              MOVS     r2,#0
0001da  4b3f              LDR      r3,|L6.728|
0001dc  4620              MOV      r0,r4
0001de  4629              MOV      r1,r5
0001e0  f7fffffe          BL       __aeabi_cdrcmple
0001e4  d21c              BCS      |L6.544|
;;;936    	{
;;;937    		TIMx_Prescaler=1000-1;
0001e6  f24030e7          MOV      r0,#0x3e7
0001ea  9005              STR      r0,[sp,#0x14]
;;;938    		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/1000-1);
0001ec  9806              LDR      r0,[sp,#0x18]
0001ee  f7fffffe          BL       __aeabi_ui2d
0001f2  4682              MOV      r10,r0
0001f4  4622              MOV      r2,r4
0001f6  462b              MOV      r3,r5
0001f8  f7fffffe          BL       __aeabi_ddiv
0001fc  4607              MOV      r7,r0
0001fe  2200              MOVS     r2,#0
000200  4b34              LDR      r3,|L6.724|
000202  f7fffffe          BL       __aeabi_ddiv
000206  2200              MOVS     r2,#0
000208  4b31              LDR      r3,|L6.720|
00020a  e9cd0100          STRD     r0,r1,[sp,#0]
00020e  f7fffffe          BL       __aeabi_dsub
000212  e9cd0102          STRD     r0,r1,[sp,#8]
000216  f7fffffe          BL       __aeabi_d2uiz
00021a  b280              UXTH     r0,r0
00021c  9004              STR      r0,[sp,#0x10]
00021e  e022              B        |L6.614|
                  |L6.544|
;;;939    	}
;;;940    	else if(PWM_Frequency<=10)		//<=10Hz
000220  2200              MOVS     r2,#0
000222  4b2d              LDR      r3,|L6.728|
000224  4620              MOV      r0,r4
000226  4629              MOV      r1,r5
000228  f7fffffe          BL       __aeabi_cdcmple
00022c  d81b              BHI      |L6.614|
;;;941    	{
;;;942    		TIMx_Prescaler=2000-1;
00022e  f24070cf          MOV      r0,#0x7cf
000232  9005              STR      r0,[sp,#0x14]
;;;943    		TIMx_Period=(u16)((TIMx_Frequency/PWM_Frequency)/2000-1);
000234  9806              LDR      r0,[sp,#0x18]
000236  f7fffffe          BL       __aeabi_ui2d
00023a  4682              MOV      r10,r0
00023c  4622              MOV      r2,r4
00023e  462b              MOV      r3,r5
000240  f7fffffe          BL       __aeabi_ddiv
000244  4607              MOV      r7,r0
000246  2200              MOVS     r2,#0
000248  4b25              LDR      r3,|L6.736|
00024a  f7fffffe          BL       __aeabi_ddiv
00024e  2200              MOVS     r2,#0
000250  4b1f              LDR      r3,|L6.720|
000252  e9cd0100          STRD     r0,r1,[sp,#0]
000256  f7fffffe          BL       __aeabi_dsub
00025a  e9cd0102          STRD     r0,r1,[sp,#8]
00025e  f7fffffe          BL       __aeabi_d2uiz
000262  b280              UXTH     r0,r0
000264  9004              STR      r0,[sp,#0x10]
                  |L6.614|
;;;944    	}	
;;;945    	//6.3定时器初始化*********************************************************************
;;;946    	TIM_TimeBaseStructure.TIM_Prescaler = TIMx_Prescaler; 				//设定分频值
000266  9805              LDR      r0,[sp,#0x14]
000268  f8ad0038          STRH     r0,[sp,#0x38]
;;;947    	TIM_TimeBaseStructure.TIM_Period 		= TIMx_Period;        		//设定自动重装载值
00026c  9804              LDR      r0,[sp,#0x10]
00026e  f8ad003c          STRH     r0,[sp,#0x3c]
;;;948    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;  				//不分割
000272  2000              MOVS     r0,#0
000274  f8ad003e          STRH     r0,[sp,#0x3e]
;;;949    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  		//向上计数
000278  f8ad003a          STRH     r0,[sp,#0x3a]
;;;950    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);		//初始化	
00027c  a90e              ADD      r1,sp,#0x38
00027e  4648              MOV      r0,r9
000280  f7fffffe          BL       TIM_TimeBaseInit
;;;951    		
;;;952    	//*6,中断配置============================================================================
;;;953    	NVIC_InitStructure.NVIC_IRQChannel = TIM_IRQChannel;
000284  9807              LDR      r0,[sp,#0x1c]
000286  f88d0020          STRB     r0,[sp,#0x20]
;;;954    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00028a  2000              MOVS     r0,#0
00028c  f88d0021          STRB     r0,[sp,#0x21]
;;;955    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000290  f88d0022          STRB     r0,[sp,#0x22]
;;;956    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000294  2001              MOVS     r0,#1
000296  f88d0023          STRB     r0,[sp,#0x23]
;;;957    	NVIC_Init(&NVIC_InitStructure);
00029a  a808              ADD      r0,sp,#0x20
00029c  f7fffffe          BL       NVIC_Init
;;;958    	
;;;959    	/* Clear TIMx update pending flag[清除TIMx溢出中断] */
;;;960    	TIM_ClearFlag(TIMx, TIM_FLAG_Update);
0002a0  2101              MOVS     r1,#1
0002a2  4648              MOV      r0,r9
0002a4  f7fffffe          BL       TIM_ClearFlag
;;;961    
;;;962    	/* Enable TIM2 Update interrupt [TIMx溢出中断允许]*/
;;;963    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE); 
0002a8  2201              MOVS     r2,#1
0002aa  4611              MOV      r1,r2
0002ac  4648              MOV      r0,r9
0002ae  f7fffffe          BL       TIM_ITConfig
;;;964    	
;;;965    	TIM_Cmd(TIMx, DISABLE); 									//使能TIM
0002b2  2100              MOVS     r1,#0
0002b4  4648              MOV      r0,r9
0002b6  f7fffffe          BL       TIM_Cmd
;;;966    }
0002ba  b011              ADD      sp,sp,#0x44
0002bc  e8bd8ff0          POP      {r4-r11,pc}
;;;967    /*******************************************************************************
                          ENDP

                  |L6.704|
                          DCD      0x40001000
                  |L6.708|
                          DCD      0xbffffc00
                  |L6.712|
                          DCD      0x40010000
                  |L6.716|
                          DCD      0x40f86a00
                  |L6.720|
                          DCD      0x3ff00000
                  |L6.724|
                          DCD      0x408f4000
                  |L6.728|
                          DCD      0x40240000
                  |L6.732|
                          DCD      0x40590000
                  |L6.736|
                          DCD      0x409f4000

                          AREA ||i.PWM_OUT_TIMServer||, CODE, READONLY, ALIGN=2

                  PWM_OUT_TIMServer PROC
;;;1072   *******************************************************************************/
;;;1073   u8 PWM_OUT_TIMServer(PWM_TimDef* PWM_Tim)			//PWM输出配置
000000  b5f8              PUSH     {r3-r7,lr}
;;;1074   {
000002  4604              MOV      r4,r0
;;;1075   	volatile u8	temp	=	0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;1076   	if((PWM_Tim->PWM_BasicData.TIMx->SR & TIM_IT_Update)	== TIM_IT_Update)
000008  6820              LDR      r0,[r4,#0]
00000a  8a00              LDRH     r0,[r0,#0x10]
00000c  f0000001          AND      r0,r0,#1
000010  2800              CMP      r0,#0
000012  d05c              BEQ      |L7.206|
;;;1077   	{
;;;1078   		if(PWM_Tim->PWM_RunData.PWM_Pulse<PWM_Tim->PWM_BasicData.PWM_Count)
000014  6a21              LDR      r1,[r4,#0x20]
000016  6ae0              LDR      r0,[r4,#0x2c]
000018  4288              CMP      r0,r1
00001a  d249              BCS      |L7.176|
;;;1079   		{
;;;1080   			if(PWM_Tim->PWM_RunData.PWM_Pulse	<	PWM_Tim->PWM_BasicData.PWM_RunUp)		//加速
00001c  69e1              LDR      r1,[r4,#0x1c]
00001e  6ae0              LDR      r0,[r4,#0x2c]
000020  4288              CMP      r0,r1
000022  d217              BCS      |L7.84|
;;;1081   			{
;;;1082   				if(PWM_Tim->PWM_RunData.PWM_Cycle++	>=	PWM_Tim->PWM_BasicData.PWM_Updata)
000024  8d21              LDRH     r1,[r4,#0x28]
000026  1c48              ADDS     r0,r1,#1
000028  8520              STRH     r0,[r4,#0x28]
00002a  8b20              LDRH     r0,[r4,#0x18]
00002c  4281              CMP      r1,r0
00002e  db36              BLT      |L7.158|
;;;1083   				{
;;;1084   					PWM_Tim->PWM_RunData.PWM_Cycle	=	0;
000030  2000              MOVS     r0,#0
000032  8520              STRH     r0,[r4,#0x28]
;;;1085   					PWM_Tim->PWM_BasicData.PWM_Frequency+=20;						//频率增加--加速
000034  2200              MOVS     r2,#0
000036  4b27              LDR      r3,|L7.212|
000038  e9d45104          LDRD     r5,r1,[r4,#0x10]
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       __aeabi_dadd
000042  e9c40104          STRD     r0,r1,[r4,#0x10]
;;;1086   					PWM_OUT_SetFre(PWM_Tim,PWM_Tim->PWM_BasicData.PWM_Frequency);														//设置时间
000046  e9d45304          LDRD     r5,r3,[r4,#0x10]
00004a  462a              MOV      r2,r5
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       PWM_OUT_SetFre
000052  e024              B        |L7.158|
                  |L7.84|
;;;1087   				}
;;;1088   			}
;;;1089   			else if(PWM_Tim->PWM_RunData.PWM_Pulse+(PWM_Tim->PWM_BasicData.PWM_RunUp)>PWM_Tim->PWM_BasicData.PWM_Count)
000054  69e1              LDR      r1,[r4,#0x1c]
000056  6ae0              LDR      r0,[r4,#0x2c]
000058  4408              ADD      r0,r0,r1
00005a  6a21              LDR      r1,[r4,#0x20]
00005c  4288              CMP      r0,r1
00005e  d91e              BLS      |L7.158|
;;;1090   			{
;;;1091   				if(PWM_Tim->PWM_RunData.PWM_Cycle++>=PWM_Tim->PWM_BasicData.PWM_Updata	&&	PWM_Tim->PWM_BasicData.PWM_Frequency>200)
000060  8d21              LDRH     r1,[r4,#0x28]
000062  1c48              ADDS     r0,r1,#1
000064  8520              STRH     r0,[r4,#0x28]
000066  8b20              LDRH     r0,[r4,#0x18]
000068  4281              CMP      r1,r0
00006a  db18              BLT      |L7.158|
00006c  2200              MOVS     r2,#0
00006e  4b1a              LDR      r3,|L7.216|
000070  e9d45104          LDRD     r5,r1,[r4,#0x10]
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       __aeabi_cdrcmple
00007a  d210              BCS      |L7.158|
;;;1092   				{
;;;1093   					PWM_Tim->PWM_RunData.PWM_Cycle	=	0;
00007c  2000              MOVS     r0,#0
00007e  8520              STRH     r0,[r4,#0x28]
;;;1094   					PWM_Tim->PWM_BasicData.PWM_Frequency-=20;						//频率增加--加速
000080  2200              MOVS     r2,#0
000082  4b14              LDR      r3,|L7.212|
000084  e9d45104          LDRD     r5,r1,[r4,#0x10]
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       __aeabi_dsub
00008e  e9c40104          STRD     r0,r1,[r4,#0x10]
;;;1095   					PWM_OUT_SetFre(PWM_Tim,PWM_Tim->PWM_BasicData.PWM_Frequency);														//设置时间
000092  e9d45304          LDRD     r5,r3,[r4,#0x10]
000096  462a              MOV      r2,r5
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       PWM_OUT_SetFre
                  |L7.158|
;;;1096   				}
;;;1097   			}
;;;1098   		
;;;1099   			PWM_Tim->PWM_RunData.PWM_Pulse++;
00009e  6ae0              LDR      r0,[r4,#0x2c]
0000a0  1c40              ADDS     r0,r0,#1
0000a2  62e0              STR      r0,[r4,#0x2c]
;;;1100   			
;;;1101   			GPIO_Toggle	(PWM_Tim->PWM_BasicData.GPIOx,	PWM_Tim->PWM_BasicData.GPIO_Pin_n);		//将GPIO相应管脚输出翻转----V20170605
0000a4  8921              LDRH     r1,[r4,#8]
0000a6  6860              LDR      r0,[r4,#4]
0000a8  f7fffffe          BL       GPIO_Toggle
;;;1102   			
;;;1103   //			TIM_ClearFlag(PWM_Tim->PWM_BasicData.TIMx, TIM_FLAG_Update);									//清除中断标志
;;;1104   			return 1;
0000ac  2001              MOVS     r0,#1
                  |L7.174|
;;;1105   			
;;;1106   		}
;;;1107   		else
;;;1108   		{
;;;1109   			PWM_Tim->PWM_RunData.PWM_Pulse	=	0;
;;;1110   			PWM_Tim->PWM_BasicData.GPIOx->BRR = PWM_Tim->PWM_BasicData.GPIO_Pin_n;			//GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin);
;;;1111   			TIM_ClearFlag(PWM_Tim->PWM_BasicData.TIMx, TIM_FLAG_Update);									//清除中断标志
;;;1112   			TIM_Cmd(PWM_Tim->PWM_BasicData.TIMx, DISABLE); 															//禁止TIM
;;;1113   			return 2;				//计数完成
;;;1114   			
;;;1115   		}
;;;1116   		TIM_ClearFlag(PWM_Tim->PWM_BasicData.TIMx, TIM_FLAG_Update);									//清除中断标志
;;;1117   		return 1;
;;;1118   	}
;;;1119   	return 0;
;;;1120   }
0000ae  bdf8              POP      {r3-r7,pc}
                  |L7.176|
0000b0  2100              MOVS     r1,#0                 ;1109
0000b2  62e1              STR      r1,[r4,#0x2c]         ;1109
0000b4  8920              LDRH     r0,[r4,#8]            ;1110
0000b6  6861              LDR      r1,[r4,#4]            ;1110
0000b8  6148              STR      r0,[r1,#0x14]         ;1110
0000ba  2101              MOVS     r1,#1                 ;1111
0000bc  6820              LDR      r0,[r4,#0]            ;1111
0000be  f7fffffe          BL       TIM_ClearFlag
0000c2  2100              MOVS     r1,#0                 ;1112
0000c4  6820              LDR      r0,[r4,#0]            ;1112
0000c6  f7fffffe          BL       TIM_Cmd
0000ca  2002              MOVS     r0,#2                 ;1113
0000cc  e7ef              B        |L7.174|
                  |L7.206|
0000ce  2000              MOVS     r0,#0                 ;1119
0000d0  e7ed              B        |L7.174|
;;;1121   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L7.212|
                          DCD      0x40340000
                  |L7.216|
                          DCD      0x40690000

                          AREA ||i.SetPWM_Ratio||, CODE, READONLY, ALIGN=1

                  SetPWM_Ratio PROC
;;;786    *******************************************************************************/
;;;787    void SetPWM_Ratio(u16 PWM_Ratio)
000000  f04f4180          MOV      r1,#0x40000000
;;;788    {
;;;789    //	TIM_OCInitTypeDef TIMOCInitStructure;
;;;790    //	TIMOCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; 								//选择定时器模式:TIM脉冲宽度调制模式1
;;;791    //	TIMOCInitStructure.TIM_Pulse =PWM_Ratio;												//占空比=(CCRx/ARR)*1000%
;;;792    //	TIMOCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;				//输出极性:TIM输出比较极性高
;;;793    //	TIMOCInitStructure.TIM_OutputState = TIM_OutputState_Enable;		//比较输出使能
;;;794    //	
;;;795    //	TIM_OC1Init(TIM2, &TIMOCInitStructure);													//TIM2的CH1输出使能
;;;796    	
;;;797    	TIM2->CCR1 = PWM_Ratio;
000004  8688              STRH     r0,[r1,#0x34]
;;;798    }
000006  4770              BX       lr
;;;799    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  Tim1_Count
                          DCD      0x00000000
                  Tim2_Count
                          DCD      0x00000000
                  Tim3_Count
                          DCD      0x00000000
                  Tim4_Count
                          DCD      0x00000000
