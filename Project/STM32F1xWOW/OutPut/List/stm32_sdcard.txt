; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_sdcard.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_sdcard.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_sdcard.crf ..\..\Driver\WOW\SCR\STM32_SDCard.C]
                          THUMB

                          AREA ||i.SDCard_Configuration||, CODE, READONLY, ALIGN=2

                  SDCard_Configuration PROC
;;;62     //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;63     SDCard_ErrorStatus	SDCard_Configuration(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  4604              MOV      r4,r0
;;;65     	//____________定义变量
;;;66     	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000004  2501              MOVS     r5,#1
;;;67     	//____________函数调用
;;;68     	SDCard_GPIO_Configuration();							//SPI管脚配置
000006  f7fffffe          BL       SDCard_GPIO_Configuration
;;;69     	SDCard_SPI_Configuration(SD_CLK_SpeedL);	//SPI配置--低速
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       SDCard_SPI_Configuration
;;;70     #ifdef	SDCard_DMA
;;;71     	SDCard_DMA_Configuration((u32*)SD_TX_Addr,(u32*)SD_RX_Addr,SDCard_BufferSize);
000010  026a              LSLS     r2,r5,#9
000012  490b              LDR      r1,|L1.64|
000014  480b              LDR      r0,|L1.68|
000016  f7fffffe          BL       SDCard_DMA_Configuration
;;;72     #endif
;;;73     	Errorstatus=SDCard_Initialize(SDCard_CardInfo);														//SDCard初始化
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SDCard_Initialize
000020  4605              MOV      r5,r0
;;;74     	if(Errorstatus==SDCard_SUCCESS)
000022  2d01              CMP      r5,#1
000024  d109              BNE      |L1.58|
;;;75     	{
;;;76     		if(SDCard_CardInfo->SDCard_TYPE!=SD_TYPE_ERR)
000026  f8940040          LDRB     r0,[r4,#0x40]
00002a  b120              CBZ      r0,|L1.54|
;;;77     		{
;;;78     			SDCard_SPI_Configuration(SD_CLK_SpeedH);	//SPI配置--高速
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       SDCard_SPI_Configuration
;;;79     			return SDCard_SUCCESS;
000032  2001              MOVS     r0,#1
                  |L1.52|
;;;80     		}
;;;81     		else
;;;82     		{
;;;83     			return SDCard_ERROR;
;;;84     		}
;;;85     	}
;;;86     	return	Errorstatus;
;;;87     }
000034  bd70              POP      {r4-r6,pc}
                  |L1.54|
000036  2000              MOVS     r0,#0                 ;83
000038  e7fc              B        |L1.52|
                  |L1.58|
00003a  4628              MOV      r0,r5                 ;86
00003c  e7fa              B        |L1.52|
;;;88     //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      SD_RX_Addr
                  |L1.68|
                          DCD      SD_TX_Addr

                          AREA ||i.SDCard_DMASend||, CODE, READONLY, ALIGN=2

                  SDCard_DMASend PROC
;;;525    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;526    void SDCard_DMASend(unsigned int BufferSize)
000000  b510              PUSH     {r4,lr}
;;;527    {
000002  4604              MOV      r4,r0
;;;528    	DMA1_Channel3->CNDTR =BufferSize;										//设定待发送缓冲区大小
000004  4809              LDR      r0,|L2.44|
000006  6344              STR      r4,[r0,#0x34]
;;;529    	DMA1_Channel3->CMAR =(u32)SD_TX_Addr;					//发送缓冲区	
000008  4809              LDR      r0,|L2.48|
00000a  4908              LDR      r1,|L2.44|
00000c  63c8              STR      r0,[r1,#0x3c]
;;;530    	
;;;531    	DMA1_Channel2->CNDTR =BufferSize;										//设定接收缓冲区大小
00000e  4608              MOV      r0,r1
000010  6204              STR      r4,[r0,#0x20]
;;;532    	DMA1_Channel2->CMAR =(u32)SD_RX_Addr;					//接收缓冲区
000012  4808              LDR      r0,|L2.52|
000014  6288              STR      r0,[r1,#0x28]
;;;533    	
;;;534    	DMA_Cmd(DMA1_Channel3,ENABLE);											//DMA发送开启3
000016  2101              MOVS     r1,#1
000018  4804              LDR      r0,|L2.44|
00001a  3030              ADDS     r0,r0,#0x30
00001c  f7fffffe          BL       DMA_Cmd
;;;535    	DMA_Cmd(DMA1_Channel2,ENABLE);											//DMA发送开启2
000020  2101              MOVS     r1,#1
000022  4802              LDR      r0,|L2.44|
000024  301c              ADDS     r0,r0,#0x1c
000026  f7fffffe          BL       DMA_Cmd
;;;536    }
00002a  bd10              POP      {r4,pc}
;;;537    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

                  |L2.44|
                          DCD      0x40020000
                  |L2.48|
                          DCD      SD_TX_Addr
                  |L2.52|
                          DCD      SD_RX_Addr

                          AREA ||i.SDCard_DMA_Configuration||, CODE, READONLY, ALIGN=2

                  SDCard_DMA_Configuration PROC
;;;249    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;250    void	SDCard_DMA_Configuration(u32 *SD_TX_Addr,u32 *SD_RX_Addr,u32 BufferSize)
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
000002  b08c              SUB      sp,sp,#0x30
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;252    	//1)____________定义
;;;253    	DMA_InitTypeDef			DMA_Initstructure;
;;;254    	NVIC_InitTypeDef		NVIC_Initstructure;
;;;255    	
;;;256    	//2)____________DMA发送初始化，外设作为DMA的目的端
;;;257    	DMA_Initstructure.DMA_PeripheralBaseAddr	=	(u32)(&SPI1->DR);								//DMA外设源地址
00000a  482c              LDR      r0,|L3.188|
00000c  9001              STR      r0,[sp,#4]
;;;258    	DMA_Initstructure.DMA_MemoryBaseAddr			=	(u32)SD_TX_Addr;								//DMA数据内存地址
00000e  9602              STR      r6,[sp,#8]
;;;259    	DMA_Initstructure.DMA_DIR									= DMA_DIR_PeripheralDST;					//DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
000010  2010              MOVS     r0,#0x10
000012  9003              STR      r0,[sp,#0xc]
;;;260    	DMA_Initstructure.DMA_BufferSize					= BufferSize; 										//指定DMA通道的DMA缓存的大小
000014  9404              STR      r4,[sp,#0x10]
;;;261    	DMA_Initstructure.DMA_PeripheralInc				= DMA_PeripheralInc_Disable;			//DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变），
000016  2000              MOVS     r0,#0
000018  9005              STR      r0,[sp,#0x14]
;;;262    	DMA_Initstructure.DMA_MemoryInc						=	DMA_MemoryInc_Enable;						//DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
00001a  2080              MOVS     r0,#0x80
00001c  9006              STR      r0,[sp,#0x18]
;;;263    	DMA_Initstructure.DMA_PeripheralDataSize	= DMA_PeripheralDataSize_Byte;		//外设数据宽度--DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
00001e  2000              MOVS     r0,#0
000020  9007              STR      r0,[sp,#0x1c]
;;;264    	DMA_Initstructure.DMA_MemoryDataSize			= DMA_MemoryDataSize_Byte;				//内存数据宽度--DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
000022  9008              STR      r0,[sp,#0x20]
;;;265    	DMA_Initstructure.DMA_Mode								= DMA_Mode_Normal;								//DMA工作模式--DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
000024  9009              STR      r0,[sp,#0x24]
;;;266    	DMA_Initstructure.DMA_Priority						= DMA_Priority_High; 							//DMA通道的转输优先级--DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
000026  f44f5000          MOV      r0,#0x2000
00002a  900a              STR      r0,[sp,#0x28]
;;;267    	DMA_Initstructure.DMA_M2M									= DMA_M2M_Disable;								//DMA通道的内存到内存传输--DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
00002c  2000              MOVS     r0,#0
00002e  900b              STR      r0,[sp,#0x2c]
;;;268    	DMA_Init(DMA1_Channel3,&DMA_Initstructure);																	//初始化DMA
000030  a901              ADD      r1,sp,#4
000032  4823              LDR      r0,|L3.192|
000034  f7fffffe          BL       DMA_Init
;;;269    
;;;270    	//3)____________DMA接收初始化，外设作为DMA的源端
;;;271    	DMA_Initstructure.DMA_PeripheralBaseAddr	=	(u32)(&SPI1->DR);								//DMA外设源地址
000038  4820              LDR      r0,|L3.188|
00003a  9001              STR      r0,[sp,#4]
;;;272    	DMA_Initstructure.DMA_MemoryBaseAddr     	=	(u32)SD_RX_Addr;								//DMA数据内存地址
00003c  9502              STR      r5,[sp,#8]
;;;273    	DMA_Initstructure.DMA_DIR									=	DMA_DIR_PeripheralSRC;					//DMA_DIR_PeripheralDST（外设作为DMA的目的端），DMA_DIR_PeripheralSRC（外设作为数据传输的来源）
00003e  2000              MOVS     r0,#0
000040  9003              STR      r0,[sp,#0xc]
;;;274    	DMA_Initstructure.DMA_BufferSize					= BufferSize; 										//指定DMA通道的DMA缓存的大小
000042  9404              STR      r4,[sp,#0x10]
;;;275    	DMA_Initstructure.DMA_PeripheralInc				= DMA_PeripheralInc_Disable;			//DMA_PeripheralInc_Enable（外设地址寄存器递增），DMA_PeripheralInc_Disable（外设地址寄存器不变），
000044  9005              STR      r0,[sp,#0x14]
;;;276    	DMA_Initstructure.DMA_MemoryInc						=	DMA_MemoryInc_Enable;						//DMA_MemoryInc_Enable（内存地址寄存器递增），DMA_MemoryInc_Disable（内存地址寄存器不变）
000046  2080              MOVS     r0,#0x80
000048  9006              STR      r0,[sp,#0x18]
;;;277    	DMA_Initstructure.DMA_PeripheralDataSize	= DMA_PeripheralDataSize_Byte;		//外设数据宽度--DMA_PeripheralDataSize_Byte（数据宽度为8位），DMA_PeripheralDataSize_HalfWord（数据宽度为16位），DMA_PeripheralDataSize_Word（数据宽度为32位）
00004a  2000              MOVS     r0,#0
00004c  9007              STR      r0,[sp,#0x1c]
;;;278    	DMA_Initstructure.DMA_MemoryDataSize			= DMA_MemoryDataSize_Byte;				//内存数据宽度--DMA_MemoryDataSize_Byte（数据宽度为8位），DMA_MemoryDataSize_HalfWord（数据宽度为16位），DMA_MemoryDataSize_Word（数据宽度为32位）
00004e  9008              STR      r0,[sp,#0x20]
;;;279    	DMA_Initstructure.DMA_Mode								= DMA_Mode_Normal;								//DMA工作模式--DMA_Mode_Normal（只传送一次）, DMA_Mode_Circular（不停地传送）
000050  9009              STR      r0,[sp,#0x24]
;;;280    	DMA_Initstructure.DMA_Priority						= DMA_Priority_High; 							//DMA通道的转输优先级--DMA_Priority_VeryHigh（非常高）DMA_Priority_High（高)，DMA_Priority_Medium（中），DMA_Priority_Low（低）
000052  f44f5000          MOV      r0,#0x2000
000056  900a              STR      r0,[sp,#0x28]
;;;281    	DMA_Initstructure.DMA_M2M									= DMA_M2M_Disable;								//DMA通道的内存到内存传输--DMA_M2M_Enable(设置为内存到内存传输)，DMA_M2M_Disable（非内存到内存传输）
000058  2000              MOVS     r0,#0
00005a  900b              STR      r0,[sp,#0x2c]
;;;282    	DMA_Init(DMA1_Channel2,&DMA_Initstructure);																	//初始化DMA
00005c  a901              ADD      r1,sp,#4
00005e  4818              LDR      r0,|L3.192|
000060  3814              SUBS     r0,r0,#0x14
000062  f7fffffe          BL       DMA_Init
;;;283    	
;;;284    	//4)____________DMA通道中断初始化---此为DMA发送中断----DMA发送完成中断
;;;285    	NVIC_Initstructure.NVIC_IRQChannel = DMA1_Channel2_IRQChannel;       				//设置中断源
000066  200c              MOVS     r0,#0xc
000068  f88d0000          STRB     r0,[sp,#0]
;;;286    	NVIC_Initstructure.NVIC_IRQChannelPreemptionPriority=1;
00006c  2001              MOVS     r0,#1
00006e  f88d0001          STRB     r0,[sp,#1]
;;;287    	NVIC_Initstructure.NVIC_IRQChannelSubPriority = 1; 													//中断响应优先级0	
000072  f88d0002          STRB     r0,[sp,#2]
;;;288    	NVIC_Initstructure.NVIC_IRQChannelCmd = ENABLE;        											//打开中断
000076  f88d0003          STRB     r0,[sp,#3]
;;;289    	NVIC_Init(&NVIC_Initstructure);
00007a  4668              MOV      r0,sp
00007c  f7fffffe          BL       NVIC_Init
;;;290    
;;;291    	//5)____________设置触发中断事件
;;;292    	//		DMA_IT_TC		传输完成中断
;;;293    	//		DMA_IT_HT		传输过半中断
;;;294    	//		DMA_IT_TE		传输错误中断
;;;295    	DMA_ITConfig(DMA1_Channel2,DMA_IT_TC,ENABLE);						//传输完成中断屏蔽
000080  2201              MOVS     r2,#1
000082  2102              MOVS     r1,#2
000084  480e              LDR      r0,|L3.192|
000086  3814              SUBS     r0,r0,#0x14
000088  f7fffffe          BL       DMA_ITConfig
;;;296    	//6)____________使能DMA传输通道	
;;;297    	SPI_I2S_DMACmd(SPI1, SPI_I2S_DMAReq_Tx, ENABLE);				//使能DMA发送
00008c  2201              MOVS     r2,#1
00008e  2102              MOVS     r1,#2
000090  480a              LDR      r0,|L3.188|
000092  380c              SUBS     r0,r0,#0xc
000094  f7fffffe          BL       SPI_I2S_DMACmd
;;;298    	SPI_I2S_DMACmd(SPI1, SPI_I2S_DMAReq_Rx, ENABLE);				//使能DMA接收
000098  2201              MOVS     r2,#1
00009a  4611              MOV      r1,r2
00009c  4807              LDR      r0,|L3.188|
00009e  380c              SUBS     r0,r0,#0xc
0000a0  f7fffffe          BL       SPI_I2S_DMACmd
;;;299    
;;;300    	//6)____________禁止DMA---需要传输时再打开
;;;301    	DMA_Cmd(DMA1_Channel2,DISABLE);	
0000a4  2100              MOVS     r1,#0
0000a6  4806              LDR      r0,|L3.192|
0000a8  3814              SUBS     r0,r0,#0x14
0000aa  f7fffffe          BL       DMA_Cmd
;;;302    	DMA_Cmd(DMA1_Channel3,DISABLE);
0000ae  2100              MOVS     r1,#0
0000b0  4803              LDR      r0,|L3.192|
0000b2  f7fffffe          BL       DMA_Cmd
;;;303    }
0000b6  b00c              ADD      sp,sp,#0x30
0000b8  bd70              POP      {r4-r6,pc}
;;;304    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L3.188|
                          DCD      0x4001300c
                  |L3.192|
                          DCD      0x40020030

                          AREA ||i.SDCard_DisSelect||, CODE, READONLY, ALIGN=2

                  SDCard_DisSelect PROC
;;;498    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;499    void	SDCard_DisSelect(void)
000000  b510              PUSH     {r4,lr}
;;;500    {
;;;501    	SDCard_CS_OFF;								//GPIO_SetBits(SDCard_CS_PORT,	SDCard_CS_PIN)			//取消片选
000002  2001              MOVS     r0,#1
000004  4902              LDR      r1,|L4.16|
000006  6008              STR      r0,[r1,#0]
;;;502    //	GPIO_SetBits(SDCard_CS_PORT,	SDCard_CS_PIN);			//取消片选
;;;503    	SDCard_ReadWriteByte(0xff);		//提供额外的8个时钟
000008  20ff              MOVS     r0,#0xff
00000a  f7fffffe          BL       SDCard_ReadWriteByte
;;;504    }
00000e  bd10              POP      {r4,pc}
;;;505    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

                  |L4.16|
                          DCD      0x42220198

                          AREA ||i.SDCard_EnterIDLE||, CODE, READONLY, ALIGN=1

                  SDCard_EnterIDLE PROC
;;;682    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;683    SDCard_ErrorStatus	SDCard_EnterIDLE(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;684    {
000002  4606              MOV      r6,r0
;;;685    	//____________定义变量
;;;686    //	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;687    	unsigned char retry=20;							//用来进行超时计数
000004  2414              MOVS     r4,#0x14
;;;688    	unsigned char r1=0xFF;							//接收返回字
000006  25ff              MOVS     r5,#0xff
;;;689    //	SDCard_DisSelect();								//取消片选,释放SPI总线--取消上次片选
;;;690    //	SDCard_Select();									//使能sd卡,并且等待卡准备OK
;;;691    	//____________发送CMD0命令
;;;692    	//__发送CMD0命令，成功后返回0x01
;;;693    	//____________判断回应
;;;694    #ifdef	SDCard_DMA
;;;695    	SDCard_SendCmd(CMD0,0x00,0x95);
000008  2295              MOVS     r2,#0x95
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       SDCard_SendCmd
;;;696    #else
;;;697    	retry=20;
;;;698    	r1=0xFF;
;;;699    	do
;;;700    	{
;;;701    //		SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;702    		r1	=	SDCard_SendCmd(CMD0,0x00,0x95);
;;;703    //		SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;704    	}while((r1!=0x01)&&retry--);
;;;705    	if(r1!=0x01)
;;;706    	{
;;;707    //		SDCard_CardInfo->SD_Error=
;;;708    		return	SDCard_ERROR;																//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;709    	}
;;;710    #endif
;;;711    	//____________返回状态
;;;712    	return	SDCard_SUCCESS;	
000012  2001              MOVS     r0,#1
;;;713    }
000014  bd70              POP      {r4-r6,pc}
;;;714    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP


                          AREA ||i.SDCard_EnterReady||, CODE, READONLY, ALIGN=1

                  SDCard_EnterReady PROC
;;;657    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;658    void	SDCard_EnterReady(void)
000000  b510              PUSH     {r4,lr}
;;;659    {
;;;660    	//____________定义变量
;;;661    	u8 retry=0;													//用来进行超时计数
000002  2400              MOVS     r4,#0
;;;662    	//____________使能片选
;;;663    //	SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;664    	//____________发送数据
;;;665    	//	SD卡要求复位前至少发送74个clock，这里我发了很多，足够多
;;;666    	for(retry=0;retry<=20;retry++)
000004  bf00              NOP      
000006  e004              B        |L6.18|
                  |L6.8|
;;;667    	{
;;;668    		SDCard_ReadWriteByte(0XFF);
000008  20ff              MOVS     r0,#0xff
00000a  f7fffffe          BL       SDCard_ReadWriteByte
00000e  1c60              ADDS     r0,r4,#1              ;666
000010  b2c4              UXTB     r4,r0                 ;666
                  |L6.18|
000012  2c14              CMP      r4,#0x14              ;666
000014  ddf8              BLE      |L6.8|
;;;669    	}
;;;670    	//____________禁止片选	
;;;671    //	SDCard_DisSelect();									//取消片选,释放SPI总线
;;;672    }
000016  bd10              POP      {r4,pc}
;;;673    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP


                          AREA ||i.SDCard_GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  SDCard_GPIO_Configuration PROC
;;;133    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;134    void SDCard_GPIO_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;135    {
;;;136    	//1)____________定义
;;;137    	GPIO_InitTypeDef		GPIO_InitStructure;
;;;138    	//2)____________开启时钟
;;;139    		
;;;140    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,	ENABLE);		//开启AFIO
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;141    	RCC_APB2PeriphClockCmd(SDCard_CS_Periph,		ENABLE);		//开启CS时钟
00000a  2101              MOVS     r1,#1
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;142    	RCC_APB2PeriphClockCmd(SDCard_CLK_Periph,		ENABLE);		//开启CLK时钟
000012  2101              MOVS     r1,#1
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;143    	RCC_APB2PeriphClockCmd(SDCard_MISO_Periph,	ENABLE);		//开启MISO时钟
00001a  2101              MOVS     r1,#1
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;144    	RCC_APB2PeriphClockCmd(SDCard_MOSI_Periph,	ENABLE);		//开启MOSI时钟	
000022  2101              MOVS     r1,#1
000024  2004              MOVS     r0,#4
000026  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;145    	//3)____________管脚配置
;;;146    	//3.1）CS配置
;;;147    	GPIO_InitStructure.GPIO_Pin			=	SDCard_CS_PIN;
00002a  2040              MOVS     r0,#0x40
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;148    	GPIO_InitStructure.GPIO_Mode		=	GPIO_Mode_Out_PP;
000030  2010              MOVS     r0,#0x10
000032  f88d0003          STRB     r0,[sp,#3]
;;;149    	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
000036  2003              MOVS     r0,#3
000038  f88d0002          STRB     r0,[sp,#2]
;;;150    	GPIO_Init(SDCard_CS_PORT, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4815              LDR      r0,|L7.148|
000040  f7fffffe          BL       GPIO_Init
;;;151    	//3.2）CLK配置
;;;152    	GPIO_InitStructure.GPIO_Pin			=	SDCard_CLK_PIN;
000044  2020              MOVS     r0,#0x20
000046  f8ad0000          STRH     r0,[sp,#0]
;;;153    	GPIO_InitStructure.GPIO_Mode		=	GPIO_Mode_AF_PP;
00004a  2018              MOVS     r0,#0x18
00004c  f88d0003          STRB     r0,[sp,#3]
;;;154    	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
000050  2003              MOVS     r0,#3
000052  f88d0002          STRB     r0,[sp,#2]
;;;155    	GPIO_Init(SDCard_CLK_PORT, &GPIO_InitStructure);
000056  4669              MOV      r1,sp
000058  480f              LDR      r0,|L7.152|
00005a  f7fffffe          BL       GPIO_Init
;;;156    	//3.3）MISO配置
;;;157    	GPIO_InitStructure.GPIO_Pin			=	SDCard_MISO_PIN;
00005e  2040              MOVS     r0,#0x40
000060  f8ad0000          STRH     r0,[sp,#0]
;;;158    	GPIO_InitStructure.GPIO_Mode		=	GPIO_Mode_AF_PP;
000064  2018              MOVS     r0,#0x18
000066  f88d0003          STRB     r0,[sp,#3]
;;;159    	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
00006a  2003              MOVS     r0,#3
00006c  f88d0002          STRB     r0,[sp,#2]
;;;160    	GPIO_Init(SDCard_MISO_PORT, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4809              LDR      r0,|L7.152|
000074  f7fffffe          BL       GPIO_Init
;;;161    	//3.4）MOSI配置
;;;162    	GPIO_InitStructure.GPIO_Pin			=	SDCard_MOSI_PIN;
000078  2080              MOVS     r0,#0x80
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;163    	GPIO_InitStructure.GPIO_Mode		=	GPIO_Mode_AF_PP;
00007e  2018              MOVS     r0,#0x18
000080  f88d0003          STRB     r0,[sp,#3]
;;;164    	GPIO_InitStructure.GPIO_Speed		= GPIO_Speed_50MHz;
000084  2003              MOVS     r0,#3
000086  f88d0002          STRB     r0,[sp,#2]
;;;165    	GPIO_Init(SDCard_MOSI_PORT, &GPIO_InitStructure);
00008a  4669              MOV      r1,sp
00008c  4802              LDR      r0,|L7.152|
00008e  f7fffffe          BL       GPIO_Init
;;;166    	
;;;167    //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 ,ENABLE);	
;;;168    //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
;;;169    //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);	
;;;170    //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;171    //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);	
;;;172    //	
;;;173    //	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
;;;174    //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;175    //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;176    //	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;177    //	
;;;178    //	//____________SD-CS
;;;179    //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;			
;;;180    //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;181    //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;182    //	GPIO_Init(GPIOC,&GPIO_InitStructure);
;;;183    //	
;;;184    //	//____________TOUCH-CS
;;;185    //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;			
;;;186    //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;187    //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;188    //	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;189    	
;;;190    }
000092  bd08              POP      {r3,pc}
;;;191    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

                  |L7.148|
                          DCD      0x40011000
                  |L7.152|
                          DCD      0x40010800

                          AREA ||i.SDCard_GetCID||, CODE, READONLY, ALIGN=2

                  SDCard_GetCID PROC
;;;945    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;946    SDCard_ErrorStatus SDCard_GetCID(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;947    {
000004  b08c              SUB      sp,sp,#0x30
000006  4604              MOV      r4,r0
;;;948    	//____________定义变量
;;;949    	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SD_OK 无错误，SD_ERROR 错误
000008  2701              MOVS     r7,#1
;;;950    	SDCard_CID_TypeDef	SDCard_CID;
;;;951    	unsigned char R1;																		//状态值
;;;952    	unsigned char R2;																		//状态值
;;;953    	unsigned char	CID[20]={0xFF};
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
000012  9005              STR      r0,[sp,#0x14]
000014  4842              LDR      r0,|L8.288|
000016  6800              LDR      r0,[r0,#0]  ; <Data1>
000018  9001              STR      r0,[sp,#4]
;;;954    	unsigned char i;																		//
;;;955    //	//____________使能片选
;;;956    //	SDCard_Select();										//使能sd卡,并且等待卡准备OK	
;;;957    	//____________发CMD10命令，读CID
;;;958    	R1=SDCard_SendCmd(CMD10,0,0x01);
00001a  2201              MOVS     r2,#1
00001c  2100              MOVS     r1,#0
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       SDCard_SendCmd
000024  4606              MOV      r6,r0
;;;959    	//____________读CID
;;;960    	if(R1==0x00)
000026  2e00              CMP      r6,#0
000028  d178              BNE      |L8.284|
;;;961    	{
;;;962    //		//____________使能片选
;;;963    //		SDCard_Select();										//使能sd卡,并且等待卡准备OK	
;;;964    		//____________返回R2,
;;;965    		R2=SDCard_ReadWriteByte(0xFF);		
00002a  20ff              MOVS     r0,#0xff
00002c  f7fffffe          BL       SDCard_ReadWriteByte
000030  4680              MOV      r8,r0
;;;966    		//____________读取CSD
;;;967    		for(i=0;i<19;i++)
000032  2500              MOVS     r5,#0
000034  e006              B        |L8.68|
                  |L8.54|
;;;968    		{
;;;969    			CID[i]=SDCard_ReadWriteByte(0xFF);
000036  20ff              MOVS     r0,#0xff
000038  f7fffffe          BL       SDCard_ReadWriteByte
00003c  a901              ADD      r1,sp,#4
00003e  5548              STRB     r0,[r1,r5]
000040  1c68              ADDS     r0,r5,#1              ;967
000042  b2c5              UXTB     r5,r0                 ;967
                  |L8.68|
000044  2d13              CMP      r5,#0x13              ;967
000046  dbf6              BLT      |L8.54|
;;;970    		}
;;;971    //		//____________禁止片选	
;;;972    //		SDCard_DisSelect();									//取消片选,释放SPI总线
;;;973    		//____________解析CID内容
;;;974    		SDCard_CID.ManufacturerID=CID[0];
000048  f89d0004          LDRB     r0,[sp,#4]
00004c  f88d0018          STRB     r0,[sp,#0x18]
;;;975    		SDCard_CID.OEM_AppliID=(((CID[1]&0X00FF)<<8)|(CID[2]&0X00FF));
000050  f89d0005          LDRB     r0,[sp,#5]
000054  f89d1006          LDRB     r1,[sp,#6]
000058  f360211f          BFI      r1,r0,#8,#24
00005c  f8ad101a          STRH     r1,[sp,#0x1a]
;;;976    //		SDCard_CID.ProdName1=((CID[3]<<24)|(CID[4]<<16)|(CID[5]<<8)|(CID[6]));
;;;977    //		SDCard_CID.ProdName2=CID[7];
;;;978    		SDCard_CID.ProdRev=CID[8];
000060  f89d000c          LDRB     r0,[sp,#0xc]
000064  f88d001c          STRB     r0,[sp,#0x1c]
;;;979    		SDCard_CID.ProdSN=((CID[9]&0X000000FF<<24)|(CID[10]&0X000000FF<<16)|(CID[11]&0X000000FF<<8)|(CID[12]&0X000000FF));
000068  f89d000d          LDRB     r0,[sp,#0xd]
00006c  2000              MOVS     r0,#0
00006e  f89d100e          LDRB     r1,[sp,#0xe]
000072  4300              ORRS     r0,r0,r0
000074  f89d100f          LDRB     r1,[sp,#0xf]
000078  f89d1010          LDRB     r1,[sp,#0x10]
00007c  4308              ORRS     r0,r0,r1
00007e  9008              STR      r0,[sp,#0x20]
;;;980    		SDCard_CID.ManufactDate=((CID[13]&0X000F<<8)|(CID[14]&0X00FF));
000080  f89d0011          LDRB     r0,[sp,#0x11]
000084  f89d1012          LDRB     r1,[sp,#0x12]
000088  f8ad1026          STRH     r1,[sp,#0x26]
;;;981    		SDCard_CID.CID_CRC=(CID[15]&0xFE)>>1;
00008c  f89d0013          LDRB     r0,[sp,#0x13]
000090  0840              LSRS     r0,r0,#1
000092  f88d0028          STRB     r0,[sp,#0x28]
;;;982    		//产品名称数组
;;;983    		SDCard_CID.ProdName[0]=CID[3];
000096  f89d0007          LDRB     r0,[sp,#7]
00009a  f88d002a          STRB     r0,[sp,#0x2a]
;;;984    		SDCard_CID.ProdName[1]=CID[4];
00009e  f89d1008          LDRB     r1,[sp,#8]
0000a2  a806              ADD      r0,sp,#0x18
0000a4  74c1              STRB     r1,[r0,#0x13]
;;;985    		SDCard_CID.ProdName[2]=CID[5];
0000a6  f89d1009          LDRB     r1,[sp,#9]
0000aa  7501              STRB     r1,[r0,#0x14]
;;;986    		SDCard_CID.ProdName[3]=CID[6];
0000ac  f89d100a          LDRB     r1,[sp,#0xa]
0000b0  7541              STRB     r1,[r0,#0x15]
;;;987    		SDCard_CID.ProdName[4]=CID[7];
0000b2  f89d100b          LDRB     r1,[sp,#0xb]
0000b6  7581              STRB     r1,[r0,#0x16]
;;;988    		
;;;989    		//____________更新SDCard_CardInfo结构体参数
;;;990    		SDCard_CardInfo->SDCard_CID=SDCard_CID;
0000b8  f89d0018          LDRB     r0,[sp,#0x18]
0000bc  f8840028          STRB     r0,[r4,#0x28]
0000c0  f8bd101a          LDRH     r1,[sp,#0x1a]
0000c4  8561              STRH     r1,[r4,#0x2a]
0000c6  f89d101c          LDRB     r1,[sp,#0x1c]
0000ca  202c              MOVS     r0,#0x2c
0000cc  5501              STRB     r1,[r0,r4]
0000ce  9908              LDR      r1,[sp,#0x20]
0000d0  6321              STR      r1,[r4,#0x30]
0000d2  f89d1024          LDRB     r1,[sp,#0x24]
0000d6  2034              MOVS     r0,#0x34
0000d8  5501              STRB     r1,[r0,r4]
0000da  f8bd1026          LDRH     r1,[sp,#0x26]
0000de  86e1              STRH     r1,[r4,#0x36]
0000e0  f89d1028          LDRB     r1,[sp,#0x28]
0000e4  2038              MOVS     r0,#0x38
0000e6  5501              STRB     r1,[r0,r4]
0000e8  f89d1029          LDRB     r1,[sp,#0x29]
0000ec  2039              MOVS     r0,#0x39
0000ee  5501              STRB     r1,[r0,r4]
0000f0  f89d102a          LDRB     r1,[sp,#0x2a]
0000f4  203a              MOVS     r0,#0x3a
0000f6  5501              STRB     r1,[r0,r4]
0000f8  a806              ADD      r0,sp,#0x18
0000fa  7cc1              LDRB     r1,[r0,#0x13]
0000fc  f884103b          STRB     r1,[r4,#0x3b]
000100  7d01              LDRB     r1,[r0,#0x14]
000102  f884103c          STRB     r1,[r4,#0x3c]
000106  7d41              LDRB     r1,[r0,#0x15]
000108  f884103d          STRB     r1,[r4,#0x3d]
00010c  7d81              LDRB     r1,[r0,#0x16]
00010e  f884103e          STRB     r1,[r4,#0x3e]
;;;991    		
;;;992    		return	SDCard_SUCCESS;
000112  2001              MOVS     r0,#1
                  |L8.276|
;;;993    	}
;;;994    	else
;;;995    	{
;;;996    		return	SDCard_ERROR;
;;;997    	}	
;;;998    	//____________返回状态
;;;999    	return(Errorstatus);
;;;1000   }
000114  b00c              ADD      sp,sp,#0x30
000116  e8bd81f0          POP      {r4-r8,pc}
00011a  e7ff              B        |L8.284|
                  |L8.284|
00011c  2000              MOVS     r0,#0                 ;996
00011e  e7f9              B        |L8.276|
;;;1001   //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

                  |L8.288|
                          DCD      ||.constdata||

                          AREA ||i.SDCard_GetCSD||, CODE, READONLY, ALIGN=2

                  SDCard_GetCSD PROC
;;;1010   //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;1011   SDCard_ErrorStatus SDCard_GetCSD(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1012   {
000004  b090              SUB      sp,sp,#0x40
000006  4604              MOV      r4,r0
;;;1013   	//____________定义变量
;;;1014   	SDCard_ErrorStatus	Errorstatus = SDCard_SUCCESS;		//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000008  2701              MOVS     r7,#1
;;;1015   	SDCard_CSD_TypeDef	SDCard_CSD;
;;;1016   	unsigned char R1;																		//状态值
;;;1017   	unsigned char R2;																		//状态值
;;;1018   	unsigned char	CSD[20]={0xFF};
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
000010  9004              STR      r0,[sp,#0x10]
000012  9005              STR      r0,[sp,#0x14]
000014  488d              LDR      r0,|L9.588|
000016  6800              LDR      r0,[r0,#0]  ; <Data2>
000018  9001              STR      r0,[sp,#4]
;;;1019   	unsigned char i;																		//
;;;1020   	//____________发CMD9命令，读CSD,	返回类型为R2
;;;1021   	R1=SDCard_SendCmd(CMD9,0,0x01);
00001a  2201              MOVS     r2,#1
00001c  2100              MOVS     r1,#0
00001e  2009              MOVS     r0,#9
000020  f7fffffe          BL       SDCard_SendCmd
000024  4606              MOV      r6,r0
;;;1022   	//____________读CSD
;;;1023   	if(R1==0x00)
000026  2e00              CMP      r6,#0
000028  d17e              BNE      |L9.296|
;;;1024   	{
;;;1025   //		//____________使能片选
;;;1026   //		SDCard_Select();										//使能sd卡,并且等待卡准备OK	
;;;1027   		//____________返回R2,
;;;1028   		R2=SDCard_ReadWriteByte(0xFF);		
00002a  20ff              MOVS     r0,#0xff
00002c  f7fffffe          BL       SDCard_ReadWriteByte
000030  4680              MOV      r8,r0
;;;1029   		//____________读取CSD
;;;1030   		for(i=0;i<19;i++)
000032  2500              MOVS     r5,#0
000034  e006              B        |L9.68|
                  |L9.54|
;;;1031   		{
;;;1032   			CSD[i]=SDCard_ReadWriteByte(0xFF);
000036  20ff              MOVS     r0,#0xff
000038  f7fffffe          BL       SDCard_ReadWriteByte
00003c  a901              ADD      r1,sp,#4
00003e  5548              STRB     r0,[r1,r5]
000040  1c68              ADDS     r0,r5,#1              ;1030
000042  b2c5              UXTB     r5,r0                 ;1030
                  |L9.68|
000044  2d13              CMP      r5,#0x13              ;1030
000046  dbf6              BLT      |L9.54|
;;;1033   		}		
;;;1034   //		//____________禁止片选	
;;;1035   //		SDCard_DisSelect();									//取消片选,释放SPI总线
;;;1036   		//____________解析CSD内容	V2.0版本
;;;1037   		SDCard_CSD.CSD_STRUCTURE			=	(CSD[0]>>6)&0x03;			
000048  f89d0004          LDRB     r0,[sp,#4]
00004c  0980              LSRS     r0,r0,#6
00004e  f88d0018          STRB     r0,[sp,#0x18]
;;;1038   		SDCard_CSD.TAAC								=	CSD[1];														
000052  f89d0005          LDRB     r0,[sp,#5]
000056  f88d001a          STRB     r0,[sp,#0x1a]
;;;1039   		SDCard_CSD.NSAC								=	CSD[2];													
00005a  f89d0006          LDRB     r0,[sp,#6]
00005e  f88d001b          STRB     r0,[sp,#0x1b]
;;;1040   		SDCard_CSD.TRAN_SPEED					=	CSD[3];														
000062  f89d0007          LDRB     r0,[sp,#7]
000066  f88d001c          STRB     r0,[sp,#0x1c]
;;;1041   		SDCard_CSD.CCC								=	((0X0FFF&CSD[4])<<4)|((CSD[5]>>4)&0X0F);		
00006a  f89d0008          LDRB     r0,[sp,#8]
00006e  0100              LSLS     r0,r0,#4
000070  f89d1009          LDRB     r1,[sp,#9]
000074  ea401011          ORR      r0,r0,r1,LSR #4
000078  f8ad001e          STRH     r0,[sp,#0x1e]
;;;1042   		SDCard_CSD.READ_BL_LEN				=	CSD[5]&0x0F;				
00007c  f89d0009          LDRB     r0,[sp,#9]
000080  f000000f          AND      r0,r0,#0xf
000084  f88d0020          STRB     r0,[sp,#0x20]
;;;1043   		SDCard_CSD.READ_BL_PARTIAL		=	CSD[6]>>7;				
000088  f89d000a          LDRB     r0,[sp,#0xa]
00008c  11c0              ASRS     r0,r0,#7
00008e  f88d0021          STRB     r0,[sp,#0x21]
;;;1044   		SDCard_CSD.WRITE_BLK_MISALIGN	=	(CSD[6]&0x40>>6);	
000092  f89d000a          LDRB     r0,[sp,#0xa]
000096  f0000001          AND      r0,r0,#1
00009a  f88d0022          STRB     r0,[sp,#0x22]
;;;1045   		SDCard_CSD.READ_BLK_MISALIGN	=	(CSD[6]&0x20>>5);	
00009e  f89d000a          LDRB     r0,[sp,#0xa]
0000a2  f0000001          AND      r0,r0,#1
0000a6  f88d0023          STRB     r0,[sp,#0x23]
;;;1046   		SDCard_CSD.DSR_IMP						=	(CSD[6]&0x10>>4);		
0000aa  f89d000a          LDRB     r0,[sp,#0xa]
0000ae  f0000001          AND      r0,r0,#1
0000b2  f88d0024          STRB     r0,[sp,#0x24]
;;;1047   		SDCard_CSD.C_SIZE							=	((CSD[7]&0x003F)<<16)|((CSD[8]&0x00FF)<<8)|((CSD[9]&0x00FF));
0000b6  f89d000b          LDRB     r0,[sp,#0xb]
0000ba  0680              LSLS     r0,r0,#26
0000bc  0a81              LSRS     r1,r0,#10
0000be  f89d000c          LDRB     r0,[sp,#0xc]
0000c2  ea412000          ORR      r0,r1,r0,LSL #8
0000c6  f89d100d          LDRB     r1,[sp,#0xd]
0000ca  4308              ORRS     r0,r0,r1
0000cc  900a              STR      r0,[sp,#0x28]
;;;1048   		SDCard_CSD.ERASE_BLK_EN				=	CSD[10]&40>>6;
0000ce  2000              MOVS     r0,#0
0000d0  f88d002d          STRB     r0,[sp,#0x2d]
;;;1049   		SDCard_CSD.SECTOR_SIZE				=	(CSD[10]&0x3F)<<1|(CSD[11]&0x80)>>7;
0000d4  f89d000e          LDRB     r0,[sp,#0xe]
0000d8  0680              LSLS     r0,r0,#26
0000da  0e40              LSRS     r0,r0,#25
0000dc  f89d100f          LDRB     r1,[sp,#0xf]
0000e0  ea4010d1          ORR      r0,r0,r1,LSR #7
0000e4  f88d002e          STRB     r0,[sp,#0x2e]
;;;1050   		SDCard_CSD.WP_GRP_SIZE				=	CSD[11]&0x7F;
0000e8  f89d000f          LDRB     r0,[sp,#0xf]
0000ec  f000007f          AND      r0,r0,#0x7f
0000f0  f88d002f          STRB     r0,[sp,#0x2f]
;;;1051   		SDCard_CSD.WP_GRP_ENABLE			=	(CSD[12]&0x80)>>7;
0000f4  f89d0010          LDRB     r0,[sp,#0x10]
0000f8  09c0              LSRS     r0,r0,#7
0000fa  f88d0030          STRB     r0,[sp,#0x30]
;;;1052   		SDCard_CSD.R2W_FACTOR					=	(CSD[12]&0x1C)>>2;
0000fe  f89d0010          LDRB     r0,[sp,#0x10]
000102  f3c00082          UBFX     r0,r0,#2,#3
000106  f88d0032          STRB     r0,[sp,#0x32]
;;;1053   		SDCard_CSD.WRITE_BL_LEN				=	(CSD[12]&0x03)<<2|(CSD[13]&0xC0)>>6;
00010a  f89d0010          LDRB     r0,[sp,#0x10]
00010e  0780              LSLS     r0,r0,#30
000110  0f00              LSRS     r0,r0,#28
000112  f89d1011          LDRB     r1,[sp,#0x11]
000116  ea401091          ORR      r0,r0,r1,LSR #6
00011a  f88d0033          STRB     r0,[sp,#0x33]
;;;1054   		SDCard_CSD.WRITE_BL_PARTIAL		=	(CSD[13]&0x20)>>5;
00011e  f89d0011          LDRB     r0,[sp,#0x11]
000122  f3c01040          UBFX     r0,r0,#5,#1
000126  e000              B        |L9.298|
                  |L9.296|
000128  e08e              B        |L9.584|
                  |L9.298|
00012a  f88d0034          STRB     r0,[sp,#0x34]
;;;1055   		SDCard_CSD.FILE_FORMAT_GRP		=	(CSD[14]&0x80)>>7;
00012e  f89d0012          LDRB     r0,[sp,#0x12]
000132  09c0              LSRS     r0,r0,#7
000134  f88d0036          STRB     r0,[sp,#0x36]
;;;1056   		SDCard_CSD.COPY								=	(CSD[14]&0x40)>>6;
000138  f89d0012          LDRB     r0,[sp,#0x12]
00013c  f3c01080          UBFX     r0,r0,#6,#1
000140  f88d0037          STRB     r0,[sp,#0x37]
;;;1057   		SDCard_CSD.PERM_WRITE_PROTECT	=	(CSD[14]&0x20)>>5;
000144  f89d0012          LDRB     r0,[sp,#0x12]
000148  f3c01040          UBFX     r0,r0,#5,#1
00014c  f88d0038          STRB     r0,[sp,#0x38]
;;;1058   		SDCard_CSD.TMP_WRITE_PROTECT	=	(CSD[14]&0x10)>>4;
000150  f89d0012          LDRB     r0,[sp,#0x12]
000154  f3c01000          UBFX     r0,r0,#4,#1
000158  f88d0039          STRB     r0,[sp,#0x39]
;;;1059   		SDCard_CSD.FILE_FORMAT				=	(CSD[14]&0x0C)>>2;
00015c  f89d0012          LDRB     r0,[sp,#0x12]
000160  f3c00081          UBFX     r0,r0,#2,#2
000164  f88d003a          STRB     r0,[sp,#0x3a]
;;;1060   		SDCard_CSD.CSD_CRC						=	(CSD[15]&0xFE)>>1;	
000168  f89d0013          LDRB     r0,[sp,#0x13]
00016c  0840              LSRS     r0,r0,#1
00016e  f88d003c          STRB     r0,[sp,#0x3c]
;;;1061   
;;;1062   		//____________更新SDCard_CardInfo结构体参数
;;;1063   		SDCard_CardInfo->SDCard_CSD=SDCard_CSD;
000172  f89d0018          LDRB     r0,[sp,#0x18]
000176  7020              STRB     r0,[r4,#0]
000178  f89d0019          LDRB     r0,[sp,#0x19]
00017c  7060              STRB     r0,[r4,#1]
00017e  f89d001a          LDRB     r0,[sp,#0x1a]
000182  70a0              STRB     r0,[r4,#2]
000184  f89d001b          LDRB     r0,[sp,#0x1b]
000188  70e0              STRB     r0,[r4,#3]
00018a  f89d001c          LDRB     r0,[sp,#0x1c]
00018e  7120              STRB     r0,[r4,#4]
000190  f8bd001e          LDRH     r0,[sp,#0x1e]
000194  80e0              STRH     r0,[r4,#6]
000196  f89d0020          LDRB     r0,[sp,#0x20]
00019a  7220              STRB     r0,[r4,#8]
00019c  f89d0021          LDRB     r0,[sp,#0x21]
0001a0  7260              STRB     r0,[r4,#9]
0001a2  f89d0022          LDRB     r0,[sp,#0x22]
0001a6  72a0              STRB     r0,[r4,#0xa]
0001a8  f89d0023          LDRB     r0,[sp,#0x23]
0001ac  72e0              STRB     r0,[r4,#0xb]
0001ae  f89d0024          LDRB     r0,[sp,#0x24]
0001b2  7320              STRB     r0,[r4,#0xc]
0001b4  f89d0025          LDRB     r0,[sp,#0x25]
0001b8  7360              STRB     r0,[r4,#0xd]
0001ba  980a              LDR      r0,[sp,#0x28]
0001bc  6120              STR      r0,[r4,#0x10]
0001be  f89d002c          LDRB     r0,[sp,#0x2c]
0001c2  7520              STRB     r0,[r4,#0x14]
0001c4  f89d002d          LDRB     r0,[sp,#0x2d]
0001c8  7560              STRB     r0,[r4,#0x15]
0001ca  f89d002e          LDRB     r0,[sp,#0x2e]
0001ce  75a0              STRB     r0,[r4,#0x16]
0001d0  f89d002f          LDRB     r0,[sp,#0x2f]
0001d4  75e0              STRB     r0,[r4,#0x17]
0001d6  f89d0030          LDRB     r0,[sp,#0x30]
0001da  7620              STRB     r0,[r4,#0x18]
0001dc  f89d0031          LDRB     r0,[sp,#0x31]
0001e0  7660              STRB     r0,[r4,#0x19]
0001e2  f89d0032          LDRB     r0,[sp,#0x32]
0001e6  76a0              STRB     r0,[r4,#0x1a]
0001e8  f89d0033          LDRB     r0,[sp,#0x33]
0001ec  76e0              STRB     r0,[r4,#0x1b]
0001ee  f89d0034          LDRB     r0,[sp,#0x34]
0001f2  7720              STRB     r0,[r4,#0x1c]
0001f4  f89d0035          LDRB     r0,[sp,#0x35]
0001f8  7760              STRB     r0,[r4,#0x1d]
0001fa  f89d0036          LDRB     r0,[sp,#0x36]
0001fe  77a0              STRB     r0,[r4,#0x1e]
000200  f89d0037          LDRB     r0,[sp,#0x37]
000204  77e0              STRB     r0,[r4,#0x1f]
000206  f89d0038          LDRB     r0,[sp,#0x38]
00020a  f8840020          STRB     r0,[r4,#0x20]
00020e  f89d0039          LDRB     r0,[sp,#0x39]
000212  f8840021          STRB     r0,[r4,#0x21]
000216  f89d003a          LDRB     r0,[sp,#0x3a]
00021a  f8840022          STRB     r0,[r4,#0x22]
00021e  f89d003b          LDRB     r0,[sp,#0x3b]
000222  f8840023          STRB     r0,[r4,#0x23]
000226  f89d003c          LDRB     r0,[sp,#0x3c]
00022a  f8840024          STRB     r0,[r4,#0x24]
00022e  f89d003d          LDRB     r0,[sp,#0x3d]
000232  f8840025          STRB     r0,[r4,#0x25]
;;;1064   		//____________SD卡容量计算
;;;1065   		//memory capacity = (C_SIZE+1) * 512K byte 单位Kb
;;;1066   		SDCard_CardInfo->CardCapacity=((SDCard_CSD.C_SIZE+1)*512)/1024;		//单位MB
000236  980a              LDR      r0,[sp,#0x28]
000238  1c40              ADDS     r0,r0,#1
00023a  f3c00055          UBFX     r0,r0,#1,#22
00023e  6460              STR      r0,[r4,#0x44]
;;;1067   		
;;;1068   		return	SDCard_SUCCESS;
000240  2001              MOVS     r0,#1
                  |L9.578|
;;;1069   	}
;;;1070   
;;;1071   	else
;;;1072   	{
;;;1073   		return	SDCard_ERROR;
;;;1074   	}
;;;1075   	//____________返回状态
;;;1076   	return(Errorstatus);
;;;1077   }
000242  b010              ADD      sp,sp,#0x40
000244  e8bd81f0          POP      {r4-r8,pc}
                  |L9.584|
000248  2000              MOVS     r0,#0                 ;1073
00024a  e7fa              B        |L9.578|
;;;1078   //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

                  |L9.588|
                          DCD      ||.constdata||+0x4

                          AREA ||i.SDCard_GetOCR||, CODE, READONLY, ALIGN=2

                  SDCard_GetOCR PROC
;;;1088   //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;1089   SDCard_ErrorStatus	SDCard_GetOCR(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  b538              PUSH     {r3-r5,lr}
;;;1090   {
000002  4604              MOV      r4,r0
;;;1091   	unsigned char r3[4]={0xFF};
000004  4815              LDR      r0,|L10.92|
000006  6800              LDR      r0,[r0,#0]  ; <Data3>
000008  9000              STR      r0,[sp,#0]
;;;1092   	//2.1.3)然后再发送CMD58命令，接收返回的OCR寄存器的数据，其中第31位用于判断V2.0的卡是否为SDHC类型。
;;;1093   	SDCard_SendCmd(CMD58,0x00,0x00);
00000a  2200              MOVS     r2,#0
00000c  4611              MOV      r1,r2
00000e  203a              MOVS     r0,#0x3a
000010  f7fffffe          BL       SDCard_SendCmd
;;;1094   	
;;;1095   //	SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;1096   	r3[0]	=	SDCard_ReadWriteByte(0xFF);
000014  20ff              MOVS     r0,#0xff
000016  f7fffffe          BL       SDCard_ReadWriteByte
00001a  f88d0000          STRB     r0,[sp,#0]
;;;1097   	r3[1]	=	SDCard_ReadWriteByte(0xFF);
00001e  20ff              MOVS     r0,#0xff
000020  f7fffffe          BL       SDCard_ReadWriteByte
000024  f88d0001          STRB     r0,[sp,#1]
;;;1098   	r3[2]	=	SDCard_ReadWriteByte(0xFF);
000028  20ff              MOVS     r0,#0xff
00002a  f7fffffe          BL       SDCard_ReadWriteByte
00002e  f88d0002          STRB     r0,[sp,#2]
;;;1099   	r3[3]	=	SDCard_ReadWriteByte(0xFF);
000032  20ff              MOVS     r0,#0xff
000034  f7fffffe          BL       SDCard_ReadWriteByte
000038  f88d0003          STRB     r0,[sp,#3]
;;;1100   //	SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;1101   	
;;;1102   	if((r3[0]&0x40)==0x40)	//大容量卡
00003c  f89d0000          LDRB     r0,[sp,#0]
000040  f0000040          AND      r0,r0,#0x40
000044  2840              CMP      r0,#0x40
000046  d103              BNE      |L10.80|
;;;1103   		SDCard_CardInfo->SDCard_TYPE=SD_TYPE_V2HC;					//大容量V2.0SD卡
000048  2006              MOVS     r0,#6
00004a  f8840040          STRB     r0,[r4,#0x40]
00004e  e002              B        |L10.86|
                  |L10.80|
;;;1104   	else
;;;1105   		SDCard_CardInfo->SDCard_TYPE=SD_TYPE_V2MC;					//小容量V2.0SD卡
000050  2004              MOVS     r0,#4
000052  f8840040          STRB     r0,[r4,#0x40]
                  |L10.86|
;;;1106   	return	SDCard_SUCCESS;						
000056  2001              MOVS     r0,#1
;;;1107   }
000058  bd38              POP      {r3-r5,pc}
;;;1108   //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

00005a  0000              DCW      0x0000
                  |L10.92|
                          DCD      ||.constdata||+0x8

                          AREA ||i.SDCard_GetResponse||, CODE, READONLY, ALIGN=1

                  SDCard_GetResponse PROC
;;;574    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;575    SDCard_ErrorStatus SDCard_GetResponse(unsigned char Response)
000000  b570              PUSH     {r4-r6,lr}
;;;576    {
000002  4604              MOV      r4,r0
;;;577    	//____________定义变量
;;;578    	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000004  2601              MOVS     r6,#1
;;;579    	
;;;580    	unsigned int Count=0xFFFF;		//等待次数
000006  f64f75ff          MOV      r5,#0xffff
;;;581    //	//____________禁止片选	
;;;582    //	SDCard_DisSelect();	
;;;583    	//____________使能片选
;;;584    //	SDCard_Select();		//使能sd卡,并且等待卡准备OK		
;;;585    //	while ((SDCard_ReadWriteByte(0XFF))&&Count)	//等待得到准确的回应
;;;586    //		Count--; 
;;;587    //	Count=1; 
;;;588    	while ((SDCard_ReadWriteByte(0XFF)!=Response)&&Count--);	//等待得到准确的回应
00000a  bf00              NOP      
                  |L11.12|
00000c  20ff              MOVS     r0,#0xff
00000e  f7fffffe          BL       SDCard_ReadWriteByte
000012  42a0              CMP      r0,r4
000014  d003              BEQ      |L11.30|
000016  1e28              SUBS     r0,r5,#0
000018  f1a50501          SUB      r5,r5,#1
00001c  d1f6              BNE      |L11.12|
                  |L11.30|
;;;589    
;;;590    	if (Count==0)
00001e  b90d              CBNZ     r5,|L11.36|
;;;591    	{
;;;592    		Errorstatus = SDCard_ERROR;		//得到回应失败  
000020  2600              MOVS     r6,#0
000022  e000              B        |L11.38|
                  |L11.36|
;;;593    	}		
;;;594    	else
;;;595    	{
;;;596    		Errorstatus = SDCard_SUCCESS;	//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000024  2601              MOVS     r6,#1
                  |L11.38|
;;;597    	}
;;;598    //	//____________禁止片选	
;;;599    //	SDCard_DisSelect();	
;;;600    	//____________返回状态
;;;601    	return(Errorstatus);
000026  4630              MOV      r0,r6
;;;602    }
000028  bd70              POP      {r4-r6,pc}
;;;603    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP


                          AREA ||i.SDCard_Identification||, CODE, READONLY, ALIGN=1

                  SDCard_Identification PROC
;;;723    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;724    SDCard_ErrorStatus	SDCard_Identification(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;725    {	
000004  4605              MOV      r5,r0
;;;726    	//2)__先发送V2.0版才具有的CMD8命令，然后检测返回值，
;;;727    	//2.1.1)返回值若是0X01，则表示此卡为V2.0卡，
;;;728    	//2.1.2)然后再发送循环命令CMD55+ACMD41，直到返回0x00，确定SD2.0卡初始化成功；
;;;729    	//2.1.3)然后再发送CMD58命令，接收返回的OCR寄存器的数据，其中第31位用于判断V2.0的卡是否为SDHC类型。
;;;730    	//2.2.1)返回值若不为0X01，则进一步判断是V1.0卡还是MMC卡
;;;731    	//2.2.2)先发送循环命令CMD55+ACMD41进行复位，如果复位不成功则考虑是MMC卡，如果复位成功，则为V1.0卡。
;;;732    	//2.2.3)在复位不成功的情况下，再使用CMD1进行复位，如果复位成功，则表明是MMC卡，如果复位不成功，则表示是无法识别的卡。
;;;733    	
;;;734    	//1)____________定义变量
;;;735    	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000006  2701              MOVS     r7,#1
;;;736    	unsigned char retry=0;							//用来进行超时计数
000008  2600              MOVS     r6,#0
;;;737    	unsigned char r1=0xFF;							//接收返回字
00000a  24ff              MOVS     r4,#0xff
;;;738    	
;;;739    //	SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;740    //	SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;741    	
;;;742    	//2)____________发送CMD8命令,接收返回值
;;;743    	retry=20;
00000c  2614              MOVS     r6,#0x14
;;;744    	r1=0xFF;
00000e  bf00              NOP      
;;;745    	do
000010  bf00              NOP      
                  |L12.18|
;;;746    	{
;;;747    //		SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;748    		r1	=	SDCard_SendCmd(CMD8,0x01AA,0x87);
000012  2287              MOVS     r2,#0x87
000014  f44f71d5          MOV      r1,#0x1aa
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       SDCard_SendCmd
00001e  4604              MOV      r4,r0
;;;749    //		SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;750    	}while((r1!=0x01)&&retry--);
000020  2c01              CMP      r4,#1
000022  d004              BEQ      |L12.46|
000024  1e30              SUBS     r0,r6,#0
000026  f1a60101          SUB      r1,r6,#1
00002a  b2ce              UXTB     r6,r1
00002c  d1f1              BNE      |L12.18|
                  |L12.46|
;;;751    	//2)____________传送完CMD8数据
;;;752    	if(r1==0x01)
00002e  2c01              CMP      r4,#1
000030  d10c              BNE      |L12.76|
;;;753    	{
;;;754    //		SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;755    		SDCard_ReadWriteByte(0xFF);
000032  20ff              MOVS     r0,#0xff
000034  f7fffffe          BL       SDCard_ReadWriteByte
;;;756    		SDCard_ReadWriteByte(0xFF);
000038  20ff              MOVS     r0,#0xff
00003a  f7fffffe          BL       SDCard_ReadWriteByte
;;;757    		SDCard_ReadWriteByte(0xFF);
00003e  20ff              MOVS     r0,#0xff
000040  f7fffffe          BL       SDCard_ReadWriteByte
;;;758    		SDCard_ReadWriteByte(0xFF);
000044  20ff              MOVS     r0,#0xff
000046  f7fffffe          BL       SDCard_ReadWriteByte
00004a  e005              B        |L12.88|
                  |L12.76|
;;;759    //		SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;760    	}
;;;761    	else
;;;762    	{
;;;763    		SDCard_CardInfo->SD_Error	=	SD_ILLEGAL_CMD;					//小容量V2.0SD卡
00004c  2010              MOVS     r0,#0x10
00004e  f8850041          STRB     r0,[r5,#0x41]
;;;764    		return	SDCard_ERROR;																//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000052  2000              MOVS     r0,#0
                  |L12.84|
;;;765    	}
;;;766    	//____________判断SD类型
;;;767    	//2.1.1)返回值若是0X01，则表示此卡为V2.0卡，
;;;768    	if(r1==0x01)				//V2.0卡
;;;769    	{	
;;;770    		//2.1.2)然后再发送循环命令CMD55+ACMD41，直到返回0x00，确定SD2.0卡初始化成功；		
;;;771    		retry=100;
;;;772    		r1=0xFF;
;;;773    		do
;;;774    		{
;;;775    			SDCard_SendCmd(CMD55,0x00,0x01);
;;;776    			r1	=	SDCard_SendCmd(CMD41,0X40000000,0x01);
;;;777    		}while((r1!=0x00)&&retry--);		
;;;778    		if(r1==0x00)		//V2.0SD卡复位成功，获取SDCard OCR信息，包括卡容量类型
;;;779    		{
;;;780    			//2.1.3)然后再发送CMD58命令，接收返回的OCR寄存器的数据，其中第31位用于判断V2.0的卡是否为SDHC类型。
;;;781    			Errorstatus=SDCard_GetOCR(SDCard_CardInfo);
;;;782    //			SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;783    			if(Errorstatus==SDCard_SUCCESS)
;;;784    			return SDCard_SUCCESS;																	//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;785    		}
;;;786    		else		//复位失败
;;;787    		{
;;;788    			SDCard_CardInfo->SDCard_TYPE	=	SD_TYPE_V2;			//小容量V2.0SD卡
;;;789    			SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;790    			return	SDCard_ERROR;																//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;791    		}
;;;792    	}	
;;;793    	//2.2.1)返回值若不为0X01，则进一步判断是V1.0卡还是MMC卡
;;;794    	else
;;;795    	{
;;;796    		//2.2.2)先发送循环命令CMD55+ACMD41进行复位，如果复位不成功则考虑是MMC卡，如果复位成功，则为V1.0卡。
;;;797    		retry=100;
;;;798    		r1=0xFF;
;;;799    		do
;;;800    		{
;;;801    			SDCard_SendCmd(CMD55,0x00,0x01);
;;;802    			r1	=	SDCard_SendCmd(CMD41,0X40000000,0x01);
;;;803    		}while((r1!=0x00)&&retry--);
;;;804    		if(r1==0x00)		//V2.0SD卡复位成功，获取SDCard OCR信息，包括卡容量类型
;;;805    		{
;;;806    			SDCard_GetOCR(SDCard_CardInfo);
;;;807    		}
;;;808    		//2.2.3)在复位不成功的情况下，再使用CMD1进行复位，如果复位成功，则表明是MMC卡，如果复位不成功，则表示是无法识别的卡。
;;;809    		else
;;;810    		{
;;;811    			retry=100;
;;;812    			r1=0xFF;
;;;813    			do
;;;814    			{
;;;815    				SDCard_SendCmd(CMD1,0x00,0x00);
;;;816    			}while((r1!=0x00)&&retry--);
;;;817    			if(r1==0x00)		//卡复位成功，表示此卡为MMC卡
;;;818    			{
;;;819    				SDCard_CardInfo->SDCard_TYPE	=	SD_TYPE_MMC;			//MMC卡
;;;820    			}
;;;821    			else						//复位不成功，表示为无法识别的卡
;;;822    			{
;;;823    				SDCard_CardInfo->SDCard_TYPE	=	SD_TYPE_ERR;			//MMC卡
;;;824    //				SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;825    				return	SDCard_ERROR;															//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;826    			}
;;;827    		}
;;;828    	}
;;;829    	//____________返回SD卡信息
;;;830    	return SDCard_SUCCESS;																	//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;831    }
000054  e8bd81f0          POP      {r4-r8,pc}
                  |L12.88|
000058  2c01              CMP      r4,#1                 ;768
00005a  d122              BNE      |L12.162|
00005c  2664              MOVS     r6,#0x64              ;771
00005e  24ff              MOVS     r4,#0xff              ;772
000060  bf00              NOP                            ;773
                  |L12.98|
000062  2201              MOVS     r2,#1                 ;775
000064  2100              MOVS     r1,#0                 ;775
000066  2037              MOVS     r0,#0x37              ;775
000068  f7fffffe          BL       SDCard_SendCmd
00006c  2201              MOVS     r2,#1                 ;776
00006e  0791              LSLS     r1,r2,#30             ;776
000070  2029              MOVS     r0,#0x29              ;776
000072  f7fffffe          BL       SDCard_SendCmd
000076  4604              MOV      r4,r0                 ;776
000078  b124              CBZ      r4,|L12.132|
00007a  1e30              SUBS     r0,r6,#0              ;777
00007c  f1a60101          SUB      r1,r6,#1              ;777
000080  b2ce              UXTB     r6,r1                 ;777
000082  d1ee              BNE      |L12.98|
                  |L12.132|
000084  b934              CBNZ     r4,|L12.148|
000086  4628              MOV      r0,r5                 ;781
000088  f7fffffe          BL       SDCard_GetOCR
00008c  4607              MOV      r7,r0                 ;781
00008e  2f01              CMP      r7,#1                 ;783
000090  d137              BNE      |L12.258|
000092  e7df              B        |L12.84|
                  |L12.148|
000094  2003              MOVS     r0,#3                 ;788
000096  f8850040          STRB     r0,[r5,#0x40]         ;788
00009a  f7fffffe          BL       SDCard_DisSelect
00009e  2000              MOVS     r0,#0                 ;790
0000a0  e7d8              B        |L12.84|
                  |L12.162|
0000a2  2664              MOVS     r6,#0x64              ;797
0000a4  24ff              MOVS     r4,#0xff              ;798
0000a6  bf00              NOP                            ;799
                  |L12.168|
0000a8  2201              MOVS     r2,#1                 ;801
0000aa  2100              MOVS     r1,#0                 ;801
0000ac  2037              MOVS     r0,#0x37              ;801
0000ae  f7fffffe          BL       SDCard_SendCmd
0000b2  2201              MOVS     r2,#1                 ;802
0000b4  0791              LSLS     r1,r2,#30             ;802
0000b6  2029              MOVS     r0,#0x29              ;802
0000b8  f7fffffe          BL       SDCard_SendCmd
0000bc  4604              MOV      r4,r0                 ;802
0000be  b124              CBZ      r4,|L12.202|
0000c0  1e30              SUBS     r0,r6,#0              ;803
0000c2  f1a60101          SUB      r1,r6,#1              ;803
0000c6  b2ce              UXTB     r6,r1                 ;803
0000c8  d1ee              BNE      |L12.168|
                  |L12.202|
0000ca  b91c              CBNZ     r4,|L12.212|
0000cc  4628              MOV      r0,r5                 ;806
0000ce  f7fffffe          BL       SDCard_GetOCR
0000d2  e016              B        |L12.258|
                  |L12.212|
0000d4  2664              MOVS     r6,#0x64              ;811
0000d6  24ff              MOVS     r4,#0xff              ;812
0000d8  bf00              NOP                            ;813
                  |L12.218|
0000da  2200              MOVS     r2,#0                 ;815
0000dc  4611              MOV      r1,r2                 ;815
0000de  2001              MOVS     r0,#1                 ;815
0000e0  f7fffffe          BL       SDCard_SendCmd
0000e4  b124              CBZ      r4,|L12.240|
0000e6  1e30              SUBS     r0,r6,#0              ;816
0000e8  f1a60101          SUB      r1,r6,#1              ;816
0000ec  b2ce              UXTB     r6,r1                 ;816
0000ee  d1f4              BNE      |L12.218|
                  |L12.240|
0000f0  b91c              CBNZ     r4,|L12.250|
0000f2  2001              MOVS     r0,#1                 ;819
0000f4  f8850040          STRB     r0,[r5,#0x40]         ;819
0000f8  e003              B        |L12.258|
                  |L12.250|
0000fa  2000              MOVS     r0,#0                 ;823
0000fc  f8850040          STRB     r0,[r5,#0x40]         ;823
000100  e7a8              B        |L12.84|
                  |L12.258|
000102  2001              MOVS     r0,#1                 ;830
000104  e7a6              B        |L12.84|
;;;832    
                          ENDP


                          AREA ||i.SDCard_Initialize||, CODE, READONLY, ALIGN=1

                  SDCard_Initialize PROC
;;;314    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;315    SDCard_ErrorStatus	SDCard_Initialize(SDCard_CardInfo_TypeDef *SDCard_CardInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;316    {
000002  4605              MOV      r5,r0
;;;317    //	//____________定义变量
;;;318    //	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;319    ////	unsigned char r1;     						// 存放SD卡的返回值
;;;320    ////	unsigned short retry;  						// 用来进行超时计数
;;;321    ////	unsigned char buf[4];  
;;;322    ////	unsigned short i; 
;;;323    //#ifdef		SDCard_DMA
;;;324    //	//1)____________等待SD卡准备
;;;325    //	if(SDCard_Step==SDCard_DeInit)
;;;326    //	{
;;;327    //		if(SDCard_Status==SDCard_Ready)
;;;328    //			SDCard_EnterReady();
;;;329    //		else
;;;330    //		{
;;;331    //			SDCard_Status=SDCard_Ready;
;;;332    //			SDCard_Step=SDCard_StepReady;	//SD卡准备完成
;;;333    //		}
;;;334    //	}
;;;335    //	//2)____________使SD卡进入IDLE状态，发送CMD0命令，成功后返回0x01
;;;336    //	if(SDCard_Step==SDCard_Ready)
;;;337    //	{
;;;338    //		if(SDCard_Status==SDCard_Ready)
;;;339    //			SDCard_EnterIDLE(SDCard_CardInfo);		//进入IDLE状态
;;;340    //		else
;;;341    //		{
;;;342    //			if(memchr(SD_RX_Addr,0x01,8)!=NULL)		//未收到复位成功标志，重试
;;;343    //			{
;;;344    //				memset(SD_RX_Addr,0XFF,514);				//初始化缓冲
;;;345    //				memset(SD_TX_Addr,0XFF,514);				//初始化缓冲
;;;346    //				
;;;347    //				SDCard_Status=SDCard_Ready;
;;;348    //				SDCard_Initialize(SDCard_CardInfo);	//重新调用程序
;;;349    //			}
;;;350    //			else
;;;351    //			{
;;;352    //				SDCard_Status=SDCard_Ready;
;;;353    //				SDCard_Step=SDCard_StepIDLE;				//SD卡准备完成
;;;354    //			}
;;;355    //		}
;;;356    //	}
;;;357    //	//3)____________SD卡识别
;;;358    //	if(SDCard_Step==SDCard_StepIDLE)
;;;359    //	{
;;;360    //		if(SDCard_Status==SDCard_Ready)
;;;361    //		{
;;;362    //			SDCard_Identification(SDCard_CardInfo);
;;;363    //		}
;;;364    //	}
;;;365    
;;;366    //	
;;;367    //	//3)____________SD卡识别
;;;368    //	//3.1)__先发送V2.0版才具有的CMD8命令，然后检测返回值，
;;;369    //	//3.2.1)返回值若是0X01，则表示此卡为V2.0卡，
;;;370    //	//3.2.2)然后再发送循环命令CMD55+ACMD41，直到返回0x00，确定SD2.0卡初始化成功；
;;;371    //	//3.2.3)然后再发送CMD58命令，接收返回的OCR寄存器的数据，其中第31位用于判断V2.0的卡是否为SDHC类型。
;;;372    //	//3.3.1)返回值若不为0X01，则进一步判断是V1.0卡还是MMC卡
;;;373    //	//3.3.2)先发送循环命令CMD55+ACMD41进行复位，如果复位不成功则考虑是MMC卡，如果复位成功，则为V1.0卡。
;;;374    //	//3.3.3)在复位不成功的情况下，再使用CMD1进行复位，如果复位成功，则表明是MMC卡，如果复位不成功，则表示是无法识别的卡。
;;;375    //	Errorstatus=SDCard_Identification(SDCard_CardInfo);
;;;376    //	if(Errorstatus!=SDCard_SUCCESS)											//复位失败
;;;377    //	{
;;;378    //		SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;379    //		return SDCard_ERROR;															//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;380    //	}
;;;381    //	SDCard_GetCSD(SDCard_CardInfo);											//获取SD卡的CSD信息，包括容量和速度信息
;;;382    //	SDCard_GetCID(SDCard_CardInfo);											//获取SD卡的CID信息，包括制造商信息
;;;383    
;;;384    //	
;;;385    //	SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;386    //	return	SDCard_SUCCESS;
;;;387    //#endif	
;;;388    	
;;;389    		//____________定义变量
;;;390    	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000004  2401              MOVS     r4,#1
;;;391    //	unsigned char r1;     						// 存放SD卡的返回值
;;;392    //	unsigned short retry;  						// 用来进行超时计数
;;;393    //	unsigned char buf[4];  
;;;394    //	unsigned short i; 
;;;395    	SDCard_Select();									//取消片选,释放SPI总线--取消上次片选
000006  f7fffffe          BL       SDCard_Select
;;;396    	//1)____________等待SD卡准备
;;;397    	SDCard_EnterReady();
00000a  f7fffffe          BL       SDCard_EnterReady
;;;398    	//2)____________使SD卡进入IDLE状态
;;;399    	if(SDCard_Step==SDCard_DeInit)
;;;400    	{
;;;401    	}
;;;402    	//__发送CMD0命令，成功后返回0x01
;;;403    		Errorstatus=SDCard_EnterIDLE(SDCard_CardInfo);	//进入IDLE状态
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       SDCard_EnterIDLE
000014  4604              MOV      r4,r0
;;;404    	//____________SD复位状态
;;;405    	if(Errorstatus!=SDCard_SUCCESS)										//复位失败
000016  2c01              CMP      r4,#1
000018  d001              BEQ      |L13.30|
;;;406    		return SDCard_ERROR;					//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
00001a  2000              MOVS     r0,#0
                  |L13.28|
;;;407    	
;;;408    	//3)____________SD卡识别
;;;409    	//3.1)__先发送V2.0版才具有的CMD8命令，然后检测返回值，
;;;410    	//3.2.1)返回值若是0X01，则表示此卡为V2.0卡，
;;;411    	//3.2.2)然后再发送循环命令CMD55+ACMD41，直到返回0x00，确定SD2.0卡初始化成功；
;;;412    	//3.2.3)然后再发送CMD58命令，接收返回的OCR寄存器的数据，其中第31位用于判断V2.0的卡是否为SDHC类型。
;;;413    	//3.3.1)返回值若不为0X01，则进一步判断是V1.0卡还是MMC卡
;;;414    	//3.3.2)先发送循环命令CMD55+ACMD41进行复位，如果复位不成功则考虑是MMC卡，如果复位成功，则为V1.0卡。
;;;415    	//3.3.3)在复位不成功的情况下，再使用CMD1进行复位，如果复位成功，则表明是MMC卡，如果复位不成功，则表示是无法识别的卡。
;;;416    	Errorstatus=SDCard_Identification(SDCard_CardInfo);
;;;417    	if(Errorstatus!=SDCard_SUCCESS)											//复位失败
;;;418    	{
;;;419    		SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;420    		return SDCard_ERROR;															//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
;;;421    	}
;;;422    	SDCard_GetCSD(SDCard_CardInfo);											//获取SD卡的CSD信息，包括容量和速度信息
;;;423    	SDCard_GetCID(SDCard_CardInfo);											//获取SD卡的CID信息，包括制造商信息
;;;424    	
;;;425    	
;;;426    #ifdef Gon	
;;;427    	//____________SD卡判断
;;;428    	SDCard_Type=0;//默认无卡
;;;429    	if(r1==0X01)
;;;430    	{
;;;431    		if(SDCard_SendCmd(CMD8,0x1AA,0x87)==1)//SD V2.0
;;;432    		{
;;;433    			for(i=0;i<4;i++)
;;;434    				buf[i]=SDCard_ReadWriteByte(0XFF);	//Get trailing return value of R7 resp
;;;435    			if(buf[2]==0X01&&buf[3]==0XAA)//卡是否支持2.7~3.6V
;;;436    			{
;;;437    				retry=0XFFFE;
;;;438    				do
;;;439    				{
;;;440    					SDCard_SendCmd(CMD55,0,0X01);		//发送CMD55
;;;441    					r1=SDCard_SendCmd(CMD41,0x40000000,0X01);//发送CMD41
;;;442    				}while(r1&&retry--);
;;;443    
;;;444    				if(retry&&SDCard_SendCmd(CMD58,0,0X01)==0)//鉴别SD2.0卡版本开始
;;;445    				{
;;;446    					for(i=0;i<4;i++)
;;;447    						buf[i]=SDCard_ReadWriteByte(0XFF);	//得到OCR值
;;;448    					if(buf[0]&0x40)
;;;449    						SDCard_Type=SD_TYPE_V2HC;    						//检查CCS
;;;450    					else
;;;451    						SDCard_Type=SD_TYPE_V2;   
;;;452    				}
;;;453    			}
;;;454    		}
;;;455    		else//SD V1.x/ MMC	V3
;;;456    		{
;;;457    			SDCard_SendCmd(CMD55,0,0X01);		//发送CMD55
;;;458    			r1=SDCard_SendCmd(CMD41,0,0X01);	//发送CMD41
;;;459    			
;;;460    			if(r1<=1)
;;;461    			{		
;;;462    				SDCard_Type=SD_TYPE_V1;
;;;463    				retry=0XFFFE;
;;;464    				do //等待退出IDLE模式
;;;465    				{
;;;466    					SDCard_SendCmd(CMD55,0,0X01);		//发送CMD55
;;;467    					r1=SDCard_SendCmd(CMD41,0,0X01);	//发送CMD41
;;;468    				}while(r1&&retry--);
;;;469    				
;;;470    			}
;;;471    			else//MMC卡不支持CMD55+CMD41识别
;;;472    			{
;;;473    				SDCard_Type=SD_TYPE_MMC;//MMC V3
;;;474    				retry=0XFFFE;
;;;475    				do //等待退出IDLE模式
;;;476    				{	
;;;477    					r1=SDCard_SendCmd(CMD1,0,0X01);//发送CMD1
;;;478    				}while(r1&&retry--);  
;;;479    			}
;;;480    			if(retry==0||SDCard_SendCmd(CMD16,512,0X01)!=0)
;;;481    				SDCard_Type=SD_TYPE_ERR;//错误的卡
;;;482    		}
;;;483    	}
;;;484    	
;;;485    #endif	
;;;486    	SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;487    	return	SDCard_SUCCESS;
;;;488    }
00001c  bd70              POP      {r4-r6,pc}
                  |L13.30|
00001e  4628              MOV      r0,r5                 ;416
000020  f7fffffe          BL       SDCard_Identification
000024  4604              MOV      r4,r0                 ;416
000026  2c01              CMP      r4,#1                 ;417
000028  d003              BEQ      |L13.50|
00002a  f7fffffe          BL       SDCard_DisSelect
00002e  2000              MOVS     r0,#0                 ;420
000030  e7f4              B        |L13.28|
                  |L13.50|
000032  4628              MOV      r0,r5                 ;422
000034  f7fffffe          BL       SDCard_GetCSD
000038  4628              MOV      r0,r5                 ;423
00003a  f7fffffe          BL       SDCard_GetCID
00003e  f7fffffe          BL       SDCard_DisSelect
000042  2001              MOVS     r0,#1                 ;487
000044  e7ea              B        |L13.28|
;;;489    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP


                          AREA ||i.SDCard_ReadSingleBlock||, CODE, READONLY, ALIGN=2

                  SDCard_ReadSingleBlock PROC
;;;1118   //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;1119   SDCard_ErrorStatus SDCard_ReadSingleBlock(u32 addr,unsigned char *Rxbuf, u16 BlockSize)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1120   {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;1121   	//____________定义变量
;;;1122   	SDCard_ErrorStatus	Errorstatus = SDCard_SUCCESS;		//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
00000a  f04f0901          MOV      r9,#1
;;;1123   
;;;1124   	unsigned char retry=0;
00000e  2700              MOVS     r7,#0
;;;1125   	unsigned char R1;																		//状态值
;;;1126   	unsigned char R2;																		//状态值
;;;1127   	
;;;1128   #ifdef	SDCard_DMA
;;;1129   //	//____________更新SD卡读写状态
;;;1130   //		SDCard_Status=SDCard_DMA_DIS;
;;;1131   	if(SDCard_Status!=SDCard_DMA_EN)								//DMA关闭状态，可以使用
000010  4822              LDR      r0,|L14.156|
000012  7800              LDRB     r0,[r0,#0]  ; SDCard_Status
000014  2801              CMP      r0,#1
000016  d03e              BEQ      |L14.150|
;;;1132   	{
;;;1133   		//____________使能片选
;;;1134   			SDCard_Select();																		//使能sd卡,并且等待卡准备OK
000018  f7fffffe          BL       SDCard_Select
;;;1135   		//____________发CMD17命令，读sector 如果有错误，重试20次
;;;1136   		retry=100;
00001c  2764              MOVS     r7,#0x64
;;;1137   		do
00001e  bf00              NOP      
                  |L14.32|
;;;1138   		{
;;;1139   			R1=SDCard_SendCmd(CMD17,addr,0x01);
000020  2201              MOVS     r2,#1
000022  4631              MOV      r1,r6
000024  2011              MOVS     r0,#0x11
000026  f7fffffe          BL       SDCard_SendCmd
00002a  4605              MOV      r5,r0
;;;1140   		}while(R1!=0x00&&retry--);
00002c  b125              CBZ      r5,|L14.56|
00002e  1e38              SUBS     r0,r7,#0
000030  f1a70101          SUB      r1,r7,#1
000034  b2cf              UXTB     r7,r1
000036  d1f3              BNE      |L14.32|
                  |L14.56|
;;;1141   		//____________返回错误	
;;;1142   		if(retry==0x00)			//返回错误
000038  b917              CBNZ     r7,|L14.64|
;;;1143   		{
;;;1144   			
;;;1145   			return	SDCard_ERROR;	
00003a  2000              MOVS     r0,#0
                  |L14.60|
;;;1146   		}
;;;1147   		//____________返回正常，开始读数据	
;;;1148   		else
;;;1149   		{
;;;1150   			
;;;1151   			
;;;1152   			//____________//等待SD卡发回数据起始令牌0xFE
;;;1153   			if(SDCard_GetResponse(0xFE)==SDCard_ERROR)
;;;1154   			{
;;;1155   				//____________禁止片选	
;;;1156   				SDCard_DisSelect();	
;;;1157   				return SDCard_ERROR;//等待SD卡发回数据起始令牌0xFE
;;;1158   			}
;;;1159   				memset(SD_TX_Addr,0XFF,BlockSize);						//初始化发送缓冲区
;;;1160   				memset(SD_RX_Addr,0XFF,BlockSize);						//初始化缓冲
;;;1161   				
;;;1162   				Rxbuf=SD_RX_Addr;		
;;;1163   				
;;;1164   				DMA1_Channel3->CNDTR =BlockSize+5;						//设定待发送缓冲区大小
;;;1165   				DMA1_Channel3->CMAR =(u32)SD_TX_Addr;		//发送缓冲区	
;;;1166   				
;;;1167   				DMA1_Channel2->CNDTR =BlockSize+5;						//设定接收缓冲区大小
;;;1168   				DMA1_Channel2->CMAR =(u32)SD_RX_Addr;		//接收缓冲区
;;;1169   				
;;;1170   				DMA_Cmd(DMA1_Channel3,ENABLE);					//DMA发送开启3
;;;1171   				DMA_Cmd(DMA1_Channel2,ENABLE);					//DMA发送开启2
;;;1172   				
;;;1173   				//____________更新SD卡读写状态
;;;1174   				SDCard_Status=SDCard_DMA_EN;
;;;1175   				
;;;1176   				return SDCard_SUCCESS;									//读取成功	
;;;1177   			}
;;;1178   	}
;;;1179   	else
;;;1180   	{		
;;;1181   		return	SDCard_ERROR;
;;;1182   	}
;;;1183   #else
;;;1184   		//____________发CMD17命令，读sector 如果有错误，重试20次
;;;1185   	retry=100;
;;;1186   	do
;;;1187   	{
;;;1188   		R1=SDCard_SendCmd(CMD17,addr,0x01);
;;;1189   	}while(R1!=0x00&&retry--);
;;;1190   	//____________返回错误	
;;;1191   	if(retry==0x00)			//返回错误
;;;1192   	{
;;;1193   		
;;;1194   		return	SDCard_ERROR;	
;;;1195   	}
;;;1196   	//____________返回正常，开始读数据	
;;;1197   	else
;;;1198   	{
;;;1199   		SDCard_RecvData((unsigned char*)Rxbuf,BlockSize);											//从sd卡读取一个数据包的内容
;;;1200   	}
;;;1201   #endif
;;;1202   	
;;;1203   	return	SDCard_SUCCESS;						
;;;1204   }
00003c  e8bd87f0          POP      {r4-r10,pc}
                  |L14.64|
000040  20fe              MOVS     r0,#0xfe              ;1153
000042  f7fffffe          BL       SDCard_GetResponse
000046  b918              CBNZ     r0,|L14.80|
000048  f7fffffe          BL       SDCard_DisSelect
00004c  2000              MOVS     r0,#0                 ;1157
00004e  e7f5              B        |L14.60|
                  |L14.80|
000050  22ff              MOVS     r2,#0xff              ;1159
000052  4621              MOV      r1,r4                 ;1159
000054  4812              LDR      r0,|L14.160|
000056  f7fffffe          BL       __aeabi_memset
00005a  22ff              MOVS     r2,#0xff              ;1160
00005c  4621              MOV      r1,r4                 ;1160
00005e  4811              LDR      r0,|L14.164|
000060  f7fffffe          BL       __aeabi_memset
000064  f8df803c          LDR      r8,|L14.164|
000068  1d60              ADDS     r0,r4,#5              ;1164
00006a  490f              LDR      r1,|L14.168|
00006c  6348              STR      r0,[r1,#0x34]         ;1164
00006e  480c              LDR      r0,|L14.160|
000070  63c8              STR      r0,[r1,#0x3c]         ;1165
000072  1d60              ADDS     r0,r4,#5              ;1167
000074  6208              STR      r0,[r1,#0x20]         ;1167
000076  4640              MOV      r0,r8                 ;1168
000078  6288              STR      r0,[r1,#0x28]         ;1168
00007a  2101              MOVS     r1,#1                 ;1170
00007c  480a              LDR      r0,|L14.168|
00007e  3030              ADDS     r0,r0,#0x30           ;1170
000080  f7fffffe          BL       DMA_Cmd
000084  2101              MOVS     r1,#1                 ;1171
000086  4808              LDR      r0,|L14.168|
000088  301c              ADDS     r0,r0,#0x1c           ;1171
00008a  f7fffffe          BL       DMA_Cmd
00008e  2001              MOVS     r0,#1                 ;1174
000090  4902              LDR      r1,|L14.156|
000092  7008              STRB     r0,[r1,#0]            ;1174
000094  e7d2              B        |L14.60|
                  |L14.150|
000096  2000              MOVS     r0,#0                 ;1181
000098  e7d0              B        |L14.60|
;;;1205   
                          ENDP

00009a  0000              DCW      0x0000
                  |L14.156|
                          DCD      SDCard_Status
                  |L14.160|
                          DCD      SD_TX_Addr
                  |L14.164|
                          DCD      SD_RX_Addr
                  |L14.168|
                          DCD      0x40020000

                          AREA ||i.SDCard_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SDCard_ReadWriteByte PROC
;;;842    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;843    unsigned char	SDCard_ReadWriteByte(u8 TxData)
000000  b570              PUSH     {r4-r6,lr}
;;;844    {
000002  4604              MOV      r4,r0
;;;845    	//____________定义变量
;;;846    	unsigned short retry=0;													//用来进行超时计数
000004  2500              MOVS     r5,#0
;;;847    	//____________等待发送缓冲区为空
;;;848    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);	
000006  bf00              NOP      
                  |L15.8|
000008  2180              MOVS     r1,#0x80
00000a  4812              LDR      r0,|L15.84|
00000c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000010  2801              CMP      r0,#1
000012  d0f9              BEQ      |L15.8|
;;;849    //	while(SPI_I2S_GetFlagStatus(SDCard_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET); 		//检查指令SPI发送标志是否为空
;;;850    //	{
;;;851    //		retry++;
;;;852    //		if(retry>2000)
;;;853    //			return 0;
;;;854    //	}	
;;;855    	//____________发送数据
;;;856    	SPI_I2S_SendData(SDCard_SPI_PORT, TxData);				//发送数据
000014  4621              MOV      r1,r4
000016  480f              LDR      r0,|L15.84|
000018  f7fffffe          BL       SPI_I2S_SendData
;;;857    	//____________等待接收数据
;;;858    //	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);
;;;859    	retry=0;	
00001c  2500              MOVS     r5,#0
;;;860    	while(SPI_I2S_GetFlagStatus(SDCard_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET)		//检查指令SPI接收完成标志设置与否
00001e  e006              B        |L15.46|
                  |L15.32|
;;;861    	{
;;;862    		retry++;
000020  1c68              ADDS     r0,r5,#1
000022  b285              UXTH     r5,r0
;;;863    		if(retry>1000)
000024  f5b57f7a          CMP      r5,#0x3e8
000028  dd01              BLE      |L15.46|
;;;864    			return 0;
00002a  2000              MOVS     r0,#0
                  |L15.44|
;;;865    	}
;;;866    	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);
;;;867    	//____________返回接收到的数据
;;;868    	return SPI_I2S_ReceiveData(SDCard_SPI_PORT); 			//返回接收到的数据	
;;;869    }
00002c  bd70              POP      {r4-r6,pc}
                  |L15.46|
00002e  2101              MOVS     r1,#1                 ;860
000030  4808              LDR      r0,|L15.84|
000032  f7fffffe          BL       SPI_I2S_GetFlagStatus
000036  2800              CMP      r0,#0                 ;860
000038  d0f2              BEQ      |L15.32|
00003a  bf00              NOP                            ;866
                  |L15.60|
00003c  2180              MOVS     r1,#0x80              ;866
00003e  4805              LDR      r0,|L15.84|
000040  f7fffffe          BL       SPI_I2S_GetFlagStatus
000044  2801              CMP      r0,#1                 ;866
000046  d0f9              BEQ      |L15.60|
000048  4802              LDR      r0,|L15.84|
00004a  f7fffffe          BL       SPI_I2S_ReceiveData
00004e  b2c0              UXTB     r0,r0                 ;868
000050  e7ec              B        |L15.44|
;;;870    
                          ENDP

000052  0000              DCW      0x0000
                  |L15.84|
                          DCD      0x40013000

                          AREA ||i.SDCard_RecvData||, CODE, READONLY, ALIGN=1

                  SDCard_RecvData PROC
;;;614    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;615    SDCard_ErrorStatus SDCard_RecvData(unsigned char	*Rxbuf,unsigned int len)
000000  b570              PUSH     {r4-r6,lr}
;;;616    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;617    	//____________定义变量
;;;618    	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;		//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000006  2601              MOVS     r6,#1
;;;619    	
;;;620    	//____________使能片选
;;;621    	SDCard_Select();																		//使能sd卡,并且等待卡准备OK
000008  f7fffffe          BL       SDCard_Select
;;;622    	
;;;623    	//____________//等待SD卡发回数据起始令牌0xFE
;;;624    	if(SDCard_GetResponse(0xFE)==SDCard_ERROR)
00000c  20fe              MOVS     r0,#0xfe
00000e  f7fffffe          BL       SDCard_GetResponse
000012  b918              CBNZ     r0,|L16.28|
;;;625    	{
;;;626    		//____________禁止片选	
;;;627    		SDCard_DisSelect();	
000014  f7fffffe          BL       SDCard_DisSelect
;;;628    		return SDCard_ERROR;//等待SD卡发回数据起始令牌0xFE
000018  2000              MOVS     r0,#0
                  |L16.26|
;;;629    	}
;;;630    
;;;631    	while(len--)//开始接收数据
;;;632    	{
;;;633    		*Rxbuf=SDCard_ReadWriteByte(0xFF);
;;;634    		Rxbuf++;
;;;635    	}
;;;636    	//____________接收CRC，下面是2个伪CRC（dummy CRC）
;;;637    	SDCard_ReadWriteByte(0xFF);
;;;638    	SDCard_ReadWriteByte(0xFF);
;;;639    	
;;;640    	//____________禁止片选	
;;;641    	SDCard_DisSelect();
;;;642    	
;;;643    	return SDCard_SUCCESS;		//读取成功				
;;;644    
;;;645    	//____________返回状态
;;;646    	return Errorstatus;
;;;647    }
00001a  bd70              POP      {r4-r6,pc}
                  |L16.28|
00001c  e004              B        |L16.40|
                  |L16.30|
00001e  20ff              MOVS     r0,#0xff              ;633
000020  f7fffffe          BL       SDCard_ReadWriteByte
000024  7020              STRB     r0,[r4,#0]            ;633
000026  1c64              ADDS     r4,r4,#1              ;634
                  |L16.40|
000028  1e28              SUBS     r0,r5,#0              ;631
00002a  f1a50501          SUB      r5,r5,#1              ;631
00002e  d1f6              BNE      |L16.30|
000030  20ff              MOVS     r0,#0xff              ;637
000032  f7fffffe          BL       SDCard_ReadWriteByte
000036  20ff              MOVS     r0,#0xff              ;638
000038  f7fffffe          BL       SDCard_ReadWriteByte
00003c  f7fffffe          BL       SDCard_DisSelect
000040  2001              MOVS     r0,#1                 ;643
000042  e7ea              B        |L16.26|
;;;648    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP


                          AREA ||i.SDCard_SPI_Configuration||, CODE, READONLY, ALIGN=2

                  SDCard_SPI_Configuration PROC
;;;200    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;201    void SDCard_SPI_Configuration(char Speed)
000000  b510              PUSH     {r4,lr}
;;;202    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;203    	//1)____________定义
;;;204    	SPI_InitTypeDef			SPI_InitStructure;
;;;205    	RCC_APB2PeriphClockCmd(SDCard_SPI_Periph,		ENABLE);		//开启SPI时钟
000006  2101              MOVS     r1,#1
000008  0308              LSLS     r0,r1,#12
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;206    	//2)____________SPI初始化
;;;207    	if(Speed==SD_CLK_SpeedH)		//高速端口
00000e  2c01              CMP      r4,#1
000010  d120              BNE      |L17.84|
;;;208    	{
;;;209    		SPI_InitStructure.SPI_Direction					=	SPI_Direction_2Lines_FullDuplex;	//设置方向				（2线全双工、2线只接收、一线发送、一线接收）
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;210    		SPI_InitStructure.SPI_Mode							=	SPI_Mode_Master;									//模式         	（从或主设备）
000018  f44f7082          MOV      r0,#0x104
00001c  f8ad0006          STRH     r0,[sp,#6]
;;;211    		SPI_InitStructure.SPI_DataSize					=	SPI_DataSize_8b;									//宽度         	（8或16位）
000020  2000              MOVS     r0,#0
000022  f8ad0008          STRH     r0,[sp,#8]
;;;212    		SPI_InitStructure.SPI_CPOL							=	SPI_CPOL_High;										//时钟极性     	（低或高）
000026  2002              MOVS     r0,#2
000028  f8ad000a          STRH     r0,[sp,#0xa]
;;;213    		SPI_InitStructure.SPI_CPHA							=	SPI_CPHA_2Edge;										//时钟相位     	（第一个或第二个跳变沿）
00002c  2001              MOVS     r0,#1
00002e  f8ad000c          STRH     r0,[sp,#0xc]
;;;214    		SPI_InitStructure.SPI_NSS								=	SPI_NSS_Soft;											//片选方式     	（硬件或软件方式）
000032  0240              LSLS     r0,r0,#9
000034  f8ad000e          STRH     r0,[sp,#0xe]
;;;215    	//	SPI_InitStructure.SPI_NSS=SPI_NSS_Hard;																		//片选方式     	（硬件或软件方式）
;;;216    		SPI_InitStructure.SPI_BaudRatePrescaler	=	SPI_BaudRatePrescaler_128;					//波特率预分频 	（从2---256分频）
000038  2030              MOVS     r0,#0x30
00003a  f8ad0010          STRH     r0,[sp,#0x10]
;;;217    		SPI_InitStructure.SPI_FirstBit					=	SPI_FirstBit_MSB;									//最先发送的位 	（最低位，还是最高位在先）
00003e  2000              MOVS     r0,#0
000040  f8ad0012          STRH     r0,[sp,#0x12]
;;;218    		SPI_InitStructure.SPI_CRCPolynomial			=	0X07;															//设置crc多项式	（其复位值为0x0007，根据应用可以设置其他数值。）
000044  2007              MOVS     r0,#7
000046  f8ad0014          STRH     r0,[sp,#0x14]
;;;219    		SPI_Init(SDCard_SPI_PORT,&SPI_InitStructure);													//SPI1初始化
00004a  a901              ADD      r1,sp,#4
00004c  4816              LDR      r0,|L17.168|
00004e  f7fffffe          BL       SPI_Init
000052  e01f              B        |L17.148|
                  |L17.84|
;;;220    	}
;;;221    	else											//低速端口
;;;222    	{
;;;223    		SPI_InitStructure.SPI_Direction					=	SPI_Direction_2Lines_FullDuplex;	//设置方向				（2线全双工、2线只接收、一线发送、一线接收）
000054  2000              MOVS     r0,#0
000056  f8ad0004          STRH     r0,[sp,#4]
;;;224    		SPI_InitStructure.SPI_Mode							=	SPI_Mode_Master;									//模式         	（从或主设备）
00005a  f44f7082          MOV      r0,#0x104
00005e  f8ad0006          STRH     r0,[sp,#6]
;;;225    		SPI_InitStructure.SPI_DataSize					=	SPI_DataSize_8b;									//宽度         	（8或16位）
000062  2000              MOVS     r0,#0
000064  f8ad0008          STRH     r0,[sp,#8]
;;;226    		SPI_InitStructure.SPI_CPOL							=	SPI_CPOL_High;										//时钟极性     	（低或高）
000068  2002              MOVS     r0,#2
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;227    		SPI_InitStructure.SPI_CPHA							=	SPI_CPHA_2Edge;										//时钟相位     	（第一个或第二个跳变沿）
00006e  2001              MOVS     r0,#1
000070  f8ad000c          STRH     r0,[sp,#0xc]
;;;228    		SPI_InitStructure.SPI_NSS								=	SPI_NSS_Soft;											//片选方式     	（硬件或软件方式）
000074  0240              LSLS     r0,r0,#9
000076  f8ad000e          STRH     r0,[sp,#0xe]
;;;229    	//	SPI_InitStructure.SPI_NSS=SPI_NSS_Hard;																		//片选方式     	（硬件或软件方式）
;;;230    		SPI_InitStructure.SPI_BaudRatePrescaler	=	SPI_BaudRatePrescaler_256;				//波特率预分频 	（从2---256分频）
00007a  2038              MOVS     r0,#0x38
00007c  f8ad0010          STRH     r0,[sp,#0x10]
;;;231    		SPI_InitStructure.SPI_FirstBit					=	SPI_FirstBit_MSB;									//最先发送的位 	（最低位，还是最高位在先）
000080  2000              MOVS     r0,#0
000082  f8ad0012          STRH     r0,[sp,#0x12]
;;;232    		SPI_InitStructure.SPI_CRCPolynomial			=	0X07;															//设置crc多项式	（其复位值为0x0007，根据应用可以设置其他数值。）
000086  2007              MOVS     r0,#7
000088  f8ad0014          STRH     r0,[sp,#0x14]
;;;233    		SPI_Init(SDCard_SPI_PORT,&SPI_InitStructure);													//SPI1初始化
00008c  a901              ADD      r1,sp,#4
00008e  4806              LDR      r0,|L17.168|
000090  f7fffffe          BL       SPI_Init
                  |L17.148|
;;;234    	}
;;;235    	SDCard_CS_OFF;			//取消片选
000094  2001              MOVS     r0,#1
000096  4905              LDR      r1,|L17.172|
000098  6008              STR      r0,[r1,#0]
;;;236    	SPI_Cmd(SDCard_SPI_PORT, ENABLE);				//使能SPI
00009a  2101              MOVS     r1,#1
00009c  4802              LDR      r0,|L17.168|
00009e  f7fffffe          BL       SPI_Cmd
;;;237    }
0000a2  b006              ADD      sp,sp,#0x18
0000a4  bd10              POP      {r4,pc}
;;;238    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

0000a6  0000              DCW      0x0000
                  |L17.168|
                          DCD      0x40013000
                  |L17.172|
                          DCD      0x42220198

                          AREA ||i.SDCard_Select||, CODE, READONLY, ALIGN=2

                  SDCard_Select PROC
;;;514    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;515    void	SDCard_Select(void)
000000  2000              MOVS     r0,#0
;;;516    {
;;;517    	SDCard_CS_ON;												//GPIO_ResetBits(SDCard_CS_PORT,	SDCard_CS_PIN)
000002  4901              LDR      r1,|L18.8|
000004  6008              STR      r0,[r1,#0]
;;;518    }
000006  4770              BX       lr
;;;519    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

                  |L18.8|
                          DCD      0x42220198

                          AREA ||i.SDCard_SendCmd||, CODE, READONLY, ALIGN=1

                  SDCard_SendCmd PROC
;;;882    //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;883    unsigned char SDCard_SendCmd(unsigned char cmd, unsigned int arg,unsigned char crc)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;884    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;885    	//____________定义变量
;;;886    	unsigned char r1;				//状态值
;;;887    	unsigned char retry=0;	//用来进行超时计数
00000a  f04f0800          MOV      r8,#0
;;;888    	//____________使能片选
;;;889    //	SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;890    //	SDCard_Select();										//使能sd卡,并且等待卡准备OK
;;;891    #ifndef	SDCard_DMA
;;;892    	memset(SD_TX_Addr,0XFF,8);			//初始化缓冲
;;;893    	memset(SD_TX_Addr,0XFF,8);			//初始化缓冲
;;;894    	
;;;895    	SD_TX_Addr[0]=cmd | 0x40;
;;;896    	SD_TX_Addr[1]=arg >> 24;
;;;897    	SD_TX_Addr[2]=arg >> 16;
;;;898    	SD_TX_Addr[3]=arg >> 8;
;;;899    	SD_TX_Addr[4]=arg;
;;;900    	SD_TX_Addr[5]=crc;
;;;901    	SD_TX_Addr[6]=0xFF;
;;;902    	SD_TX_Addr[7]=0xFF;
;;;903    	SDCard_DMASend(8);
;;;904    #else
;;;905    	//____________写入数据
;;;906    	SDCard_ReadWriteByte(cmd | 0x40);	//分别写入命令
00000e  f0450040          ORR      r0,r5,#0x40
000012  f7fffffe          BL       SDCard_ReadWriteByte
;;;907    	SDCard_ReadWriteByte(arg >> 24);	//参数
000016  0e20              LSRS     r0,r4,#24
000018  f7fffffe          BL       SDCard_ReadWriteByte
;;;908    	SDCard_ReadWriteByte(arg >> 16);	//
00001c  f3c44007          UBFX     r0,r4,#16,#8
000020  f7fffffe          BL       SDCard_ReadWriteByte
;;;909    	SDCard_ReadWriteByte(arg >> 8);		
000024  f3c42007          UBFX     r0,r4,#8,#8
000028  f7fffffe          BL       SDCard_ReadWriteByte
;;;910    	SDCard_ReadWriteByte(arg);	  
00002c  b2e0              UXTB     r0,r4
00002e  f7fffffe          BL       SDCard_ReadWriteByte
;;;911    	SDCard_ReadWriteByte(crc);				//CRC7
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       SDCard_ReadWriteByte
;;;912    	
;;;913    	if(cmd==CMD12)
000038  2d0c              CMP      r5,#0xc
00003a  d102              BNE      |L19.66|
;;;914    		SDCard_ReadWriteByte(0xff);//Skip a stuff byte when stop reading
00003c  20ff              MOVS     r0,#0xff
00003e  f7fffffe          BL       SDCard_ReadWriteByte
                  |L19.66|
;;;915    	//____________等待响应
;;;916    	r1=0xFF;
000042  26ff              MOVS     r6,#0xff
;;;917    	for(retry=0;retry<0x1F&&(r1&0x80);retry++)
000044  f04f0800          MOV      r8,#0
000048  e007              B        |L19.90|
                  |L19.74|
;;;918    	{
;;;919    		r1=SDCard_ReadWriteByte(0xFF);
00004a  20ff              MOVS     r0,#0xff
00004c  f7fffffe          BL       SDCard_ReadWriteByte
000050  4606              MOV      r6,r0
000052  f1080001          ADD      r0,r8,#1              ;917
000056  f00008ff          AND      r8,r0,#0xff           ;917
                  |L19.90|
00005a  f1b80f1f          CMP      r8,#0x1f              ;917
00005e  da03              BGE      |L19.104|
000060  f0060080          AND      r0,r6,#0x80           ;917
000064  2800              CMP      r0,#0                 ;917
000066  d1f0              BNE      |L19.74|
                  |L19.104|
;;;920    	}
;;;921    #endif
;;;922    //	Retry=0X1F;
;;;923    //	do
;;;924    //	{
;;;925    //		r1=SDCard_ReadWriteByte(0xFF);
;;;926    //	}while((r1&0X80) && Retry--);	
;;;927    
;;;928    	//____________禁止片选	
;;;929    //	SDCard_CS_OFF;											//GPIO_SetBits(SDCard_CS_PORT,	SDCard_CS_PIN)			//取消片选
;;;930    //	SDCard_DisSelect();									//取消片选,释放SPI总线--取消上次片选
;;;931    	//____________返回状态值
;;;932    	return r1;	
000068  4630              MOV      r0,r6
;;;933    }
00006a  e8bd81f0          POP      {r4-r8,pc}
;;;934    
                          ENDP


                          AREA ||i.SDCard_Server||, CODE, READONLY, ALIGN=2

                  SDCard_Server PROC
;;;97     //<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=<=
;;;98     SDCard_ErrorStatus	SDCard_Server(void)
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100    	//____________定义变量
;;;101    	SDCard_ErrorStatus Errorstatus = SDCard_SUCCESS;				//SDCard_SUCCESS 无错误，SDCard_ERROR 错误
000002  2401              MOVS     r4,#1
;;;102    	#ifdef	SDCard_DMA
;;;103    	if(DMA_GetFlagStatus(DMA1_IT_GL2)== SET)
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       DMA_GetFlagStatus
00000a  2801              CMP      r0,#1
00000c  d119              BNE      |L20.66|
;;;104    	{			
;;;105    		//____________清除标志位
;;;106    		DMA_ClearFlag(DMA1_FLAG_GL2); 
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       DMA_ClearFlag
;;;107    		//____________关闭DMA发送 
;;;108    		while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET);
000014  bf00              NOP      
                  |L20.22|
000016  2180              MOVS     r1,#0x80
000018  480b              LDR      r0,|L20.72|
00001a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001e  2801              CMP      r0,#1
000020  d0f9              BEQ      |L20.22|
;;;109    		DMA_Cmd(DMA1_Channel3,DISABLE);											//DMA发送关闭3
000022  2100              MOVS     r1,#0
000024  4809              LDR      r0,|L20.76|
000026  f7fffffe          BL       DMA_Cmd
;;;110    		DMA_Cmd(DMA1_Channel2,DISABLE);											//DMA发送关闭2
00002a  2100              MOVS     r1,#0
00002c  4807              LDR      r0,|L20.76|
00002e  3814              SUBS     r0,r0,#0x14
000030  f7fffffe          BL       DMA_Cmd
;;;111    		SDCard_Status=SDCard_Ready;
000034  2000              MOVS     r0,#0
000036  4906              LDR      r1,|L20.80|
000038  7008              STRB     r0,[r1,#0]
;;;112    		//____________禁止片选	
;;;113    		SDCard_DisSelect();
00003a  f7fffffe          BL       SDCard_DisSelect
;;;114    		return	SDCard_SUCCESS;
00003e  2001              MOVS     r0,#1
                  |L20.64|
;;;115    	}
;;;116    	else
;;;117    	{
;;;118    		return	SDCard_ERROR;
;;;119    	}
;;;120    #endif
;;;121    
;;;122    	return	Errorstatus;
;;;123    }
000040  bd10              POP      {r4,pc}
                  |L20.66|
000042  2000              MOVS     r0,#0                 ;118
000044  e7fc              B        |L20.64|
;;;124    //=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>=>
                          ENDP

000046  0000              DCW      0x0000
                  |L20.72|
                          DCD      0x40013000
                  |L20.76|
                          DCD      0x40020030
                  |L20.80|
                          DCD      SDCard_Status

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  ff000000          DCB      0xff,0x00,0x00,0x00
000004  ff000000          DCB      0xff,0x00,0x00,0x00
000008  ff000000          DCB      0xff,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  SD_TX_Addr
000000  ff000000          DCB      0xff,0x00,0x00,0x00
                          %        508
                  SD_RX_Addr
000200  ff000000          DCB      0xff,0x00,0x00,0x00
                          %        508
                  SDCard_Type
000400  00                DCB      0x00
                  SDCard_Status
000401  00                DCB      0x00
                  SDCard_Step
000402  00                DCB      0x00
