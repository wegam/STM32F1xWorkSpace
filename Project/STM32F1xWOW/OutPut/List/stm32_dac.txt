; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_dac.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_dac.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_dac.crf ..\..\Driver\WOW\SCR\STM32_DAC.C]
                          THUMB

                          AREA ||i.DAC_Configuration||, CODE, READONLY, ALIGN=1

                  DAC_Configuration PROC
;;;64     *******************************************************************************/
;;;65     void DAC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67     	DAC_GPIO_Configuration();
000002  f7fffffe          BL       DAC_GPIO_Configuration
;;;68     	DAC_MODE_Configuration();
000006  f7fffffe          BL       DAC_MODE_Configuration
;;;69     }
00000a  bd10              POP      {r4,pc}
;;;70     
                          ENDP


                          AREA ||i.DAC_DMA_Configuration||, CODE, READONLY, ALIGN=2

                  DAC_DMA_Configuration PROC
;;;159    *******************************************************************************/
;;;160    void DAC_DMA_Configuration(u32 *MemoryAddr)
000000  b510              PUSH     {r4,lr}
;;;161    {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
;;;162    //	TIM_TimeBaseInitTypeDef	TIM_TimeBaseStructure;	//定时器结构体定义
;;;163    	DAC_InitTypeDef		DAC_InitStructure; 				//DAC结构体
;;;164    	DMA_InitTypeDef DMA_InitStructure;
;;;165    	
;;;166    	/* Enable peripheral clocks --------------------------------------------------*/
;;;167    	/*开启DMA时钟*/
;;;168    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
000006  2101              MOVS     r1,#1
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;169      /* AFIO and GPIOA Periph clock enable */
;;;170      RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);
00000e  2101              MOVS     r1,#1
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;171      /* DAC Periph clock enable */
;;;172      RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
000016  2101              MOVS     r1,#1
000018  0748              LSLS     r0,r1,#29
00001a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;173      /* TIM6 Periph clock enable */
;;;174      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2010              MOVS     r0,#0x10
000022  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;175    	
;;;176    	DAC_GPIO_Configuration();
000026  f7fffffe          BL       DAC_GPIO_Configuration
;;;177    	
;;;178    	 /* TIM6 Configuration */
;;;179    	TIM_PrescalerConfig(TIM6, 71, TIM_PSCReloadMode_Update);		//分频
00002a  2200              MOVS     r2,#0
00002c  2147              MOVS     r1,#0x47
00002e  4823              LDR      r0,|L2.188|
000030  f7fffffe          BL       TIM_PrescalerConfig
;;;180    	TIM_SetAutoreload(TIM6, 1);																//初值
000034  2101              MOVS     r1,#1
000036  4821              LDR      r0,|L2.188|
000038  f7fffffe          BL       TIM_SetAutoreload
;;;181    	/* TIM6 TRGO selection */
;;;182    	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
00003c  2120              MOVS     r1,#0x20
00003e  481f              LDR      r0,|L2.188|
000040  f7fffffe          BL       TIM_SelectOutputTrigger
;;;183    
;;;184    	/* DAC channel1 Configuration */
;;;185    	DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
000044  2004              MOVS     r0,#4
000046  900c              STR      r0,[sp,#0x30]
;;;186    	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_Noise;
000048  2040              MOVS     r0,#0x40
00004a  900d              STR      r0,[sp,#0x34]
;;;187    	DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_TriangleAmplitude_4095;
00004c  f44f6030          MOV      r0,#0xb00
000050  900e              STR      r0,[sp,#0x38]
;;;188    	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
000052  2002              MOVS     r0,#2
000054  900f              STR      r0,[sp,#0x3c]
;;;189    	DAC_Init(DAC_Channel_2, &DAC_InitStructure);
000056  a90c              ADD      r1,sp,#0x30
000058  2010              MOVS     r0,#0x10
00005a  f7fffffe          BL       DAC_Init
;;;190    
;;;191      /* DMA2 channel3 configuration */
;;;192    	DMA_DeInit(DMA2_Channel4);
00005e  4818              LDR      r0,|L2.192|
000060  f7fffffe          BL       DMA_DeInit
;;;193    	DMA_InitStructure.DMA_PeripheralBaseAddr = DAC_DHR12R2_Address;
000064  4817              LDR      r0,|L2.196|
000066  9001              STR      r0,[sp,#4]
;;;194    	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)MemoryAddr;
000068  9402              STR      r4,[sp,#8]
;;;195    	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
00006a  2010              MOVS     r0,#0x10
00006c  9003              STR      r0,[sp,#0xc]
;;;196    	DMA_InitStructure.DMA_BufferSize = 1;
00006e  2001              MOVS     r0,#1
000070  9004              STR      r0,[sp,#0x10]
;;;197    	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000072  2000              MOVS     r0,#0
000074  9005              STR      r0,[sp,#0x14]
;;;198    	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000076  2080              MOVS     r0,#0x80
000078  9006              STR      r0,[sp,#0x18]
;;;199    	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
00007a  0040              LSLS     r0,r0,#1
00007c  9007              STR      r0,[sp,#0x1c]
;;;200    	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
00007e  0080              LSLS     r0,r0,#2
000080  9008              STR      r0,[sp,#0x20]
;;;201    	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
000082  2020              MOVS     r0,#0x20
000084  9009              STR      r0,[sp,#0x24]
;;;202    	//	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
;;;203    	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000086  0200              LSLS     r0,r0,#8
000088  900a              STR      r0,[sp,#0x28]
;;;204    	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
00008a  2000              MOVS     r0,#0
00008c  900b              STR      r0,[sp,#0x2c]
;;;205    	DMA_Init(DMA2_Channel4, &DMA_InitStructure);
00008e  a901              ADD      r1,sp,#4
000090  480b              LDR      r0,|L2.192|
000092  f7fffffe          BL       DMA_Init
;;;206    
;;;207    	/* Enable DMA2 Channel3 */
;;;208    	DMA_Cmd(DMA2_Channel4, ENABLE);
000096  2101              MOVS     r1,#1
000098  4809              LDR      r0,|L2.192|
00009a  f7fffffe          BL       DMA_Cmd
;;;209    
;;;210    	/* Enable DAC Channel1 */
;;;211    	DAC_Cmd(DAC_Channel_2, ENABLE);
00009e  2101              MOVS     r1,#1
0000a0  2010              MOVS     r0,#0x10
0000a2  f7fffffe          BL       DAC_Cmd
;;;212    
;;;213    	/* Enable DMA for DAC Channel1 */
;;;214    	DAC_DMACmd(DAC_Channel_2, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  2010              MOVS     r0,#0x10
0000aa  f7fffffe          BL       DAC_DMACmd
;;;215    
;;;216    	/* TIM6 enable counter */
;;;217    	TIM_Cmd(TIM6, ENABLE);
0000ae  2101              MOVS     r1,#1
0000b0  4802              LDR      r0,|L2.188|
0000b2  f7fffffe          BL       TIM_Cmd
;;;218    }
0000b6  b010              ADD      sp,sp,#0x40
0000b8  bd10              POP      {r4,pc}
;;;219    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L2.188|
                          DCD      0x40001000
                  |L2.192|
                          DCD      0x40020444
                  |L2.196|
                          DCD      0x40007414

                          AREA ||i.DAC_GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  DAC_GPIO_Configuration PROC
;;;79     *******************************************************************************/
;;;80     void DAC_GPIO_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;81     {
;;;82     	GPIO_InitTypeDef	GPIO_InitStructure;				//GPIO结构体
;;;83     	
;;;84     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA, ENABLE);				//使能GPIOA时钟
000002  2101              MOVS     r1,#1
000004  2005              MOVS     r0,#5
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;85     	
;;;86     	//1)**********配置DAC管脚	
;;;87     	GPIO_InitStructure.GPIO_Pin =GPIO_Pin_4|GPIO_Pin_5;
00000a  2030              MOVS     r0,#0x30
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;88     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;89     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;								//复用推挽
000016  2018              MOVS     r0,#0x18
000018  f88d0003          STRB     r0,[sp,#3]
;;;90     	GPIO_Init(GPIOA,&GPIO_InitStructure);													//配置引脚
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L3.40|
000020  f7fffffe          BL       GPIO_Init
;;;91     	
;;;92     }
000024  bd08              POP      {r3,pc}
;;;93     /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      0x40010800

                          AREA ||i.DAC_MODE_Configuration||, CODE, READONLY, ALIGN=1

                  DAC_MODE_Configuration PROC
;;;101    *******************************************************************************/
;;;102    void DAC_MODE_Configuration(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;103    {
;;;104    	DAC_InitTypeDef		DAC_InitStructure; 				//DAC结构体
;;;105    //	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;106    
;;;107    	//1)**********将DAC设置为缺省值	
;;;108    	DAC_DeInit();																//将DAC设置为缺省值
000002  f7fffffe          BL       DAC_DeInit
;;;109    
;;;110    	//2)**********打开DAC时钟，并设置分频因子	
;;;111    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);					//使能DAC时钟
000006  2101              MOVS     r1,#1
000008  0748              LSLS     r0,r1,#29
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;112    
;;;113    //////////////////定时器
;;;114    	
;;;115    
;;;116    //   RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6 , ENABLE);   
;;;117    //     TIM_TimeBaseStructure.TIM_Period =0x19;    
;;;118    //     TIM_TimeBaseStructure.TIM_Prescaler = 0;    
;;;119    //     TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;    
;;;120    //     TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; 
;;;121    //     TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
;;;122    
;;;123    // TIM_ARRPreloadConfig(TIM6 , ENABLE);
;;;124    
;;;125    //    /* TIM6 TRGO selection */
;;;126    //     TIM_SelectOutputTrigger(TIM6 , TIM_TRGOSource_Update);
;;;127    
;;;128    // TIM_ITConfig(TIM6 , TIM_IT_Update , ENABLE);
;;;129    //////////////////////////////////
;;;130    
;;;131    	//3)**********配置DAC模式	
;;;132    	DAC_InitStructure.DAC_Trigger=DAC_Trigger_Software;													//DAC触发源----软件触发	
00000e  203c              MOVS     r0,#0x3c
000010  9000              STR      r0,[sp,#0]
;;;133    	DAC_InitStructure.DAC_WaveGeneration=DAC_WaveGeneration_Noise;								//波形发生器----不使用内部波形发生器
000012  2040              MOVS     r0,#0x40
000014  9001              STR      r0,[sp,#4]
;;;134    	DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude=DAC_LFSRUnmask_Bit0;		//波形发生器----输出波形，此为不输出
000016  2000              MOVS     r0,#0
000018  9002              STR      r0,[sp,#8]
;;;135    	DAC_InitStructure.DAC_OutputBuffer=DAC_OutputBuffer_Enable;									//开输出缓存---开输出缓冲时，输出能力强些
00001a  9003              STR      r0,[sp,#0xc]
;;;136    	//	DAC_Init(DAC_Channel_1|DAC_Channel_2,&DAC_InitStructure);									//DAC1--PA4
;;;137    	DAC_Init(DAC_Channel_1,&DAC_InitStructure);									//DAC1--PA4
00001c  4669              MOV      r1,sp
00001e  f7fffffe          BL       DAC_Init
;;;138    	DAC_Init(DAC_Channel_2,&DAC_InitStructure);									//DAC2--PA5
000022  4669              MOV      r1,sp
000024  2010              MOVS     r0,#0x10
000026  f7fffffe          BL       DAC_Init
;;;139    
;;;140    	//4)**********使能DAC
;;;141    	DAC_Cmd(DAC_Channel_1,ENABLE);
00002a  2101              MOVS     r1,#1
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       DAC_Cmd
;;;142    	DAC_Cmd(DAC_Channel_2,ENABLE);
000032  2101              MOVS     r1,#1
000034  2010              MOVS     r0,#0x10
000036  f7fffffe          BL       DAC_Cmd
;;;143    	//5)**********向输出寄存器写数据，数据可根据上边公式得到
;;;144    	//Vout = VREF×DOR/4095 = 参考电压×DAC数据寄存器值/4095
;;;145    	DAC_SetChannel1Data(DAC_Align_12b_R,2095);
00003a  f640012f          MOV      r1,#0x82f
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       DAC_SetChannel1Data
;;;146    	DAC_SetChannel2Data(DAC_Align_12b_R,4095);
000044  f64071ff          MOV      r1,#0xfff
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       DAC_SetChannel2Data
;;;147    	//4)**********触发输出
;;;148    	DAC_SoftwareTriggerCmd(DAC_Channel_1,ENABLE);
00004e  2101              MOVS     r1,#1
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       DAC_SoftwareTriggerCmd
;;;149    	DAC_SoftwareTriggerCmd(DAC_Channel_2,ENABLE);
000056  2101              MOVS     r1,#1
000058  2010              MOVS     r0,#0x10
00005a  f7fffffe          BL       DAC_SoftwareTriggerCmd
;;;150    }
00005e  bd1f              POP      {r0-r4,pc}
;;;151    /*******************************************************************************
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  Escalator8bit
000000  00336699          DCB      0x00,0x33,0x66,0x99
000004  ccff              DCB      0xcc,0xff
                  Escalator16bit
000006  0000              DCW      0x0000
000008  02000400          DCW      0x0200,0x0400
00000c  06000800          DCW      0x0600,0x0800
000010  0a000c00          DCW      0x0a00,0x0c00
000014  0e000fff          DCW      0x0e00,0x0fff
