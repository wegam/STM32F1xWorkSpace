; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32_gpio.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32_gpio.crf ..\..\Driver\WOW\SCR\STM32_GPIO.C]
                          THUMB

                          AREA ||i.GPIO_ClockConf||, CODE, READONLY, ALIGN=2

                  GPIO_ClockConf PROC
;;;37     *******************************************************************************/
;;;38     void GPIO_ClockConf(GPIO_TypeDef* GPIOx,						//GPIO端口			
000000  b570              PUSH     {r4-r6,lr}
;;;39     										u16 GPIO_Pin_x									//GPIO引脚
;;;40     										)		//开启相关GPIO时钟	 
;;;41     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;42     	if(0	==	GPIOx)
000006  b905              CBNZ     r5,|L1.10|
                  |L1.8|
;;;43     	{
;;;44     		return;
;;;45     	}
;;;46     	assert_param(IS_GPIO_ALL_PERIPH(GPIOx)); 
;;;47     	switch (*(u32*)&GPIOx)
;;;48     	{
;;;49     		//********************GPIOA时钟使能********************	
;;;50     		case GPIOA_BASE:
;;;51     //			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;52     			if(((GPIO_Pin_x&GPIO_Pin_13)==GPIO_Pin_13)||((GPIO_Pin_x&GPIO_Pin_14)==GPIO_Pin_14)||((GPIO_Pin_x&GPIO_Pin_15)==GPIO_Pin_15)||(GPIO_Pin_x==GPIO_Pin_All))
;;;53     			{
;;;54     				RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;55     				//GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable,ENABLE);			//关闭SW功能
;;;56     				GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);		//关闭JTAG,SW功能开启
;;;57     			}
;;;58     			else
;;;59     				RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;60     			break;
;;;61     		//********************GPIOB时钟使能********************
;;;62     		case GPIOB_BASE:
;;;63     			if(((GPIO_Pin_x&GPIO_Pin_3)==GPIO_Pin_3)||((GPIO_Pin_x&GPIO_Pin_4)==GPIO_Pin_4)||(GPIO_Pin_x==GPIO_Pin_All))
;;;64     			{
;;;65     				RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);
;;;66     				GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);				//关闭JTAG
;;;67     			}
;;;68     			else
;;;69     				RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;70     			break;
;;;71     		//********************GPIOC时钟使能********************
;;;72     		case GPIOC_BASE:
;;;73     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
;;;74     			if(((GPIO_Pin_x&GPIO_Pin_14)==GPIO_Pin_14)||((GPIO_Pin_x&GPIO_Pin_15)==GPIO_Pin_15))
;;;75     				RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC |RCC_APB2Periph_AFIO, ENABLE);
;;;76     			break;
;;;77     		//********************GPIOD时钟使能********************
;;;78     		case GPIOD_BASE:
;;;79     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
;;;80     			break;
;;;81     		//********************GPIOE时钟使能********************
;;;82     		case GPIOE_BASE:
;;;83     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
;;;84     			break;
;;;85     		//********************GPIOF时钟使能********************
;;;86     		case GPIOF_BASE:
;;;87     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
;;;88     			break;
;;;89     		//********************GPIOG时钟使能********************
;;;90     		case GPIOG_BASE:
;;;91     			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOG, ENABLE);
;;;92     			break;
;;;93     		
;;;94     		default: break;
;;;95     		
;;;96     	}
;;;97     
;;;98     }
000008  bd70              POP      {r4-r6,pc}
                  |L1.10|
00000a  493f              LDR      r1,|L1.264|
00000c  1a68              SUBS     r0,r5,r1              ;47
00000e  428d              CMP      r5,r1                 ;47
000010  d062              BEQ      |L1.216|
000012  dc09              BGT      |L1.40|
000014  483d              LDR      r0,|L1.268|
000016  4428              ADD      r0,r0,r5              ;47
000018  b180              CBZ      r0,|L1.60|
00001a  f5b06f80          CMP      r0,#0x400             ;47
00001e  d02e              BEQ      |L1.126|
000020  f5b06f00          CMP      r0,#0x800             ;47
000024  d16c              BNE      |L1.256|
000026  e044              B        |L1.178|
                  |L1.40|
000028  f5b06f80          CMP      r0,#0x400             ;47
00002c  d059              BEQ      |L1.226|
00002e  f5b06f00          CMP      r0,#0x800             ;47
000032  d05b              BEQ      |L1.236|
000034  f5b06f40          CMP      r0,#0xc00             ;47
000038  d162              BNE      |L1.256|
00003a  e05c              B        |L1.246|
                  |L1.60|
00003c  f4045000          AND      r0,r4,#0x2000         ;52
000040  f5b05f00          CMP      r0,#0x2000            ;52
000044  d00d              BEQ      |L1.98|
000046  f4044080          AND      r0,r4,#0x4000         ;52
00004a  f5b04f80          CMP      r0,#0x4000            ;52
00004e  d008              BEQ      |L1.98|
000050  f4044000          AND      r0,r4,#0x8000         ;52
000054  f5b04f00          CMP      r0,#0x8000            ;52
000058  d003              BEQ      |L1.98|
00005a  f64f70ff          MOV      r0,#0xffff            ;52
00005e  4284              CMP      r4,r0                 ;52
000060  d108              BNE      |L1.116|
                  |L1.98|
000062  2101              MOVS     r1,#1                 ;54
000064  2004              MOVS     r0,#4                 ;54
000066  f7fffffe          BL       RCC_APB2PeriphClockCmd
00006a  2101              MOVS     r1,#1                 ;56
00006c  4828              LDR      r0,|L1.272|
00006e  f7fffffe          BL       GPIO_PinRemapConfig
000072  e003              B        |L1.124|
                  |L1.116|
000074  2101              MOVS     r1,#1                 ;59
000076  2004              MOVS     r0,#4                 ;59
000078  f7fffffe          BL       RCC_APB2PeriphClockCmd
                  |L1.124|
00007c  e041              B        |L1.258|
                  |L1.126|
00007e  f0040008          AND      r0,r4,#8              ;63
000082  2808              CMP      r0,#8                 ;63
000084  d007              BEQ      |L1.150|
000086  f0040010          AND      r0,r4,#0x10           ;63
00008a  2810              CMP      r0,#0x10              ;63
00008c  d003              BEQ      |L1.150|
00008e  f64f70ff          MOV      r0,#0xffff            ;63
000092  4284              CMP      r4,r0                 ;63
000094  d108              BNE      |L1.168|
                  |L1.150|
000096  2101              MOVS     r1,#1                 ;65
000098  2009              MOVS     r0,#9                 ;65
00009a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00009e  2101              MOVS     r1,#1                 ;66
0000a0  481b              LDR      r0,|L1.272|
0000a2  f7fffffe          BL       GPIO_PinRemapConfig
0000a6  e003              B        |L1.176|
                  |L1.168|
0000a8  2101              MOVS     r1,#1                 ;69
0000aa  2008              MOVS     r0,#8                 ;69
0000ac  f7fffffe          BL       RCC_APB2PeriphClockCmd
                  |L1.176|
0000b0  e027              B        |L1.258|
                  |L1.178|
0000b2  2101              MOVS     r1,#1                 ;73
0000b4  2010              MOVS     r0,#0x10              ;73
0000b6  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000ba  f4044080          AND      r0,r4,#0x4000         ;74
0000be  f5b04f80          CMP      r0,#0x4000            ;74
0000c2  d004              BEQ      |L1.206|
0000c4  f4044000          AND      r0,r4,#0x8000         ;74
0000c8  f5b04f00          CMP      r0,#0x8000            ;74
0000cc  d103              BNE      |L1.214|
                  |L1.206|
0000ce  2101              MOVS     r1,#1                 ;75
0000d0  2011              MOVS     r0,#0x11              ;75
0000d2  f7fffffe          BL       RCC_APB2PeriphClockCmd
                  |L1.214|
0000d6  e014              B        |L1.258|
                  |L1.216|
0000d8  2101              MOVS     r1,#1                 ;79
0000da  2020              MOVS     r0,#0x20              ;79
0000dc  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000e0  e00f              B        |L1.258|
                  |L1.226|
0000e2  2101              MOVS     r1,#1                 ;83
0000e4  2040              MOVS     r0,#0x40              ;83
0000e6  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000ea  e00a              B        |L1.258|
                  |L1.236|
0000ec  2101              MOVS     r1,#1                 ;87
0000ee  2080              MOVS     r0,#0x80              ;87
0000f0  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000f4  e005              B        |L1.258|
                  |L1.246|
0000f6  2101              MOVS     r1,#1                 ;91
0000f8  0208              LSLS     r0,r1,#8              ;91
0000fa  f7fffffe          BL       RCC_APB2PeriphClockCmd
0000fe  e000              B        |L1.258|
                  |L1.256|
000100  bf00              NOP                            ;94
                  |L1.258|
000102  bf00              NOP                            ;60
000104  bf00              NOP      
000106  e77f              B        |L1.8|
;;;99     
                          ENDP

                  |L1.264|
                          DCD      0x40011400
                  |L1.268|
                          DCD      0xbffef800
                  |L1.272|
                          DCD      0x00300200

                          AREA ||i.GPIO_Configuration||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration PROC
;;;139    *******************************************************************************/
;;;140    void GPIO_Configuration(GPIO_TypeDef* GPIOx,					//GPIO端口
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;141    												u16 GPIO_Pin_x,								//GPIO引脚
;;;142    												GPIOMode_TypeDef GPIO_Mode,		//工作模式
;;;143    												GPIOSpeed_TypeDef GPIO_Speed	//工作速度
;;;144    												)			//GPIO配置	
;;;145    {	
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;146    	switch(GPIO_Mode)
00000c  2d18              CMP      r5,#0x18
00000e  d070              BEQ      |L2.242|
000010  dc07              BGT      |L2.34|
000012  b16d              CBZ      r5,|L2.48|
000014  2d04              CMP      r5,#4
000016  d010              BEQ      |L2.58|
000018  2d10              CMP      r5,#0x10
00001a  d036              BEQ      |L2.138|
00001c  2d14              CMP      r5,#0x14
00001e  d167              BNE      |L2.240|
000020  e01a              B        |L2.88|
                  |L2.34|
000022  2d1c              CMP      r5,#0x1c
000024  d04a              BEQ      |L2.188|
000026  2d28              CMP      r5,#0x28
000028  d00c              BEQ      |L2.68|
00002a  2d48              CMP      r5,#0x48
00002c  d17a              BNE      |L2.292|
00002e  e00e              B        |L2.78|
                  |L2.48|
;;;147    	{
;;;148    		//输入模式
;;;149    		case GPIO_Mode_AIN:					GPIO_Configuration_INA(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为模拟输入模式----V20170605
000030  4639              MOV      r1,r7
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       GPIO_Configuration_INA
;;;150    					break;
000038  e075              B        |L2.294|
                  |L2.58|
;;;151    		case GPIO_Mode_IN_FLOATING:	GPIO_Configuration_INF(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为模拟输入模式----V20170605
00003a  4639              MOV      r1,r7
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       GPIO_Configuration_INF
;;;152    					break;
000042  e070              B        |L2.294|
                  |L2.68|
;;;153    		case GPIO_Mode_IPD:					GPIO_Configuration_IPD(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为模拟输入模式----V20170605
000044  4639              MOV      r1,r7
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       GPIO_Configuration_IPD
;;;154    					break;
00004c  e06b              B        |L2.294|
                  |L2.78|
;;;155    		case GPIO_Mode_IPU:					GPIO_Configuration_IPU(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为模拟输入模式----V20170605
00004e  4639              MOV      r1,r7
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       GPIO_Configuration_IPU
;;;156    					break;
000056  e066              B        |L2.294|
                  |L2.88|
;;;157    		//输出模式
;;;158    		case GPIO_Mode_Out_OD:	
;;;159    					switch(GPIO_Speed)
000058  2c01              CMP      r4,#1
00005a  d004              BEQ      |L2.102|
00005c  2c02              CMP      r4,#2
00005e  d007              BEQ      |L2.112|
000060  2c03              CMP      r4,#3
000062  d10f              BNE      |L2.132|
000064  e009              B        |L2.122|
                  |L2.102|
;;;160    					{
;;;161    						case GPIO_Speed_10MHz:	GPIO_Configuration_OOD10	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
000066  4639              MOV      r1,r7
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       GPIO_Configuration_OOD10
;;;162    									break;
00006e  e00a              B        |L2.134|
                  |L2.112|
;;;163    						case GPIO_Speed_2MHz: 	GPIO_Configuration_OOD2		(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
000070  4639              MOV      r1,r7
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       GPIO_Configuration_OOD2
;;;164    									break;
000078  e005              B        |L2.134|
                  |L2.122|
;;;165    						case GPIO_Speed_50MHz: 	GPIO_Configuration_OOD50	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
00007a  4639              MOV      r1,r7
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       GPIO_Configuration_OOD50
;;;166    									break;
000082  e000              B        |L2.134|
                  |L2.132|
;;;167    						default : break;
000084  bf00              NOP      
                  |L2.134|
000086  bf00              NOP                            ;162
;;;168    					}
;;;169    					break;
000088  e04d              B        |L2.294|
                  |L2.138|
;;;170    		case GPIO_Mode_Out_PP:
;;;171    					switch(GPIO_Speed)
00008a  2c01              CMP      r4,#1
00008c  d004              BEQ      |L2.152|
00008e  2c02              CMP      r4,#2
000090  d007              BEQ      |L2.162|
000092  2c03              CMP      r4,#3
000094  d10f              BNE      |L2.182|
000096  e009              B        |L2.172|
                  |L2.152|
;;;172    					{
;;;173    						case GPIO_Speed_10MHz: 	GPIO_Configuration_OPP10	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
000098  4639              MOV      r1,r7
00009a  4630              MOV      r0,r6
00009c  f7fffffe          BL       GPIO_Configuration_OPP10
;;;174    									break;
0000a0  e00a              B        |L2.184|
                  |L2.162|
;;;175    						case GPIO_Speed_2MHz: 	GPIO_Configuration_OPP2		(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
0000a2  4639              MOV      r1,r7
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       GPIO_Configuration_OPP2
;;;176    									break;
0000aa  e005              B        |L2.184|
                  |L2.172|
;;;177    						case GPIO_Speed_50MHz: 	GPIO_Configuration_OPP50	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
0000ac  4639              MOV      r1,r7
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       GPIO_Configuration_OPP50
;;;178    									break;
0000b4  e000              B        |L2.184|
                  |L2.182|
;;;179    						default : break;
0000b6  bf00              NOP      
                  |L2.184|
0000b8  bf00              NOP                            ;174
;;;180    					}
;;;181    					break;
0000ba  e034              B        |L2.294|
                  |L2.188|
;;;182    		case GPIO_Mode_AF_OD:
;;;183    					switch(GPIO_Speed)
0000bc  2c01              CMP      r4,#1
0000be  d004              BEQ      |L2.202|
0000c0  2c02              CMP      r4,#2
0000c2  d007              BEQ      |L2.212|
0000c4  2c03              CMP      r4,#3
0000c6  d10f              BNE      |L2.232|
0000c8  e009              B        |L2.222|
                  |L2.202|
;;;184    					{
;;;185    						case GPIO_Speed_10MHz: 	GPIO_Configuration_AOD10	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
0000ca  4639              MOV      r1,r7
0000cc  4630              MOV      r0,r6
0000ce  f7fffffe          BL       GPIO_Configuration_AOD10
;;;186    									break;
0000d2  e00a              B        |L2.234|
                  |L2.212|
;;;187    						case GPIO_Speed_2MHz: 	GPIO_Configuration_AOD2		(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
0000d4  4639              MOV      r1,r7
0000d6  4630              MOV      r0,r6
0000d8  f7fffffe          BL       GPIO_Configuration_AOD2
;;;188    									break;
0000dc  e005              B        |L2.234|
                  |L2.222|
;;;189    						case GPIO_Speed_50MHz: 	GPIO_Configuration_AOD50	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
0000de  4639              MOV      r1,r7
0000e0  4630              MOV      r0,r6
0000e2  f7fffffe          BL       GPIO_Configuration_AOD50
;;;190    									break;
0000e6  e000              B        |L2.234|
                  |L2.232|
;;;191    						default : break;
0000e8  bf00              NOP      
                  |L2.234|
0000ea  bf00              NOP                            ;186
;;;192    					}
;;;193    					break;
0000ec  e01b              B        |L2.294|
0000ee  e000              B        |L2.242|
                  |L2.240|
0000f0  e018              B        |L2.292|
                  |L2.242|
;;;194    		case GPIO_Mode_AF_PP:
;;;195    					switch(GPIO_Speed)
0000f2  2c01              CMP      r4,#1
0000f4  d004              BEQ      |L2.256|
0000f6  2c02              CMP      r4,#2
0000f8  d007              BEQ      |L2.266|
0000fa  2c03              CMP      r4,#3
0000fc  d10f              BNE      |L2.286|
0000fe  e009              B        |L2.276|
                  |L2.256|
;;;196    					{
;;;197    						case GPIO_Speed_10MHz: 	GPIO_Configuration_APP10	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
000100  4639              MOV      r1,r7
000102  4630              MOV      r0,r6
000104  f7fffffe          BL       GPIO_Configuration_APP10
;;;198    									break;
000108  e00a              B        |L2.288|
                  |L2.266|
;;;199    						case GPIO_Speed_2MHz: 	GPIO_Configuration_APP2		(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
00010a  4639              MOV      r1,r7
00010c  4630              MOV      r0,r6
00010e  f7fffffe          BL       GPIO_Configuration_APP2
;;;200    									break;
000112  e005              B        |L2.288|
                  |L2.276|
;;;201    						case GPIO_Speed_50MHz: 	GPIO_Configuration_APP50	(GPIOx,GPIO_Pin_x);			//将GPIO相应管脚配置为OD(开漏)输出模式，最大速度2MHz----V20170605
000114  4639              MOV      r1,r7
000116  4630              MOV      r0,r6
000118  f7fffffe          BL       GPIO_Configuration_APP50
;;;202    									break;
00011c  e000              B        |L2.288|
                  |L2.286|
;;;203    						default : break;
00011e  bf00              NOP      
                  |L2.288|
000120  bf00              NOP                            ;198
;;;204    					}
;;;205    					break;		
000122  e000              B        |L2.294|
                  |L2.292|
;;;206    		default :	break;
000124  bf00              NOP      
                  |L2.294|
000126  bf00              NOP                            ;150
;;;207    	}
;;;208    }
000128  e8bd81f0          POP      {r4-r8,pc}
;;;209    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_AOD10||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_AOD10 PROC
;;;632    *******************************************************************************/
;;;633    void GPIO_Configuration_AOD10(
000000  b538              PUSH     {r3-r5,lr}
;;;634    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;635    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;636    														)
;;;637    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;638    	//1）GPIO结构体定义
;;;639    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;640    	//2）初始化GPIO结构体
;;;641    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;642      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_10MHz;					//最大速度频率10MHz
00000a  2001              MOVS     r0,#1
00000c  f88d0002          STRB     r0,[sp,#2]
;;;643      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AF_OD;					//AOD(复用开漏)输出模式
000010  201c              MOVS     r0,#0x1c
000012  f88d0003          STRB     r0,[sp,#3]
;;;644    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;645    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;646    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);				//打开复用时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;647    	//3）初始化GPIO
;;;648    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;649    }
00002e  bd38              POP      {r3-r5,pc}
;;;650    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_AOD2||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_AOD2 PROC
;;;608    *******************************************************************************/
;;;609    void GPIO_Configuration_AOD2(
000000  b538              PUSH     {r3-r5,lr}
;;;610    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;611    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;612    														)
;;;613    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;614    	//1）GPIO结构体定义
;;;615    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;616    	//2）初始化GPIO结构体
;;;617    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;618      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//最大速度频率2MHz
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;619      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AF_OD;					//AOD(复用开漏)输出模式
000010  201c              MOVS     r0,#0x1c
000012  f88d0003          STRB     r0,[sp,#3]
;;;620    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;621    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;622    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);				//打开复用时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;623    	//3）初始化GPIO
;;;624    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;625    }
00002e  bd38              POP      {r3-r5,pc}
;;;626    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_AOD50||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_AOD50 PROC
;;;656    *******************************************************************************/
;;;657    void GPIO_Configuration_AOD50(
000000  b538              PUSH     {r3-r5,lr}
;;;658    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;659    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;660    														)
;;;661    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;662    	//1）GPIO结构体定义
;;;663    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;664    	//2）初始化GPIO结构体
;;;665    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;666      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;					//最大速度频率50MHz
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;667      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AF_OD;					//AOD(复用开漏)输出模式
000010  201c              MOVS     r0,#0x1c
000012  f88d0003          STRB     r0,[sp,#3]
;;;668    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;669    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;670    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);				//打开复用时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;671    	//3）初始化GPIO
;;;672    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;673    }
00002e  bd38              POP      {r3-r5,pc}
;;;674    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_APP10||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_APP10 PROC
;;;704    *******************************************************************************/
;;;705    void GPIO_Configuration_APP10(
000000  b538              PUSH     {r3-r5,lr}
;;;706    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;707    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;708    														)
;;;709    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;710    	//1）GPIO结构体定义
;;;711    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;712    	//2）初始化GPIO结构体
;;;713    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;714      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_10MHz;					//最大速度频率10MHz
00000a  2001              MOVS     r0,#1
00000c  f88d0002          STRB     r0,[sp,#2]
;;;715      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AF_PP;					//APP(复用推挽)输出模式
000010  2018              MOVS     r0,#0x18
000012  f88d0003          STRB     r0,[sp,#3]
;;;716    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;717    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;718    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);				//打开复用时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;719    	//3）初始化GPIO
;;;720    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;721    }
00002e  bd38              POP      {r3-r5,pc}
;;;722    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_APP2||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_APP2 PROC
;;;680    *******************************************************************************/
;;;681    void GPIO_Configuration_APP2(
000000  b538              PUSH     {r3-r5,lr}
;;;682    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;683    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;684    														)
;;;685    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;686    	//1）GPIO结构体定义
;;;687    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;688    	//2）初始化GPIO结构体
;;;689    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;690      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//最大速度频率2MHz
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;691      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AF_PP;					//APP(复用推挽)输出模式
000010  2018              MOVS     r0,#0x18
000012  f88d0003          STRB     r0,[sp,#3]
;;;692    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;693    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;694    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);				//打开复用时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;695    	//3）初始化GPIO
;;;696    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;697    }
00002e  bd38              POP      {r3-r5,pc}
;;;698    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_APP50||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_APP50 PROC
;;;728    *******************************************************************************/
;;;729    void GPIO_Configuration_APP50(
000000  b538              PUSH     {r3-r5,lr}
;;;730    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;731    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;732    														)
;;;733    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;734    	//1）GPIO结构体定义
;;;735    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;736    	//2）初始化GPIO结构体
;;;737    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;738      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;					//最大速度频率50MHz
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;739      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AF_PP;					//APP(复用推挽)输出模式
000010  2018              MOVS     r0,#0x18
000012  f88d0003          STRB     r0,[sp,#3]
;;;740    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;741    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;742    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);				//打开复用时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;743    	//3）初始化GPIO
;;;744    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
000026  4669              MOV      r1,sp
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       GPIO_Init
;;;745    }
00002e  bd38              POP      {r3-r5,pc}
;;;746    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_INA||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_INA PROC
;;;215    *******************************************************************************/
;;;216    void GPIO_Configuration_INA(
000000  b538              PUSH     {r3-r5,lr}
;;;217    														GPIO_TypeDef* GPIOx,		//GPIO端口,x=A/B/C/D/E/F/G
;;;218    														u16 GPIO_Pin_n					//GPIO管脚号n=0~15/All
;;;219    														)
;;;220    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;221    	//1）GPIO结构体定义
;;;222    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;223    	//2）初始化GPIO结构体
;;;224      GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;225      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;		//输入模式下时钟配置无效
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;226      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_AIN;			//模拟输入模式
000010  2000              MOVS     r0,#0
000012  f88d0003          STRB     r0,[sp,#3]
;;;227    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;228    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;229    	//4）初始化GPIO
;;;230    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;231    }
000026  bd38              POP      {r3-r5,pc}
;;;232    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_INF||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_INF PROC
;;;238    *******************************************************************************/
;;;239    void GPIO_Configuration_INF(
000000  b538              PUSH     {r3-r5,lr}
;;;240    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;241    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;242    														)
;;;243    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;244    	//1）GPIO结构体定义
;;;245    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;246    	//2）初始化GPIO结构体
;;;247    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;248      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//输入模式下时钟配置无效
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;249      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_IN_FLOATING;		//浮空输入模式
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;250    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;251    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;252    	//3）初始化GPIO
;;;253    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;254    }
000026  bd38              POP      {r3-r5,pc}
;;;255    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_IPD||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_IPD PROC
;;;261    *******************************************************************************/
;;;262    void GPIO_Configuration_IPD(
000000  b538              PUSH     {r3-r5,lr}
;;;263    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;264    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;265    														)
;;;266    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;267    	//1）GPIO结构体定义
;;;268    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;269    	//2）初始化GPIO结构体
;;;270    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;271      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//输入模式下时钟配置无效
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;272      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_IPD;						//下拉输入模式
000010  2028              MOVS     r0,#0x28
000012  f88d0003          STRB     r0,[sp,#3]
;;;273    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;274    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;275    	//3）初始化GPIO
;;;276    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;277    }
000026  bd38              POP      {r3-r5,pc}
;;;278    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_IPU||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_IPU PROC
;;;284    *******************************************************************************/
;;;285    void GPIO_Configuration_IPU(
000000  b538              PUSH     {r3-r5,lr}
;;;286    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;287    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;288    														)
;;;289    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;290    	//1）GPIO结构体定义
;;;291    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;292    	//2）初始化GPIO结构体
;;;293    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;294      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//输入模式下时钟配置无效
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;295      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_IPU;						//上拉输入模式
000010  2048              MOVS     r0,#0x48
000012  f88d0003          STRB     r0,[sp,#3]
;;;296    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;297    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;298    	//3）初始化GPIO
;;;299    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;300    }
000026  bd38              POP      {r3-r5,pc}
;;;301    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_OOD10||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_OOD10 PROC
;;;417    *******************************************************************************/
;;;418    void GPIO_Configuration_OOD10(
000000  b538              PUSH     {r3-r5,lr}
;;;419    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;420    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;421    														)
;;;422    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;423    	//1）GPIO结构体定义
;;;424    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;425    	//2）初始化GPIO结构体
;;;426    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;427      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_10MHz;					//最大速度频率10MHz
00000a  2001              MOVS     r0,#1
00000c  f88d0002          STRB     r0,[sp,#2]
;;;428      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_Out_OD;					//OD(开漏)输出模式
000010  2014              MOVS     r0,#0x14
000012  f88d0003          STRB     r0,[sp,#3]
;;;429    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;430    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;431    	//3）初始化GPIO
;;;432    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;433    }
000026  bd38              POP      {r3-r5,pc}
;;;434    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_OOD2||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_OOD2 PROC
;;;394    *******************************************************************************/
;;;395    void GPIO_Configuration_OOD2(
000000  b538              PUSH     {r3-r5,lr}
;;;396    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;397    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;398    														)
;;;399    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;400    	//1）GPIO结构体定义
;;;401    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;402    	//2）初始化GPIO结构体
;;;403    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;404      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//最大速度频率2MHz
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;405      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_Out_OD;					//OD(开漏)输出模式
000010  2014              MOVS     r0,#0x14
000012  f88d0003          STRB     r0,[sp,#3]
;;;406    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;407    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;408    	//3）初始化GPIO
;;;409    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;410    }
000026  bd38              POP      {r3-r5,pc}
;;;411    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_OOD50||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_OOD50 PROC
;;;440    *******************************************************************************/
;;;441    void GPIO_Configuration_OOD50(
000000  b538              PUSH     {r3-r5,lr}
;;;442    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;443    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;444    														)
;;;445    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;446    	//1）GPIO结构体定义
;;;447    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;448    	//2）初始化GPIO结构体
;;;449    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;450      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;					//最大速度频率50MHz
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;451      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_Out_OD;					//OD(开漏)输出模式
000010  2014              MOVS     r0,#0x14
000012  f88d0003          STRB     r0,[sp,#3]
;;;452    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;453    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;454    	//3）初始化GPIO
;;;455    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;456    }
000026  bd38              POP      {r3-r5,pc}
;;;457    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_OPP10||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_OPP10 PROC
;;;486    *******************************************************************************/
;;;487    void GPIO_Configuration_OPP10(
000000  b538              PUSH     {r3-r5,lr}
;;;488    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;489    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;490    														)
;;;491    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;492    	//1）GPIO结构体定义
;;;493    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;494    	//2）初始化GPIO结构体
;;;495    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;496      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_10MHz;					//最大速度频率10MHz
00000a  2001              MOVS     r0,#1
00000c  f88d0002          STRB     r0,[sp,#2]
;;;497      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_Out_PP;					//PP(推挽)输出模式
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;498    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;499    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;500    	//3）初始化GPIO
;;;501    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;502    }
000026  bd38              POP      {r3-r5,pc}
;;;503    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_OPP2||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_OPP2 PROC
;;;463    *******************************************************************************/
;;;464    void GPIO_Configuration_OPP2(
000000  b538              PUSH     {r3-r5,lr}
;;;465    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;466    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;467    														)
;;;468    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;469    	//1）GPIO结构体定义
;;;470    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;471    	//2）初始化GPIO结构体
;;;472    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;473      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_2MHz;					//最大速度频率2MHz
00000a  2002              MOVS     r0,#2
00000c  f88d0002          STRB     r0,[sp,#2]
;;;474      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_Out_PP;					//PP(推挽)输出模式
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;475    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;476    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;477    	//3）初始化GPIO
;;;478    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;479    }
000026  bd38              POP      {r3-r5,pc}
;;;480    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Configuration_OPP50||, CODE, READONLY, ALIGN=1

                  GPIO_Configuration_OPP50 PROC
;;;509    *******************************************************************************/
;;;510    void GPIO_Configuration_OPP50(
000000  b538              PUSH     {r3-r5,lr}
;;;511    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;512    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;513    														)
;;;514    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;515    	//1）GPIO结构体定义
;;;516    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;517    	//2）初始化GPIO结构体
;;;518    	GPIO_InitStructure.GPIO_Pin  		= GPIO_Pin_n;
000006  f8ad4000          STRH     r4,[sp,#0]
;;;519      GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;					//最大速度频率50MHz
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;520      GPIO_InitStructure.GPIO_Mode 		= GPIO_Mode_Out_PP;					//PP(推挽)输出模式
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;521    	//3)根据GPIO端口及管脚号开启端口时钟及确定是否打开AFIO时钟
;;;522    	GPIO_ClockConf(GPIOx,GPIO_Pin_n);
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       GPIO_ClockConf
;;;523    	//3）初始化GPIO
;;;524    	GPIO_Init(GPIOx,&GPIO_InitStructure);			//GPIOA	
00001e  4669              MOV      r1,sp
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       GPIO_Init
;;;525    }
000026  bd38              POP      {r3-r5,pc}
;;;526    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_DeInitAll||, CODE, READONLY, ALIGN=2

                  GPIO_DeInitAll PROC
;;;106    *******************************************************************************/
;;;107    void GPIO_DeInitAll(void)
000000  b508              PUSH     {r3,lr}
;;;108    {
;;;109    	//1）GPIO结构体定义
;;;110    	GPIO_InitTypeDef	GPIO_InitStructure;
;;;111    	//2）初始化GPIO结构体
;;;112    	GPIO_StructInit(&GPIO_InitStructure);			//GPIO_Pin_All，GPIO_Speed_2MHz，GPIO_Mode_IN_FLOATING
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       GPIO_StructInit
;;;113    	//3）初始化GPIO为默认状态
;;;114    	GPIO_Init(GPIOA,&GPIO_InitStructure);			//GPIOA
000008  4669              MOV      r1,sp
00000a  4819              LDR      r0,|L19.112|
00000c  f7fffffe          BL       GPIO_Init
;;;115    	GPIO_Init(GPIOB,&GPIO_InitStructure);			//GPIOB
000010  4669              MOV      r1,sp
000012  4818              LDR      r0,|L19.116|
000014  f7fffffe          BL       GPIO_Init
;;;116    	GPIO_Init(GPIOC,&GPIO_InitStructure);			//GPIOC
000018  4669              MOV      r1,sp
00001a  4817              LDR      r0,|L19.120|
00001c  f7fffffe          BL       GPIO_Init
;;;117    	GPIO_Init(GPIOD,&GPIO_InitStructure);			//GPIOD
000020  4669              MOV      r1,sp
000022  4816              LDR      r0,|L19.124|
000024  f7fffffe          BL       GPIO_Init
;;;118    	GPIO_Init(GPIOE,&GPIO_InitStructure);			//GPIOE
000028  4669              MOV      r1,sp
00002a  4815              LDR      r0,|L19.128|
00002c  f7fffffe          BL       GPIO_Init
;;;119    	GPIO_Init(GPIOF,&GPIO_InitStructure);			//GPIOF
000030  4669              MOV      r1,sp
000032  4814              LDR      r0,|L19.132|
000034  f7fffffe          BL       GPIO_Init
;;;120    	GPIO_Init(GPIOG,&GPIO_InitStructure);			//GPIOG
000038  4669              MOV      r1,sp
00003a  4813              LDR      r0,|L19.136|
00003c  f7fffffe          BL       GPIO_Init
;;;121    	//4）关闭GPIO时钟
;;;122    	GPIO_DeInit(GPIOA);												//GPIOA
000040  480b              LDR      r0,|L19.112|
000042  f7fffffe          BL       GPIO_DeInit
;;;123    	GPIO_DeInit(GPIOB);												//GPIOB
000046  480b              LDR      r0,|L19.116|
000048  f7fffffe          BL       GPIO_DeInit
;;;124    	GPIO_DeInit(GPIOC);												//GPIOC
00004c  480a              LDR      r0,|L19.120|
00004e  f7fffffe          BL       GPIO_DeInit
;;;125    	GPIO_DeInit(GPIOD);												//GPIOD
000052  480a              LDR      r0,|L19.124|
000054  f7fffffe          BL       GPIO_DeInit
;;;126    	GPIO_DeInit(GPIOE);												//GPIOE
000058  4809              LDR      r0,|L19.128|
00005a  f7fffffe          BL       GPIO_DeInit
;;;127    	GPIO_DeInit(GPIOF);												//GPIOF
00005e  4809              LDR      r0,|L19.132|
000060  f7fffffe          BL       GPIO_DeInit
;;;128    	GPIO_DeInit(GPIOG);												//GPIOG
000064  4808              LDR      r0,|L19.136|
000066  f7fffffe          BL       GPIO_DeInit
;;;129    	//4）关闭AFIO
;;;130    	GPIO_AFIODeInit();												//AFIO关闭	
00006a  f7fffffe          BL       GPIO_AFIODeInit
;;;131    }
00006e  bd08              POP      {r3,pc}
;;;132    /*******************************************************************************
                          ENDP

                  |L19.112|
                          DCD      0x40010800
                  |L19.116|
                          DCD      0x40010c00
                  |L19.120|
                          DCD      0x40011000
                  |L19.124|
                          DCD      0x40011400
                  |L19.128|
                          DCD      0x40011800
                  |L19.132|
                          DCD      0x40011c00
                  |L19.136|
                          DCD      0x40012000

                          AREA ||i.GPIO_RegConfiguration_IPU||, CODE, READONLY, ALIGN=1

                  GPIO_RegConfiguration_IPU PROC
;;;307    *******************************************************************************/
;;;308    void GPIO_RegConfiguration_IPU(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;309    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;310    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;311    														)
;;;312    {
000004  4602              MOV      r2,r0
000006  460c              MOV      r4,r1
;;;313    u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
00000c  2000              MOVS     r0,#0
00000e  2100              MOVS     r1,#0
;;;314      u32 tmpreg = 0x00, pinmask = 0x00;
000010  2300              MOVS     r3,#0
000012  2500              MOVS     r5,#0
;;;315    	if(0	==	GPIOx)
000014  b90a              CBNZ     r2,|L20.26|
                  |L20.22|
;;;316    	{
;;;317    		return;
;;;318    	}
;;;319      /* Check the parameters */
;;;320      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;321      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;322      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;323    	assert_param(IS_GET_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));   
;;;324      
;;;325    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;326    
;;;327    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;328      /* Configure the eight low port pins */
;;;329      if ((GPIO_Pin_n & ((u32)0x00FF)) != 0x00)
;;;330      {
;;;331        tmpreg = GPIOx->CRL;
;;;332    
;;;333        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;334        {
;;;335          pos = ((u32)0x01) << pinpos;
;;;336          /* Get the port pins position */
;;;337          currentpin = GPIO_Pin_n & pos;
;;;338    
;;;339          if (currentpin == pos)
;;;340          {
;;;341            pos = pinpos << 2;
;;;342            /* Clear the corresponding low control register bits */
;;;343            pinmask = ((u32)0x0F) << pos;
;;;344            tmpreg &= ~pinmask;
;;;345    
;;;346            /* Write the mode configuration in the corresponding bits */
;;;347            tmpreg |= (currentmode << pos);
;;;348    
;;;349            /* Set the corresponding ODR bit */
;;;350    
;;;351              GPIOx->BSRR = (((u32)0x01) << pinpos);
;;;352    
;;;353          }
;;;354        }
;;;355        GPIOx->CRL = tmpreg;
;;;356      }
;;;357    
;;;358    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;359      /* Configure the eight high port pins */
;;;360      if (GPIO_Pin_n > 0x00FF)
;;;361      {
;;;362        tmpreg = GPIOx->CRH;
;;;363        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;364        {
;;;365          pos = (((u32)0x01) << (pinpos + 0x08));
;;;366          /* Get the port pins position */
;;;367          currentpin = ((GPIO_Pin_n) & pos);
;;;368          if (currentpin == pos)
;;;369          {
;;;370            pos = pinpos << 2;
;;;371            /* Clear the corresponding high control register bits */
;;;372            pinmask = ((u32)0x0F) << pos;
;;;373            tmpreg &= ~pinmask;
;;;374    
;;;375            /* Write the mode configuration in the corresponding bits */
;;;376            tmpreg |= (currentmode << pos);
;;;377    
;;;378    
;;;379            /* Set the corresponding ODR bit */
;;;380    
;;;381              GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
;;;382    
;;;383          }
;;;384        }
;;;385        GPIOx->CRH = tmpreg;
;;;386      }
;;;387    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L20.26|
00001a  f0040cff          AND      r12,r4,#0xff          ;329
00001e  f1bc0f00          CMP      r12,#0                ;329
000022  d01e              BEQ      |L20.98|
000024  6813              LDR      r3,[r2,#0]            ;331
000026  2000              MOVS     r0,#0                 ;333
000028  e018              B        |L20.92|
                  |L20.42|
00002a  f04f0c01          MOV      r12,#1                ;335
00002e  fa0cf100          LSL      r1,r12,r0             ;335
000032  ea040701          AND      r7,r4,r1              ;337
000036  428f              CMP      r7,r1                 ;339
000038  d10f              BNE      |L20.90|
00003a  0081              LSLS     r1,r0,#2              ;341
00003c  f04f0c0f          MOV      r12,#0xf              ;343
000040  fa0cf501          LSL      r5,r12,r1             ;343
000044  43ab              BICS     r3,r3,r5              ;344
000046  fa06fc01          LSL      r12,r6,r1             ;347
00004a  ea4c0303          ORR      r3,r12,r3             ;347
00004e  f04f0c01          MOV      r12,#1                ;351
000052  fa0cfc00          LSL      r12,r12,r0            ;351
000056  f8c2c010          STR      r12,[r2,#0x10]        ;351
                  |L20.90|
00005a  1c40              ADDS     r0,r0,#1              ;333
                  |L20.92|
00005c  2808              CMP      r0,#8                 ;333
00005e  d3e4              BCC      |L20.42|
000060  6013              STR      r3,[r2,#0]            ;355
                  |L20.98|
000062  2cff              CMP      r4,#0xff              ;360
000064  dd20              BLE      |L20.168|
000066  6853              LDR      r3,[r2,#4]            ;362
000068  2000              MOVS     r0,#0                 ;363
00006a  e01a              B        |L20.162|
                  |L20.108|
00006c  f1000c08          ADD      r12,r0,#8             ;365
000070  f04f0801          MOV      r8,#1                 ;365
000074  fa08f10c          LSL      r1,r8,r12             ;365
000078  ea040701          AND      r7,r4,r1              ;367
00007c  428f              CMP      r7,r1                 ;368
00007e  d10f              BNE      |L20.160|
000080  0081              LSLS     r1,r0,#2              ;370
000082  f04f0c0f          MOV      r12,#0xf              ;372
000086  fa0cf501          LSL      r5,r12,r1             ;372
00008a  43ab              BICS     r3,r3,r5              ;373
00008c  fa06fc01          LSL      r12,r6,r1             ;376
000090  ea4c0303          ORR      r3,r12,r3             ;376
000094  f1000c08          ADD      r12,r0,#8             ;381
000098  fa08f80c          LSL      r8,r8,r12             ;381
00009c  f8c28010          STR      r8,[r2,#0x10]         ;381
                  |L20.160|
0000a0  1c40              ADDS     r0,r0,#1              ;363
                  |L20.162|
0000a2  2808              CMP      r0,#8                 ;363
0000a4  d3e2              BCC      |L20.108|
0000a6  6053              STR      r3,[r2,#4]            ;385
                  |L20.168|
0000a8  bf00              NOP      
0000aa  e7b4              B        |L20.22|
;;;388    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_RegConfiguration_OPP50||, CODE, READONLY, ALIGN=1

                  GPIO_RegConfiguration_OPP50 PROC
;;;532    *******************************************************************************/
;;;533    void GPIO_RegConfiguration_OPP50(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;534    														GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;535    														u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;536    														)
;;;537    {
000004  4602              MOV      r2,r0
000006  460c              MOV      r4,r1
;;;538    u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000008  2500              MOVS     r5,#0
00000a  2600              MOVS     r6,#0
00000c  2000              MOVS     r0,#0
00000e  2100              MOVS     r1,#0
;;;539      u32 tmpreg = 0x00, pinmask = 0x00;
000010  2300              MOVS     r3,#0
000012  2700              MOVS     r7,#0
;;;540    	if(0	==	GPIOx)
000014  b90a              CBNZ     r2,|L21.26|
                  |L21.22|
;;;541    	{
;;;542    		return;
;;;543    	}
;;;544      /* Check the parameters */
;;;545      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;546      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;547      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;548    	assert_param(IS_GET_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));   
;;;549      
;;;550    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;551        currentmode |= GPIO_Speed_50MHz;
;;;552    
;;;553    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;554      /* Configure the eight low port pins */
;;;555      if ((GPIO_Pin_n & ((u32)0x00FF)) != 0x00)
;;;556      {
;;;557        tmpreg = GPIOx->CRL;
;;;558    
;;;559        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;560        {
;;;561          pos = ((u32)0x01) << pinpos;
;;;562          /* Get the port pins position */
;;;563          currentpin = (GPIO_Pin_n) & pos;
;;;564    
;;;565          if (currentpin == pos)
;;;566          {
;;;567            pos = pinpos << 2;
;;;568            /* Clear the corresponding low control register bits */
;;;569            pinmask = ((u32)0x0F) << pos;
;;;570            tmpreg &= ~pinmask;
;;;571    
;;;572            /* Write the mode configuration in the corresponding bits */
;;;573            tmpreg |= (currentmode << pos);
;;;574          }
;;;575        }
;;;576        GPIOx->CRL = tmpreg;
;;;577      }
;;;578    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;579      /* Configure the eight high port pins */
;;;580      if (GPIO_Pin_n > 0x00FF)
;;;581      {
;;;582        tmpreg = GPIOx->CRH;
;;;583        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;584        {
;;;585          pos = (((u32)0x01) << (pinpos + 0x08));
;;;586          /* Get the port pins position */
;;;587          currentpin = ((GPIO_Pin_n) & pos);
;;;588          if (currentpin == pos)
;;;589          {
;;;590            pos = pinpos << 2;
;;;591            /* Clear the corresponding high control register bits */
;;;592            pinmask = ((u32)0x0F) << pos;
;;;593            tmpreg &= ~pinmask;
;;;594    
;;;595            /* Write the mode configuration in the corresponding bits */
;;;596            tmpreg |= (currentmode << pos);
;;;597          }
;;;598        }
;;;599        GPIOx->CRH = tmpreg;
;;;600      }
;;;601    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L21.26|
00001a  f0450503          ORR      r5,r5,#3              ;551
00001e  f0040cff          AND      r12,r4,#0xff          ;555
000022  f1bc0f00          CMP      r12,#0                ;555
000026  d018              BEQ      |L21.90|
000028  6813              LDR      r3,[r2,#0]            ;557
00002a  2000              MOVS     r0,#0                 ;559
00002c  e012              B        |L21.84|
                  |L21.46|
00002e  f04f0c01          MOV      r12,#1                ;561
000032  fa0cf100          LSL      r1,r12,r0             ;561
000036  ea040601          AND      r6,r4,r1              ;563
00003a  428e              CMP      r6,r1                 ;565
00003c  d109              BNE      |L21.82|
00003e  0081              LSLS     r1,r0,#2              ;567
000040  f04f0c0f          MOV      r12,#0xf              ;569
000044  fa0cf701          LSL      r7,r12,r1             ;569
000048  43bb              BICS     r3,r3,r7              ;570
00004a  fa05fc01          LSL      r12,r5,r1             ;573
00004e  ea4c0303          ORR      r3,r12,r3             ;573
                  |L21.82|
000052  1c40              ADDS     r0,r0,#1              ;559
                  |L21.84|
000054  2808              CMP      r0,#8                 ;559
000056  d3ea              BCC      |L21.46|
000058  6013              STR      r3,[r2,#0]            ;576
                  |L21.90|
00005a  2cff              CMP      r4,#0xff              ;580
00005c  dd1a              BLE      |L21.148|
00005e  6853              LDR      r3,[r2,#4]            ;582
000060  2000              MOVS     r0,#0                 ;583
000062  e014              B        |L21.142|
                  |L21.100|
000064  f1000c08          ADD      r12,r0,#8             ;585
000068  f04f0801          MOV      r8,#1                 ;585
00006c  fa08f10c          LSL      r1,r8,r12             ;585
000070  ea040601          AND      r6,r4,r1              ;587
000074  428e              CMP      r6,r1                 ;588
000076  d109              BNE      |L21.140|
000078  0081              LSLS     r1,r0,#2              ;590
00007a  f04f0c0f          MOV      r12,#0xf              ;592
00007e  fa0cf701          LSL      r7,r12,r1             ;592
000082  43bb              BICS     r3,r3,r7              ;593
000084  fa05fc01          LSL      r12,r5,r1             ;596
000088  ea4c0303          ORR      r3,r12,r3             ;596
                  |L21.140|
00008c  1c40              ADDS     r0,r0,#1              ;583
                  |L21.142|
00008e  2808              CMP      r0,#8                 ;583
000090  d3e8              BCC      |L21.100|
000092  6053              STR      r3,[r2,#4]            ;599
                  |L21.148|
000094  bf00              NOP      
000096  e7be              B        |L21.22|
;;;602    /*******************************************************************************
                          ENDP


                          AREA ||i.GPIO_Toggle||, CODE, READONLY, ALIGN=1

                  GPIO_Toggle PROC
;;;752    *******************************************************************************/
;;;753    void GPIO_Toggle(
000000  68c2              LDR      r2,[r0,#0xc]
;;;754    									GPIO_TypeDef* GPIOx,							//GPIO端口,x=A/B/C/D/E/F/G
;;;755    									u16 GPIO_Pin_n										//GPIO管脚号n=0~15/All
;;;756    									)
;;;757    {
;;;758    	//1）GPIO管脚输出低，返回Bit_RESET
;;;759    	if ((GPIOx->ODR & GPIO_Pin_n) != (u32)Bit_RESET)
000002  400a              ANDS     r2,r2,r1
000004  b10a              CBZ      r2,|L22.10|
;;;760      {
;;;761        GPIOx->BRR = GPIO_Pin_n;
000006  6141              STR      r1,[r0,#0x14]
000008  e000              B        |L22.12|
                  |L22.10|
;;;762      }
;;;763      else
;;;764      {
;;;765    		GPIOx->BSRR = GPIO_Pin_n;
00000a  6101              STR      r1,[r0,#0x10]
                  |L22.12|
;;;766      }
;;;767    }
00000c  4770              BX       lr
;;;768    
                          ENDP

