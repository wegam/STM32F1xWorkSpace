; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\st7789v.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\st7789v.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\st7789v.crf ..\..\Driver\Components\SCR\ST7789V.C]
                          THUMB

                          AREA ||i.ST7789V_Clean||, CODE, READONLY, ALIGN=2

                  ST7789V_Clean PROC
;;;756    *******************************************************************************/
;;;757    void ST7789V_Clean(u16 Color)	//清除屏幕函数
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;758    {
000004  4604              MOV      r4,r0
;;;759    	unsigned short x,y;
;;;760    	unsigned short HSX=0,HEX=0,VSY=0,VEY=0,MaxH=0,MaxV=0;
000006  2700              MOVS     r7,#0
000008  2500              MOVS     r5,#0
00000a  46a8              MOV      r8,r5
00000c  2600              MOVS     r6,#0
00000e  46a9              MOV      r9,r5
000010  46aa              MOV      r10,r5
;;;761    	unsigned long	length	=	0;
000012  46ab              MOV      r11,r5
;;;762    	switch(ST7789VRotate)
000014  4813              LDR      r0,|L1.100|
000016  7800              LDRB     r0,[r0,#0]  ; ST7789VRotate
000018  b130              CBZ      r0,|L1.40|
00001a  2860              CMP      r0,#0x60
00001c  d010              BEQ      |L1.64|
00001e  28a0              CMP      r0,#0xa0
000020  d006              BEQ      |L1.48|
000022  28c0              CMP      r0,#0xc0
000024  d110              BNE      |L1.72|
000026  e007              B        |L1.56|
                  |L1.40|
;;;763    	{
;;;764    		case ST7789V_Rotate_0D:
;;;765    			HEX=ST7789V_H;
000028  25f0              MOVS     r5,#0xf0
;;;766    			VEY=ST7789V_V;
00002a  f44f76a0          MOV      r6,#0x140
;;;767    		break;
00002e  e00c              B        |L1.74|
                  |L1.48|
;;;768    		case ST7789V_Rotate_90D:
;;;769    			HEX=ST7789V_V;
000030  f44f75a0          MOV      r5,#0x140
;;;770    			VEY=ST7789V_H;
000034  26f0              MOVS     r6,#0xf0
;;;771    		break;
000036  e008              B        |L1.74|
                  |L1.56|
;;;772    		case ST7789V_Rotate_180D:
;;;773    			HEX=ST7789V_H;
000038  25f0              MOVS     r5,#0xf0
;;;774    			VEY=ST7789V_V;
00003a  f44f76a0          MOV      r6,#0x140
;;;775    		break;
00003e  e004              B        |L1.74|
                  |L1.64|
;;;776    		case ST7789V_Rotate_270D:
;;;777    			HEX=ST7789V_V;
000040  f44f75a0          MOV      r5,#0x140
;;;778    			VEY=ST7789V_H;
000044  26f0              MOVS     r6,#0xf0
;;;779    		break;
000046  e000              B        |L1.74|
                  |L1.72|
;;;780    		default:break;
000048  bf00              NOP      
                  |L1.74|
00004a  bf00              NOP                            ;767
;;;781    		
;;;782    	}
;;;783    	ST7789VBColor=	Color;
00004c  4806              LDR      r0,|L1.104|
00004e  8004              STRH     r4,[r0,#0]
;;;784    	ST7789V_Fill(0x00,0x00,HEX,VEY,Color);
000050  4633              MOV      r3,r6
000052  462a              MOV      r2,r5
000054  2100              MOVS     r1,#0
000056  4608              MOV      r0,r1
000058  9400              STR      r4,[sp,#0]
00005a  f7fffffe          BL       ST7789V_Fill
;;;785    }
00005e  e8bd8ff8          POP      {r3-r11,pc}
;;;786    /**************************************************************************************************
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      ST7789VRotate
                  |L1.104|
                          DCD      ST7789VBColor

                          AREA ||i.ST7789V_DelayS||, CODE, READONLY, ALIGN=1

                  ST7789V_DelayS PROC
;;;952    *******************************************************************************/
;;;953    void ST7789V_DelayS(u32 xS)
000000  b510              PUSH     {r4,lr}
;;;954    {
000002  4604              MOV      r4,r0
;;;955    	SysTick_DeleyS(xS);				//SysTick延时nmS;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SysTick_DeleyS
;;;956    }
00000a  bd10              POP      {r4,pc}
;;;957    
                          ENDP


                          AREA ||i.ST7789V_DelaymS||, CODE, READONLY, ALIGN=1

                  ST7789V_DelaymS PROC
;;;942    *******************************************************************************/
;;;943    void ST7789V_DelaymS(u32 xms)
000000  b510              PUSH     {r4,lr}
;;;944    {
000002  4604              MOV      r4,r0
;;;945    	SysTick_DeleymS(xms);				//SysTick延时nmS;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SysTick_DeleymS
;;;946    }
00000a  bd10              POP      {r4,pc}
;;;947    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_DelayuS||, CODE, READONLY, ALIGN=1

                  ST7789V_DelayuS PROC
;;;932    *******************************************************************************/
;;;933    void ST7789V_DelayuS(u32 xuS)
000000  b510              PUSH     {r4,lr}
;;;934    {
000002  4604              MOV      r4,r0
;;;935    	SysTick_DeleyuS(xuS);				//SysTick延时nmS;
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SysTick_DeleyuS
;;;936    }
00000a  bd10              POP      {r4,pc}
;;;937    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_Disable||, CODE, READONLY, ALIGN=2

                  ST7789V_Disable PROC
;;;309    *******************************************************************************/
;;;310    void ST7789V_Disable(void)
000000  480e              LDR      r0,|L5.60|
;;;311    {
;;;312      ST7789V_CS_HIGH;  //Disable LCM
000002  6800              LDR      r0,[r0,#0]  ; pST7789V
000004  8d80              LDRH     r0,[r0,#0x2c]
000006  490d              LDR      r1,|L5.60|
000008  6809              LDR      r1,[r1,#0]  ; pST7789V
00000a  6a89              LDR      r1,[r1,#0x28]
00000c  6108              STR      r0,[r1,#0x10]
;;;313      
;;;314      ST7789V_DC_HIGH;  //WriteCommand:DC/RS-LOW
00000e  480b              LDR      r0,|L5.60|
000010  6800              LDR      r0,[r0,#0]  ; pST7789V
000012  8b80              LDRH     r0,[r0,#0x1c]
000014  4909              LDR      r1,|L5.60|
000016  6809              LDR      r1,[r1,#0]  ; pST7789V
000018  6989              LDR      r1,[r1,#0x18]
00001a  6108              STR      r0,[r1,#0x10]
;;;315      ST7789V_RD_HIGH;  //ReadDisable
00001c  4807              LDR      r0,|L5.60|
00001e  6800              LDR      r0,[r0,#0]  ; pST7789V
000020  8980              LDRH     r0,[r0,#0xc]
000022  4906              LDR      r1,|L5.60|
000024  6809              LDR      r1,[r1,#0]  ; pST7789V
000026  6889              LDR      r1,[r1,#8]
000028  6108              STR      r0,[r1,#0x10]
;;;316      ST7789V_WR_HIGH;  //WriteDisable
00002a  4804              LDR      r0,|L5.60|
00002c  6800              LDR      r0,[r0,#0]  ; pST7789V
00002e  8c80              LDRH     r0,[r0,#0x24]
000030  4902              LDR      r1,|L5.60|
000032  6809              LDR      r1,[r1,#0]  ; pST7789V
000034  6a09              LDR      r1,[r1,#0x20]
000036  6108              STR      r0,[r1,#0x10]
;;;317    }
000038  4770              BX       lr
;;;318    /*******************************************************************************
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      pST7789V

                          AREA ||i.ST7789V_DrawCircle||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawCircle PROC
;;;651    **************************************************************************************************/
;;;652    void ST7789V_DrawCircle(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;653    												u16 x,u16 y,		//圆心坐标原点
;;;654    												u16 r,					//半径
;;;655    												u8 Filled,			//是否填充
;;;656    												u16 color				//颜色
;;;657    												)
;;;658    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  469b              MOV      r11,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;659    	int a,b;
;;;660    	int di;
;;;661    	a=0;b=r;	  
000010  2400              MOVS     r4,#0
000012  4655              MOV      r5,r10
;;;662    	di=3-(r<<1);             //判断下个点位置的标志
000014  2003              MOVS     r0,#3
000016  eba0094a          SUB      r9,r0,r10,LSL #1
;;;663    	while(a<=b)
00001a  e0c8              B        |L6.430|
                  |L6.28|
;;;664    	{
;;;665    		if(Filled)	//填充就画线
00001c  f1bb0f00          CMP      r11,#0
000020  d072              BEQ      |L6.264|
;;;666    		{
;;;667    			ST7789V_DrawLine(x,y,x-b,y-a,color);             //3           
000022  1b38              SUBS     r0,r7,r4
000024  b283              UXTH     r3,r0
000026  1b70              SUBS     r0,r6,r5
000028  b282              UXTH     r2,r0
00002a  4639              MOV      r1,r7
00002c  4630              MOV      r0,r6
00002e  f8cd8000          STR      r8,[sp,#0]
000032  f7fffffe          BL       ST7789V_DrawLine
;;;668    			ST7789V_DrawLine(x,y,x+b,y-a,color);             //0           
000036  1b38              SUBS     r0,r7,r4
000038  b283              UXTH     r3,r0
00003a  1970              ADDS     r0,r6,r5
00003c  b282              UXTH     r2,r0
00003e  4639              MOV      r1,r7
000040  4630              MOV      r0,r6
000042  f8cd8000          STR      r8,[sp,#0]
000046  f7fffffe          BL       ST7789V_DrawLine
;;;669    			ST7789V_DrawLine(x,y,x-a,y+b,color);             //1       
00004a  1978              ADDS     r0,r7,r5
00004c  b283              UXTH     r3,r0
00004e  1b30              SUBS     r0,r6,r4
000050  b282              UXTH     r2,r0
000052  4639              MOV      r1,r7
000054  4630              MOV      r0,r6
000056  f8cd8000          STR      r8,[sp,#0]
00005a  f7fffffe          BL       ST7789V_DrawLine
;;;670    			ST7789V_DrawLine(x,y,x-b,y-a,color);             //7           
00005e  1b38              SUBS     r0,r7,r4
000060  b283              UXTH     r3,r0
000062  1b70              SUBS     r0,r6,r5
000064  b282              UXTH     r2,r0
000066  4639              MOV      r1,r7
000068  4630              MOV      r0,r6
00006a  f8cd8000          STR      r8,[sp,#0]
00006e  f7fffffe          BL       ST7789V_DrawLine
;;;671    			ST7789V_DrawLine(x,y,x-a,y-b,color);             //2             
000072  1b78              SUBS     r0,r7,r5
000074  b283              UXTH     r3,r0
000076  1b30              SUBS     r0,r6,r4
000078  b282              UXTH     r2,r0
00007a  4639              MOV      r1,r7
00007c  4630              MOV      r0,r6
00007e  f8cd8000          STR      r8,[sp,#0]
000082  f7fffffe          BL       ST7789V_DrawLine
;;;672    			ST7789V_DrawLine(x,y,x+b,y+a,color);             //4               
000086  1938              ADDS     r0,r7,r4
000088  b283              UXTH     r3,r0
00008a  1970              ADDS     r0,r6,r5
00008c  b282              UXTH     r2,r0
00008e  4639              MOV      r1,r7
000090  4630              MOV      r0,r6
000092  f8cd8000          STR      r8,[sp,#0]
000096  f7fffffe          BL       ST7789V_DrawLine
;;;673    			ST7789V_DrawLine(x,y,x+a,y-b,color);             //5
00009a  1b78              SUBS     r0,r7,r5
00009c  b283              UXTH     r3,r0
00009e  1930              ADDS     r0,r6,r4
0000a0  b282              UXTH     r2,r0
0000a2  4639              MOV      r1,r7
0000a4  4630              MOV      r0,r6
0000a6  f8cd8000          STR      r8,[sp,#0]
0000aa  f7fffffe          BL       ST7789V_DrawLine
;;;674    			ST7789V_DrawLine(x,y,x+a,y+b,color);             //6 
0000ae  1978              ADDS     r0,r7,r5
0000b0  b283              UXTH     r3,r0
0000b2  1930              ADDS     r0,r6,r4
0000b4  b282              UXTH     r2,r0
0000b6  4639              MOV      r1,r7
0000b8  4630              MOV      r0,r6
0000ba  f8cd8000          STR      r8,[sp,#0]
0000be  f7fffffe          BL       ST7789V_DrawLine
;;;675    			ST7789V_DrawLine(x,y,x-b,y+a,color);             
0000c2  1938              ADDS     r0,r7,r4
0000c4  b283              UXTH     r3,r0
0000c6  1b70              SUBS     r0,r6,r5
0000c8  b282              UXTH     r2,r0
0000ca  4639              MOV      r1,r7
0000cc  4630              MOV      r0,r6
0000ce  f8cd8000          STR      r8,[sp,#0]
0000d2  f7fffffe          BL       ST7789V_DrawLine
;;;676    			a++;
0000d6  1c64              ADDS     r4,r4,#1
;;;677    			//使用Bresenham算法画圆     
;;;678    			if(di<0)
0000d8  f1b90f00          CMP      r9,#0
0000dc  da03              BGE      |L6.230|
;;;679    				di +=4*a+6;	  
0000de  00a0              LSLS     r0,r4,#2
0000e0  1d80              ADDS     r0,r0,#6
0000e2  4481              ADD      r9,r9,r0
0000e4  e004              B        |L6.240|
                  |L6.230|
;;;680    			else
;;;681    			{
;;;682    				di+=10+4*(a-b);   
0000e6  1b60              SUBS     r0,r4,r5
0000e8  0080              LSLS     r0,r0,#2
0000ea  300a              ADDS     r0,r0,#0xa
0000ec  4481              ADD      r9,r9,r0
;;;683    				b--;
0000ee  1e6d              SUBS     r5,r5,#1
                  |L6.240|
;;;684    			}
;;;685    			ST7789V_DrawLine(x,y,x+a,y+b,color);				//AB 两个坐标画一条直线
0000f0  1978              ADDS     r0,r7,r5
0000f2  b283              UXTH     r3,r0
0000f4  1930              ADDS     r0,r6,r4
0000f6  b282              UXTH     r2,r0
0000f8  4639              MOV      r1,r7
0000fa  4630              MOV      r0,r6
0000fc  f8cd8000          STR      r8,[sp,#0]
000100  f7fffffe          BL       ST7789V_DrawLine
000104  e053              B        |L6.430|
000106  e7ff              B        |L6.264|
                  |L6.264|
;;;686    		}
;;;687    		else
;;;688    		{
;;;689    			ST7789V_DrawDot(x-b,y-a,color);             //3           
000108  1b3a              SUBS     r2,r7,r4
00010a  b291              UXTH     r1,r2
00010c  1b72              SUBS     r2,r6,r5
00010e  b290              UXTH     r0,r2
000110  4642              MOV      r2,r8
000112  f7fffffe          BL       ST7789V_DrawDot
;;;690    			ST7789V_DrawDot(x+b,y-a,color);             //0           
000116  1b3a              SUBS     r2,r7,r4
000118  b291              UXTH     r1,r2
00011a  1972              ADDS     r2,r6,r5
00011c  b290              UXTH     r0,r2
00011e  4642              MOV      r2,r8
000120  f7fffffe          BL       ST7789V_DrawDot
;;;691    			ST7789V_DrawDot(x-a,y+b,color);             //1       
000124  197a              ADDS     r2,r7,r5
000126  b291              UXTH     r1,r2
000128  1b32              SUBS     r2,r6,r4
00012a  b290              UXTH     r0,r2
00012c  4642              MOV      r2,r8
00012e  f7fffffe          BL       ST7789V_DrawDot
;;;692    			ST7789V_DrawDot(x-b,y-a,color);             //7           
000132  1b3a              SUBS     r2,r7,r4
000134  b291              UXTH     r1,r2
000136  1b72              SUBS     r2,r6,r5
000138  b290              UXTH     r0,r2
00013a  4642              MOV      r2,r8
00013c  f7fffffe          BL       ST7789V_DrawDot
;;;693    			ST7789V_DrawDot(x-a,y-b,color);             //2             
000140  1b7a              SUBS     r2,r7,r5
000142  b291              UXTH     r1,r2
000144  1b32              SUBS     r2,r6,r4
000146  b290              UXTH     r0,r2
000148  4642              MOV      r2,r8
00014a  f7fffffe          BL       ST7789V_DrawDot
;;;694    			ST7789V_DrawDot(x+b,y+a,color);             //4               
00014e  193a              ADDS     r2,r7,r4
000150  b291              UXTH     r1,r2
000152  1972              ADDS     r2,r6,r5
000154  b290              UXTH     r0,r2
000156  4642              MOV      r2,r8
000158  f7fffffe          BL       ST7789V_DrawDot
;;;695    			ST7789V_DrawDot(x+a,y-b,color);             //5
00015c  1b7a              SUBS     r2,r7,r5
00015e  b291              UXTH     r1,r2
000160  1932              ADDS     r2,r6,r4
000162  b290              UXTH     r0,r2
000164  4642              MOV      r2,r8
000166  f7fffffe          BL       ST7789V_DrawDot
;;;696    			ST7789V_DrawDot(x+a,y+b,color);             //6 
00016a  197a              ADDS     r2,r7,r5
00016c  b291              UXTH     r1,r2
00016e  1932              ADDS     r2,r6,r4
000170  b290              UXTH     r0,r2
000172  4642              MOV      r2,r8
000174  f7fffffe          BL       ST7789V_DrawDot
;;;697    			ST7789V_DrawDot(x-b,y+a,color);             
000178  193a              ADDS     r2,r7,r4
00017a  b291              UXTH     r1,r2
00017c  1b72              SUBS     r2,r6,r5
00017e  b290              UXTH     r0,r2
000180  4642              MOV      r2,r8
000182  f7fffffe          BL       ST7789V_DrawDot
;;;698    			a++;
000186  1c64              ADDS     r4,r4,#1
;;;699    			//使用Bresenham算法画圆     
;;;700    			if(di<0)
000188  f1b90f00          CMP      r9,#0
00018c  da03              BGE      |L6.406|
;;;701    				di +=4*a+6;	  
00018e  00a0              LSLS     r0,r4,#2
000190  1d80              ADDS     r0,r0,#6
000192  4481              ADD      r9,r9,r0
000194  e004              B        |L6.416|
                  |L6.406|
;;;702    			else
;;;703    			{
;;;704    				di+=10+4*(a-b);   
000196  1b60              SUBS     r0,r4,r5
000198  0080              LSLS     r0,r0,#2
00019a  300a              ADDS     r0,r0,#0xa
00019c  4481              ADD      r9,r9,r0
;;;705    				b--;
00019e  1e6d              SUBS     r5,r5,#1
                  |L6.416|
;;;706    			}
;;;707    				ST7789V_DrawDot(x+a,y+b,color);
0001a0  197a              ADDS     r2,r7,r5
0001a2  b291              UXTH     r1,r2
0001a4  1932              ADDS     r2,r6,r4
0001a6  b290              UXTH     r0,r2
0001a8  4642              MOV      r2,r8
0001aa  f7fffffe          BL       ST7789V_DrawDot
                  |L6.430|
0001ae  42ac              CMP      r4,r5                 ;663
0001b0  f77faf34          BLE      |L6.28|
;;;708    		}
;;;709    	}
;;;710    }
0001b4  e8bd8ff8          POP      {r3-r11,pc}
;;;711    /**************************************************************************************************
                          ENDP


                          AREA ||i.ST7789V_DrawDot||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawDot PROC
;;;566    *******************************************************************************/
;;;567    void ST7789V_DrawDot(
000000  b570              PUSH     {r4-r6,lr}
;;;568    									unsigned short HSX,			//点X坐标*/
;;;569    									unsigned short HSY,			//点Y坐标*/
;;;570    									unsigned short Color		//点颜色*/	
;;;571    								)
;;;572    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;573      ST7789V_Enable();	//LCD_CS_LOW;
000008  f7fffffe          BL       ST7789V_Enable
;;;574    	ST7789V_SetWindowAddress(HSX,HSY,HSX,HSY);	//设置光标位置
00000c  462b              MOV      r3,r5
00000e  4622              MOV      r2,r4
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       ST7789V_SetWindowAddress
;;;575    	ST7789V_WriteData(Color);
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       ST7789V_WriteData
;;;576      ST7789V_Disable();	//LCD_CS_HIGH;
00001e  f7fffffe          BL       ST7789V_Disable
;;;577    }
000022  bd70              POP      {r4-r6,pc}
;;;578    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_DrawLine||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawLine PROC
;;;586    *******************************************************************************/
;;;587    void ST7789V_DrawLine(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;588    									unsigned short HSX, unsigned short HSY, 	//x1,y1:起点坐标
;;;589    									unsigned short HEX, unsigned short HEY,		//x2,y2:终点坐标
;;;590    									unsigned short Color					//颜色
;;;591    )
;;;592    {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
;;;593    	u16 t; 
;;;594    	int xerr=0,yerr=0,delta_x,delta_y,distance; 
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
00000c  4683              MOV      r11,r0
;;;595    	int incx,incy,uRow,uCol; 
;;;596    
;;;597    	delta_x=HEX-HSX; //计算坐标增量 
00000e  9805              LDR      r0,[sp,#0x14]
000010  eba00509          SUB      r5,r0,r9
;;;598    	delta_y=HEY-HSY; 
000014  9904              LDR      r1,[sp,#0x10]
000016  9806              LDR      r0,[sp,#0x18]
000018  1a46              SUBS     r6,r0,r1
;;;599    	uRow=HSX; 
00001a  f8cd9004          STR      r9,[sp,#4]
;;;600    	uCol=HSY;
00001e  9804              LDR      r0,[sp,#0x10]
000020  9000              STR      r0,[sp,#0]
;;;601    	
;;;602    	if(delta_x>0)
000022  2d00              CMP      r5,#0
000024  dd01              BLE      |L8.42|
;;;603    		incx=1; //设置单步方向 
000026  2701              MOVS     r7,#1
000028  e005              B        |L8.54|
                  |L8.42|
;;;604    	else if(delta_x==0)
00002a  b90d              CBNZ     r5,|L8.48|
;;;605    		incx=0;//垂直线 
00002c  2700              MOVS     r7,#0
00002e  e002              B        |L8.54|
                  |L8.48|
;;;606    	else
;;;607    	{
;;;608    		incx=-1;
000030  f04f37ff          MOV      r7,#0xffffffff
;;;609    		delta_x=-delta_x;
000034  426d              RSBS     r5,r5,#0
                  |L8.54|
;;;610    	}
;;;611    		
;;;612    	if(delta_y>0)
000036  2e00              CMP      r6,#0
000038  dd02              BLE      |L8.64|
;;;613    		incy=1; 
00003a  f04f0801          MOV      r8,#1
00003e  e006              B        |L8.78|
                  |L8.64|
;;;614    	else if(delta_y==0)
000040  b916              CBNZ     r6,|L8.72|
;;;615    		incy=0;//水平线 
000042  f04f0800          MOV      r8,#0
000046  e002              B        |L8.78|
                  |L8.72|
;;;616    	else
;;;617    		{incy=-1;delta_y=-delta_y;}
000048  f04f38ff          MOV      r8,#0xffffffff
00004c  4276              RSBS     r6,r6,#0
                  |L8.78|
;;;618    		
;;;619    	if( delta_x>delta_y)
00004e  42b5              CMP      r5,r6
000050  dd01              BLE      |L8.86|
;;;620    		distance=delta_x; 								//选取基本增量坐标轴 
000052  462c              MOV      r4,r5
000054  e000              B        |L8.88|
                  |L8.86|
;;;621    	else
;;;622    		distance=delta_y;
000056  4634              MOV      r4,r6
                  |L8.88|
;;;623      
;;;624    	ST7789V_Enable();	//LCD_CS_LOW;
000058  f7fffffe          BL       ST7789V_Enable
;;;625    	for(t=0;t<distance+1;t++ )					//画线输出 
00005c  f04f0a00          MOV      r10,#0
000060  e02c              B        |L8.188|
                  |L8.98|
;;;626    	{  
;;;627        ST7789V_SetWindowAddress(uRow,uCol,uRow,uCol);	//设置光标位置
000062  f8ddc000          LDR      r12,[sp,#0]
000066  fa1ff38c          UXTH     r3,r12
00006a  f8ddc004          LDR      r12,[sp,#4]
00006e  fa1ff28c          UXTH     r2,r12
000072  f8ddc000          LDR      r12,[sp,#0]
000076  fa1ff18c          UXTH     r1,r12
00007a  f8ddc004          LDR      r12,[sp,#4]
00007e  fa1ff08c          UXTH     r0,r12
000082  f7fffffe          BL       ST7789V_SetWindowAddress
;;;628        ST7789V_WriteData(Color);
000086  9810              LDR      r0,[sp,#0x40]
000088  f7fffffe          BL       ST7789V_WriteData
;;;629        
;;;630    		xerr+=delta_x ; 
00008c  9802              LDR      r0,[sp,#8]
00008e  4428              ADD      r0,r0,r5
000090  9002              STR      r0,[sp,#8]
;;;631    		yerr+=delta_y ; 
000092  44b3              ADD      r11,r11,r6
;;;632    		if(xerr>distance) 
000094  9802              LDR      r0,[sp,#8]
000096  42a0              CMP      r0,r4
000098  dd05              BLE      |L8.166|
;;;633    		{ 
;;;634    			xerr-=distance; 
00009a  9802              LDR      r0,[sp,#8]
00009c  1b00              SUBS     r0,r0,r4
00009e  9002              STR      r0,[sp,#8]
;;;635    			uRow+=incx; 
0000a0  9801              LDR      r0,[sp,#4]
0000a2  4438              ADD      r0,r0,r7
0000a4  9001              STR      r0,[sp,#4]
                  |L8.166|
;;;636    		} 
;;;637    		if(yerr>distance) 
0000a6  45a3              CMP      r11,r4
0000a8  dd04              BLE      |L8.180|
;;;638    		{ 
;;;639    			yerr-=distance;
0000aa  ebab0b04          SUB      r11,r11,r4
;;;640    			uCol+=incy; 
0000ae  9800              LDR      r0,[sp,#0]
0000b0  4440              ADD      r0,r0,r8
0000b2  9000              STR      r0,[sp,#0]
                  |L8.180|
0000b4  f10a0001          ADD      r0,r10,#1             ;625
0000b8  fa1ffa80          UXTH     r10,r0                ;625
                  |L8.188|
0000bc  1c60              ADDS     r0,r4,#1              ;625
0000be  4582              CMP      r10,r0                ;625
0000c0  dbcf              BLT      |L8.98|
;;;641    		} 
;;;642    	}
;;;643      ST7789V_Disable();	//LCD_CS_HIGH;
0000c2  f7fffffe          BL       ST7789V_Disable
;;;644    }
0000c6  b007              ADD      sp,sp,#0x1c
0000c8  e8bd8ff0          POP      {r4-r11,pc}
;;;645    /**************************************************************************************************
                          ENDP


                          AREA ||i.ST7789V_DrawRectangle||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawRectangle PROC
;;;715    **************************************************************************************************/
;;;716    void ST7789V_DrawRectangle(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)
000000  e92d41f8          PUSH     {r3-r8,lr}
;;;717    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c07              LDR      r4,[sp,#0x1c]
;;;718    	ST7789V_DrawLine( x1, y1,	x1,	y2, color );
00000e  4643              MOV      r3,r8
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  9400              STR      r4,[sp,#0]
000018  f7fffffe          BL       ST7789V_DrawLine
;;;719    	ST7789V_DrawLine( x1, y1,	x2,	y1, color );
00001c  4633              MOV      r3,r6
00001e  463a              MOV      r2,r7
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  9400              STR      r4,[sp,#0]
000026  f7fffffe          BL       ST7789V_DrawLine
;;;720    	ST7789V_DrawLine( x2, y1,	x2,	y2, color );
00002a  4643              MOV      r3,r8
00002c  463a              MOV      r2,r7
00002e  4631              MOV      r1,r6
000030  4638              MOV      r0,r7
000032  9400              STR      r4,[sp,#0]
000034  f7fffffe          BL       ST7789V_DrawLine
;;;721    	ST7789V_DrawLine( x1, y2,	x2,	y2, color );
000038  4643              MOV      r3,r8
00003a  463a              MOV      r2,r7
00003c  4641              MOV      r1,r8
00003e  4628              MOV      r0,r5
000040  9400              STR      r4,[sp,#0]
000042  f7fffffe          BL       ST7789V_DrawLine
;;;722    }
000046  e8bd81f8          POP      {r3-r8,pc}
;;;723    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_Enable||, CODE, READONLY, ALIGN=2

                  ST7789V_Enable PROC
;;;292    *******************************************************************************/
;;;293    void ST7789V_Enable(void)
000000  480e              LDR      r0,|L10.60|
;;;294    {
;;;295    	ST7789V_DC_HIGH;  //WriteCommand:DC/RS-LOW
000002  6800              LDR      r0,[r0,#0]  ; pST7789V
000004  8b80              LDRH     r0,[r0,#0x1c]
000006  490d              LDR      r1,|L10.60|
000008  6809              LDR      r1,[r1,#0]  ; pST7789V
00000a  6989              LDR      r1,[r1,#0x18]
00000c  6108              STR      r0,[r1,#0x10]
;;;296      ST7789V_RD_HIGH;  //ReadDisable
00000e  480b              LDR      r0,|L10.60|
000010  6800              LDR      r0,[r0,#0]  ; pST7789V
000012  8980              LDRH     r0,[r0,#0xc]
000014  4909              LDR      r1,|L10.60|
000016  6809              LDR      r1,[r1,#0]  ; pST7789V
000018  6889              LDR      r1,[r1,#8]
00001a  6108              STR      r0,[r1,#0x10]
;;;297      ST7789V_WR_HIGH;  //WriteDisable
00001c  4807              LDR      r0,|L10.60|
00001e  6800              LDR      r0,[r0,#0]  ; pST7789V
000020  8c80              LDRH     r0,[r0,#0x24]
000022  4906              LDR      r1,|L10.60|
000024  6809              LDR      r1,[r1,#0]  ; pST7789V
000026  6a09              LDR      r1,[r1,#0x20]
000028  6108              STR      r0,[r1,#0x10]
;;;298      
;;;299      ST7789V_CS_LOW;   //SelectLcm
00002a  4804              LDR      r0,|L10.60|
00002c  6800              LDR      r0,[r0,#0]  ; pST7789V
00002e  8d80              LDRH     r0,[r0,#0x2c]
000030  4902              LDR      r1,|L10.60|
000032  6809              LDR      r1,[r1,#0]  ; pST7789V
000034  6a89              LDR      r1,[r1,#0x28]
000036  6148              STR      r0,[r1,#0x14]
;;;300    }
000038  4770              BX       lr
;;;301    /*******************************************************************************
                          ENDP

00003a  0000              DCW      0x0000
                  |L10.60|
                          DCD      pST7789V

                          AREA ||i.ST7789V_EnterSleep||, CODE, READONLY, ALIGN=2

                  ST7789V_EnterSleep PROC
;;;500    *******************************************************************************/
;;;501    void ST7789V_EnterSleep(void)
000000  b508              PUSH     {r3,lr}
;;;502    {
;;;503      ST7789V_WriteCommand(0x28); // Standby out
000002  2028              MOVS     r0,#0x28
000004  f7fffffe          BL       ST7789V_WriteCommand
;;;504      LCD_DelaymS(10);
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       LCD_DelaymS
;;;505      ST7789V_WriteCommand(0x10); // Display on
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       ST7789V_WriteCommand
;;;506      LCD_BL_OFF;		//关背光
000014  2000              MOVS     r0,#0
000016  4602              MOV      r2,r0
000018  4b03              LDR      r3,|L11.40|
00001a  2103              MOVS     r1,#3
00001c  9000              STR      r0,[sp,#0]
00001e  0318              LSLS     r0,r3,#12
000020  f7fffffe          BL       PWM_OUT
;;;507    }
000024  bd08              POP      {r3,pc}
;;;508    
                          ENDP

000026  0000              DCW      0x0000
                  |L11.40|
                          DCD      0x40140000

                          AREA ||i.ST7789V_ExitSleep||, CODE, READONLY, ALIGN=2

                  ST7789V_ExitSleep PROC
;;;518    *******************************************************************************/
;;;519    void ST7789V_ExitSleep(void)
000000  b508              PUSH     {r3,lr}
;;;520    {
;;;521      ST7789V_WriteCommand(0x11); // Standby out
000002  2011              MOVS     r0,#0x11
000004  f7fffffe          BL       ST7789V_WriteCommand
;;;522      LCD_DelaymS(180);
000008  20b4              MOVS     r0,#0xb4
00000a  f7fffffe          BL       LCD_DelaymS
;;;523      ST7789V_WriteCommand(0x29); // Display on
00000e  2029              MOVS     r0,#0x29
000010  f7fffffe          BL       ST7789V_WriteCommand
;;;524      LCD_BL_ON;		//关背光
000014  2064              MOVS     r0,#0x64
000016  2200              MOVS     r2,#0
000018  4b03              LDR      r3,|L12.40|
00001a  2103              MOVS     r1,#3
00001c  9000              STR      r0,[sp,#0]
00001e  0700              LSLS     r0,r0,#28
000020  f7fffffe          BL       PWM_OUT
;;;525    }
000024  bd08              POP      {r3,pc}
;;;526    
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      0x408f4000

                          AREA ||i.ST7789V_Fill||, CODE, READONLY, ALIGN=1

                  ST7789V_Fill PROC
;;;728    *******************************************************************************/
;;;729    void ST7789V_Fill(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;730    							unsigned short xs, unsigned short ys, 	//x1,y1:起点坐标
;;;731    							unsigned short xe, unsigned short ye,		//x2,y2:终点坐标
;;;732    							u16 Color
;;;733    )
;;;734    {          
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;735    	unsigned int x;
;;;736    	unsigned int y;	
;;;737      ST7789V_Enable();	//LCD_CS_LOW;
000010  f7fffffe          BL       ST7789V_Enable
;;;738    	ST7789V_SetWindowAddress(xs,ys,xe,ye);
000014  463b              MOV      r3,r7
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       ST7789V_SetWindowAddress
;;;739    	for(x=0;x<=xe-xs;x++)
000020  f04f0800          MOV      r8,#0
000024  e00c              B        |L13.64|
                  |L13.38|
;;;740    	{
;;;741    		for(y=0;y<=ye-ys;y++)
000026  f04f0900          MOV      r9,#0
00002a  e004              B        |L13.54|
                  |L13.44|
;;;742    		{
;;;743    			ST7789V_WriteData(Color);							//写数据
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       ST7789V_WriteData
000032  f1090901          ADD      r9,r9,#1              ;741
                  |L13.54|
000036  1b78              SUBS     r0,r7,r5              ;741
000038  4548              CMP      r0,r9                 ;741
00003a  d2f7              BCS      |L13.44|
00003c  f1080801          ADD      r8,r8,#1              ;739
                  |L13.64|
000040  1b30              SUBS     r0,r6,r4              ;739
000042  4540              CMP      r0,r8                 ;739
000044  d2ef              BCS      |L13.38|
;;;744    		}
;;;745    	}
;;;746      ST7789V_Disable();	//LCD_CS_HIGH;
000046  f7fffffe          BL       ST7789V_Disable
;;;747    }
00004a  e8bd87f0          POP      {r4-r10,pc}
;;;748    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_Initialize||, CODE, READONLY, ALIGN=2

                  ST7789V_Initialize PROC
;;;65     *******************************************************************************/
;;;66     void ST7789V_Initialize(void*	pInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;67     {
000002  4605              MOV      r5,r0
;;;68     	LCDPortDef*	Port	=	NULL;
000004  2400              MOVS     r4,#0
;;;69     	if(NULL==	pInfo)
000006  b905              CBNZ     r5,|L14.10|
                  |L14.8|
;;;70     		return;
;;;71     	pST7789V		=	(LCDPortDef*)pInfo;		//指针指向	
;;;72     
;;;73     	Port	=	pST7789V;
;;;74     	
;;;75     	//==========================GPIO配置
;;;76     //	GPIO_Configuration_OPP50	(Port->sBL_PORT,				Port->sBL_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;77     	GPIO_Configuration_OPP50	(Port->sRD_PORT,				Port->sRD_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;78     //	GPIO_Configuration_OPP50	(Port->sREST_PORT,			Port->sREST_Pin);				//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;79     	GPIO_Configuration_OPP50	(Port->sDC_PORT,				Port->sDC_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;80     	GPIO_Configuration_OPP50	(Port->sWR_PORT,				Port->sWR_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;81     	GPIO_Configuration_OPP50	(Port->sCS_PORT,				Port->sCS_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;82     //	GPIO_Configuration_OPP50	(Port->sTE_PORT,				Port->sTE_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;83     	GPIO_Configuration_OPP50	(Port->sDATABUS_PORT,		Port->sDATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;84     
;;;85     //  pST7789V->Display.PowerOn   = ST7789V_PowerOn;
;;;86     //  pST7789V->Display.ShowChar  = ST7789V_ShowChar;
;;;87     //  pST7789V->Display.ShowWord  = ST7789V_ShowWord;
;;;88     
;;;89     	ST7789V_PowerOn();
;;;90     }
000008  bd70              POP      {r4-r6,pc}
                  |L14.10|
00000a  480d              LDR      r0,|L14.64|
00000c  6005              STR      r5,[r0,#0]            ;71  ; pST7789V
00000e  6804              LDR      r4,[r0,#0]            ;73  ; pST7789V
000010  89a1              LDRH     r1,[r4,#0xc]          ;77
000012  68a0              LDR      r0,[r4,#8]            ;77
000014  f7fffffe          BL       GPIO_Configuration_OPP50
000018  8ba1              LDRH     r1,[r4,#0x1c]         ;79
00001a  69a0              LDR      r0,[r4,#0x18]         ;79
00001c  f7fffffe          BL       GPIO_Configuration_OPP50
000020  8ca1              LDRH     r1,[r4,#0x24]         ;80
000022  6a20              LDR      r0,[r4,#0x20]         ;80
000024  f7fffffe          BL       GPIO_Configuration_OPP50
000028  8da1              LDRH     r1,[r4,#0x2c]         ;81
00002a  6aa0              LDR      r0,[r4,#0x28]         ;81
00002c  f7fffffe          BL       GPIO_Configuration_OPP50
000030  8fa1              LDRH     r1,[r4,#0x3c]         ;83
000032  6ba0              LDR      r0,[r4,#0x38]         ;83
000034  f7fffffe          BL       GPIO_Configuration_OPP50
000038  f7fffffe          BL       ST7789V_PowerOn
00003c  bf00              NOP      
00003e  e7e3              B        |L14.8|
;;;91     /*******************************************************************************
                          ENDP

                  |L14.64|
                          DCD      pST7789V

                          AREA ||i.ST7789V_PowerOff||, CODE, READONLY, ALIGN=2

                  ST7789V_PowerOff PROC
;;;398    **************************************************************************************************/
;;;399    void ST7789V_PowerOff( void )
000000  b508              PUSH     {r3,lr}
;;;400    {
;;;401    	LCD_BL_OFF;		//关背光
000002  2000              MOVS     r0,#0
000004  4602              MOV      r2,r0
000006  4b03              LDR      r3,|L15.20|
000008  2103              MOVS     r1,#3
00000a  9000              STR      r0,[sp,#0]
00000c  0318              LSLS     r0,r3,#12
00000e  f7fffffe          BL       PWM_OUT
;;;402    
;;;403    }
000012  bd08              POP      {r3,pc}
;;;404    /*******************************************************************************
                          ENDP

                  |L15.20|
                          DCD      0x40140000

                          AREA ||i.ST7789V_PowerOn||, CODE, READONLY, ALIGN=1

                  ST7789V_PowerOn PROC
;;;411    *******************************************************************************/
;;;412    void ST7789V_PowerOn(void)
000000  b570              PUSH     {r4-r6,lr}
;;;413    {
;;;414      u16 time=2000;
000002  f44f64fa          MOV      r4,#0x7d0
;;;415      u16	temp=time;
000006  4625              MOV      r5,r4
;;;416    
;;;417      ST7789V_Enable();	  //
000008  f7fffffe          BL       ST7789V_Enable
;;;418    
;;;419      ST7789V_WriteCommand(0x11);           //ExitSleep
00000c  2011              MOVS     r0,#0x11
00000e  f7fffffe          BL       ST7789V_WriteCommand
;;;420      ST7789V_DelaymS(120); 	   //Delay 120ms 
000012  2078              MOVS     r0,#0x78
000014  f7fffffe          BL       ST7789V_DelaymS
;;;421      //----------------------------------Display Setting-----------------------------------------------// 
;;;422      ST7789V_WriteCommand(0x36); 
000018  2036              MOVS     r0,#0x36
00001a  f7fffffe          BL       ST7789V_WriteCommand
;;;423      ST7789V_WriteData(0x00);    //ST7789V_WriteData(0x00);   
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       ST7789V_WriteData
;;;424    	
;;;425    	
;;;426      ST7789V_WriteCommand(0x3a); 
000024  203a              MOVS     r0,#0x3a
000026  f7fffffe          BL       ST7789V_WriteCommand
;;;427      ST7789V_WriteData(0x55); 
00002a  2055              MOVS     r0,#0x55
00002c  f7fffffe          BL       ST7789V_WriteData
;;;428      //--------------------------------ST7789V Frame rate setting----------------------------------// 
;;;429      ST7789V_WriteCommand(0xb2); 
000030  20b2              MOVS     r0,#0xb2
000032  f7fffffe          BL       ST7789V_WriteCommand
;;;430      ST7789V_WriteData(0x0c); 
000036  200c              MOVS     r0,#0xc
000038  f7fffffe          BL       ST7789V_WriteData
;;;431      ST7789V_WriteData(0x0c); 
00003c  200c              MOVS     r0,#0xc
00003e  f7fffffe          BL       ST7789V_WriteData
;;;432      ST7789V_WriteData(0x00); 
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       ST7789V_WriteData
;;;433      ST7789V_WriteData(0x33); 
000048  2033              MOVS     r0,#0x33
00004a  f7fffffe          BL       ST7789V_WriteData
;;;434      ST7789V_WriteData(0x33); 
00004e  2033              MOVS     r0,#0x33
000050  f7fffffe          BL       ST7789V_WriteData
;;;435    	
;;;436      ST7789V_WriteCommand(0xb7); 
000054  20b7              MOVS     r0,#0xb7
000056  f7fffffe          BL       ST7789V_WriteCommand
;;;437      ST7789V_WriteData(0x35);		//VGH=13V, VGL=-10.4V 
00005a  2035              MOVS     r0,#0x35
00005c  f7fffffe          BL       ST7789V_WriteData
;;;438      //----------------------------------------------------------------------------------------------------// 
;;;439      ST7789V_WriteCommand(0xbb); 
000060  20bb              MOVS     r0,#0xbb
000062  f7fffffe          BL       ST7789V_WriteCommand
;;;440      ST7789V_WriteData(0x19); 
000066  2019              MOVS     r0,#0x19
000068  f7fffffe          BL       ST7789V_WriteData
;;;441      ST7789V_WriteCommand(0xc0); 
00006c  20c0              MOVS     r0,#0xc0
00006e  f7fffffe          BL       ST7789V_WriteCommand
;;;442      ST7789V_WriteData(0x2c); 
000072  202c              MOVS     r0,#0x2c
000074  f7fffffe          BL       ST7789V_WriteData
;;;443      ST7789V_WriteCommand(0xc2); 
000078  20c2              MOVS     r0,#0xc2
00007a  f7fffffe          BL       ST7789V_WriteCommand
;;;444      ST7789V_WriteData(0x01); 
00007e  2001              MOVS     r0,#1
000080  f7fffffe          BL       ST7789V_WriteData
;;;445      ST7789V_WriteCommand(0xc3); 
000084  20c3              MOVS     r0,#0xc3
000086  f7fffffe          BL       ST7789V_WriteCommand
;;;446      ST7789V_WriteData(0x12); 
00008a  2012              MOVS     r0,#0x12
00008c  f7fffffe          BL       ST7789V_WriteData
;;;447      ST7789V_WriteCommand(0xc4); 
000090  20c4              MOVS     r0,#0xc4
000092  f7fffffe          BL       ST7789V_WriteCommand
;;;448      ST7789V_WriteData(0x20); 
000096  2020              MOVS     r0,#0x20
000098  f7fffffe          BL       ST7789V_WriteData
;;;449      ST7789V_WriteCommand(0xc6); 
00009c  20c6              MOVS     r0,#0xc6
00009e  f7fffffe          BL       ST7789V_WriteCommand
;;;450      ST7789V_WriteData(0x0f); 
0000a2  200f              MOVS     r0,#0xf
0000a4  f7fffffe          BL       ST7789V_WriteData
;;;451      ST7789V_WriteCommand(0xd0); 
0000a8  20d0              MOVS     r0,#0xd0
0000aa  f7fffffe          BL       ST7789V_WriteCommand
;;;452      ST7789V_WriteData(0xa4); 
0000ae  20a4              MOVS     r0,#0xa4
0000b0  f7fffffe          BL       ST7789V_WriteData
;;;453      ST7789V_WriteData(0xa1); 
0000b4  20a1              MOVS     r0,#0xa1
0000b6  f7fffffe          BL       ST7789V_WriteData
;;;454      //----------------------------------------------------------------------------------------------------// 
;;;455      ST7789V_WriteCommand(0xe0);	   //gamma setting 
0000ba  20e0              MOVS     r0,#0xe0
0000bc  f7fffffe          BL       ST7789V_WriteCommand
;;;456      ST7789V_WriteData(0xd0); 
0000c0  20d0              MOVS     r0,#0xd0
0000c2  f7fffffe          BL       ST7789V_WriteData
;;;457      ST7789V_WriteData(0x04); 
0000c6  2004              MOVS     r0,#4
0000c8  f7fffffe          BL       ST7789V_WriteData
;;;458      ST7789V_WriteData(0x0d); 
0000cc  200d              MOVS     r0,#0xd
0000ce  f7fffffe          BL       ST7789V_WriteData
;;;459      ST7789V_WriteData(0x11); 
0000d2  2011              MOVS     r0,#0x11
0000d4  f7fffffe          BL       ST7789V_WriteData
;;;460      ST7789V_WriteData(0x13); 
0000d8  2013              MOVS     r0,#0x13
0000da  f7fffffe          BL       ST7789V_WriteData
;;;461      ST7789V_WriteData(0x2b); 
0000de  202b              MOVS     r0,#0x2b
0000e0  f7fffffe          BL       ST7789V_WriteData
;;;462      ST7789V_WriteData(0x3f); 
0000e4  203f              MOVS     r0,#0x3f
0000e6  f7fffffe          BL       ST7789V_WriteData
;;;463      ST7789V_WriteData(0x54); 
0000ea  2054              MOVS     r0,#0x54
0000ec  f7fffffe          BL       ST7789V_WriteData
;;;464      ST7789V_WriteData(0x4c); 
0000f0  204c              MOVS     r0,#0x4c
0000f2  f7fffffe          BL       ST7789V_WriteData
;;;465      ST7789V_WriteData(0x18); 
0000f6  2018              MOVS     r0,#0x18
0000f8  f7fffffe          BL       ST7789V_WriteData
;;;466      ST7789V_WriteData(0x0d); 
0000fc  200d              MOVS     r0,#0xd
0000fe  f7fffffe          BL       ST7789V_WriteData
;;;467      ST7789V_WriteData(0x0b); 
000102  200b              MOVS     r0,#0xb
000104  f7fffffe          BL       ST7789V_WriteData
;;;468      ST7789V_WriteData(0x1f); 
000108  201f              MOVS     r0,#0x1f
00010a  f7fffffe          BL       ST7789V_WriteData
;;;469      ST7789V_WriteData(0x23); 
00010e  2023              MOVS     r0,#0x23
000110  f7fffffe          BL       ST7789V_WriteData
;;;470      ST7789V_WriteCommand(0xe1); 
000114  20e1              MOVS     r0,#0xe1
000116  f7fffffe          BL       ST7789V_WriteCommand
;;;471      ST7789V_WriteData(0xd0); 
00011a  20d0              MOVS     r0,#0xd0
00011c  f7fffffe          BL       ST7789V_WriteData
;;;472      ST7789V_WriteData(0x04); 
000120  2004              MOVS     r0,#4
000122  f7fffffe          BL       ST7789V_WriteData
;;;473      ST7789V_WriteData(0x0c); 
000126  200c              MOVS     r0,#0xc
000128  f7fffffe          BL       ST7789V_WriteData
;;;474      ST7789V_WriteData(0x11); 
00012c  2011              MOVS     r0,#0x11
00012e  f7fffffe          BL       ST7789V_WriteData
;;;475      ST7789V_WriteData(0x13); 
000132  2013              MOVS     r0,#0x13
000134  f7fffffe          BL       ST7789V_WriteData
;;;476      ST7789V_WriteData(0x2c); 
000138  202c              MOVS     r0,#0x2c
00013a  f7fffffe          BL       ST7789V_WriteData
;;;477      ST7789V_WriteData(0x3f); 
00013e  203f              MOVS     r0,#0x3f
000140  f7fffffe          BL       ST7789V_WriteData
;;;478      ST7789V_WriteData(0x44); 
000144  2044              MOVS     r0,#0x44
000146  f7fffffe          BL       ST7789V_WriteData
;;;479      ST7789V_WriteData(0x51); 
00014a  2051              MOVS     r0,#0x51
00014c  f7fffffe          BL       ST7789V_WriteData
;;;480      ST7789V_WriteData(0x2f); 
000150  202f              MOVS     r0,#0x2f
000152  f7fffffe          BL       ST7789V_WriteData
;;;481      ST7789V_WriteData(0x1f); 
000156  201f              MOVS     r0,#0x1f
000158  f7fffffe          BL       ST7789V_WriteData
;;;482      ST7789V_WriteData(0x1f); 
00015c  201f              MOVS     r0,#0x1f
00015e  f7fffffe          BL       ST7789V_WriteData
;;;483      ST7789V_WriteData(0x20); 
000162  2020              MOVS     r0,#0x20
000164  f7fffffe          BL       ST7789V_WriteData
;;;484      ST7789V_WriteData(0x23); 
000168  2023              MOVS     r0,#0x23
00016a  f7fffffe          BL       ST7789V_WriteData
;;;485    
;;;486      ST7789V_WriteCommand(0x29);	   //display on 
00016e  2029              MOVS     r0,#0x29
000170  f7fffffe          BL       ST7789V_WriteCommand
;;;487      ST7789V_WriteCommand(0x2c); 
000174  202c              MOVS     r0,#0x2c
000176  f7fffffe          BL       ST7789V_WriteCommand
;;;488    
;;;489      ST7789V_Disable();	//LCD_CS_HIGH;
00017a  f7fffffe          BL       ST7789V_Disable
;;;490     
;;;491    }
00017e  bd70              POP      {r4-r6,pc}
;;;492    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_Printf||, CODE, READONLY, ALIGN=2

                  ST7789V_Printf PROC
;;;100    *******************************************************************************/
;;;101    unsigned int ST7789V_Printf(u16 x,u16 y,u8 font,u16 color,const char *format,...)				//后边的省略号就是可变参数
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;102    { 
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
;;;103    	#include	"stdarg.h"		//用于获取不确定个数的参数
;;;1      /* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
;;;104    	#include	"stdlib.h"		//malloc动态申请内存空间
;;;1      /* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
;;;105    //		va_list ap; 										//VA_LIST 是在C语言中解决变参问题的一组宏，所在头文件：#include <stdarg.h>,用于获取不确定个数的参数
;;;106    //		static char string[ 256 ];			//定义数组，
;;;107    //  	va_start( ap, format );
;;;108    //		vsprintf( string , format, ap );    
;;;109    //		va_end( ap );
;;;110    	
;;;111    	//char	ST7789VStringBuffer[256]={0};			//记录format内码
;;;112    	//1)**********获取数据宽度
;;;113      u16 InputDataSize=0;
00000c  2500              MOVS     r5,#0
;;;114    	//3)**********vArgList为定义的一个指向可变参数的变量，va_list以及下边要用到的va_start,va_end都是是在定义，可变参数函数中必须要用到宏， 在stdarg.h头文件中定义
;;;115    	va_list vArgList; 
;;;116    	//5)**********初始化vArgList的函数，使其指向可变参数的第一个参数，format是可变参数的前一个参数
;;;117    	va_start(vArgList, format);
00000e  a80b              ADD      r0,sp,#0x2c
000010  9002              STR      r0,[sp,#8]
;;;118    	//6)**********正常情况下返回生成字串的长度(除去\0),错误情况返回负值
;;;119    	InputDataSize =vsnprintf(ST7789VStringBuffer,InputDataSize,format,vArgList);
000012  4629              MOV      r1,r5
000014  480f              LDR      r0,|L17.84|
000016  9b02              LDR      r3,[sp,#8]
000018  9a0a              LDR      r2,[sp,#0x28]
00001a  f7fffffe          BL       __c89vsnprintf
00001e  b285              UXTH     r5,r0
;;;120    	//7)**********结束可变参数的获取
;;;121    	va_end(vArgList);                                      		
000020  2000              MOVS     r0,#0
000022  9002              STR      r0,[sp,#8]
;;;122      if((8!=font)&&(12!=font)&&(16!=font)&&(24!=font)&&(32!=font))
000024  2c08              CMP      r4,#8
000026  d008              BEQ      |L17.58|
000028  2c0c              CMP      r4,#0xc
00002a  d006              BEQ      |L17.58|
00002c  2c10              CMP      r4,#0x10
00002e  d004              BEQ      |L17.58|
000030  2c18              CMP      r4,#0x18
000032  d002              BEQ      |L17.58|
000034  2c20              CMP      r4,#0x20
000036  d000              BEQ      |L17.58|
;;;123      {
;;;124        font  = 32;
000038  2420              MOVS     r4,#0x20
                  |L17.58|
;;;125      }
;;;126    	ST7789V_ShowString(x,y,font,color,InputDataSize,(unsigned char*)ST7789VStringBuffer);
00003a  4906              LDR      r1,|L17.84|
00003c  b2e8              UXTB     r0,r5
00003e  4643              MOV      r3,r8
000040  4622              MOV      r2,r4
000042  e9cd0100          STRD     r0,r1,[sp,#0]
000046  4639              MOV      r1,r7
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       ST7789V_ShowString
;;;127    	return InputDataSize;
00004e  4628              MOV      r0,r5
;;;128    }
000050  e8bd83fe          POP      {r1-r9,pc}
;;;129    /*******************************************************************************
                          ENDP

                  |L17.84|
                          DCD      ST7789VStringBuffer

                          AREA ||i.ST7789V_ReadData||, CODE, READONLY, ALIGN=2

                  ST7789V_ReadData PROC
;;;360    *******************************************************************************/
;;;361    unsigned short ST7789V_ReadData(void)
000000  2000              MOVS     r0,#0
;;;362    {
;;;363    	unsigned short Data	=	0;
;;;364      ST7789V_DC_HIGH;  //WriteData:DC/RS
000002  4911              LDR      r1,|L18.72|
000004  6809              LDR      r1,[r1,#0]  ; pST7789V
000006  8b89              LDRH     r1,[r1,#0x1c]
000008  4a0f              LDR      r2,|L18.72|
00000a  6812              LDR      r2,[r2,#0]  ; pST7789V
00000c  6992              LDR      r2,[r2,#0x18]
00000e  6111              STR      r1,[r2,#0x10]
;;;365      ST7789V_WR_HIGH;  //WriteDisable
000010  490d              LDR      r1,|L18.72|
000012  6809              LDR      r1,[r1,#0]  ; pST7789V
000014  8c89              LDRH     r1,[r1,#0x24]
000016  4a0c              LDR      r2,|L18.72|
000018  6812              LDR      r2,[r2,#0]  ; pST7789V
00001a  6a12              LDR      r2,[r2,#0x20]
00001c  6111              STR      r1,[r2,#0x10]
;;;366      
;;;367      ST7789V_RD_LOW;   //ReadEnable
00001e  490a              LDR      r1,|L18.72|
000020  6809              LDR      r1,[r1,#0]  ; pST7789V
000022  8989              LDRH     r1,[r1,#0xc]
000024  4a08              LDR      r2,|L18.72|
000026  6812              LDR      r2,[r2,#0]  ; pST7789V
000028  6892              LDR      r2,[r2,#8]
00002a  6151              STR      r1,[r2,#0x14]
;;;368      Data  = ST7789V_DATABUS_PORT->IDR;
00002c  4906              LDR      r1,|L18.72|
00002e  6809              LDR      r1,[r1,#0]  ; pST7789V
000030  6b89              LDR      r1,[r1,#0x38]
000032  6889              LDR      r1,[r1,#8]
000034  b288              UXTH     r0,r1
;;;369      ST7789V_RD_HIGH;  //ReadEnable
000036  4904              LDR      r1,|L18.72|
000038  6809              LDR      r1,[r1,#0]  ; pST7789V
00003a  8989              LDRH     r1,[r1,#0xc]
00003c  4a02              LDR      r2,|L18.72|
00003e  6812              LDR      r2,[r2,#0]  ; pST7789V
000040  6892              LDR      r2,[r2,#8]
000042  6111              STR      r1,[r2,#0x10]
;;;370    	return Data;
;;;371    }
000044  4770              BX       lr
;;;372    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      pST7789V

                          AREA ||i.ST7789V_ReadGRAM||, CODE, READONLY, ALIGN=1

                  ST7789V_ReadGRAM PROC
;;;381    *******************************************************************************/
;;;382    void ST7789V_ReadGRAM(unsigned	short* RAM,unsigned long length)
000000  4602              MOV      r2,r0
;;;383    {
;;;384    	unsigned	long	i	=	0;
000002  2000              MOVS     r0,#0
;;;385    //	ST7789VCrl(CS);	//LCD_CS_LOW;
;;;386    //	ST7789V_WriteIndex(0X3E);
;;;387    //	GPIO_Configuration_IPU	(ST7789V_DATABUS_PORT,ST7789V_DATABUS_Pin);			//将GPIO相应管脚配置为上拉输入模式----V20170605
;;;388    //	for(i=0;i<length;i++)
;;;389    //	{
;;;390    //		RAM[i]=ST7789V_ReadData();
;;;391    //	}
;;;392    //	ST7789VSet(CS);	//LCD_CS_HIGH;
;;;393    //	GPIO_Configuration_OPP50	(ST7789V_DATABUS_PORT,ST7789V_DATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605	
;;;394    }
000004  4770              BX       lr
;;;395    /**************************************************************************************************
                          ENDP


                          AREA ||i.ST7789V_Reset||, CODE, READONLY, ALIGN=1

                  ST7789V_Reset PROC
;;;274    *******************************************************************************/
;;;275    void ST7789V_Reset(void)
000000  4770              BX       lr
;;;276    {
;;;277    //	ST7789VSet(RST);
;;;278    //	LCD_DelaymS(5);				//SysTick延时nmS
;;;279    //	ST7789VCrl(RST);;
;;;280    //	LCD_DelaymS(5);				//SysTick延时nmS
;;;281    //	ST7789VSet(RST);
;;;282    //	LCD_DelaymS(10);				//SysTick延时nmS
;;;283    }
;;;284    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_SetBackground||, CODE, READONLY, ALIGN=2

                  ST7789V_SetBackground PROC
;;;789    **************************************************************************************************/
;;;790    void ST7789V_SetBackground(  u16 BackColor )
000000  b510              PUSH     {r4,lr}
;;;791    {
000002  4604              MOV      r4,r0
;;;792    	ST7789VBColor=	BackColor;
000004  4802              LDR      r0,|L21.16|
000006  8004              STRH     r4,[r0,#0]
;;;793    	ST7789V_Clean(BackColor);	//清除屏幕函数
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ST7789V_Clean
;;;794    }
00000e  bd10              POP      {r4,pc}
;;;795    
                          ENDP

                  |L21.16|
                          DCD      ST7789VBColor

                          AREA ||i.ST7789V_SetWindowAddress||, CODE, READONLY, ALIGN=2

                  ST7789V_SetWindowAddress PROC
;;;535    *******************************************************************************/
;;;536    void ST7789V_SetWindowAddress(unsigned short xs,unsigned short ys,unsigned short xe,unsigned short ye)
000000  b570              PUSH     {r4-r6,lr}
;;;537    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;538      //--------------------设置X
;;;539      ST7789V_WriteCommand(0x2A);
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       ST7789V_WriteCommand
;;;540      ST7789V_WriteData(xs>>8);
00000e  1220              ASRS     r0,r4,#8
000010  f7fffffe          BL       ST7789V_WriteData
;;;541      ST7789V_WriteData(xs&0xFF);
000014  b2e0              UXTB     r0,r4
000016  f7fffffe          BL       ST7789V_WriteData
;;;542      ST7789V_WriteData(xe>>8);
00001a  1230              ASRS     r0,r6,#8
00001c  f7fffffe          BL       ST7789V_WriteData
;;;543      ST7789V_WriteData(xe&0xFF);
000020  b2f0              UXTB     r0,r6
000022  f7fffffe          BL       ST7789V_WriteData
;;;544      
;;;545      //--------------------设置Y
;;;546      ST7789V_WriteCommand(0x2B);
000026  202b              MOVS     r0,#0x2b
000028  f7fffffe          BL       ST7789V_WriteCommand
;;;547      ST7789V_WriteData(ys>>8);
00002c  1228              ASRS     r0,r5,#8
00002e  f7fffffe          BL       ST7789V_WriteData
;;;548      ST7789V_WriteData(ys&0xFF);
000032  b2e8              UXTB     r0,r5
000034  f7fffffe          BL       ST7789V_WriteData
;;;549      ST7789V_WriteData(ye>>8);
000038  1218              ASRS     r0,r3,#8
00003a  f7fffffe          BL       ST7789V_WriteData
;;;550      ST7789V_WriteData(ye&0xFF);
00003e  b2d8              UXTB     r0,r3
000040  f7fffffe          BL       ST7789V_WriteData
;;;551      
;;;552    	//----------------------------------Display Setting-----------------------------------------------// 
;;;553      ST7789V_WriteCommand(0x36); 
000044  2036              MOVS     r0,#0x36
000046  f7fffffe          BL       ST7789V_WriteCommand
;;;554      ST7789V_WriteData(ST7789VRotate);    //ST7789V_WriteData(0x00);
00004a  4804              LDR      r0,|L22.92|
00004c  7800              LDRB     r0,[r0,#0]  ; ST7789VRotate
00004e  f7fffffe          BL       ST7789V_WriteData
;;;555    	//----------------------------------write_memory_start
;;;556      ST7789V_WriteCommand(ST7789V_R2C_WMS);	  
000052  202c              MOVS     r0,#0x2c
000054  f7fffffe          BL       ST7789V_WriteCommand
;;;557    }
000058  bd70              POP      {r4-r6,pc}
;;;558    //
                          ENDP

00005a  0000              DCW      0x0000
                  |L22.92|
                          DCD      ST7789VRotate

                          AREA ||i.ST7789V_ShowChar||, CODE, READONLY, ALIGN=2

                  ST7789V_ShowChar PROC
;;;805    *******************************************************************************/
;;;806    void ST7789V_ShowChar(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;807    										u16 x,			//x				:起点x坐标
;;;808    										u16 y,			//y				:起点y坐标
;;;809    										u8 font,		//font		:字体大小
;;;810    										u16 color,	//字体颜色
;;;811    										u8 num,			//num			:字节数
;;;812    										u8 *Buffer	//Buffer	:显示的内容缓存
;;;813    										
;;;814    )		//高通字库测试程序
;;;815    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4614              MOV      r4,r2
00000c  469a              MOV      r10,r3
00000e  f8ddb03c          LDR      r11,[sp,#0x3c]
;;;816    	u8 temp;
;;;817    	u8 i=0,j=0;
000012  2500              MOVS     r5,#0
000014  2700              MOVS     r7,#0
;;;818    	unsigned short x1=0,x2=0,y1=0,y2=0;
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9003              STR      r0,[sp,#0xc]
00001c  9002              STR      r0,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
;;;819    	unsigned short LCD_PEN_COLOR	=	0;   	//画笔色
000020  9000              STR      r0,[sp,#0]
;;;820    	x1	=	x;
000022  f8cd8010          STR      r8,[sp,#0x10]
;;;821    	y1	=	y;
000026  f8cd9008          STR      r9,[sp,#8]
;;;822    	x2	=	x+font/2-1;		//
00002a  4620              MOV      r0,r4
00002c  eb0471d0          ADD      r1,r4,r0,LSR #31
000030  eb080161          ADD      r1,r8,r1,ASR #1
000034  1e49              SUBS     r1,r1,#1
000036  b289              UXTH     r1,r1
000038  9103              STR      r1,[sp,#0xc]
;;;823    	y2	=	y+font-1;
00003a  eb090004          ADD      r0,r9,r4
00003e  1e40              SUBS     r0,r0,#1
000040  b280              UXTH     r0,r0
000042  9001              STR      r0,[sp,#4]
;;;824    	
;;;825      ST7789V_Enable();	//LCD_CS_LOW;
000044  f7fffffe          BL       ST7789V_Enable
;;;826      
;;;827    	ST7789V_SetWindowAddress(x1,y1,x2,y2);//设置显示区域	
000048  e9dd3101          LDRD     r3,r1,[sp,#4]
00004c  e9dd2003          LDRD     r2,r0,[sp,#0xc]
000050  f7fffffe          BL       ST7789V_SetWindowAddress
;;;828    
;;;829    	for(i=0;i<num;i++)
000054  bf00              NOP      
000056  e036              B        |L23.198|
                  |L23.88|
;;;830    	{ 
;;;831    		temp=Buffer[i];		 					//调用1608字体--二维数组形式--字库使用时取消
000058  f81b6005          LDRB     r6,[r11,r5]
;;;832    		for(j=0;j<8;j++)
00005c  2700              MOVS     r7,#0
00005e  e010              B        |L23.130|
                  |L23.96|
;;;833    		{
;;;834    			if((temp&0x80)==0X80)
000060  f0060080          AND      r0,r6,#0x80
000064  2880              CMP      r0,#0x80
000066  d102              BNE      |L23.110|
;;;835    			{
;;;836    				LCD_PEN_COLOR=color;
000068  f8cda000          STR      r10,[sp,#0]
00006c  e002              B        |L23.116|
                  |L23.110|
;;;837    			}
;;;838    			else
;;;839    				LCD_PEN_COLOR=ST7789VBColor;
00006e  481a              LDR      r0,|L23.216|
000070  8800              LDRH     r0,[r0,#0]  ; ST7789VBColor
000072  9000              STR      r0,[sp,#0]
                  |L23.116|
;;;840    			ST7789V_WriteData(LCD_PEN_COLOR);
000074  9800              LDR      r0,[sp,#0]
000076  f7fffffe          BL       ST7789V_WriteData
;;;841    			temp=temp<<1;
00007a  0670              LSLS     r0,r6,#25
00007c  0e06              LSRS     r6,r0,#24
00007e  1c78              ADDS     r0,r7,#1              ;832
000080  b2c7              UXTB     r7,r0                 ;832
                  |L23.130|
000082  2f08              CMP      r7,#8                 ;832
000084  dbec              BLT      |L23.96|
;;;842    			
;;;843    		}
;;;844        //=======================未满8位的补充定入
;;;845        if((24==font)||(12==font))
000086  2c18              CMP      r4,#0x18
000088  d001              BEQ      |L23.142|
00008a  2c0c              CMP      r4,#0xc
00008c  d119              BNE      |L23.194|
                  |L23.142|
;;;846        {
;;;847          temp=Buffer[i+1];		 					
00008e  1c68              ADDS     r0,r5,#1
000090  f81b6000          LDRB     r6,[r11,r0]
;;;848          for(j=0;j<4;j++)
000094  2700              MOVS     r7,#0
000096  e010              B        |L23.186|
                  |L23.152|
;;;849          {
;;;850            if((temp&0x80)==0X80)
000098  f0060080          AND      r0,r6,#0x80
00009c  2880              CMP      r0,#0x80
00009e  d102              BNE      |L23.166|
;;;851            {
;;;852              LCD_PEN_COLOR=color;
0000a0  f8cda000          STR      r10,[sp,#0]
0000a4  e002              B        |L23.172|
                  |L23.166|
;;;853            }
;;;854            else
;;;855              LCD_PEN_COLOR=ST7789VBColor;
0000a6  480c              LDR      r0,|L23.216|
0000a8  8800              LDRH     r0,[r0,#0]  ; ST7789VBColor
0000aa  9000              STR      r0,[sp,#0]
                  |L23.172|
;;;856            ST7789V_WriteData(LCD_PEN_COLOR);
0000ac  9800              LDR      r0,[sp,#0]
0000ae  f7fffffe          BL       ST7789V_WriteData
;;;857            temp=temp<<1;
0000b2  0670              LSLS     r0,r6,#25
0000b4  0e06              LSRS     r6,r0,#24
0000b6  1c78              ADDS     r0,r7,#1              ;848
0000b8  b2c7              UXTB     r7,r0                 ;848
                  |L23.186|
0000ba  2f04              CMP      r7,#4                 ;848
0000bc  dbec              BLT      |L23.152|
;;;858          }
;;;859          i++;
0000be  1c68              ADDS     r0,r5,#1
0000c0  b2c5              UXTB     r5,r0
                  |L23.194|
0000c2  1c68              ADDS     r0,r5,#1              ;829
0000c4  b2c5              UXTB     r5,r0                 ;829
                  |L23.198|
0000c6  980e              LDR      r0,[sp,#0x38]         ;829
0000c8  4285              CMP      r5,r0                 ;829
0000ca  dbc5              BLT      |L23.88|
;;;860        }		
;;;861    	}
;;;862    	ST7789V_Disable();	//LCD_CS_HIGH;
0000cc  f7fffffe          BL       ST7789V_Disable
;;;863    }
0000d0  b005              ADD      sp,sp,#0x14
0000d2  e8bd8ff0          POP      {r4-r11,pc}
;;;864    /*******************************************************************************
                          ENDP

0000d6  0000              DCW      0x0000
                  |L23.216|
                          DCD      ST7789VBColor

                          AREA ||i.ST7789V_ShowString||, CODE, READONLY, ALIGN=1

                  ST7789V_ShowString PROC
;;;134    *******************************************************************************/
;;;135    void ST7789V_ShowString(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;136    							u16 x,			//x				:起点x坐标
;;;137    							u16 y,			//y				:起点y坐标
;;;138    							u8 font,		//font		:字体大小
;;;139    							u16 PenColor,//字体颜色
;;;140    							u8 num,			//num			:字节数
;;;141    							u8 *Buffer	//Buffer	:显示的内容缓存
;;;142    )		//高通字库测试程序
;;;143    {
000004  b0c5              SUB      sp,sp,#0x114
000006  4680              MOV      r8,r0
000008  460f              MOV      r7,r1
00000a  4614              MOV      r4,r2
00000c  f8dd914c          LDR      r9,[sp,#0x14c]
;;;144    	unsigned short	MaxV=ST7789V_V,MaxH=ST7789V_H;	//边界值
000010  f44f7aa0          MOV      r10,#0x140
000014  20f0              MOVS     r0,#0xf0
000016  9044              STR      r0,[sp,#0x110]
;;;145    	unsigned char i=0;
000018  2500              MOVS     r5,#0
;;;146    	unsigned char CodeBuffer[256]={0};
00001a  f44f7180          MOV      r1,#0x100
00001e  a804              ADD      r0,sp,#0x10
000020  f7fffffe          BL       __aeabi_memclr4
;;;147    
;;;148    	for(i=0;i<num;i++)
000024  bf00              NOP      
000026  e084              B        |L24.306|
                  |L24.40|
;;;149    	{
;;;150    		unsigned char GetBufferLength	=	0;
000028  f04f0b00          MOV      r11,#0
;;;151    		unsigned char dst=Buffer[i];
00002c  f8196005          LDRB     r6,[r9,r5]
;;;152    		
;;;153    		//A=====================双字节--汉字
;;;154    		if(dst>0x80)
000030  2e80              CMP      r6,#0x80
000032  dd2c              BLE      |L24.142|
;;;155    		{
;;;156    			u16 word=dst<<8;
000034  0230              LSLS     r0,r6,#8
000036  9003              STR      r0,[sp,#0xc]
;;;157          
;;;158    			dst=Buffer[i+1];
000038  1c68              ADDS     r0,r5,#1
00003a  f8196000          LDRB     r6,[r9,r0]
;;;159    			word=word|dst;			
00003e  9803              LDR      r0,[sp,#0xc]
000040  4330              ORRS     r0,r0,r6
000042  9003              STR      r0,[sp,#0xc]
;;;160    			//A1=====================显示超限换行
;;;161          if(x>MaxH-font)
000044  9844              LDR      r0,[sp,#0x110]
000046  1b00              SUBS     r0,r0,r4
000048  4540              CMP      r0,r8
00004a  da02              BGE      |L24.82|
;;;162          {
;;;163            x=0;
00004c  46d8              MOV      r8,r11
;;;164            y+=font;
00004e  1938              ADDS     r0,r7,r4
000050  b287              UXTH     r7,r0
                  |L24.82|
;;;165          }
;;;166          //A2=====================显示到屏尾，从原点开始
;;;167          if(y>MaxV-font)
000052  ebaa0004          SUB      r0,r10,r4
000056  42b8              CMP      r0,r7
000058  da02              BGE      |L24.96|
;;;168          {
;;;169            y=x=0;
00005a  2000              MOVS     r0,#0
00005c  4680              MOV      r8,r0
00005e  4607              MOV      r7,r0
                  |L24.96|
;;;170          }
;;;171          //A3=====================读取点阵数据
;;;172    			GetBufferLength	=	GT32L32_GetCode(font,word,CodeBuffer);		//从字库中读数据并返回数据长度
000060  aa04              ADD      r2,sp,#0x10
000062  4620              MOV      r0,r4
000064  9903              LDR      r1,[sp,#0xc]
000066  f7fffffe          BL       GT32L32_GetCode
00006a  f0000bff          AND      r11,r0,#0xff
;;;173    			//GetBufferLength	=	GT32L32_GetAntennaCode(3,CodeBuffer);
;;;174    			//A4=====================写入屏幕
;;;175    			ST7789V_ShowWord(x,y,font,PenColor,GetBufferLength,CodeBuffer);
00006e  a804              ADD      r0,sp,#0x10
000070  e9cdb000          STRD     r11,r0,[sp,#0]
000074  4622              MOV      r2,r4
000076  4639              MOV      r1,r7
000078  4640              MOV      r0,r8
00007a  9b48              LDR      r3,[sp,#0x120]
00007c  f7fffffe          BL       ST7789V_ShowWord
;;;176    			//A5=====================水平显示地址增加
;;;177          x+=font;
000080  eb080004          ADD      r0,r8,r4
000084  fa1ff880          UXTH     r8,r0
;;;178    			i++;		//双字节，减两次			
000088  1c68              ADDS     r0,r5,#1
00008a  b2c5              UXTB     r5,r0
;;;179    		}
00008c  e04d              B        |L24.298|
                  |L24.142|
;;;180    		else if(('\r'==dst)||('\n'==dst))
00008e  2e0d              CMP      r6,#0xd
000090  d001              BEQ      |L24.150|
000092  2e0a              CMP      r6,#0xa
000094  d118              BNE      |L24.200|
                  |L24.150|
;;;181    		{
;;;182    			if(('\n'==Buffer[i+1])||('\r'==Buffer[i+1]))
000096  1c68              ADDS     r0,r5,#1
000098  f8190000          LDRB     r0,[r9,r0]
00009c  280a              CMP      r0,#0xa
00009e  d004              BEQ      |L24.170|
0000a0  1c68              ADDS     r0,r5,#1
0000a2  f8190000          LDRB     r0,[r9,r0]
0000a6  280d              CMP      r0,#0xd
0000a8  d101              BNE      |L24.174|
                  |L24.170|
;;;183    			{
;;;184    				i++;	//去掉回车符长度
0000aa  1c68              ADDS     r0,r5,#1
0000ac  b2c5              UXTB     r5,r0
                  |L24.174|
;;;185    			}
;;;186    			if(y>MaxV-font)
0000ae  ebaa0004          SUB      r0,r10,r4
0000b2  42b8              CMP      r0,r7
0000b4  da03              BGE      |L24.190|
;;;187          {
;;;188            y=x=0;
0000b6  2000              MOVS     r0,#0
0000b8  4680              MOV      r8,r0
0000ba  4607              MOV      r7,r0
0000bc  e003              B        |L24.198|
                  |L24.190|
;;;189          }
;;;190    			else
;;;191    			{
;;;192    				x=0;
0000be  f04f0800          MOV      r8,#0
;;;193    				y+=font;
0000c2  1938              ADDS     r0,r7,r4
0000c4  b287              UXTH     r7,r0
                  |L24.198|
;;;194    			}
;;;195    			goto LCD_ShowJump;
0000c6  e031              B        |L24.300|
                  |L24.200|
;;;196    		}
;;;197    		//B=====================单字节--ASCII字符集
;;;198    		else
;;;199    		{			
;;;200    			//B1=====================显示超限换行
;;;201          if(x>MaxH-font/2)//半个宽度
0000c8  eb0471d4          ADD      r1,r4,r4,LSR #31
0000cc  104a              ASRS     r2,r1,#1
0000ce  9944              LDR      r1,[sp,#0x110]
0000d0  1a89              SUBS     r1,r1,r2
0000d2  4541              CMP      r1,r8
0000d4  da03              BGE      |L24.222|
;;;202          {
;;;203            x=0;
0000d6  f04f0800          MOV      r8,#0
;;;204            y+=font;
0000da  1938              ADDS     r0,r7,r4
0000dc  b287              UXTH     r7,r0
                  |L24.222|
;;;205          }
;;;206          //B2=====================显示到屏尾，从原点开始
;;;207          if(y>MaxV-font)
0000de  ebaa0004          SUB      r0,r10,r4
0000e2  42b8              CMP      r0,r7
0000e4  da02              BGE      |L24.236|
;;;208          {
;;;209            y=x=0;
0000e6  2000              MOVS     r0,#0
0000e8  4680              MOV      r8,r0
0000ea  4607              MOV      r7,r0
                  |L24.236|
;;;210          }
;;;211          //B3=====================读取点阵数据
;;;212    			GetBufferLength	=	GT32L32_GetCode(font,(u16)dst,CodeBuffer);		//从字库中读数据并返回数据长度
0000ec  aa04              ADD      r2,sp,#0x10
0000ee  4631              MOV      r1,r6
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       GT32L32_GetCode
0000f6  f0000bff          AND      r11,r0,#0xff
;;;213    			//GetBufferLength	=	GT32L32_GetBatteryCode(3,CodeBuffer);
;;;214    			//=======================水平制表符按空格显示(部分字库会当0xFF输出)
;;;215    			if(	('	'	==	(char)dst)		//水平制表符
0000fa  2e09              CMP      r6,#9
0000fc  d001              BEQ      |L24.258|
;;;216    				||(' '	==	(char)dst))		//空格
0000fe  2e20              CMP      r6,#0x20
000100  d103              BNE      |L24.266|
                  |L24.258|
;;;217    			{
;;;218    				memset(CodeBuffer,0x00,GetBufferLength);
000102  4659              MOV      r1,r11
000104  a804              ADD      r0,sp,#0x10
000106  f7fffffe          BL       __aeabi_memclr4
                  |L24.266|
;;;219    			}
;;;220    			//B4=====================写入屏幕
;;;221    			ST7789V_ShowChar(x,y,font,PenColor,GetBufferLength,CodeBuffer);
00010a  a804              ADD      r0,sp,#0x10
00010c  e9cdb000          STRD     r11,r0,[sp,#0]
000110  4622              MOV      r2,r4
000112  4639              MOV      r1,r7
000114  4640              MOV      r0,r8
000116  9b48              LDR      r3,[sp,#0x120]
000118  f7fffffe          BL       ST7789V_ShowChar
;;;222    			//B5=====================水平显示地址增加
;;;223          x+=font/2;						
00011c  4620              MOV      r0,r4
00011e  eb0471d0          ADD      r1,r4,r0,LSR #31
000122  eb080161          ADD      r1,r8,r1,ASR #1
000126  fa1ff881          UXTH     r8,r1
                  |L24.298|
;;;224    		}
;;;225    		LCD_ShowJump:
00012a  bf00              NOP      
                  |L24.300|
;;;226    			__nop();
00012c  bf00              NOP      
00012e  1c68              ADDS     r0,r5,#1              ;148
000130  b2c5              UXTB     r5,r0                 ;148
                  |L24.306|
000132  9852              LDR      r0,[sp,#0x148]        ;148
000134  4285              CMP      r5,r0                 ;148
000136  f6ffaf77          BLT      |L24.40|
;;;227    	}
;;;228    }
00013a  b049              ADD      sp,sp,#0x124
00013c  e8bd8ff0          POP      {r4-r11,pc}
;;;229    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_ShowWord||, CODE, READONLY, ALIGN=2

                  ST7789V_ShowWord PROC
;;;869    *******************************************************************************/
;;;870    void ST7789V_ShowWord(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;871    										u16 x,			//x				:起点x坐标
;;;872    										u16 y,			//y				:起点y坐标
;;;873    										u8 font,		//font		:字体大小
;;;874    										u16 color,	//字体颜色
;;;875    										u8 num,			//num			:字节数
;;;876    										u8 *Buffer	//Buffer	:显示的内容缓存
;;;877    										
;;;878    )		//高通字库测试程序
;;;879    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  469a              MOV      r10,r3
00000e  f8ddb03c          LDR      r11,[sp,#0x3c]
;;;880    	u8 temp;
;;;881    	u8 i=0,j=0;
000012  2400              MOVS     r4,#0
000014  2700              MOVS     r7,#0
;;;882    	unsigned short x1=0,x2=0,y1=0,y2=0;
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9003              STR      r0,[sp,#0xc]
00001c  9002              STR      r0,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
;;;883    	unsigned short LCD_PEN_COLOR	=	0;   	//画笔色
000020  9000              STR      r0,[sp,#0]
;;;884    	x1	=	x;
000022  f8cd8010          STR      r8,[sp,#0x10]
;;;885    	y1	=	y;
000026  f8cd9008          STR      r9,[sp,#8]
;;;886      x2	=	x+font-1;
00002a  eb080005          ADD      r0,r8,r5
00002e  1e40              SUBS     r0,r0,#1
000030  b280              UXTH     r0,r0
000032  9003              STR      r0,[sp,#0xc]
;;;887      y2	=	y+font-1;
000034  eb090005          ADD      r0,r9,r5
000038  1e40              SUBS     r0,r0,#1
00003a  b280              UXTH     r0,r0
00003c  9001              STR      r0,[sp,#4]
;;;888      
;;;889      ST7789V_Enable();	//LCD_CS_LOW;
00003e  f7fffffe          BL       ST7789V_Enable
;;;890    	ST7789V_SetWindowAddress(x1,y1,x2,y2);//设置显示区域
000042  e9dd3101          LDRD     r3,r1,[sp,#4]
000046  e9dd2003          LDRD     r2,r0,[sp,#0xc]
00004a  f7fffffe          BL       ST7789V_SetWindowAddress
;;;891    
;;;892    	for(i=0;i<num;i++)
00004e  bf00              NOP      
000050  e034              B        |L25.188|
                  |L25.82|
;;;893    	{ 
;;;894    		temp=Buffer[i];		 				
000052  f81b6004          LDRB     r6,[r11,r4]
;;;895    		for(j=0;j<8;j++)
000056  2700              MOVS     r7,#0
000058  e010              B        |L25.124|
                  |L25.90|
;;;896    		{
;;;897    			if((temp&0x80)==0X80)
00005a  f0060080          AND      r0,r6,#0x80
00005e  2880              CMP      r0,#0x80
000060  d102              BNE      |L25.104|
;;;898    			{
;;;899    				LCD_PEN_COLOR=color;
000062  f8cda000          STR      r10,[sp,#0]
000066  e002              B        |L25.110|
                  |L25.104|
;;;900    			}
;;;901    			else
;;;902    				LCD_PEN_COLOR=ST7789VBColor;
000068  4818              LDR      r0,|L25.204|
00006a  8800              LDRH     r0,[r0,#0]  ; ST7789VBColor
00006c  9000              STR      r0,[sp,#0]
                  |L25.110|
;;;903    			ST7789V_WriteData(LCD_PEN_COLOR);
00006e  9800              LDR      r0,[sp,#0]
000070  f7fffffe          BL       ST7789V_WriteData
;;;904    			temp=temp<<1;
000074  0670              LSLS     r0,r6,#25
000076  0e06              LSRS     r6,r0,#24
000078  1c78              ADDS     r0,r7,#1              ;895
00007a  b2c7              UXTB     r7,r0                 ;895
                  |L25.124|
00007c  2f08              CMP      r7,#8                 ;895
00007e  dbec              BLT      |L25.90|
;;;905    			
;;;906    		}
;;;907        //=======================未满8位的补充定入
;;;908        if((12==font))
000080  2d0c              CMP      r5,#0xc
000082  d119              BNE      |L25.184|
;;;909        {
;;;910          temp=Buffer[i+1];		 					
000084  1c60              ADDS     r0,r4,#1
000086  f81b6000          LDRB     r6,[r11,r0]
;;;911          for(j=0;j<4;j++)
00008a  2700              MOVS     r7,#0
00008c  e010              B        |L25.176|
                  |L25.142|
;;;912          {
;;;913            if((temp&0x80)==0X80)
00008e  f0060080          AND      r0,r6,#0x80
000092  2880              CMP      r0,#0x80
000094  d102              BNE      |L25.156|
;;;914            {
;;;915              LCD_PEN_COLOR=color;
000096  f8cda000          STR      r10,[sp,#0]
00009a  e002              B        |L25.162|
                  |L25.156|
;;;916            }
;;;917            else
;;;918              LCD_PEN_COLOR=ST7789VBColor;
00009c  480b              LDR      r0,|L25.204|
00009e  8800              LDRH     r0,[r0,#0]  ; ST7789VBColor
0000a0  9000              STR      r0,[sp,#0]
                  |L25.162|
;;;919            ST7789V_WriteData(LCD_PEN_COLOR);
0000a2  9800              LDR      r0,[sp,#0]
0000a4  f7fffffe          BL       ST7789V_WriteData
;;;920            temp=temp<<1;
0000a8  0670              LSLS     r0,r6,#25
0000aa  0e06              LSRS     r6,r0,#24
0000ac  1c78              ADDS     r0,r7,#1              ;911
0000ae  b2c7              UXTB     r7,r0                 ;911
                  |L25.176|
0000b0  2f04              CMP      r7,#4                 ;911
0000b2  dbec              BLT      |L25.142|
;;;921          }
;;;922          i++;
0000b4  1c60              ADDS     r0,r4,#1
0000b6  b2c4              UXTB     r4,r0
                  |L25.184|
0000b8  1c60              ADDS     r0,r4,#1              ;892
0000ba  b2c4              UXTB     r4,r0                 ;892
                  |L25.188|
0000bc  980e              LDR      r0,[sp,#0x38]         ;892
0000be  4284              CMP      r4,r0                 ;892
0000c0  dbc7              BLT      |L25.82|
;;;923        }			
;;;924    	}
;;;925    	ST7789V_Disable();	//LCD_CS_HIGH;
0000c2  f7fffffe          BL       ST7789V_Disable
;;;926    }
0000c6  b005              ADD      sp,sp,#0x14
0000c8  e8bd8ff0          POP      {r4-r11,pc}
;;;927    /*******************************************************************************
                          ENDP

                  |L25.204|
                          DCD      ST7789VBColor

                          AREA ||i.ST7789V_Test||, CODE, READONLY, ALIGN=1

                  ST7789V_Test PROC
;;;237    *******************************************************************************/
;;;238    void ST7789V_Test(unsigned short Colr)
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
000002  4606              MOV      r6,r0
;;;240      unsigned short i=0,j=0;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
;;;241      
;;;242      //ST7789V_PowerOn();
;;;243      
;;;244      ST7789V_Enable();
000008  f7fffffe          BL       ST7789V_Enable
;;;245      
;;;246      //ST7789V_WriteCommand(0x2C); 
;;;247      
;;;248      ST7789V_SetWindowAddress(0,0,239,319);
00000c  f240133f          MOV      r3,#0x13f
000010  22ef              MOVS     r2,#0xef
000012  2100              MOVS     r1,#0
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       ST7789V_SetWindowAddress
;;;249        
;;;250      for(i=0;i<240;i++)
00001a  bf00              NOP      
00001c  e00e              B        |L26.60|
                  |L26.30|
;;;251        for(j=0;j<320;j++)
00001e  2500              MOVS     r5,#0
000020  e007              B        |L26.50|
                  |L26.34|
;;;252    	{
;;;253          ST7789V_WriteData(Colr);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       ST7789V_WriteData
;;;254    			SysTick_DeleyuS(10);				//SysTick延时nmS
000028  200a              MOVS     r0,#0xa
00002a  f7fffffe          BL       SysTick_DeleyuS
00002e  1c68              ADDS     r0,r5,#1              ;251
000030  b285              UXTH     r5,r0                 ;251
                  |L26.50|
000032  f5b57fa0          CMP      r5,#0x140             ;251
000036  dbf4              BLT      |L26.34|
000038  1c60              ADDS     r0,r4,#1              ;250
00003a  b284              UXTH     r4,r0                 ;250
                  |L26.60|
00003c  2cf0              CMP      r4,#0xf0              ;250
00003e  dbee              BLT      |L26.30|
;;;255    	}
;;;256      
;;;257      //ST7789V_WriteCommand(0x29);
;;;258      
;;;259    //  for(i=0;i<60000;i++)
;;;260    //    ST7789V_WriteData(0x00); 
;;;261    //  
;;;262    //  ST7789V_WriteCommand(0x29); 
;;;263      
;;;264      ST7789V_Disable();
000040  f7fffffe          BL       ST7789V_Disable
;;;265    }
000044  bd70              POP      {r4-r6,pc}
;;;266    /*******************************************************************************
                          ENDP


                          AREA ||i.ST7789V_WriteCommand||, CODE, READONLY, ALIGN=2

                  ST7789V_WriteCommand PROC
;;;326    *******************************************************************************/
;;;327    void ST7789V_WriteCommand(unsigned short Command)
000000  4910              LDR      r1,|L27.68|
;;;328    {
;;;329    	ST7789V_DC_LOW;   //WriteCommand:DC/RS-LOW
000002  6809              LDR      r1,[r1,#0]  ; pST7789V
000004  8b89              LDRH     r1,[r1,#0x1c]
000006  4a0f              LDR      r2,|L27.68|
000008  6812              LDR      r2,[r2,#0]  ; pST7789V
00000a  6992              LDR      r2,[r2,#0x18]
00000c  6151              STR      r1,[r2,#0x14]
;;;330      
;;;331      ST7789V_WR_LOW;   //WriteEnable
00000e  490d              LDR      r1,|L27.68|
000010  6809              LDR      r1,[r1,#0]  ; pST7789V
000012  8c89              LDRH     r1,[r1,#0x24]
000014  4a0b              LDR      r2,|L27.68|
000016  6812              LDR      r2,[r2,#0]  ; pST7789V
000018  6a12              LDR      r2,[r2,#0x20]
00001a  6151              STR      r1,[r2,#0x14]
;;;332      ST7789V_DATABUS_PORT->ODR = Command;
00001c  4909              LDR      r1,|L27.68|
00001e  6809              LDR      r1,[r1,#0]  ; pST7789V
000020  6b89              LDR      r1,[r1,#0x38]
000022  60c8              STR      r0,[r1,#0xc]
;;;333      ST7789V_WR_HIGH;  //Read
000024  4907              LDR      r1,|L27.68|
000026  6809              LDR      r1,[r1,#0]  ; pST7789V
000028  8c89              LDRH     r1,[r1,#0x24]
00002a  4a06              LDR      r2,|L27.68|
00002c  6812              LDR      r2,[r2,#0]  ; pST7789V
00002e  6a12              LDR      r2,[r2,#0x20]
000030  6111              STR      r1,[r2,#0x10]
;;;334      
;;;335      ST7789V_DC_HIGH;   //WriteCommand:DC/RS-LOW
000032  4904              LDR      r1,|L27.68|
000034  6809              LDR      r1,[r1,#0]  ; pST7789V
000036  8b89              LDRH     r1,[r1,#0x1c]
000038  4a02              LDR      r2,|L27.68|
00003a  6812              LDR      r2,[r2,#0]  ; pST7789V
00003c  6992              LDR      r2,[r2,#0x18]
00003e  6111              STR      r1,[r2,#0x10]
;;;336    }
000040  4770              BX       lr
;;;337    /*******************************************************************************
                          ENDP

000042  0000              DCW      0x0000
                  |L27.68|
                          DCD      pST7789V

                          AREA ||i.ST7789V_WriteData||, CODE, READONLY, ALIGN=2

                  ST7789V_WriteData PROC
;;;345    *******************************************************************************/
;;;346    void ST7789V_WriteData(unsigned	short	Data)
000000  4909              LDR      r1,|L28.40|
;;;347    {
;;;348      ST7789V_WR_LOW;   //WriteEnable
000002  6809              LDR      r1,[r1,#0]  ; pST7789V
000004  8c89              LDRH     r1,[r1,#0x24]
000006  4a08              LDR      r2,|L28.40|
000008  6812              LDR      r2,[r2,#0]  ; pST7789V
00000a  6a12              LDR      r2,[r2,#0x20]
00000c  6151              STR      r1,[r2,#0x14]
;;;349      ST7789V_DATABUS_PORT->ODR = Data;
00000e  4906              LDR      r1,|L28.40|
000010  6809              LDR      r1,[r1,#0]  ; pST7789V
000012  6b89              LDR      r1,[r1,#0x38]
000014  60c8              STR      r0,[r1,#0xc]
;;;350      ST7789V_WR_HIGH;  //Read
000016  4904              LDR      r1,|L28.40|
000018  6809              LDR      r1,[r1,#0]  ; pST7789V
00001a  8c89              LDRH     r1,[r1,#0x24]
00001c  4a02              LDR      r2,|L28.40|
00001e  6812              LDR      r2,[r2,#0]  ; pST7789V
000020  6a12              LDR      r2,[r2,#0x20]
000022  6111              STR      r1,[r2,#0x10]
;;;351    }
000024  4770              BX       lr
;;;352    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L28.40|
                          DCD      pST7789V

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ST7789VStringBuffer
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  pST7789V
                          DCD      0x00000000
                  ST7789VBColor
000004  0000              DCW      0x0000
                  ST7789VPColor
000006  ffff              DCW      0xffff
                  ST7789VRotate
000008  a0                DCB      0xa0
