; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\ili9326.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\ili9326.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\ili9326.crf ..\..\Driver\Components\SCR\ILI9326.c]
                          THUMB

                          AREA ||i.ILI9326_Clean||, CODE, READONLY, ALIGN=2

                  ILI9326_Clean PROC
;;;691    *******************************************************************************/
;;;692    void ILI9326_Clean(u16 Color)	//清除屏幕函数
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;693    {
000004  4682              MOV      r10,r0
;;;694    	unsigned short x,y;
;;;695    	unsigned short HSX,HEX,HSY,HEY,MaxH,MaxV;
;;;696    	unsigned long	length	=	0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;697    	eRotate	Rotate	=	ILI9326->Flag.Rotate;
00000a  4822              LDR      r0,|L1.148|
00000c  6800              LDR      r0,[r0,#0]  ; ILI9326
00000e  f890b05c          LDRB     r11,[r0,#0x5c]
;;;698    	
;;;699    	MaxH	=	ILI9326->Data.MaxH;
000012  4820              LDR      r0,|L1.148|
000014  6800              LDR      r0,[r0,#0]  ; ILI9326
000016  f8b08040          LDRH     r8,[r0,#0x40]
;;;700    	MaxV	=	ILI9326->Data.MaxV;	
00001a  481e              LDR      r0,|L1.148|
00001c  6800              LDR      r0,[r0,#0]  ; ILI9326
00001e  f8b09042          LDRH     r9,[r0,#0x42]
;;;701    	switch(Rotate)
000022  f1bb0f00          CMP      r11,#0
000026  d006              BEQ      |L1.54|
000028  f1bb0f01          CMP      r11,#1
00002c  d00c              BEQ      |L1.72|
00002e  f1bb0f02          CMP      r11,#2
000032  d11b              BNE      |L1.108|
000034  e011              B        |L1.90|
                  |L1.54|
;;;702    	{
;;;703    		case 	Draw_Rotate_0D:
;;;704    					HSX	=	0;
000036  2400              MOVS     r4,#0
;;;705    					HEX	=	MaxH-1;
000038  f1a80001          SUB      r0,r8,#1
00003c  b285              UXTH     r5,r0
;;;706    					HSY	=	0;
00003e  2600              MOVS     r6,#0
;;;707    					HEY	=	MaxV-1;
000040  f1a90001          SUB      r0,r9,#1
000044  b287              UXTH     r7,r0
;;;708    			break;
000046  e01a              B        |L1.126|
                  |L1.72|
;;;709    		case	Draw_Rotate_90D:
;;;710    					HSX	=	0;
000048  2400              MOVS     r4,#0
;;;711    					HEX	=	MaxV-1;
00004a  f1a90001          SUB      r0,r9,#1
00004e  b285              UXTH     r5,r0
;;;712    					HSY	=	0;
000050  2600              MOVS     r6,#0
;;;713    					HEY	=	MaxH-1;
000052  f1a80001          SUB      r0,r8,#1
000056  b287              UXTH     r7,r0
;;;714    			break;
000058  e011              B        |L1.126|
                  |L1.90|
;;;715    		case	Draw_Rotate_180D:
;;;716    					HSX	=	0;
00005a  2400              MOVS     r4,#0
;;;717    					HEX	=	MaxH-1;
00005c  f1a80001          SUB      r0,r8,#1
000060  b285              UXTH     r5,r0
;;;718    					HSY	=	0;
000062  2600              MOVS     r6,#0
;;;719    					HEY	=	MaxV-1;
000064  f1a90001          SUB      r0,r9,#1
000068  b287              UXTH     r7,r0
;;;720    			break;
00006a  e008              B        |L1.126|
                  |L1.108|
;;;721    		default:
;;;722    					HSX	=	0;
00006c  2400              MOVS     r4,#0
;;;723    					HEX	=	MaxV-1;
00006e  f1a90001          SUB      r0,r9,#1
000072  b285              UXTH     r5,r0
;;;724    					HSY	=	0;
000074  2600              MOVS     r6,#0
;;;725    					HEY	=	MaxH-1;
000076  f1a80001          SUB      r0,r8,#1
00007a  b287              UXTH     r7,r0
;;;726    			break;			
00007c  bf00              NOP      
                  |L1.126|
00007e  bf00              NOP                            ;708
;;;727    	}	
;;;728    	ILI9326_Fill(HSX,HSY,HEX,HEY,Color);
000080  463b              MOV      r3,r7
000082  462a              MOV      r2,r5
000084  4631              MOV      r1,r6
000086  4620              MOV      r0,r4
000088  f8cda000          STR      r10,[sp,#0]
00008c  f7fffffe          BL       ILI9326_Fill
;;;729    }
000090  e8bd9ffc          POP      {r2-r12,pc}
;;;730    /**************************************************************************************************
                          ENDP

                  |L1.148|
                          DCD      ILI9326

                          AREA ||i.ILI9326_DispOff||, CODE, READONLY, ALIGN=1

                  ILI9326_DispOff PROC
;;;315    **************************************************************************************************/
;;;316    void ILI9326_DispOff( void )
000000  b500              PUSH     {lr}
;;;317    {
;;;318    	ILI9326_WriteCommand( ILI9326_R007_DC1, 0x0000 );
000002  2100              MOVS     r1,#0
000004  2007              MOVS     r0,#7
000006  f7fffffe          BL       ILI9326_WriteCommand
;;;319    }
00000a  bd00              POP      {pc}
;;;320    /**************************************************************************************************
                          ENDP


                          AREA ||i.ILI9326_DrawCircle||, CODE, READONLY, ALIGN=1

                  ILI9326_DrawCircle PROC
;;;585    **************************************************************************************************/
;;;586    void ILI9326_DrawCircle(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;587    												u16 x,u16 y,		//圆心坐标原点
;;;588    												u16 r,					//半径
;;;589    												u8 Filled,			//是否填充
;;;590    												u16 color				//颜色
;;;591    												)
;;;592    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  469b              MOV      r11,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;593    	int a,b;
;;;594    	int di;
;;;595    	a=0;b=r;	  
000010  2400              MOVS     r4,#0
000012  4655              MOV      r5,r10
;;;596    	di=3-(r<<1);             //判断下个点位置的标志
000014  2003              MOVS     r0,#3
000016  eba0094a          SUB      r9,r0,r10,LSL #1
;;;597    	while(a<=b)
00001a  e0c8              B        |L3.430|
                  |L3.28|
;;;598    	{
;;;599    		if(Filled)	//填充就画线
00001c  f1bb0f00          CMP      r11,#0
000020  d072              BEQ      |L3.264|
;;;600    		{
;;;601    			ILI9326_DrawLine(x,y,x-b,y-a,color);             //3           
000022  1b38              SUBS     r0,r7,r4
000024  b283              UXTH     r3,r0
000026  1b70              SUBS     r0,r6,r5
000028  b282              UXTH     r2,r0
00002a  4639              MOV      r1,r7
00002c  4630              MOV      r0,r6
00002e  f8cd8000          STR      r8,[sp,#0]
000032  f7fffffe          BL       ILI9326_DrawLine
;;;602    			ILI9326_DrawLine(x,y,x+b,y-a,color);             //0           
000036  1b38              SUBS     r0,r7,r4
000038  b283              UXTH     r3,r0
00003a  1970              ADDS     r0,r6,r5
00003c  b282              UXTH     r2,r0
00003e  4639              MOV      r1,r7
000040  4630              MOV      r0,r6
000042  f8cd8000          STR      r8,[sp,#0]
000046  f7fffffe          BL       ILI9326_DrawLine
;;;603    			ILI9326_DrawLine(x,y,x-a,y+b,color);             //1       
00004a  1978              ADDS     r0,r7,r5
00004c  b283              UXTH     r3,r0
00004e  1b30              SUBS     r0,r6,r4
000050  b282              UXTH     r2,r0
000052  4639              MOV      r1,r7
000054  4630              MOV      r0,r6
000056  f8cd8000          STR      r8,[sp,#0]
00005a  f7fffffe          BL       ILI9326_DrawLine
;;;604    			ILI9326_DrawLine(x,y,x-b,y-a,color);             //7           
00005e  1b38              SUBS     r0,r7,r4
000060  b283              UXTH     r3,r0
000062  1b70              SUBS     r0,r6,r5
000064  b282              UXTH     r2,r0
000066  4639              MOV      r1,r7
000068  4630              MOV      r0,r6
00006a  f8cd8000          STR      r8,[sp,#0]
00006e  f7fffffe          BL       ILI9326_DrawLine
;;;605    			ILI9326_DrawLine(x,y,x-a,y-b,color);             //2             
000072  1b78              SUBS     r0,r7,r5
000074  b283              UXTH     r3,r0
000076  1b30              SUBS     r0,r6,r4
000078  b282              UXTH     r2,r0
00007a  4639              MOV      r1,r7
00007c  4630              MOV      r0,r6
00007e  f8cd8000          STR      r8,[sp,#0]
000082  f7fffffe          BL       ILI9326_DrawLine
;;;606    			ILI9326_DrawLine(x,y,x+b,y+a,color);             //4               
000086  1938              ADDS     r0,r7,r4
000088  b283              UXTH     r3,r0
00008a  1970              ADDS     r0,r6,r5
00008c  b282              UXTH     r2,r0
00008e  4639              MOV      r1,r7
000090  4630              MOV      r0,r6
000092  f8cd8000          STR      r8,[sp,#0]
000096  f7fffffe          BL       ILI9326_DrawLine
;;;607    			ILI9326_DrawLine(x,y,x+a,y-b,color);             //5
00009a  1b78              SUBS     r0,r7,r5
00009c  b283              UXTH     r3,r0
00009e  1930              ADDS     r0,r6,r4
0000a0  b282              UXTH     r2,r0
0000a2  4639              MOV      r1,r7
0000a4  4630              MOV      r0,r6
0000a6  f8cd8000          STR      r8,[sp,#0]
0000aa  f7fffffe          BL       ILI9326_DrawLine
;;;608    			ILI9326_DrawLine(x,y,x+a,y+b,color);             //6 
0000ae  1978              ADDS     r0,r7,r5
0000b0  b283              UXTH     r3,r0
0000b2  1930              ADDS     r0,r6,r4
0000b4  b282              UXTH     r2,r0
0000b6  4639              MOV      r1,r7
0000b8  4630              MOV      r0,r6
0000ba  f8cd8000          STR      r8,[sp,#0]
0000be  f7fffffe          BL       ILI9326_DrawLine
;;;609    			ILI9326_DrawLine(x,y,x-b,y+a,color);             
0000c2  1938              ADDS     r0,r7,r4
0000c4  b283              UXTH     r3,r0
0000c6  1b70              SUBS     r0,r6,r5
0000c8  b282              UXTH     r2,r0
0000ca  4639              MOV      r1,r7
0000cc  4630              MOV      r0,r6
0000ce  f8cd8000          STR      r8,[sp,#0]
0000d2  f7fffffe          BL       ILI9326_DrawLine
;;;610    			a++;
0000d6  1c64              ADDS     r4,r4,#1
;;;611    			//使用Bresenham算法画圆     
;;;612    			if(di<0)
0000d8  f1b90f00          CMP      r9,#0
0000dc  da03              BGE      |L3.230|
;;;613    				di +=4*a+6;	  
0000de  00a0              LSLS     r0,r4,#2
0000e0  1d80              ADDS     r0,r0,#6
0000e2  4481              ADD      r9,r9,r0
0000e4  e004              B        |L3.240|
                  |L3.230|
;;;614    			else
;;;615    			{
;;;616    				di+=10+4*(a-b);   
0000e6  1b60              SUBS     r0,r4,r5
0000e8  0080              LSLS     r0,r0,#2
0000ea  300a              ADDS     r0,r0,#0xa
0000ec  4481              ADD      r9,r9,r0
;;;617    				b--;
0000ee  1e6d              SUBS     r5,r5,#1
                  |L3.240|
;;;618    			}
;;;619    			ILI9326_DrawLine(x,y,x+a,y+b,color);				//AB 两个坐标画一条直线
0000f0  1978              ADDS     r0,r7,r5
0000f2  b283              UXTH     r3,r0
0000f4  1930              ADDS     r0,r6,r4
0000f6  b282              UXTH     r2,r0
0000f8  4639              MOV      r1,r7
0000fa  4630              MOV      r0,r6
0000fc  f8cd8000          STR      r8,[sp,#0]
000100  f7fffffe          BL       ILI9326_DrawLine
000104  e053              B        |L3.430|
000106  e7ff              B        |L3.264|
                  |L3.264|
;;;620    		}
;;;621    		else
;;;622    		{
;;;623    			ILI9326_DrawDot(x-b,y-a,color);             //3           
000108  1b3a              SUBS     r2,r7,r4
00010a  b291              UXTH     r1,r2
00010c  1b72              SUBS     r2,r6,r5
00010e  b290              UXTH     r0,r2
000110  4642              MOV      r2,r8
000112  f7fffffe          BL       ILI9326_DrawDot
;;;624    			ILI9326_DrawDot(x+b,y-a,color);             //0           
000116  1b3a              SUBS     r2,r7,r4
000118  b291              UXTH     r1,r2
00011a  1972              ADDS     r2,r6,r5
00011c  b290              UXTH     r0,r2
00011e  4642              MOV      r2,r8
000120  f7fffffe          BL       ILI9326_DrawDot
;;;625    			ILI9326_DrawDot(x-a,y+b,color);             //1       
000124  197a              ADDS     r2,r7,r5
000126  b291              UXTH     r1,r2
000128  1b32              SUBS     r2,r6,r4
00012a  b290              UXTH     r0,r2
00012c  4642              MOV      r2,r8
00012e  f7fffffe          BL       ILI9326_DrawDot
;;;626    			ILI9326_DrawDot(x-b,y-a,color);             //7           
000132  1b3a              SUBS     r2,r7,r4
000134  b291              UXTH     r1,r2
000136  1b72              SUBS     r2,r6,r5
000138  b290              UXTH     r0,r2
00013a  4642              MOV      r2,r8
00013c  f7fffffe          BL       ILI9326_DrawDot
;;;627    			ILI9326_DrawDot(x-a,y-b,color);             //2             
000140  1b7a              SUBS     r2,r7,r5
000142  b291              UXTH     r1,r2
000144  1b32              SUBS     r2,r6,r4
000146  b290              UXTH     r0,r2
000148  4642              MOV      r2,r8
00014a  f7fffffe          BL       ILI9326_DrawDot
;;;628    			ILI9326_DrawDot(x+b,y+a,color);             //4               
00014e  193a              ADDS     r2,r7,r4
000150  b291              UXTH     r1,r2
000152  1972              ADDS     r2,r6,r5
000154  b290              UXTH     r0,r2
000156  4642              MOV      r2,r8
000158  f7fffffe          BL       ILI9326_DrawDot
;;;629    			ILI9326_DrawDot(x+a,y-b,color);             //5
00015c  1b7a              SUBS     r2,r7,r5
00015e  b291              UXTH     r1,r2
000160  1932              ADDS     r2,r6,r4
000162  b290              UXTH     r0,r2
000164  4642              MOV      r2,r8
000166  f7fffffe          BL       ILI9326_DrawDot
;;;630    			ILI9326_DrawDot(x+a,y+b,color);             //6 
00016a  197a              ADDS     r2,r7,r5
00016c  b291              UXTH     r1,r2
00016e  1932              ADDS     r2,r6,r4
000170  b290              UXTH     r0,r2
000172  4642              MOV      r2,r8
000174  f7fffffe          BL       ILI9326_DrawDot
;;;631    			ILI9326_DrawDot(x-b,y+a,color);             
000178  193a              ADDS     r2,r7,r4
00017a  b291              UXTH     r1,r2
00017c  1b72              SUBS     r2,r6,r5
00017e  b290              UXTH     r0,r2
000180  4642              MOV      r2,r8
000182  f7fffffe          BL       ILI9326_DrawDot
;;;632    			a++;
000186  1c64              ADDS     r4,r4,#1
;;;633    			//使用Bresenham算法画圆     
;;;634    			if(di<0)
000188  f1b90f00          CMP      r9,#0
00018c  da03              BGE      |L3.406|
;;;635    				di +=4*a+6;	  
00018e  00a0              LSLS     r0,r4,#2
000190  1d80              ADDS     r0,r0,#6
000192  4481              ADD      r9,r9,r0
000194  e004              B        |L3.416|
                  |L3.406|
;;;636    			else
;;;637    			{
;;;638    				di+=10+4*(a-b);   
000196  1b60              SUBS     r0,r4,r5
000198  0080              LSLS     r0,r0,#2
00019a  300a              ADDS     r0,r0,#0xa
00019c  4481              ADD      r9,r9,r0
;;;639    				b--;
00019e  1e6d              SUBS     r5,r5,#1
                  |L3.416|
;;;640    			}
;;;641    				ILI9326_DrawDot(x+a,y+b,color);
0001a0  197a              ADDS     r2,r7,r5
0001a2  b291              UXTH     r1,r2
0001a4  1932              ADDS     r2,r6,r4
0001a6  b290              UXTH     r0,r2
0001a8  4642              MOV      r2,r8
0001aa  f7fffffe          BL       ILI9326_DrawDot
                  |L3.430|
0001ae  42ac              CMP      r4,r5                 ;597
0001b0  f77faf34          BLE      |L3.28|
;;;642    		}
;;;643    	}
;;;644    }
0001b4  e8bd8ff8          POP      {r3-r11,pc}
;;;645    /**************************************************************************************************
                          ENDP


                          AREA ||i.ILI9326_DrawDot||, CODE, READONLY, ALIGN=1

                  ILI9326_DrawDot PROC
;;;506    *******************************************************************************/
;;;507    void ILI9326_DrawDot(
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;508    									unsigned short HSX,			//点X坐标*/
;;;509    									unsigned short HSY,			//点Y坐标*/
;;;510    									unsigned short Color		//点颜色*/	
;;;511    								)
;;;512    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;513    	ILI9326_SetWindowAddress(HSX,HSY,HSX,HSY);	//设置光标位置
000006  462b              MOV      r3,r5
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       ILI9326_SetWindowAddress
;;;514    	ILI9326_WriteGRAM(&Color,1);
000012  2101              MOVS     r1,#1
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       ILI9326_WriteGRAM
;;;515    }
00001a  bd3e              POP      {r1-r5,pc}
;;;516    /*******************************************************************************
                          ENDP


                          AREA ||i.ILI9326_DrawLine||, CODE, READONLY, ALIGN=1

                  ILI9326_DrawLine PROC
;;;524    *******************************************************************************/
;;;525    void ILI9326_DrawLine(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;526    									unsigned short HSX, unsigned short HSY, 	//x1,y1:起点坐标
;;;527    									unsigned short HEX, unsigned short HEY,		//x2,y2:终点坐标
;;;528    									unsigned short Color					//颜色
;;;529    )
;;;530    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
;;;531    	u16 t; 
;;;532    	int xerr=0,yerr=0,delta_x,delta_y,distance; 
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  4683              MOV      r11,r0
;;;533    	int incx,incy,uRow,uCol; 
;;;534    
;;;535    	delta_x=HEX-HSX; //计算坐标增量 
000010  9807              LDR      r0,[sp,#0x1c]
000012  eba00509          SUB      r5,r0,r9
;;;536    	delta_y=HEY-HSY; 
000016  9808              LDR      r0,[sp,#0x20]
000018  eba0060a          SUB      r6,r0,r10
;;;537    	uRow=HSX; 
00001c  f8cd9008          STR      r9,[sp,#8]
;;;538    	uCol=HSY;
000020  f8cda004          STR      r10,[sp,#4]
;;;539    	
;;;540    	if(delta_x>0)
000024  2d00              CMP      r5,#0
000026  dd01              BLE      |L5.44|
;;;541    		incx=1; //设置单步方向 
000028  2701              MOVS     r7,#1
00002a  e005              B        |L5.56|
                  |L5.44|
;;;542    	else if(delta_x==0)
00002c  b90d              CBNZ     r5,|L5.50|
;;;543    		incx=0;//垂直线 
00002e  2700              MOVS     r7,#0
000030  e002              B        |L5.56|
                  |L5.50|
;;;544    	else
;;;545    	{
;;;546    		incx=-1;
000032  f04f37ff          MOV      r7,#0xffffffff
;;;547    		delta_x=-delta_x;
000036  426d              RSBS     r5,r5,#0
                  |L5.56|
;;;548    	}
;;;549    		
;;;550    	if(delta_y>0)
000038  2e00              CMP      r6,#0
00003a  dd02              BLE      |L5.66|
;;;551    		incy=1; 
00003c  f04f0801          MOV      r8,#1
000040  e006              B        |L5.80|
                  |L5.66|
;;;552    	else if(delta_y==0)
000042  b916              CBNZ     r6,|L5.74|
;;;553    		incy=0;//水平线 
000044  f04f0800          MOV      r8,#0
000048  e002              B        |L5.80|
                  |L5.74|
;;;554    	else
;;;555    		{incy=-1;delta_y=-delta_y;}
00004a  f04f38ff          MOV      r8,#0xffffffff
00004e  4276              RSBS     r6,r6,#0
                  |L5.80|
;;;556    		
;;;557    	if( delta_x>delta_y)
000050  42b5              CMP      r5,r6
000052  dd01              BLE      |L5.88|
;;;558    		distance=delta_x; 								//选取基本增量坐标轴 
000054  462c              MOV      r4,r5
000056  e000              B        |L5.90|
                  |L5.88|
;;;559    	else
;;;560    		distance=delta_y;
000058  4634              MOV      r4,r6
                  |L5.90|
;;;561    	
;;;562    	for(t=0;t<distance+1;t++ )					//画线输出 
00005a  2000              MOVS     r0,#0
00005c  9004              STR      r0,[sp,#0x10]
00005e  e01e              B        |L5.158|
                  |L5.96|
;;;563    	{  
;;;564    		ILI9326_DrawDot(uRow,uCol,Color);			//画点 
000060  9a01              LDR      r2,[sp,#4]
000062  b291              UXTH     r1,r2
000064  9a02              LDR      r2,[sp,#8]
000066  b290              UXTH     r0,r2
000068  9a12              LDR      r2,[sp,#0x48]
00006a  f7fffffe          BL       ILI9326_DrawDot
;;;565    		xerr+=delta_x ; 
00006e  9803              LDR      r0,[sp,#0xc]
000070  4428              ADD      r0,r0,r5
000072  9003              STR      r0,[sp,#0xc]
;;;566    		yerr+=delta_y ; 
000074  44b3              ADD      r11,r11,r6
;;;567    		if(xerr>distance) 
000076  9803              LDR      r0,[sp,#0xc]
000078  42a0              CMP      r0,r4
00007a  dd05              BLE      |L5.136|
;;;568    		{ 
;;;569    			xerr-=distance; 
00007c  9803              LDR      r0,[sp,#0xc]
00007e  1b00              SUBS     r0,r0,r4
000080  9003              STR      r0,[sp,#0xc]
;;;570    			uRow+=incx; 
000082  9802              LDR      r0,[sp,#8]
000084  4438              ADD      r0,r0,r7
000086  9002              STR      r0,[sp,#8]
                  |L5.136|
;;;571    		} 
;;;572    		if(yerr>distance) 
000088  45a3              CMP      r11,r4
00008a  dd04              BLE      |L5.150|
;;;573    		{ 
;;;574    			yerr-=distance;
00008c  ebab0b04          SUB      r11,r11,r4
;;;575    			uCol+=incy; 
000090  9801              LDR      r0,[sp,#4]
000092  4440              ADD      r0,r0,r8
000094  9001              STR      r0,[sp,#4]
                  |L5.150|
000096  9804              LDR      r0,[sp,#0x10]         ;562
000098  1c40              ADDS     r0,r0,#1              ;562
00009a  b280              UXTH     r0,r0                 ;562
00009c  9004              STR      r0,[sp,#0x10]         ;562
                  |L5.158|
00009e  1c61              ADDS     r1,r4,#1              ;562
0000a0  9804              LDR      r0,[sp,#0x10]         ;562
0000a2  4288              CMP      r0,r1                 ;562
0000a4  dbdc              BLT      |L5.96|
;;;576    		} 
;;;577    	}
;;;578    }
0000a6  b009              ADD      sp,sp,#0x24
0000a8  e8bd8ff0          POP      {r4-r11,pc}
;;;579    /**************************************************************************************************
                          ENDP


                          AREA ||i.ILI9326_DrawRectangle||, CODE, READONLY, ALIGN=1

                  ILI9326_DrawRectangle PROC
;;;649    **************************************************************************************************/
;;;650    void ILI9326_DrawRectangle(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;651    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;652    	ILI9326_DrawLine( x1, y1,	x1,	y2, color );
00000e  4643              MOV      r3,r8
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  9400              STR      r4,[sp,#0]
000018  f7fffffe          BL       ILI9326_DrawLine
;;;653    	ILI9326_DrawLine( x1, y1,	x2,	y1, color );
00001c  4633              MOV      r3,r6
00001e  463a              MOV      r2,r7
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  9400              STR      r4,[sp,#0]
000026  f7fffffe          BL       ILI9326_DrawLine
;;;654    	ILI9326_DrawLine( x2, y1,	x2,	y2, color );
00002a  4643              MOV      r3,r8
00002c  463a              MOV      r2,r7
00002e  4631              MOV      r1,r6
000030  4638              MOV      r0,r7
000032  9400              STR      r4,[sp,#0]
000034  f7fffffe          BL       ILI9326_DrawLine
;;;655    	ILI9326_DrawLine( x1, y2,	x2,	y2, color );
000038  4643              MOV      r3,r8
00003a  463a              MOV      r2,r7
00003c  4641              MOV      r1,r8
00003e  4628              MOV      r0,r5
000040  9400              STR      r4,[sp,#0]
000042  f7fffffe          BL       ILI9326_DrawLine
;;;656    }
000046  e8bd83f8          POP      {r3-r9,pc}
;;;657    /*******************************************************************************
                          ENDP


                          AREA ||i.ILI9326_Fill||, CODE, READONLY, ALIGN=2

                  ILI9326_Fill PROC
;;;662    *******************************************************************************/
;;;663    void ILI9326_Fill(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;664    							unsigned short x1, unsigned short y1, 	//x1,y1:起点坐标
;;;665    							unsigned short x2, unsigned short y2,		//x2,y2:终点坐标
;;;666    							u16 Color
;;;667    )
;;;668    {          
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;669    	unsigned int x;
;;;670    	unsigned int y;	
;;;671    	ILI9326_SetWindowAddress(x1,y1,x2,y2);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       ILI9326_SetWindowAddress
;;;672    	ILI9326_WriteIndex( ILI9326_R202_GDRW );
00001c  f2402002          MOV      r0,#0x202
000020  f7fffffe          BL       ILI9326_WriteIndex
;;;673    	ILI9326Crl(CS);	//LCD_CS_LOW;
000024  4811              LDR      r0,|L7.108|
000026  6800              LDR      r0,[r0,#0]  ; ILI9326
000028  8d80              LDRH     r0,[r0,#0x2c]
00002a  4910              LDR      r1,|L7.108|
00002c  6809              LDR      r1,[r1,#0]  ; ILI9326
00002e  6a89              LDR      r1,[r1,#0x28]
000030  6148              STR      r0,[r1,#0x14]
;;;674    	for(x=0;x<=x2-x1;x++)
000032  f04f0800          MOV      r8,#0
000036  e00c              B        |L7.82|
                  |L7.56|
;;;675    	{
;;;676    		for(y=0;y<=y2-y1;y++)
000038  f04f0900          MOV      r9,#0
00003c  e004              B        |L7.72|
                  |L7.62|
;;;677    		{
;;;678    			ILI9326_WriteData(Color);							//写数据
00003e  4650              MOV      r0,r10
000040  f7fffffe          BL       ILI9326_WriteData
000044  f1090901          ADD      r9,r9,#1              ;676
                  |L7.72|
000048  1b78              SUBS     r0,r7,r5              ;676
00004a  4548              CMP      r0,r9                 ;676
00004c  d2f7              BCS      |L7.62|
00004e  f1080801          ADD      r8,r8,#1              ;674
                  |L7.82|
000052  1b30              SUBS     r0,r6,r4              ;674
000054  4540              CMP      r0,r8                 ;674
000056  d2ef              BCS      |L7.56|
;;;679    		}
;;;680    	}	
;;;681    	ILI9326Set(CS);	//LCD_CS_HIGH;
000058  4804              LDR      r0,|L7.108|
00005a  6800              LDR      r0,[r0,#0]  ; ILI9326
00005c  8d80              LDRH     r0,[r0,#0x2c]
00005e  4903              LDR      r1,|L7.108|
000060  6809              LDR      r1,[r1,#0]  ; ILI9326
000062  6a89              LDR      r1,[r1,#0x28]
000064  6108              STR      r0,[r1,#0x10]
;;;682    }
000066  e8bd87f0          POP      {r4-r10,pc}
;;;683    /*******************************************************************************
                          ENDP

00006a  0000              DCW      0x0000
                  |L7.108|
                          DCD      ILI9326

                          AREA ||i.ILI9326_Initialize||, CODE, READONLY, ALIGN=2

                  ILI9326_Initialize PROC
;;;52     *******************************************************************************/
;;;53     unsigned short ILI9326_Initialize(void*	pInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;54     {
000002  4605              MOV      r5,r0
;;;55     	//
;;;56     	static unsigned short	DeviceCode	=	0;
;;;57     	LCDPortDef*	Port	=	NULL;
000004  2400              MOVS     r4,#0
;;;58     	if(NULL==	pInfo)
000006  b90d              CBNZ     r5,|L8.12|
;;;59     		return 0;
000008  2000              MOVS     r0,#0
                  |L8.10|
;;;60     	ILI9326		=	(LCDDef*)pInfo;		//指针指向
;;;61     	Port	=	&ILI9326->Port;
;;;62     	
;;;63     	//==========================GPIO配置
;;;64     	GPIO_Configuration_OPP50	(Port->sBL_PORT,				Port->sBL_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;65     	GPIO_Configuration_OPP50	(Port->sRD_PORT,				Port->sRD_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;66     	GPIO_Configuration_OPP50	(Port->sREST_PORT,			Port->sREST_Pin);				//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;67     	GPIO_Configuration_OPP50	(Port->sDC_PORT,				Port->sDC_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;68     	GPIO_Configuration_OPP50	(Port->sWR_PORT,				Port->sWR_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;69     	GPIO_Configuration_OPP50	(Port->sCS_PORT,				Port->sCS_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;70     	GPIO_Configuration_OPP50	(Port->sTE_PORT,				Port->sTE_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;71     	GPIO_Configuration_OPP50	(Port->sDATABUS_PORT,		Port->sDATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;72     	
;;;73     	DeviceCode	=	ILI9326_ReadRegister(ILI9326_R000_IR);
;;;74     	if(ILI9326ID	!=	DeviceCode)
;;;75     	{
;;;76     		return 0;		//识别失败
;;;77     	}
;;;78     	
;;;79     	//==========================检查背景色与画笔色是否相同
;;;80     	if(ILI9326->Data.PColor	==	ILI9326->Data.BColor)
;;;81     	{
;;;82     		ILI9326->Data.PColor	=	ILI9326->Data.BColor^0xFFFF;
;;;83     	}
;;;84     	
;;;85     	ILI9326->Data.MaxH	=	ILI9326_H;					//最大水平宽度
;;;86     	ILI9326->Data.MaxV	=	ILI9326_V;					//最大垂直高度
;;;87     	
;;;88     	//==========================接口函数
;;;89     //	ILI9326->Display.WriteAddress		=	ILI9326_SetWindowAddress;
;;;90     	ILI9326->Display.PowerOn				=	ILI9326_PowerOn;
;;;91     	ILI9326->Display.DispOff				=	ILI9326_PowerOff;
;;;92     	
;;;93     	ILI9326->Display.DrawDot				=	ILI9326_DrawDot;
;;;94     	ILI9326->Display.DrawLine				=	ILI9326_DrawLine;
;;;95     	ILI9326->Display.DrawCircle			=	ILI9326_DrawCircle;
;;;96     	ILI9326->Display.DrawRectangle	=	ILI9326_DrawRectangle;
;;;97     	
;;;98     	ILI9326->Display.Fill						=	ILI9326_Fill;
;;;99     	ILI9326->Display.Clean					=	ILI9326_Clean;
;;;100    	ILI9326->Display.SetBackground	=	ILI9326_SetBackground;
;;;101    	
;;;102    	ILI9326->Display.ShowChar				=	ILI9326_ShowChar;
;;;103    	ILI9326->Display.ShowWord				=	ILI9326_ShowWord;
;;;104    	
;;;105    	ILI9326_PowerOn();
;;;106    	ILI9326_Clean(ILI9326->Data.BColor);
;;;107    	
;;;108    	ILI9326Set(BL);
;;;109    	return DeviceCode;		//配置成功
;;;110    }
00000a  bd70              POP      {r4-r6,pc}
                  |L8.12|
00000c  484b              LDR      r0,|L8.316|
00000e  6005              STR      r5,[r0,#0]            ;60  ; ILI9326
000010  6804              LDR      r4,[r0,#0]            ;61  ; ILI9326
000012  88a1              LDRH     r1,[r4,#4]            ;64
000014  6820              LDR      r0,[r4,#0]            ;64
000016  f7fffffe          BL       GPIO_Configuration_OPP50
00001a  89a1              LDRH     r1,[r4,#0xc]          ;65
00001c  68a0              LDR      r0,[r4,#8]            ;65
00001e  f7fffffe          BL       GPIO_Configuration_OPP50
000022  8aa1              LDRH     r1,[r4,#0x14]         ;66
000024  6920              LDR      r0,[r4,#0x10]         ;66
000026  f7fffffe          BL       GPIO_Configuration_OPP50
00002a  8ba1              LDRH     r1,[r4,#0x1c]         ;67
00002c  69a0              LDR      r0,[r4,#0x18]         ;67
00002e  f7fffffe          BL       GPIO_Configuration_OPP50
000032  8ca1              LDRH     r1,[r4,#0x24]         ;68
000034  6a20              LDR      r0,[r4,#0x20]         ;68
000036  f7fffffe          BL       GPIO_Configuration_OPP50
00003a  8da1              LDRH     r1,[r4,#0x2c]         ;69
00003c  6aa0              LDR      r0,[r4,#0x28]         ;69
00003e  f7fffffe          BL       GPIO_Configuration_OPP50
000042  8ea1              LDRH     r1,[r4,#0x34]         ;70
000044  6b20              LDR      r0,[r4,#0x30]         ;70
000046  f7fffffe          BL       GPIO_Configuration_OPP50
00004a  8fa1              LDRH     r1,[r4,#0x3c]         ;71
00004c  6ba0              LDR      r0,[r4,#0x38]         ;71
00004e  f7fffffe          BL       GPIO_Configuration_OPP50
000052  2000              MOVS     r0,#0                 ;73
000054  f7fffffe          BL       ILI9326_ReadRegister
000058  4939              LDR      r1,|L8.320|
00005a  8008              STRH     r0,[r1,#0]            ;73
00005c  4608              MOV      r0,r1                 ;74
00005e  8800              LDRH     r0,[r0,#0]            ;74  ; DeviceCode
000060  f2493126          MOV      r1,#0x9326            ;74
000064  4288              CMP      r0,r1                 ;74
000066  d001              BEQ      |L8.108|
000068  2000              MOVS     r0,#0                 ;76
00006a  e7ce              B        |L8.10|
                  |L8.108|
00006c  4833              LDR      r0,|L8.316|
00006e  6800              LDR      r0,[r0,#0]            ;80  ; ILI9326
000070  f8b01050          LDRH     r1,[r0,#0x50]         ;80
000074  4831              LDR      r0,|L8.316|
000076  6800              LDR      r0,[r0,#0]            ;80  ; ILI9326
000078  f8b00052          LDRH     r0,[r0,#0x52]         ;80
00007c  4281              CMP      r1,r0                 ;80
00007e  d10a              BNE      |L8.150|
000080  482e              LDR      r0,|L8.316|
000082  6800              LDR      r0,[r0,#0]            ;82  ; ILI9326
000084  f8b00052          LDRH     r0,[r0,#0x52]         ;82
000088  f64f71ff          MOV      r1,#0xffff            ;82
00008c  4048              EORS     r0,r0,r1              ;82
00008e  492b              LDR      r1,|L8.316|
000090  6809              LDR      r1,[r1,#0]            ;82  ; ILI9326
000092  f8a10050          STRH     r0,[r1,#0x50]         ;82
                  |L8.150|
000096  20f0              MOVS     r0,#0xf0              ;85
000098  4928              LDR      r1,|L8.316|
00009a  6809              LDR      r1,[r1,#0]            ;85  ; ILI9326
00009c  f8a10040          STRH     r0,[r1,#0x40]         ;85
0000a0  f44f71c8          MOV      r1,#0x190             ;86
0000a4  4825              LDR      r0,|L8.316|
0000a6  6800              LDR      r0,[r0,#0]            ;86  ; ILI9326
0000a8  f8a01042          STRH     r1,[r0,#0x42]         ;86
0000ac  4925              LDR      r1,|L8.324|
0000ae  4823              LDR      r0,|L8.316|
0000b0  6800              LDR      r0,[r0,#0]            ;90  ; ILI9326
0000b2  6781              STR      r1,[r0,#0x78]         ;90
0000b4  4924              LDR      r1,|L8.328|
0000b6  4821              LDR      r0,|L8.316|
0000b8  6800              LDR      r0,[r0,#0]            ;91  ; ILI9326
0000ba  f8c01080          STR      r1,[r0,#0x80]         ;91
0000be  4923              LDR      r1,|L8.332|
0000c0  481e              LDR      r0,|L8.316|
0000c2  6800              LDR      r0,[r0,#0]            ;93  ; ILI9326
0000c4  f8c01084          STR      r1,[r0,#0x84]         ;93
0000c8  4921              LDR      r1,|L8.336|
0000ca  481c              LDR      r0,|L8.316|
0000cc  6800              LDR      r0,[r0,#0]            ;94  ; ILI9326
0000ce  f8c01088          STR      r1,[r0,#0x88]         ;94
0000d2  4920              LDR      r1,|L8.340|
0000d4  4819              LDR      r0,|L8.316|
0000d6  6800              LDR      r0,[r0,#0]            ;95  ; ILI9326
0000d8  f8c0108c          STR      r1,[r0,#0x8c]         ;95
0000dc  491e              LDR      r1,|L8.344|
0000de  4817              LDR      r0,|L8.316|
0000e0  6800              LDR      r0,[r0,#0]            ;96  ; ILI9326
0000e2  f8c01090          STR      r1,[r0,#0x90]         ;96
0000e6  491d              LDR      r1,|L8.348|
0000e8  4814              LDR      r0,|L8.316|
0000ea  6800              LDR      r0,[r0,#0]            ;98  ; ILI9326
0000ec  f8c01094          STR      r1,[r0,#0x94]         ;98
0000f0  491b              LDR      r1,|L8.352|
0000f2  4812              LDR      r0,|L8.316|
0000f4  6800              LDR      r0,[r0,#0]            ;99  ; ILI9326
0000f6  f8c01098          STR      r1,[r0,#0x98]         ;99
0000fa  491a              LDR      r1,|L8.356|
0000fc  480f              LDR      r0,|L8.316|
0000fe  6800              LDR      r0,[r0,#0]            ;100  ; ILI9326
000100  f8c0109c          STR      r1,[r0,#0x9c]         ;100
000104  4918              LDR      r1,|L8.360|
000106  480d              LDR      r0,|L8.316|
000108  6800              LDR      r0,[r0,#0]            ;102  ; ILI9326
00010a  f8c010a0          STR      r1,[r0,#0xa0]         ;102
00010e  4917              LDR      r1,|L8.364|
000110  480a              LDR      r0,|L8.316|
000112  6800              LDR      r0,[r0,#0]            ;103  ; ILI9326
000114  f8c010a4          STR      r1,[r0,#0xa4]         ;103
000118  f7fffffe          BL       ILI9326_PowerOn
00011c  4907              LDR      r1,|L8.316|
00011e  6809              LDR      r1,[r1,#0]            ;106  ; ILI9326
000120  f8b10052          LDRH     r0,[r1,#0x52]         ;106
000124  f7fffffe          BL       ILI9326_Clean
000128  4804              LDR      r0,|L8.316|
00012a  6800              LDR      r0,[r0,#0]            ;108  ; ILI9326
00012c  8880              LDRH     r0,[r0,#4]            ;108
00012e  4903              LDR      r1,|L8.316|
000130  6809              LDR      r1,[r1,#0]            ;108  ; ILI9326
000132  6809              LDR      r1,[r1,#0]            ;108
000134  6108              STR      r0,[r1,#0x10]         ;108
000136  4802              LDR      r0,|L8.320|
000138  8800              LDRH     r0,[r0,#0]            ;109  ; DeviceCode
00013a  e766              B        |L8.10|
;;;111    /*******************************************************************************
                          ENDP

                  |L8.316|
                          DCD      ILI9326
                  |L8.320|
                          DCD      DeviceCode
                  |L8.324|
                          DCD      ILI9326_PowerOn
                  |L8.328|
                          DCD      ILI9326_PowerOff
                  |L8.332|
                          DCD      ILI9326_DrawDot
                  |L8.336|
                          DCD      ILI9326_DrawLine
                  |L8.340|
                          DCD      ILI9326_DrawCircle
                  |L8.344|
                          DCD      ILI9326_DrawRectangle
                  |L8.348|
                          DCD      ILI9326_Fill
                  |L8.352|
                          DCD      ILI9326_Clean
                  |L8.356|
                          DCD      ILI9326_SetBackground
                  |L8.360|
                          DCD      ILI9326_ShowChar
                  |L8.364|
                          DCD      ILI9326_ShowWord

                          AREA ||i.ILI9326_PowerOff||, CODE, READONLY, ALIGN=2

                  ILI9326_PowerOff PROC
;;;413    **************************************************************************************************/
;;;414    void ILI9326_PowerOff( void )
000000  b508              PUSH     {r3,lr}
;;;415    {
;;;416    	LCD_BL_OFF;		//关背光
000002  2000              MOVS     r0,#0
000004  4602              MOV      r2,r0
000006  4b05              LDR      r3,|L9.28|
000008  2103              MOVS     r1,#3
00000a  9000              STR      r0,[sp,#0]
00000c  0318              LSLS     r0,r3,#12
00000e  f7fffffe          BL       PWM_OUT
;;;417    	ILI9326_WriteCommand( ILI9326_R009_DC3, 0 );	
000012  2100              MOVS     r1,#0
000014  2009              MOVS     r0,#9
000016  f7fffffe          BL       ILI9326_WriteCommand
;;;418    }
00001a  bd08              POP      {r3,pc}
;;;419    /**************************************************************************************************
                          ENDP

                  |L9.28|
                          DCD      0x40140000

                          AREA ||i.ILI9326_PowerOn||, CODE, READONLY, ALIGN=2

                  ILI9326_PowerOn PROC
;;;323    **************************************************************************************************/
;;;324    void ILI9326_PowerOn( void )
000000  b570              PUSH     {r4-r6,lr}
;;;325    {
;;;326    	u32 dtime=5000;
000002  f2413688          MOV      r6,#0x1388
;;;327    	
;;;328    //	void(*ILI9326_WriteCMD)(unsigned short Index,unsigned short Command)	=	ILI9326->Display.WriteCommand;//LcdDisplay.WriteCommand
;;;329    	void(*ILI9326_WriteCMD)(unsigned short Index,unsigned short Command);
;;;330    	
;;;331      void(*DelaymS)(unsigned long xms) = LCD_DelaymS;
000006  4d64              LDR      r5,|L10.408|
;;;332    	
;;;333    	ILI9326_WriteCMD	=	ILI9326_WriteCommand;
000008  4c64              LDR      r4,|L10.412|
;;;334    //  LCDSYS->Display.DelaymS
;;;335    //	ILI9326_WriteCMD	=	sILI9326->Display.WriteCommand;
;;;336    	
;;;337    	ILI9326_Reset();
00000a  f7fffffe          BL       ILI9326_Reset
;;;338    /************** Start Initial Sequence ********** // */
;;;339    	ILI9326_WriteCMD( ILI9326_R702_SIT1, 	0x3008 );/* Set internal timing, don’t change this value */
00000e  f2430108          MOV      r1,#0x3008
000012  f2407002          MOV      r0,#0x702
000016  47a0              BLX      r4
;;;340    	ILI9326_WriteCMD( ILI9326_R705_SIT2, 	0x0036 );/* Set internal timing, don’t change this value */
000018  2136              MOVS     r1,#0x36
00001a  f2407005          MOV      r0,#0x705
00001e  47a0              BLX      r4
;;;341    	ILI9326_WriteCMD( ILI9326_R70B_SIT3, 	0x1213 );/* Set internal timing, don’t change this value */
000020  f2412113          MOV      r1,#0x1213
000024  f240700b          MOV      r0,#0x70b
000028  47a0              BLX      r4
;;;342    
;;;343    	ILI9326_WriteCMD( ILI9326_R001_DOC, 	0x0100 );/* set SS and SM bit */
00002a  f44f7180          MOV      r1,#0x100
00002e  2001              MOVS     r0,#1
000030  47a0              BLX      r4
;;;344    	ILI9326_WriteCMD( ILI9326_R002_DWC, 	0x0100 );/* set 1 line inversion */
000032  f44f7180          MOV      r1,#0x100
000036  2002              MOVS     r0,#2
000038  47a0              BLX      r4
;;;345    	ILI9326_WriteCMD( ILI9326_R003_EM, 		0x1030 );/* set GRAM write direction and BGR=1. */
00003a  f2410130          MOV      r1,#0x1030
00003e  2003              MOVS     r0,#3
000040  47a0              BLX      r4
;;;346    	ILI9326_WriteCMD( ILI9326_R008_DC2, 	0x0202 );/* set the back porch and front porch */
000042  f2402102          MOV      r1,#0x202
000046  2008              MOVS     r0,#8
000048  47a0              BLX      r4
;;;347    	ILI9326_WriteCMD( ILI9326_R009_DC3, 	0x0000 );/* set non-display area refresh cycle ISC[3:0] */
00004a  2100              MOVS     r1,#0
00004c  2009              MOVS     r0,#9
00004e  47a0              BLX      r4
;;;348    	ILI9326_WriteCMD( ILI9326_R00C_EDIC1,	0x0000 );/* RGB interface setting */
000050  2100              MOVS     r1,#0
000052  200c              MOVS     r0,#0xc
000054  47a0              BLX      r4
;;;349    	ILI9326_WriteCMD( ILI9326_R00F_EDIC2,	0x0000 );/* RGB interface polarity */
000056  2100              MOVS     r1,#0
000058  200f              MOVS     r0,#0xf
00005a  47a0              BLX      r4
;;;350    
;;;351    	/**************Power On sequence **************** // */
;;;352    	ILI9326_WriteCMD( ILI9326_R100_PC1, 	0x0000 );/* SAP, BT[3:0], AP, DSTB, SLP, STB */
00005c  2100              MOVS     r1,#0
00005e  f44f7080          MOV      r0,#0x100
000062  47a0              BLX      r4
;;;353    	ILI9326_WriteCMD( ILI9326_R102_PC3, 	0x0000 );/* VREG1OUT voltage */
000064  2100              MOVS     r1,#0
000066  f44f7081          MOV      r0,#0x102
00006a  47a0              BLX      r4
;;;354    	ILI9326_WriteCMD( ILI9326_R103_PC4, 	0x0000 );/* VDV[4:0] for VCOM amplitude */
00006c  2100              MOVS     r1,#0
00006e  f2401003          MOV      r0,#0x103
000072  47a0              BLX      r4
;;;355    	
;;;356    	DelaymS( 100 );
000074  2064              MOVS     r0,#0x64
000076  47a8              BLX      r5
;;;357    	
;;;358    	ILI9326_WriteCMD( ILI9326_R100_PC1, 	0x1190 ); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
000078  f2411190          MOV      r1,#0x1190
00007c  f44f7080          MOV      r0,#0x100
000080  47a0              BLX      r4
;;;359    	ILI9326_WriteCMD( ILI9326_R101_PC2, 	0x0227 ); /* DC1[2:0], DC0[2:0], VC[2:0] */
000082  f2402127          MOV      r1,#0x227
000086  f2401001          MOV      r0,#0x101
00008a  47a0              BLX      r4
;;;360    	
;;;361    	DelaymS( 100 );
00008c  2064              MOVS     r0,#0x64
00008e  47a8              BLX      r5
;;;362    	
;;;363    	ILI9326_WriteCMD( ILI9326_R102_PC3, 	0x01BD ); /* VREG1OUT voltage */
000090  f24011bd          MOV      r1,#0x1bd
000094  f44f7081          MOV      r0,#0x102
000098  47a0              BLX      r4
;;;364    	
;;;365    	DelaymS( 100 );
00009a  2064              MOVS     r0,#0x64
00009c  47a8              BLX      r5
;;;366    	
;;;367    	ILI9326_WriteCMD( ILI9326_R103_PC4,		0x2D00 );/* VDV[4:0] for VCOM amplitude */
00009e  f44f5134          MOV      r1,#0x2d00
0000a2  f2401003          MOV      r0,#0x103
0000a6  47a0              BLX      r4
;;;368    	ILI9326_WriteCMD( ILI9326_R281_VHV, 	0x000E );/* VCM[5:0] for VCOMH */
0000a8  210e              MOVS     r1,#0xe
0000aa  f2402081          MOV      r0,#0x281
0000ae  47a0              BLX      r4
;;;369    	
;;;370    	
;;;371    	ILI9326_WriteCMD( ILI9326_R200_HA, 		0x0000 );/* GRAM horizontal Address */
0000b0  2100              MOVS     r1,#0
0000b2  f44f7000          MOV      r0,#0x200
0000b6  47a0              BLX      r4
;;;372    	ILI9326_WriteCMD( ILI9326_R201_VA, 		0x0000 );/* GRAM Vertical Address */
0000b8  2100              MOVS     r1,#0
0000ba  f2402001          MOV      r0,#0x201
0000be  47a0              BLX      r4
;;;373    
;;;374    	/* ----------- Adjust the Gamma    Curve ----------// */
;;;375    	ILI9326_WriteCMD( ILI9326_R300_YC1,		0x0000 );
0000c0  2100              MOVS     r1,#0
0000c2  f44f7040          MOV      r0,#0x300
0000c6  47a0              BLX      r4
;;;376    	ILI9326_WriteCMD( ILI9326_R301_YC2, 	0x0707 );
0000c8  f2407107          MOV      r1,#0x707
0000cc  f2403001          MOV      r0,#0x301
0000d0  47a0              BLX      r4
;;;377    	ILI9326_WriteCMD( ILI9326_R302_YC3, 	0x0606 );
0000d2  f2406106          MOV      r1,#0x606
0000d6  f2403002          MOV      r0,#0x302
0000da  47a0              BLX      r4
;;;378    	ILI9326_WriteCMD( ILI9326_R303_YC4, 	0x0000 );
0000dc  2100              MOVS     r1,#0
0000de  f2403003          MOV      r0,#0x303
0000e2  47a0              BLX      r4
;;;379    	ILI9326_WriteCMD( ILI9326_R304_YC5, 	0x0D00 );
0000e4  f44f6150          MOV      r1,#0xd00
0000e8  f44f7041          MOV      r0,#0x304
0000ec  47a0              BLX      r4
;;;380    	ILI9326_WriteCMD( ILI9326_R305_YC6, 	0x0706 );
0000ee  f2407106          MOV      r1,#0x706
0000f2  f2403005          MOV      r0,#0x305
0000f6  47a0              BLX      r4
;;;381    	ILI9326_WriteCMD( ILI9326_R306_YC7, 	0x0005 );
0000f8  2105              MOVS     r1,#5
0000fa  f2403006          MOV      r0,#0x306
0000fe  47a0              BLX      r4
;;;382    	ILI9326_WriteCMD( ILI9326_R307_YC8, 	0x0007 );
000100  2107              MOVS     r1,#7
000102  f2403007          MOV      r0,#0x307
000106  47a0              BLX      r4
;;;383    
;;;384    	ILI9326_WriteCMD( ILI9326_R308_YC9, 	0x0000 );
000108  2100              MOVS     r1,#0
00010a  f44f7042          MOV      r0,#0x308
00010e  47a0              BLX      r4
;;;385    	ILI9326_WriteCMD( ILI9326_R309_YC10, 	0x000A );
000110  210a              MOVS     r1,#0xa
000112  f2403009          MOV      r0,#0x309
000116  47a0              BLX      r4
;;;386    
;;;387    	/*------------------ Set GRAM area ---------------// */
;;;388    	ILI9326_WriteCMD( ILI9326_R210_HSA, 	0x0000 );/* Horizontal GRAM Start Address */
000118  2100              MOVS     r1,#0
00011a  f44f7004          MOV      r0,#0x210
00011e  47a0              BLX      r4
;;;389    	ILI9326_WriteCMD( ILI9326_R211_HEA, 	0x00EF );/* Horizontal GRAM End Address */
000120  21ef              MOVS     r1,#0xef
000122  f2402011          MOV      r0,#0x211
000126  47a0              BLX      r4
;;;390    	ILI9326_WriteCMD( ILI9326_R212_VSA, 	0x0000 );/* Vertical GRAM Start Address */
000128  2100              MOVS     r1,#0
00012a  f2402012          MOV      r0,#0x212
00012e  47a0              BLX      r4
;;;391    	ILI9326_WriteCMD( ILI9326_R400_BINL, 	0x3100 );/*    / * Gate Scan Line 400 lines * / */
000130  f44f5144          MOV      r1,#0x3100
000134  f44f6080          MOV      r0,#0x400
000138  47a0              BLX      r4
;;;392    	ILI9326_WriteCMD( ILI9326_R401_BIDC, 	0x0001 );/* NDL,VLE, REV */
00013a  2101              MOVS     r1,#1
00013c  f2404001          MOV      r0,#0x401
000140  47a0              BLX      r4
;;;393    	ILI9326_WriteCMD( ILI9326_R404_BIVSC, 0x0000 );/* set scrolling line */
000142  2100              MOVS     r1,#0
000144  f2404004          MOV      r0,#0x404
000148  47a0              BLX      r4
;;;394    
;;;395    /*-------------- Partial Display Control ---------// */
;;;396    	ILI9326_WriteCMD( ILI9326_R500_PTDP, 0x0000 );/*Partial Image 1 Display Position */
00014a  2100              MOVS     r1,#0
00014c  f44f60a0          MOV      r0,#0x500
000150  47a0              BLX      r4
;;;397    	ILI9326_WriteCMD( ILI9326_R501_PTSA, 0x0000 );/*Partial Image 1 RAM Start/End Address */
000152  2100              MOVS     r1,#0
000154  f2405001          MOV      r0,#0x501
000158  47a0              BLX      r4
;;;398    	ILI9326_WriteCMD( ILI9326_R502_PTEA, 0x0000 );/*Partial Image 1 RAM Start/End Address */
00015a  2100              MOVS     r1,#0
00015c  f2405002          MOV      r0,#0x502
000160  47a0              BLX      r4
;;;399    	ILI9326_WriteCMD( ILI9326_R503_PIDP, 0x0000 );/*Partial Image 2 Display Position */
000162  2100              MOVS     r1,#0
000164  f2405003          MOV      r0,#0x503
000168  47a0              BLX      r4
;;;400    	ILI9326_WriteCMD( ILI9326_R504_PIRS, 0x0000 );/*Partial Image 2 RAM Start/End Address */
00016a  2100              MOVS     r1,#0
00016c  f2405004          MOV      r0,#0x504
000170  47a0              BLX      r4
;;;401    	ILI9326_WriteCMD( ILI9326_R505_PIRE, 0x0000 );/*Partial Image 2 RAM Start/End Address */
000172  2100              MOVS     r1,#0
000174  f2405005          MOV      r0,#0x505
000178  47a0              BLX      r4
;;;402    
;;;403    /*-------------- Panel Control -------------------// */
;;;404    	ILI9326_WriteCMD( ILI9326_R010_PIC1, 0x0010 );/*DIVI[1:0];RTNI[4:0] */
00017a  2110              MOVS     r1,#0x10
00017c  4608              MOV      r0,r1
00017e  47a0              BLX      r4
;;;405    	ILI9326_WriteCMD( ILI9326_R011_PIC2, 0x0600 );/*NOWI[2:0];SDTI[2:0] */
000180  f44f61c0          MOV      r1,#0x600
000184  2011              MOVS     r0,#0x11
000186  47a0              BLX      r4
;;;406    	ILI9326_WriteCMD( ILI9326_R013_PIC4, 0x0002 );/*DIVE[1:0];RTNE[5:0] */
000188  2102              MOVS     r1,#2
00018a  2013              MOVS     r0,#0x13
00018c  47a0              BLX      r4
;;;407    
;;;408    	ILI9326_WriteCMD( ILI9326_R007_DC1, 0x0173 );/* 262K color and display ON */
00018e  f2401173          MOV      r1,#0x173
000192  2007              MOVS     r0,#7
000194  47a0              BLX      r4
;;;409    }
000196  bd70              POP      {r4-r6,pc}
;;;410    /**************************************************************************************************
                          ENDP

                  |L10.408|
                          DCD      LCD_DelaymS
                  |L10.412|
                          DCD      ILI9326_WriteCommand

                          AREA ||i.ILI9326_ReadData||, CODE, READONLY, ALIGN=2

                  ILI9326_ReadData PROC
;;;137    *******************************************************************************/
;;;138    unsigned short ILI9326_ReadData(void)
000000  2000              MOVS     r0,#0
;;;139    {
;;;140    	unsigned short Data	=	0;
;;;141    #if	1	//Bus16Bit
;;;142    	ILI9326Crl(RD);	//LCD_RD_LOW;
000002  490a              LDR      r1,|L11.44|
000004  6809              LDR      r1,[r1,#0]  ; ILI9326
000006  8989              LDRH     r1,[r1,#0xc]
000008  4a08              LDR      r2,|L11.44|
00000a  6812              LDR      r2,[r2,#0]  ; ILI9326
00000c  6892              LDR      r2,[r2,#8]
00000e  6151              STR      r1,[r2,#0x14]
;;;143    	Data	=	ILI9326_DATABUS_PORT->IDR;
000010  4906              LDR      r1,|L11.44|
000012  6809              LDR      r1,[r1,#0]  ; ILI9326
000014  6b89              LDR      r1,[r1,#0x38]
000016  6889              LDR      r1,[r1,#8]
000018  b288              UXTH     r0,r1
;;;144    	ILI9326Set(RD);	//LCD_RD_HIGH;
00001a  4904              LDR      r1,|L11.44|
00001c  6809              LDR      r1,[r1,#0]  ; ILI9326
00001e  8989              LDRH     r1,[r1,#0xc]
000020  4a02              LDR      r2,|L11.44|
000022  6812              LDR      r2,[r2,#0]  ; ILI9326
000024  6892              LDR      r2,[r2,#8]
000026  6111              STR      r1,[r2,#0x10]
;;;145    #else	
;;;146    	ILI9326Crl(RD);	//LCD_RD_LOW;
;;;147    	Data	=	ILI9326_DATABUS_PORT->IDR;
;;;148    	ILI9326et(RD);	//LCD_RD_HIGH;
;;;149    	
;;;150    	Data	<<=8;
;;;151    	
;;;152    	ILI9326Crl(RD);	//LCD_RD_LOW;
;;;153    	Data	|=	ILI9326_DATABUS_PORT->IDR;
;;;154    	ILI9326Set(RD);	//LCD_RD_HIGH;
;;;155    #endif	
;;;156    	return Data;
;;;157    }
000028  4770              BX       lr
;;;158    /*******************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      ILI9326

                          AREA ||i.ILI9326_ReadGRAM||, CODE, READONLY, ALIGN=2

                  ILI9326_ReadGRAM PROC
;;;294    *******************************************************************************/
;;;295    void ILI9326_ReadGRAM(unsigned	short* RAM,unsigned long length)
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;297    	unsigned	long	i	=	0;
000006  2400              MOVS     r4,#0
;;;298    	ILI9326Crl(CS);	//LCD_CS_LOW;
000008  4815              LDR      r0,|L12.96|
00000a  6800              LDR      r0,[r0,#0]  ; ILI9326
00000c  8d80              LDRH     r0,[r0,#0x2c]
00000e  4914              LDR      r1,|L12.96|
000010  6809              LDR      r1,[r1,#0]  ; ILI9326
000012  6a89              LDR      r1,[r1,#0x28]
000014  6148              STR      r0,[r1,#0x14]
;;;299    	ILI9326_WriteAddr(ILI9326_R202_GDRW);
000016  f2402002          MOV      r0,#0x202
00001a  f7fffffe          BL       ILI9326_WriteAddr
;;;300    	GPIO_Configuration_IPU	(ILI9326_DATABUS_PORT,ILI9326_DATABUS_Pin);			//将GPIO相应管脚配置为上拉输入模式----V20170605
00001e  4a10              LDR      r2,|L12.96|
000020  6812              LDR      r2,[r2,#0]  ; ILI9326
000022  8f91              LDRH     r1,[r2,#0x3c]
000024  4a0e              LDR      r2,|L12.96|
000026  6812              LDR      r2,[r2,#0]  ; ILI9326
000028  6b90              LDR      r0,[r2,#0x38]
00002a  f7fffffe          BL       GPIO_Configuration_IPU
;;;301    	for(i=0;i<length;i++)
00002e  bf00              NOP      
000030  e004              B        |L12.60|
                  |L12.50|
;;;302    	{
;;;303    		RAM[i]=ILI9326_ReadData();
000032  f7fffffe          BL       ILI9326_ReadData
000036  f8250014          STRH     r0,[r5,r4,LSL #1]
00003a  1c64              ADDS     r4,r4,#1              ;301
                  |L12.60|
00003c  42b4              CMP      r4,r6                 ;301
00003e  d3f8              BCC      |L12.50|
;;;304    	}
;;;305    	ILI9326Set(CS);	//LCD_CS_HIGH;
000040  4807              LDR      r0,|L12.96|
000042  6800              LDR      r0,[r0,#0]  ; ILI9326
000044  8d80              LDRH     r0,[r0,#0x2c]
000046  4906              LDR      r1,|L12.96|
000048  6809              LDR      r1,[r1,#0]  ; ILI9326
00004a  6a89              LDR      r1,[r1,#0x28]
00004c  6108              STR      r0,[r1,#0x10]
;;;306    	GPIO_Configuration_OPP50	(ILI9326_DATABUS_PORT,ILI9326_DATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
00004e  4a04              LDR      r2,|L12.96|
000050  6812              LDR      r2,[r2,#0]  ; ILI9326
000052  8f91              LDRH     r1,[r2,#0x3c]
000054  4a02              LDR      r2,|L12.96|
000056  6812              LDR      r2,[r2,#0]  ; ILI9326
000058  6b90              LDR      r0,[r2,#0x38]
00005a  f7fffffe          BL       GPIO_Configuration_OPP50
;;;307    }
00005e  bd70              POP      {r4-r6,pc}
;;;308    
                          ENDP

                  |L12.96|
                          DCD      ILI9326

                          AREA ||i.ILI9326_ReadRegister||, CODE, READONLY, ALIGN=2

                  ILI9326_ReadRegister PROC
;;;166    *******************************************************************************/
;;;167    unsigned short ILI9326_ReadRegister(unsigned	short	Index)
000000  b570              PUSH     {r4-r6,lr}
;;;168    {
000002  4604              MOV      r4,r0
;;;169    	unsigned short Data	=	0;
000004  2500              MOVS     r5,#0
;;;170    	ILI9326Crl(CS);	//LCD_CS_LOW;
000006  4813              LDR      r0,|L13.84|
000008  6800              LDR      r0,[r0,#0]  ; ILI9326
00000a  8d80              LDRH     r0,[r0,#0x2c]
00000c  4911              LDR      r1,|L13.84|
00000e  6809              LDR      r1,[r1,#0]  ; ILI9326
000010  6a89              LDR      r1,[r1,#0x28]
000012  6148              STR      r0,[r1,#0x14]
;;;171    	//---------------------Write Index
;;;172    	ILI9326_WriteAddr(Index);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       ILI9326_WriteAddr
;;;173    	//---------------------Read Data
;;;174    	GPIO_Configuration_IPU	(ILI9326_DATABUS_PORT,ILI9326_DATABUS_Pin);			//将GPIO相应管脚配置为上拉输入模式----V20170605
00001a  4a0e              LDR      r2,|L13.84|
00001c  6812              LDR      r2,[r2,#0]  ; ILI9326
00001e  8f91              LDRH     r1,[r2,#0x3c]
000020  4a0c              LDR      r2,|L13.84|
000022  6812              LDR      r2,[r2,#0]  ; ILI9326
000024  6b90              LDR      r0,[r2,#0x38]
000026  f7fffffe          BL       GPIO_Configuration_IPU
;;;175    	Data	=	ILI9326_ReadData();
00002a  f7fffffe          BL       ILI9326_ReadData
00002e  4605              MOV      r5,r0
;;;176    	ILI9326Set(CS);	//LCD_CS_HIGH;
000030  4808              LDR      r0,|L13.84|
000032  6800              LDR      r0,[r0,#0]  ; ILI9326
000034  8d80              LDRH     r0,[r0,#0x2c]
000036  4907              LDR      r1,|L13.84|
000038  6809              LDR      r1,[r1,#0]  ; ILI9326
00003a  6a89              LDR      r1,[r1,#0x28]
00003c  6108              STR      r0,[r1,#0x10]
;;;177    	GPIO_Configuration_OPP50	(ILI9326_DATABUS_PORT,ILI9326_DATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605	
00003e  4a05              LDR      r2,|L13.84|
000040  6812              LDR      r2,[r2,#0]  ; ILI9326
000042  8f91              LDRH     r1,[r2,#0x3c]
000044  4a03              LDR      r2,|L13.84|
000046  6812              LDR      r2,[r2,#0]  ; ILI9326
000048  6b90              LDR      r0,[r2,#0x38]
00004a  f7fffffe          BL       GPIO_Configuration_OPP50
;;;178    	return Data;
00004e  4628              MOV      r0,r5
;;;179    }
000050  bd70              POP      {r4-r6,pc}
;;;180    /*******************************************************************************
                          ENDP

000052  0000              DCW      0x0000
                  |L13.84|
                          DCD      ILI9326

                          AREA ||i.ILI9326_Reset||, CODE, READONLY, ALIGN=2

                  ILI9326_Reset PROC
;;;119    *******************************************************************************/
;;;120    void ILI9326_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122    	ILI9326Set(RST);
000002  480f              LDR      r0,|L14.64|
000004  6800              LDR      r0,[r0,#0]  ; ILI9326
000006  8a80              LDRH     r0,[r0,#0x14]
000008  490d              LDR      r1,|L14.64|
00000a  6809              LDR      r1,[r1,#0]  ; ILI9326
00000c  6909              LDR      r1,[r1,#0x10]
00000e  6108              STR      r0,[r1,#0x10]
;;;123    	LCD_DelaymS(5);				//SysTick延时nmS
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       LCD_DelaymS
;;;124    	ILI9326Crl(RST);;
000016  480a              LDR      r0,|L14.64|
000018  6800              LDR      r0,[r0,#0]  ; ILI9326
00001a  8a80              LDRH     r0,[r0,#0x14]
00001c  4908              LDR      r1,|L14.64|
00001e  6809              LDR      r1,[r1,#0]  ; ILI9326
000020  6909              LDR      r1,[r1,#0x10]
000022  6148              STR      r0,[r1,#0x14]
;;;125    	LCD_DelaymS(5);				//SysTick延时nmS
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       LCD_DelaymS
;;;126    	ILI9326Set(RST);
00002a  4805              LDR      r0,|L14.64|
00002c  6800              LDR      r0,[r0,#0]  ; ILI9326
00002e  8a80              LDRH     r0,[r0,#0x14]
000030  4903              LDR      r1,|L14.64|
000032  6809              LDR      r1,[r1,#0]  ; ILI9326
000034  6909              LDR      r1,[r1,#0x10]
000036  6108              STR      r0,[r1,#0x10]
;;;127    	LCD_DelaymS(10);				//SysTick延时nmS
000038  200a              MOVS     r0,#0xa
00003a  f7fffffe          BL       LCD_DelaymS
;;;128    }
00003e  bd10              POP      {r4,pc}
;;;129    /*******************************************************************************
                          ENDP

                  |L14.64|
                          DCD      ILI9326

                          AREA ||i.ILI9326_SetBackground||, CODE, READONLY, ALIGN=2

                  ILI9326_SetBackground PROC
;;;733    **************************************************************************************************/
;;;734    void ILI9326_SetBackground(  u16 BackColor )
000000  b510              PUSH     {r4,lr}
;;;735    {
000002  4604              MOV      r4,r0
;;;736    	ILI9326->Data.BColor	=	BackColor;
000004  4803              LDR      r0,|L15.20|
000006  6800              LDR      r0,[r0,#0]  ; ILI9326
000008  f8a04052          STRH     r4,[r0,#0x52]
;;;737    	ILI9326_Clean(BackColor);	//清除屏幕函数
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       ILI9326_Clean
;;;738    }
000012  bd10              POP      {r4,pc}
;;;739    
                          ENDP

                  |L15.20|
                          DCD      ILI9326

                          AREA ||i.ILI9326_SetWindowAddress||, CODE, READONLY, ALIGN=2

                  ILI9326_SetWindowAddress PROC
;;;425    **************************************************************************************************/
;;;426    void ILI9326_SetWindowAddress( 
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;427    															unsigned short x1,		//水平起始点
;;;428    															unsigned short y1,		//水平终止点
;;;429    															unsigned short x2,		//垂直起始点
;;;430    															unsigned short y2			//垂直终止点
;;;431    															)
;;;432    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;433      void(*ILI9326_WriteCMD)(unsigned short Index,unsigned short Command)	=	ILI9326->Display.WriteCommand;//LcdDisplay.WriteCommand
00000c  4880              LDR      r0,|L16.528|
00000e  6800              LDR      r0,[r0,#0]  ; ILI9326
000010  6ec4              LDR      r4,[r0,#0x6c]
;;;434    	unsigned short MaxH,MaxV;
;;;435    	unsigned short Model	=	0x5030;
000012  f2450030          MOV      r0,#0x5030
000016  9000              STR      r0,[sp,#0]
;;;436    
;;;437    	eRotate	Rotate	=	ILI9326->Flag.Rotate;
000018  487d              LDR      r0,|L16.528|
00001a  6800              LDR      r0,[r0,#0]  ; ILI9326
00001c  f890b05c          LDRB     r11,[r0,#0x5c]
;;;438    	
;;;439    	MaxH	=	ILI9326->Data.MaxH;
000020  487b              LDR      r0,|L16.528|
000022  6800              LDR      r0,[r0,#0]  ; ILI9326
000024  f8b09040          LDRH     r9,[r0,#0x40]
;;;440    	MaxV	=	ILI9326->Data.MaxV;
000028  4879              LDR      r0,|L16.528|
00002a  6800              LDR      r0,[r0,#0]  ; ILI9326
00002c  f8b0a042          LDRH     r10,[r0,#0x42]
;;;441    	
;;;442    	switch(Rotate)
000030  f1bb0f00          CMP      r11,#0
000034  d006              BEQ      |L16.68|
000036  f1bb0f01          CMP      r11,#1
00003a  d027              BEQ      |L16.140|
00003c  f1bb0f02          CMP      r11,#2
000040  d17e              BNE      |L16.320|
000042  e04f              B        |L16.228|
                  |L16.68|
;;;443    	{
;;;444    		case 	Draw_Rotate_0D:
;;;445    					ILI9326->Data.HSX	=	x1;
000044  4872              LDR      r0,|L16.528|
000046  6800              LDR      r0,[r0,#0]  ; ILI9326
000048  f8a05044          STRH     r5,[r0,#0x44]
;;;446    					ILI9326->Data.HEX	=	x2;
00004c  4870              LDR      r0,|L16.528|
00004e  6800              LDR      r0,[r0,#0]  ; ILI9326
000050  f8a07046          STRH     r7,[r0,#0x46]
;;;447    					ILI9326->Data.VSY	=	y1;
000054  486e              LDR      r0,|L16.528|
000056  6800              LDR      r0,[r0,#0]  ; ILI9326
000058  f8a06048          STRH     r6,[r0,#0x48]
;;;448    					ILI9326->Data.VEY	=	y2;	
00005c  486c              LDR      r0,|L16.528|
00005e  6800              LDR      r0,[r0,#0]  ; ILI9326
000060  f8a0804a          STRH     r8,[r0,#0x4a]
;;;449    					ILI9326->Data.HXA	=	ILI9326->Data.HSX;
000064  486a              LDR      r0,|L16.528|
000066  6800              LDR      r0,[r0,#0]  ; ILI9326
000068  f8b01044          LDRH     r1,[r0,#0x44]
00006c  4868              LDR      r0,|L16.528|
00006e  6800              LDR      r0,[r0,#0]  ; ILI9326
000070  f8a0104c          STRH     r1,[r0,#0x4c]
;;;450    					ILI9326->Data.VYA	=	ILI9326->Data.VSY;	
000074  4866              LDR      r0,|L16.528|
000076  6800              LDR      r0,[r0,#0]  ; ILI9326
000078  f8b01048          LDRH     r1,[r0,#0x48]
00007c  4864              LDR      r0,|L16.528|
00007e  6800              LDR      r0,[r0,#0]  ; ILI9326
000080  f8a0104e          STRH     r1,[r0,#0x4e]
;;;451    					Model	=	0x5030;
000084  f2450030          MOV      r0,#0x5030
000088  9000              STR      r0,[sp,#0]
;;;452    			break;
00008a  e08d              B        |L16.424|
                  |L16.140|
;;;453    		case 	Draw_Rotate_90D:
;;;454    					ILI9326->Data.HSX	=	y1;
00008c  4860              LDR      r0,|L16.528|
00008e  6800              LDR      r0,[r0,#0]  ; ILI9326
000090  f8a06044          STRH     r6,[r0,#0x44]
;;;455    					ILI9326->Data.HEX	=	y2;	
000094  485e              LDR      r0,|L16.528|
000096  6800              LDR      r0,[r0,#0]  ; ILI9326
000098  f8a08046          STRH     r8,[r0,#0x46]
;;;456    					ILI9326->Data.VSY	=	MaxV	-	x2	-	1;
00009c  ebaa0007          SUB      r0,r10,r7
0000a0  1e40              SUBS     r0,r0,#1
0000a2  b281              UXTH     r1,r0
0000a4  485a              LDR      r0,|L16.528|
0000a6  6800              LDR      r0,[r0,#0]  ; ILI9326
0000a8  f8a01048          STRH     r1,[r0,#0x48]
;;;457    					ILI9326->Data.VEY	=	MaxV	-	x1	-	1;	
0000ac  ebaa0005          SUB      r0,r10,r5
0000b0  1e40              SUBS     r0,r0,#1
0000b2  b281              UXTH     r1,r0
0000b4  4856              LDR      r0,|L16.528|
0000b6  6800              LDR      r0,[r0,#0]  ; ILI9326
0000b8  f8a0104a          STRH     r1,[r0,#0x4a]
;;;458    					ILI9326->Data.HXA	=	ILI9326->Data.HSX;
0000bc  4854              LDR      r0,|L16.528|
0000be  6800              LDR      r0,[r0,#0]  ; ILI9326
0000c0  f8b01044          LDRH     r1,[r0,#0x44]
0000c4  4852              LDR      r0,|L16.528|
0000c6  6800              LDR      r0,[r0,#0]  ; ILI9326
0000c8  f8a0104c          STRH     r1,[r0,#0x4c]
;;;459    					ILI9326->Data.VYA	=	ILI9326->Data.VEY;
0000cc  4850              LDR      r0,|L16.528|
0000ce  6800              LDR      r0,[r0,#0]  ; ILI9326
0000d0  f8b0104a          LDRH     r1,[r0,#0x4a]
0000d4  484e              LDR      r0,|L16.528|
0000d6  6800              LDR      r0,[r0,#0]  ; ILI9326
0000d8  f8a0104e          STRH     r1,[r0,#0x4e]
;;;460    					Model	=	0X5098;								//GRAM(Graphics RAM--图形内存) Data Write (R202h)准备写入
0000dc  f2450098          MOV      r0,#0x5098
0000e0  9000              STR      r0,[sp,#0]
;;;461    //					Model	=	0X5091;								//GRAM(Graphics RAM--图形内存) Data Write (R202h)准备写入
;;;462    			break;
0000e2  e061              B        |L16.424|
                  |L16.228|
;;;463    		case 	Draw_Rotate_180D:
;;;464    					ILI9326->Data.HSX	=	MaxH	-	x2	-	1;
0000e4  eba90007          SUB      r0,r9,r7
0000e8  1e40              SUBS     r0,r0,#1
0000ea  b281              UXTH     r1,r0
0000ec  4848              LDR      r0,|L16.528|
0000ee  6800              LDR      r0,[r0,#0]  ; ILI9326
0000f0  f8a01044          STRH     r1,[r0,#0x44]
;;;465    					ILI9326->Data.HEX	=	MaxH	-	x1	-	1;
0000f4  eba90005          SUB      r0,r9,r5
0000f8  1e40              SUBS     r0,r0,#1
0000fa  b281              UXTH     r1,r0
0000fc  4844              LDR      r0,|L16.528|
0000fe  6800              LDR      r0,[r0,#0]  ; ILI9326
000100  f8a01046          STRH     r1,[r0,#0x46]
;;;466    					ILI9326->Data.VSY	=	MaxV	-	y2	-	1;
000104  ebaa0008          SUB      r0,r10,r8
000108  1e40              SUBS     r0,r0,#1
00010a  b281              UXTH     r1,r0
00010c  4840              LDR      r0,|L16.528|
00010e  6800              LDR      r0,[r0,#0]  ; ILI9326
000110  f8a01048          STRH     r1,[r0,#0x48]
;;;467    					ILI9326->Data.VEY	=	MaxV	-	y1	-	1;	
000114  ebaa0006          SUB      r0,r10,r6
000118  1e40              SUBS     r0,r0,#1
00011a  b281              UXTH     r1,r0
00011c  483c              LDR      r0,|L16.528|
00011e  6800              LDR      r0,[r0,#0]  ; ILI9326
000120  f8a0104a          STRH     r1,[r0,#0x4a]
;;;468    					ILI9326->Data.HXA	=	ILI9326->Data.HEX;
000124  483a              LDR      r0,|L16.528|
000126  6800              LDR      r0,[r0,#0]  ; ILI9326
000128  f8b01046          LDRH     r1,[r0,#0x46]
00012c  4838              LDR      r0,|L16.528|
00012e  6800              LDR      r0,[r0,#0]  ; ILI9326
000130  f8a0104c          STRH     r1,[r0,#0x4c]
;;;469    					ILI9326->Data.VYA	=	ILI9326->Data.VEY;	
000134  4836              LDR      r0,|L16.528|
000136  6800              LDR      r0,[r0,#0]  ; ILI9326
000138  f8b0104a          LDRH     r1,[r0,#0x4a]
00013c  4834              LDR      r0,|L16.528|
00013e  e000              B        |L16.322|
                  |L16.320|
000140  e006              B        |L16.336|
                  |L16.322|
000142  6800              LDR      r0,[r0,#0]  ; ILI9326
000144  f8a0104e          STRH     r1,[r0,#0x4e]
;;;470    					Model	=	0X5000;
000148  f44f40a0          MOV      r0,#0x5000
00014c  9000              STR      r0,[sp,#0]
;;;471    			break;
00014e  e02b              B        |L16.424|
                  |L16.336|
;;;472    		default:
;;;473    					ILI9326->Data.HSX	=	MaxH	-	y2	-	1;
000150  eba90008          SUB      r0,r9,r8
000154  1e40              SUBS     r0,r0,#1
000156  b281              UXTH     r1,r0
000158  482d              LDR      r0,|L16.528|
00015a  6800              LDR      r0,[r0,#0]  ; ILI9326
00015c  f8a01044          STRH     r1,[r0,#0x44]
;;;474    					ILI9326->Data.HEX	=	MaxH	-	y1	-	1;
000160  eba90006          SUB      r0,r9,r6
000164  1e40              SUBS     r0,r0,#1
000166  b281              UXTH     r1,r0
000168  4829              LDR      r0,|L16.528|
00016a  6800              LDR      r0,[r0,#0]  ; ILI9326
00016c  f8a01046          STRH     r1,[r0,#0x46]
;;;475    					ILI9326->Data.VSY	=	x1;
000170  4827              LDR      r0,|L16.528|
000172  6800              LDR      r0,[r0,#0]  ; ILI9326
000174  f8a05048          STRH     r5,[r0,#0x48]
;;;476    					ILI9326->Data.VEY	=	x2;	
000178  4825              LDR      r0,|L16.528|
00017a  6800              LDR      r0,[r0,#0]  ; ILI9326
00017c  f8a0704a          STRH     r7,[r0,#0x4a]
;;;477    					ILI9326->Data.HXA	=	ILI9326->Data.HEX;
000180  4823              LDR      r0,|L16.528|
000182  6800              LDR      r0,[r0,#0]  ; ILI9326
000184  f8b01046          LDRH     r1,[r0,#0x46]
000188  4821              LDR      r0,|L16.528|
00018a  6800              LDR      r0,[r0,#0]  ; ILI9326
00018c  f8a0104c          STRH     r1,[r0,#0x4c]
;;;478    					ILI9326->Data.VYA	=	ILI9326->Data.VSY;
000190  481f              LDR      r0,|L16.528|
000192  6800              LDR      r0,[r0,#0]  ; ILI9326
000194  f8b01048          LDRH     r1,[r0,#0x48]
000198  481d              LDR      r0,|L16.528|
00019a  6800              LDR      r0,[r0,#0]  ; ILI9326
00019c  f8a0104e          STRH     r1,[r0,#0x4e]
;;;479    					Model	=	0X5028;
0001a0  f2450028          MOV      r0,#0x5028
0001a4  9000              STR      r0,[sp,#0]
;;;480    			break;
0001a6  bf00              NOP      
                  |L16.424|
0001a8  bf00              NOP                            ;452
;;;481    	}
;;;482    	//======================================区域设置
;;;483    	ILI9326_WriteCMD(ILI9326_R210_HSA,ILI9326->Data.HSX);		//Window Horizontal RAM Address Start(R210h)		//水平
0001aa  4819              LDR      r0,|L16.528|
0001ac  6800              LDR      r0,[r0,#0]  ; ILI9326
0001ae  f8b01044          LDRH     r1,[r0,#0x44]
0001b2  f44f7004          MOV      r0,#0x210
0001b6  47a0              BLX      r4
;;;484    	ILI9326_WriteCMD(ILI9326_R211_HEA,ILI9326->Data.HEX);		//Window Horizontal RAM Address End(R211h)			//水平
0001b8  4815              LDR      r0,|L16.528|
0001ba  6800              LDR      r0,[r0,#0]  ; ILI9326
0001bc  f8b01046          LDRH     r1,[r0,#0x46]
0001c0  f2402011          MOV      r0,#0x211
0001c4  47a0              BLX      r4
;;;485    	ILI9326_WriteCMD(ILI9326_R212_VSA,ILI9326->Data.VSY);		//Window Vertical RAM Address Start (R212h)			//垂直
0001c6  4812              LDR      r0,|L16.528|
0001c8  6800              LDR      r0,[r0,#0]  ; ILI9326
0001ca  f8b01048          LDRH     r1,[r0,#0x48]
0001ce  f2402012          MOV      r0,#0x212
0001d2  47a0              BLX      r4
;;;486    	ILI9326_WriteCMD(ILI9326_R213_VEA,ILI9326->Data.VEY);		//Window Vertical RAM Address End (R213h)				//垂直
0001d4  480e              LDR      r0,|L16.528|
0001d6  6800              LDR      r0,[r0,#0]  ; ILI9326
0001d8  f8b0104a          LDRH     r1,[r0,#0x4a]
0001dc  f2402013          MOV      r0,#0x213
0001e0  47a0              BLX      r4
;;;487    	//======================================设置起始点
;;;488    	ILI9326_WriteCMD( ILI9326_R200_HA, ILI9326->Data.HSX );
0001e2  480b              LDR      r0,|L16.528|
0001e4  6800              LDR      r0,[r0,#0]  ; ILI9326
0001e6  f8b01044          LDRH     r1,[r0,#0x44]
0001ea  f44f7000          MOV      r0,#0x200
0001ee  47a0              BLX      r4
;;;489    	ILI9326_WriteCMD( ILI9326_R201_VA, ILI9326->Data.VSY );
0001f0  4807              LDR      r0,|L16.528|
0001f2  6800              LDR      r0,[r0,#0]  ; ILI9326
0001f4  f8b01048          LDRH     r1,[r0,#0x48]
0001f8  f2402001          MOV      r0,#0x201
0001fc  47a0              BLX      r4
;;;490    	//======================================设置写入模式
;;;491    	ILI9326_WriteCMD( ILI9326_R003_EM, Model);
0001fe  2003              MOVS     r0,#3
000200  9900              LDR      r1,[sp,#0]
000202  47a0              BLX      r4
;;;492    	//======================================启动写入
;;;493    	ILI9326_WriteIndex( ILI9326_R202_GDRW );
000204  f2402002          MOV      r0,#0x202
000208  f7fffffe          BL       ILI9326_WriteIndex
;;;494    }
00020c  e8bd8ff8          POP      {r3-r11,pc}
;;;495    
                          ENDP

                  |L16.528|
                          DCD      ILI9326

                          AREA ||i.ILI9326_ShowChar||, CODE, READONLY, ALIGN=2

                  ILI9326_ShowChar PROC
;;;749    *******************************************************************************/
;;;750    void ILI9326_ShowChar(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;751    										u16 x,			//x				:起点x坐标
;;;752    										u16 y,			//y				:起点y坐标
;;;753    										u8 font,		//font		:字体大小
;;;754    										u16 color,	//字体颜色
;;;755    										u8 num,			//num			:字节数
;;;756    										u8 *Buffer	//Buffer	:显示的内容缓存
;;;757    										
;;;758    )		//高通字库测试程序
;;;759    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4614              MOV      r4,r2
00000c  469a              MOV      r10,r3
00000e  f8ddb03c          LDR      r11,[sp,#0x3c]
;;;760    	u8 temp;
;;;761    	u8 i=0,j=0;
000012  2500              MOVS     r5,#0
000014  2700              MOVS     r7,#0
;;;762    	unsigned short x1=0,x2=0,y1=0,y2=0;
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9003              STR      r0,[sp,#0xc]
00001c  9002              STR      r0,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
;;;763    	unsigned short LCD_PEN_COLOR	=	0;   	//画笔色
000020  9000              STR      r0,[sp,#0]
;;;764    	x1	=	x;
000022  f8cd8010          STR      r8,[sp,#0x10]
;;;765    	y1	=	y;
000026  f8cd9008          STR      r9,[sp,#8]
;;;766    	x2	=	x+font/2-1;		//
00002a  4620              MOV      r0,r4
00002c  eb0471d0          ADD      r1,r4,r0,LSR #31
000030  eb080161          ADD      r1,r8,r1,ASR #1
000034  1e49              SUBS     r1,r1,#1
000036  b289              UXTH     r1,r1
000038  9103              STR      r1,[sp,#0xc]
;;;767    	y2	=	y+font-1;
00003a  eb090004          ADD      r0,r9,r4
00003e  1e40              SUBS     r0,r0,#1
000040  b280              UXTH     r0,r0
000042  9001              STR      r0,[sp,#4]
;;;768    	
;;;769    	ILI9326_SetWindowAddress(x1,y1,x2,y2);//设置显示区域	
000044  e9dd3101          LDRD     r3,r1,[sp,#4]
000048  e9dd2003          LDRD     r2,r0,[sp,#0xc]
00004c  f7fffffe          BL       ILI9326_SetWindowAddress
;;;770    	ILI9326_WriteIndex( ILI9326_R202_GDRW );
000050  f2402002          MOV      r0,#0x202
000054  f7fffffe          BL       ILI9326_WriteIndex
;;;771    	ILI9326Crl(CS);	//LCD_CS_LOW;
000058  4828              LDR      r0,|L17.252|
00005a  6800              LDR      r0,[r0,#0]  ; ILI9326
00005c  8d80              LDRH     r0,[r0,#0x2c]
00005e  4927              LDR      r1,|L17.252|
000060  6809              LDR      r1,[r1,#0]  ; ILI9326
000062  6a89              LDR      r1,[r1,#0x28]
000064  6148              STR      r0,[r1,#0x14]
;;;772    	for(i=0;i<num;i++)
000066  bf00              NOP      
000068  e03a              B        |L17.224|
                  |L17.106|
;;;773    	{ 
;;;774    		temp=Buffer[i];		 					//调用1608字体--二维数组形式--字库使用时取消
00006a  f81b6005          LDRB     r6,[r11,r5]
;;;775    		for(j=0;j<8;j++)
00006e  2700              MOVS     r7,#0
000070  e012              B        |L17.152|
                  |L17.114|
;;;776    		{
;;;777    			if((temp&0x80)==0X80)
000072  f0060080          AND      r0,r6,#0x80
000076  2880              CMP      r0,#0x80
000078  d102              BNE      |L17.128|
;;;778    			{
;;;779    				LCD_PEN_COLOR=color;
00007a  f8cda000          STR      r10,[sp,#0]
00007e  e004              B        |L17.138|
                  |L17.128|
;;;780    			}
;;;781    			else
;;;782    				LCD_PEN_COLOR=ILI9326->Data.BColor;
000080  481e              LDR      r0,|L17.252|
000082  6800              LDR      r0,[r0,#0]  ; ILI9326
000084  f8b00052          LDRH     r0,[r0,#0x52]
000088  9000              STR      r0,[sp,#0]
                  |L17.138|
;;;783    			ILI9326_WriteData(LCD_PEN_COLOR);
00008a  9800              LDR      r0,[sp,#0]
00008c  f7fffffe          BL       ILI9326_WriteData
;;;784    			temp=temp<<1;
000090  0670              LSLS     r0,r6,#25
000092  0e06              LSRS     r6,r0,#24
000094  1c78              ADDS     r0,r7,#1              ;775
000096  b2c7              UXTB     r7,r0                 ;775
                  |L17.152|
000098  2f08              CMP      r7,#8                 ;775
00009a  dbea              BLT      |L17.114|
;;;785    		}
;;;786        //=======================未满8位的补充定入
;;;787        if((24==font)||(12==font))
00009c  2c18              CMP      r4,#0x18
00009e  d001              BEQ      |L17.164|
0000a0  2c0c              CMP      r4,#0xc
0000a2  d11b              BNE      |L17.220|
                  |L17.164|
;;;788        {
;;;789          temp=Buffer[i+1];		 					
0000a4  1c68              ADDS     r0,r5,#1
0000a6  f81b6000          LDRB     r6,[r11,r0]
;;;790          for(j=0;j<4;j++)
0000aa  2700              MOVS     r7,#0
0000ac  e012              B        |L17.212|
                  |L17.174|
;;;791          {
;;;792            if((temp&0x80)==0X80)
0000ae  f0060080          AND      r0,r6,#0x80
0000b2  2880              CMP      r0,#0x80
0000b4  d102              BNE      |L17.188|
;;;793            {
;;;794              LCD_PEN_COLOR=color;
0000b6  f8cda000          STR      r10,[sp,#0]
0000ba  e004              B        |L17.198|
                  |L17.188|
;;;795            }
;;;796            else
;;;797              LCD_PEN_COLOR=ILI9326->Data.BColor;
0000bc  480f              LDR      r0,|L17.252|
0000be  6800              LDR      r0,[r0,#0]  ; ILI9326
0000c0  f8b00052          LDRH     r0,[r0,#0x52]
0000c4  9000              STR      r0,[sp,#0]
                  |L17.198|
;;;798            ILI9326_WriteData(LCD_PEN_COLOR);
0000c6  9800              LDR      r0,[sp,#0]
0000c8  f7fffffe          BL       ILI9326_WriteData
;;;799            temp=temp<<1;
0000cc  0670              LSLS     r0,r6,#25
0000ce  0e06              LSRS     r6,r0,#24
0000d0  1c78              ADDS     r0,r7,#1              ;790
0000d2  b2c7              UXTB     r7,r0                 ;790
                  |L17.212|
0000d4  2f04              CMP      r7,#4                 ;790
0000d6  dbea              BLT      |L17.174|
;;;800          }
;;;801          i++;
0000d8  1c68              ADDS     r0,r5,#1
0000da  b2c5              UXTB     r5,r0
                  |L17.220|
0000dc  1c68              ADDS     r0,r5,#1              ;772
0000de  b2c5              UXTB     r5,r0                 ;772
                  |L17.224|
0000e0  980e              LDR      r0,[sp,#0x38]         ;772
0000e2  4285              CMP      r5,r0                 ;772
0000e4  dbc1              BLT      |L17.106|
;;;802        }		
;;;803    	}
;;;804    	ILI9326Set(CS);	//LCD_CS_HIGH;
0000e6  4805              LDR      r0,|L17.252|
0000e8  6800              LDR      r0,[r0,#0]  ; ILI9326
0000ea  8d80              LDRH     r0,[r0,#0x2c]
0000ec  4903              LDR      r1,|L17.252|
0000ee  6809              LDR      r1,[r1,#0]  ; ILI9326
0000f0  6a89              LDR      r1,[r1,#0x28]
0000f2  6108              STR      r0,[r1,#0x10]
;;;805    }
0000f4  b005              ADD      sp,sp,#0x14
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;806    /*******************************************************************************
                          ENDP

0000fa  0000              DCW      0x0000
                  |L17.252|
                          DCD      ILI9326

                          AREA ||i.ILI9326_ShowWord||, CODE, READONLY, ALIGN=2

                  ILI9326_ShowWord PROC
;;;811    *******************************************************************************/
;;;812    void ILI9326_ShowWord(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;813    										u16 x,			//x				:起点x坐标
;;;814    										u16 y,			//y				:起点y坐标
;;;815    										u8 font,		//font		:字体大小
;;;816    										u16 color,	//字体颜色
;;;817    										u8 num,			//num			:字节数
;;;818    										u8 *Buffer	//Buffer	:显示的内容缓存
;;;819    										
;;;820    )		//高通字库测试程序
;;;821    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  469a              MOV      r10,r3
00000e  f8ddb03c          LDR      r11,[sp,#0x3c]
;;;822    	u8 temp;
;;;823    	u8 i=0,j=0;
000012  2400              MOVS     r4,#0
000014  2700              MOVS     r7,#0
;;;824    	unsigned short x1=0,x2=0,y1=0,y2=0;
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9003              STR      r0,[sp,#0xc]
00001c  9002              STR      r0,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
;;;825    	unsigned short LCD_PEN_COLOR	=	0;   	//画笔色
000020  9000              STR      r0,[sp,#0]
;;;826    	x1	=	x;
000022  f8cd8010          STR      r8,[sp,#0x10]
;;;827    	y1	=	y;
000026  f8cd9008          STR      r9,[sp,#8]
;;;828      x2	=	x+font-1;
00002a  eb080005          ADD      r0,r8,r5
00002e  1e40              SUBS     r0,r0,#1
000030  b280              UXTH     r0,r0
000032  9003              STR      r0,[sp,#0xc]
;;;829      y2	=	y+font-1;
000034  eb090005          ADD      r0,r9,r5
000038  1e40              SUBS     r0,r0,#1
00003a  b280              UXTH     r0,r0
00003c  9001              STR      r0,[sp,#4]
;;;830    	ILI9326_SetWindowAddress(x1,y1,x2,y2);//设置显示区域
00003e  e9dd3101          LDRD     r3,r1,[sp,#4]
000042  e9dd2003          LDRD     r2,r0,[sp,#0xc]
000046  f7fffffe          BL       ILI9326_SetWindowAddress
;;;831    	ILI9326_WriteIndex( ILI9326_R202_GDRW );
00004a  f2402002          MOV      r0,#0x202
00004e  f7fffffe          BL       ILI9326_WriteIndex
;;;832    	ILI9326Crl(CS);	//LCD_CS_LOW;
000052  4827              LDR      r0,|L18.240|
000054  6800              LDR      r0,[r0,#0]  ; ILI9326
000056  8d80              LDRH     r0,[r0,#0x2c]
000058  4925              LDR      r1,|L18.240|
00005a  6809              LDR      r1,[r1,#0]  ; ILI9326
00005c  6a89              LDR      r1,[r1,#0x28]
00005e  6148              STR      r0,[r1,#0x14]
;;;833    	for(i=0;i<num;i++)
000060  bf00              NOP      
000062  e038              B        |L18.214|
                  |L18.100|
;;;834    	{ 
;;;835    		temp=Buffer[i];		 				
000064  f81b6004          LDRB     r6,[r11,r4]
;;;836    		for(j=0;j<8;j++)
000068  2700              MOVS     r7,#0
00006a  e012              B        |L18.146|
                  |L18.108|
;;;837    		{
;;;838    			if((temp&0x80)==0X80)
00006c  f0060080          AND      r0,r6,#0x80
000070  2880              CMP      r0,#0x80
000072  d102              BNE      |L18.122|
;;;839    			{
;;;840    				LCD_PEN_COLOR=color;
000074  f8cda000          STR      r10,[sp,#0]
000078  e004              B        |L18.132|
                  |L18.122|
;;;841    			}
;;;842    			else
;;;843    				LCD_PEN_COLOR=ILI9326->Data.BColor;
00007a  481d              LDR      r0,|L18.240|
00007c  6800              LDR      r0,[r0,#0]  ; ILI9326
00007e  f8b00052          LDRH     r0,[r0,#0x52]
000082  9000              STR      r0,[sp,#0]
                  |L18.132|
;;;844    			ILI9326_WriteData(LCD_PEN_COLOR);
000084  9800              LDR      r0,[sp,#0]
000086  f7fffffe          BL       ILI9326_WriteData
;;;845    			temp=temp<<1;
00008a  0670              LSLS     r0,r6,#25
00008c  0e06              LSRS     r6,r0,#24
00008e  1c78              ADDS     r0,r7,#1              ;836
000090  b2c7              UXTB     r7,r0                 ;836
                  |L18.146|
000092  2f08              CMP      r7,#8                 ;836
000094  dbea              BLT      |L18.108|
;;;846    		}
;;;847        //=======================未满8位的补充定入
;;;848        if((12==font))
000096  2d0c              CMP      r5,#0xc
000098  d11b              BNE      |L18.210|
;;;849        {
;;;850          temp=Buffer[i+1];		 					
00009a  1c60              ADDS     r0,r4,#1
00009c  f81b6000          LDRB     r6,[r11,r0]
;;;851          for(j=0;j<4;j++)
0000a0  2700              MOVS     r7,#0
0000a2  e012              B        |L18.202|
                  |L18.164|
;;;852          {
;;;853            if((temp&0x80)==0X80)
0000a4  f0060080          AND      r0,r6,#0x80
0000a8  2880              CMP      r0,#0x80
0000aa  d102              BNE      |L18.178|
;;;854            {
;;;855              LCD_PEN_COLOR=color;
0000ac  f8cda000          STR      r10,[sp,#0]
0000b0  e004              B        |L18.188|
                  |L18.178|
;;;856            }
;;;857            else
;;;858              LCD_PEN_COLOR=ILI9326->Data.BColor;
0000b2  480f              LDR      r0,|L18.240|
0000b4  6800              LDR      r0,[r0,#0]  ; ILI9326
0000b6  f8b00052          LDRH     r0,[r0,#0x52]
0000ba  9000              STR      r0,[sp,#0]
                  |L18.188|
;;;859            ILI9326_WriteData(LCD_PEN_COLOR);
0000bc  9800              LDR      r0,[sp,#0]
0000be  f7fffffe          BL       ILI9326_WriteData
;;;860            temp=temp<<1;
0000c2  0670              LSLS     r0,r6,#25
0000c4  0e06              LSRS     r6,r0,#24
0000c6  1c78              ADDS     r0,r7,#1              ;851
0000c8  b2c7              UXTB     r7,r0                 ;851
                  |L18.202|
0000ca  2f04              CMP      r7,#4                 ;851
0000cc  dbea              BLT      |L18.164|
;;;861          }
;;;862          i++;
0000ce  1c60              ADDS     r0,r4,#1
0000d0  b2c4              UXTB     r4,r0
                  |L18.210|
0000d2  1c60              ADDS     r0,r4,#1              ;833
0000d4  b2c4              UXTB     r4,r0                 ;833
                  |L18.214|
0000d6  980e              LDR      r0,[sp,#0x38]         ;833
0000d8  4284              CMP      r4,r0                 ;833
0000da  dbc3              BLT      |L18.100|
;;;863        }			
;;;864    	}
;;;865    	ILI9326Set(CS);	//LCD_CS_HIGH;
0000dc  4804              LDR      r0,|L18.240|
0000de  6800              LDR      r0,[r0,#0]  ; ILI9326
0000e0  8d80              LDRH     r0,[r0,#0x2c]
0000e2  4903              LDR      r1,|L18.240|
0000e4  6809              LDR      r1,[r1,#0]  ; ILI9326
0000e6  6a89              LDR      r1,[r1,#0x28]
0000e8  6108              STR      r0,[r1,#0x10]
;;;866    }
0000ea  b005              ADD      sp,sp,#0x14
0000ec  e8bd8ff0          POP      {r4-r11,pc}
;;;867    //#endif//LCD_61509_EN
                          ENDP

                  |L18.240|
                          DCD      ILI9326

                          AREA ||i.ILI9326_WriteAddr||, CODE, READONLY, ALIGN=2

                  ILI9326_WriteAddr PROC
;;;213    *******************************************************************************/
;;;214    void ILI9326_WriteAddr(unsigned	short	Addr)
000000  b500              PUSH     {lr}
;;;215    {
000002  4603              MOV      r3,r0
;;;216    	ILI9326Crl(DC);	//LCD_DC_LOW;		//RS
000004  4808              LDR      r0,|L19.40|
000006  6800              LDR      r0,[r0,#0]  ; ILI9326
000008  8b80              LDRH     r0,[r0,#0x1c]
00000a  4907              LDR      r1,|L19.40|
00000c  6809              LDR      r1,[r1,#0]  ; ILI9326
00000e  6989              LDR      r1,[r1,#0x18]
000010  6148              STR      r0,[r1,#0x14]
;;;217    	ILI9326_WriteData(Addr);
000012  4618              MOV      r0,r3
000014  f7fffffe          BL       ILI9326_WriteData
;;;218    	ILI9326Set(DC);	//LCD_DC_HIGH;	//RS
000018  4803              LDR      r0,|L19.40|
00001a  6800              LDR      r0,[r0,#0]  ; ILI9326
00001c  8b80              LDRH     r0,[r0,#0x1c]
00001e  4902              LDR      r1,|L19.40|
000020  6809              LDR      r1,[r1,#0]  ; ILI9326
000022  6989              LDR      r1,[r1,#0x18]
000024  6108              STR      r0,[r1,#0x10]
;;;219    }
000026  bd00              POP      {pc}
;;;220    /*******************************************************************************
                          ENDP

                  |L19.40|
                          DCD      ILI9326

                          AREA ||i.ILI9326_WriteCommand||, CODE, READONLY, ALIGN=1

                  ILI9326_WriteCommand PROC
;;;261    *******************************************************************************/
;;;262    void ILI9326_WriteCommand(unsigned	short	Index,unsigned short Cmd)
000000  b530              PUSH     {r4,r5,lr}
;;;263    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;264    	ILI9326_WriteRegister(Index,Cmd);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ILI9326_WriteRegister
;;;265    }
00000e  bd30              POP      {r4,r5,pc}
;;;266    /*******************************************************************************
                          ENDP


                          AREA ||i.ILI9326_WriteData||, CODE, READONLY, ALIGN=2

                  ILI9326_WriteData PROC
;;;188    *******************************************************************************/
;;;189    void ILI9326_WriteData(unsigned	short	Data)
000000  4909              LDR      r1,|L21.40|
;;;190    {
;;;191    #if	1	//Bus16Bit
;;;192    	ILI9326Crl(WR);	//LCD_WR_LOW;
000002  6809              LDR      r1,[r1,#0]  ; ILI9326
000004  8c89              LDRH     r1,[r1,#0x24]
000006  4a08              LDR      r2,|L21.40|
000008  6812              LDR      r2,[r2,#0]  ; ILI9326
00000a  6a12              LDR      r2,[r2,#0x20]
00000c  6151              STR      r1,[r2,#0x14]
;;;193    	ILI9326_DATABUS_PORT->ODR = Data;
00000e  4906              LDR      r1,|L21.40|
000010  6809              LDR      r1,[r1,#0]  ; ILI9326
000012  6b89              LDR      r1,[r1,#0x38]
000014  60c8              STR      r0,[r1,#0xc]
;;;194    	ILI9326Set(WR);	//LCD_WR_HIGH;
000016  4904              LDR      r1,|L21.40|
000018  6809              LDR      r1,[r1,#0]  ; ILI9326
00001a  8c89              LDRH     r1,[r1,#0x24]
00001c  4a02              LDR      r2,|L21.40|
00001e  6812              LDR      r2,[r2,#0]  ; ILI9326
000020  6a12              LDR      r2,[r2,#0x20]
000022  6111              STR      r1,[r2,#0x10]
;;;195    #else
;;;196    	ILI9326Crl(WR);	//LCD_WR_LOW;
;;;197    	ILI9326_DATABUS_PORT->ODR = Data>>8;
;;;198    	ILI9326Set(WR);	//LCD_WR_HIGH;
;;;199    	
;;;200    	ILI9326Crl(WR);	//LCD_WR_LOW;
;;;201    	ILI9326_DATABUS_PORT->ODR = Data&0xFF;
;;;202    	ILI9326Set(WR);	//LCD_WR_HIGH;
;;;203    #endif
;;;204    }
000024  4770              BX       lr
;;;205    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L21.40|
                          DCD      ILI9326

                          AREA ||i.ILI9326_WriteGRAM||, CODE, READONLY, ALIGN=2

                  ILI9326_WriteGRAM PROC
;;;274    *******************************************************************************/
;;;275    void ILI9326_WriteGRAM(unsigned	short* RAM,unsigned long length)
000000  b570              PUSH     {r4-r6,lr}
;;;276    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;277    	unsigned	long	i	=	0;
000006  2400              MOVS     r4,#0
;;;278    	ILI9326Crl(CS);	//LCD_CS_LOW;
000008  480d              LDR      r0,|L22.64|
00000a  6800              LDR      r0,[r0,#0]  ; ILI9326
00000c  8d80              LDRH     r0,[r0,#0x2c]
00000e  490c              LDR      r1,|L22.64|
000010  6809              LDR      r1,[r1,#0]  ; ILI9326
000012  6a89              LDR      r1,[r1,#0x28]
000014  6148              STR      r0,[r1,#0x14]
;;;279    	ILI9326_WriteAddr(ILI9326_R202_GDRW);
000016  f2402002          MOV      r0,#0x202
00001a  f7fffffe          BL       ILI9326_WriteAddr
;;;280    	for(i=0;i<length;i++)
00001e  bf00              NOP      
000020  e004              B        |L22.44|
                  |L22.34|
;;;281    	{
;;;282    		ILI9326_WriteData(RAM[i]);
000022  f8350014          LDRH     r0,[r5,r4,LSL #1]
000026  f7fffffe          BL       ILI9326_WriteData
00002a  1c64              ADDS     r4,r4,#1              ;280
                  |L22.44|
00002c  42b4              CMP      r4,r6                 ;280
00002e  d3f8              BCC      |L22.34|
;;;283    	}
;;;284    	ILI9326Set(CS);	//LCD_CS_HIGH;
000030  4803              LDR      r0,|L22.64|
000032  6800              LDR      r0,[r0,#0]  ; ILI9326
000034  8d80              LDRH     r0,[r0,#0x2c]
000036  4902              LDR      r1,|L22.64|
000038  6809              LDR      r1,[r1,#0]  ; ILI9326
00003a  6a89              LDR      r1,[r1,#0x28]
00003c  6108              STR      r0,[r1,#0x10]
;;;285    }
00003e  bd70              POP      {r4-r6,pc}
;;;286    /*******************************************************************************
                          ENDP

                  |L22.64|
                          DCD      ILI9326

                          AREA ||i.ILI9326_WriteIndex||, CODE, READONLY, ALIGN=2

                  ILI9326_WriteIndex PROC
;;;228    *******************************************************************************/
;;;229    void ILI9326_WriteIndex(unsigned	short	Index)
000000  b510              PUSH     {r4,lr}
;;;230    {
000002  4604              MOV      r4,r0
;;;231    	ILI9326Crl(CS);	//LCD_CS_LOW;	
000004  4808              LDR      r0,|L23.40|
000006  6800              LDR      r0,[r0,#0]  ; ILI9326
000008  8d80              LDRH     r0,[r0,#0x2c]
00000a  4907              LDR      r1,|L23.40|
00000c  6809              LDR      r1,[r1,#0]  ; ILI9326
00000e  6a89              LDR      r1,[r1,#0x28]
000010  6148              STR      r0,[r1,#0x14]
;;;232    	ILI9326_WriteAddr(Index);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       ILI9326_WriteAddr
;;;233    	ILI9326Set(CS);	//LCD_CS_HIGH;
000018  4803              LDR      r0,|L23.40|
00001a  6800              LDR      r0,[r0,#0]  ; ILI9326
00001c  8d80              LDRH     r0,[r0,#0x2c]
00001e  4902              LDR      r1,|L23.40|
000020  6809              LDR      r1,[r1,#0]  ; ILI9326
000022  6a89              LDR      r1,[r1,#0x28]
000024  6108              STR      r0,[r1,#0x10]
;;;234    }
000026  bd10              POP      {r4,pc}
;;;235    /*******************************************************************************
                          ENDP

                  |L23.40|
                          DCD      ILI9326

                          AREA ||i.ILI9326_WriteRegister||, CODE, READONLY, ALIGN=2

                  ILI9326_WriteRegister PROC
;;;243    *******************************************************************************/
;;;244    void ILI9326_WriteRegister(unsigned	short	Addr,unsigned short Data)
000000  b530              PUSH     {r4,r5,lr}
;;;245    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;246    	ILI9326Crl(CS);	//LCD_CS_LOW;	
000006  480a              LDR      r0,|L24.48|
000008  6800              LDR      r0,[r0,#0]  ; ILI9326
00000a  8d80              LDRH     r0,[r0,#0x2c]
00000c  4908              LDR      r1,|L24.48|
00000e  6809              LDR      r1,[r1,#0]  ; ILI9326
000010  6a89              LDR      r1,[r1,#0x28]
000012  6148              STR      r0,[r1,#0x14]
;;;247    	//---------------------Write Index
;;;248    	ILI9326_WriteAddr(Addr);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       ILI9326_WriteAddr
;;;249    	//---------------------Write Data
;;;250    	ILI9326_WriteData(Data);	
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       ILI9326_WriteData
;;;251    	ILI9326Set(CS);	//LCD_CS_HIGH;	
000020  4803              LDR      r0,|L24.48|
000022  6800              LDR      r0,[r0,#0]  ; ILI9326
000024  8d80              LDRH     r0,[r0,#0x2c]
000026  4902              LDR      r1,|L24.48|
000028  6809              LDR      r1,[r1,#0]  ; ILI9326
00002a  6a89              LDR      r1,[r1,#0x28]
00002c  6108              STR      r0,[r1,#0x10]
;;;252    }
00002e  bd30              POP      {r4,r5,pc}
;;;253    /*******************************************************************************
                          ENDP

                  |L24.48|
                          DCD      ILI9326

                          AREA ||.data||, DATA, ALIGN=2

                  ILI9326
                          DCD      0x00000000
                  DeviceCode
000004  0000              DCW      0x0000
