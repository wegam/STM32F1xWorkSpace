; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\tm1638.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\tm1638.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\tm1638.crf ..\..\Driver\Components\SCR\TM1638.C]
                          THUMB

                          AREA ||i.Read_key||, CODE, READONLY, ALIGN=2

                  Read_key PROC
;;;106    *******************************************************************************/
;;;107    unsigned char Read_key(void)
000000  b538              PUSH     {r3-r5,lr}
;;;108    {
;;;109    	unsigned char c[4],i,key_value=0;
000002  2500              MOVS     r5,#0
;;;110    	STB=0;
000004  2000              MOVS     r0,#0
000006  4915              LDR      r1,|L1.92|
000008  6008              STR      r0,[r1,#0]
;;;111    	TM1638_Write(0x42);		           //读键扫数据 命令
00000a  2042              MOVS     r0,#0x42
00000c  f7fffffe          BL       TM1638_Write
;;;112    	for(i=0;i<4;i++)		
000010  2400              MOVS     r4,#0
000012  e005              B        |L1.32|
                  |L1.20|
;;;113    		c[i]=TM1638_Read();
000014  f7fffffe          BL       TM1638_Read
000018  f80d0004          STRB     r0,[sp,r4]
00001c  1c60              ADDS     r0,r4,#1              ;112
00001e  b2c4              UXTB     r4,r0                 ;112
                  |L1.32|
000020  2c04              CMP      r4,#4                 ;112
000022  dbf7              BLT      |L1.20|
;;;114    	STB=1;					           //4个字节数据合成一个字节
000024  2001              MOVS     r0,#1
000026  490d              LDR      r1,|L1.92|
000028  6008              STR      r0,[r1,#0]
;;;115    	for(i=0;i<4;i++)
00002a  2400              MOVS     r4,#0
00002c  e006              B        |L1.60|
                  |L1.46|
;;;116    		key_value|=c[i]<<i;
00002e  f81d0004          LDRB     r0,[sp,r4]
000032  40a0              LSLS     r0,r0,r4
000034  4328              ORRS     r0,r0,r5
000036  b2c5              UXTB     r5,r0
000038  1c60              ADDS     r0,r4,#1              ;115
00003a  b2c4              UXTB     r4,r0                 ;115
                  |L1.60|
00003c  2c04              CMP      r4,#4                 ;115
00003e  dbf6              BLT      |L1.46|
;;;117    	for(i=0;i<8;i++)
000040  2400              MOVS     r4,#0
000042  e006              B        |L1.82|
                  |L1.68|
;;;118    		if((0x01<<i)==key_value)
000044  2001              MOVS     r0,#1
000046  40a0              LSLS     r0,r0,r4
000048  42a8              CMP      r0,r5
00004a  d100              BNE      |L1.78|
;;;119    			break;
00004c  e003              B        |L1.86|
                  |L1.78|
00004e  1c60              ADDS     r0,r4,#1              ;117
000050  b2c4              UXTB     r4,r0                 ;117
                  |L1.82|
000052  2c08              CMP      r4,#8                 ;117
000054  dbf6              BLT      |L1.68|
                  |L1.86|
000056  bf00              NOP      
;;;120    	return i;
000058  4620              MOV      r0,r4
;;;121    }
00005a  bd38              POP      {r3-r5,pc}
;;;122    /*******************************************************************************
                          ENDP

                  |L1.92|
                          DCD      0x42210190

                          AREA ||i.TM1638_Read||, CODE, READONLY, ALIGN=2

                  TM1638_Read PROC
;;;73     *******************************************************************************/
;;;74     unsigned char TM1638_Read(void)					//读数据函数
000000  2000              MOVS     r0,#0
;;;75     {
;;;76     	unsigned char i;
;;;77     	unsigned char temp=0;
;;;78     	DIO=1;	//设置为输入
000002  2201              MOVS     r2,#1
000004  4b0b              LDR      r3,|L2.52|
000006  601a              STR      r2,[r3,#0]
;;;79     	for(i=0;i<8;i++)
000008  2100              MOVS     r1,#0
00000a  e010              B        |L2.46|
                  |L2.12|
;;;80     	{
;;;81     		temp>>=1;
00000c  1040              ASRS     r0,r0,#1
;;;82     		CLK=0;
00000e  2200              MOVS     r2,#0
000010  4b08              LDR      r3,|L2.52|
000012  3b08              SUBS     r3,r3,#8
000014  601a              STR      r2,[r3,#0]
;;;83     		if(DIO)
000016  4a08              LDR      r2,|L2.56|
000018  f8d2219c          LDR      r2,[r2,#0x19c]
00001c  b10a              CBZ      r2,|L2.34|
;;;84     			temp|=0x80;
00001e  f0400080          ORR      r0,r0,#0x80
                  |L2.34|
;;;85     		CLK=1;
000022  2201              MOVS     r2,#1
000024  4b03              LDR      r3,|L2.52|
000026  3b08              SUBS     r3,r3,#8
000028  601a              STR      r2,[r3,#0]
00002a  1c4a              ADDS     r2,r1,#1              ;79
00002c  b2d1              UXTB     r1,r2                 ;79
                  |L2.46|
00002e  2908              CMP      r1,#8                 ;79
000030  dbec              BLT      |L2.12|
;;;86     	}
;;;87     	return temp;
;;;88     }
000032  4770              BX       lr
;;;89     /*******************************************************************************
                          ENDP

                  |L2.52|
                          DCD      0x4221019c
                  |L2.56|
                          DCD      0x42210000

                          AREA ||i.TM1638_Write||, CODE, READONLY, ALIGN=2

                  TM1638_Write PROC
;;;53     *******************************************************************************/
;;;54     void TM1638_Write(unsigned char	DATA)			//写数据函数
000000  2100              MOVS     r1,#0
;;;55     {
;;;56     	unsigned char i;
;;;57     	for(i=0;i<8;i++)
000002  e014              B        |L3.46|
                  |L3.4|
;;;58     	{
;;;59     		CLK=0;
000004  2200              MOVS     r2,#0
000006  4b0b              LDR      r3,|L3.52|
000008  601a              STR      r2,[r3,#0]
;;;60     		if(DATA&0X01)
00000a  f0000201          AND      r2,r0,#1
00000e  b122              CBZ      r2,|L3.26|
;;;61     			DIO=1;
000010  2201              MOVS     r2,#1
000012  4b08              LDR      r3,|L3.52|
000014  3308              ADDS     r3,r3,#8
000016  601a              STR      r2,[r3,#0]
000018  e003              B        |L3.34|
                  |L3.26|
;;;62     		else
;;;63     			DIO=0;
00001a  2200              MOVS     r2,#0
00001c  4b05              LDR      r3,|L3.52|
00001e  3308              ADDS     r3,r3,#8
000020  601a              STR      r2,[r3,#0]
                  |L3.34|
;;;64     		DATA>>=1;
000022  1040              ASRS     r0,r0,#1
;;;65     		CLK=1;
000024  2201              MOVS     r2,#1
000026  4b03              LDR      r3,|L3.52|
000028  601a              STR      r2,[r3,#0]
00002a  1c4a              ADDS     r2,r1,#1              ;57
00002c  b2d1              UXTB     r1,r2                 ;57
                  |L3.46|
00002e  2908              CMP      r1,#8                 ;57
000030  dbe8              BLT      |L3.4|
;;;66     	}
;;;67     }
000032  4770              BX       lr
;;;68     /*******************************************************************************
                          ENDP

                  |L3.52|
                          DCD      0x42210194

                          AREA ||i.Write_COM||, CODE, READONLY, ALIGN=2

                  Write_COM PROC
;;;94     *******************************************************************************/
;;;95     void Write_COM(unsigned char cmd)		//发送命令字
000000  b510              PUSH     {r4,lr}
;;;96     {
000002  4604              MOV      r4,r0
;;;97     	STB=0;
000004  2000              MOVS     r0,#0
000006  4905              LDR      r1,|L4.28|
000008  6008              STR      r0,[r1,#0]
;;;98     	TM1638_Write(cmd);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       TM1638_Write
;;;99     	STB=1;
000010  2001              MOVS     r0,#1
000012  4903              LDR      r1,|L4.32|
000014  f8c10190          STR      r0,[r1,#0x190]
;;;100    }
000018  bd10              POP      {r4,pc}
;;;101    /*******************************************************************************
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x42210190
                  |L4.32|
                          DCD      0x42210000

                          AREA ||i.Write_DATA||, CODE, READONLY, ALIGN=2

                  Write_DATA PROC
;;;127    *******************************************************************************/
;;;128    void Write_DATA(unsigned char add,unsigned char DATA)		//指定地址写入数据
000000  b530              PUSH     {r4,r5,lr}
;;;129    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;130    	Write_COM(0x40);					//固定地址
000006  2040              MOVS     r0,#0x40
000008  f7fffffe          BL       Write_COM
;;;131    	STB=0;
00000c  2000              MOVS     r0,#0
00000e  4907              LDR      r1,|L5.44|
000010  6008              STR      r0,[r1,#0]
;;;132    	TM1638_Write(0xC0|add);		//写地址
000012  f04400c0          ORR      r0,r4,#0xc0
000016  f7fffffe          BL       TM1638_Write
;;;133    	TM1638_Write(DATA);				//写数据
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       TM1638_Write
;;;134    	STB=1;
000020  2001              MOVS     r0,#1
000022  4903              LDR      r1,|L5.48|
000024  f8c10190          STR      r0,[r1,#0x190]
;;;135    }
000028  bd30              POP      {r4,r5,pc}
;;;136    /*******************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x42210190
                  |L5.48|
                          DCD      0x42210000

                          AREA ||i.Write_DataAI||, CODE, READONLY, ALIGN=2

                  Write_DataAI PROC
;;;155    *******************************************************************************/
;;;156    void Write_DataAI(unsigned char add,unsigned char DATA)		//地址自增
000000  b570              PUSH     {r4-r6,lr}
;;;157    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;158    	unsigned char i;
;;;159    	Write_COM(0x40);					//地址自增命令
000006  2040              MOVS     r0,#0x40
000008  f7fffffe          BL       Write_COM
;;;160    	STB=0;
00000c  2000              MOVS     r0,#0
00000e  490a              LDR      r1,|L6.56|
000010  6008              STR      r0,[r1,#0]
;;;161    	TM1638_Write(0xC0);    		//设置起始地址
000012  20c0              MOVS     r0,#0xc0
000014  f7fffffe          BL       TM1638_Write
;;;162    	for(i=0;i<8;i++)	   			//传送16个字节的数据
000018  2500              MOVS     r5,#0
00001a  e007              B        |L6.44|
                  |L6.28|
;;;163    	{
;;;164    		TM1638_Write(DATA);			//写数据
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       TM1638_Write
;;;165    		TM1638_Write(0x01);			//写数据
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       TM1638_Write
000028  1c68              ADDS     r0,r5,#1              ;162
00002a  b2c5              UXTB     r5,r0                 ;162
                  |L6.44|
00002c  2d08              CMP      r5,#8                 ;162
00002e  dbf5              BLT      |L6.28|
;;;166    	}
;;;167    	STB=1;
000030  2001              MOVS     r0,#1
000032  4901              LDR      r1,|L6.56|
000034  6008              STR      r0,[r1,#0]
;;;168    }
000036  bd70              POP      {r4-r6,pc}
;;;169    /*******************************************************************************
                          ENDP

                  |L6.56|
                          DCD      0x42210190

                          AREA ||i.Write_DataFX||, CODE, READONLY, ALIGN=2

                  Write_DataFX PROC
;;;141    *******************************************************************************/
;;;142    void Write_DataFX(unsigned char add,unsigned char DATA)		//固定地址方式
000000  b530              PUSH     {r4,r5,lr}
;;;143    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;144    	Write_COM(0x44);					//固定地址命令
000006  2044              MOVS     r0,#0x44
000008  f7fffffe          BL       Write_COM
;;;145    	STB=0;
00000c  2000              MOVS     r0,#0
00000e  4908              LDR      r1,|L7.48|
000010  6008              STR      r0,[r1,#0]
;;;146    	TM1638_Write(0xC0|(add<<1));		//写地址
000012  21c0              MOVS     r1,#0xc0
000014  ea410144          ORR      r1,r1,r4,LSL #1
000018  b2c8              UXTB     r0,r1
00001a  f7fffffe          BL       TM1638_Write
;;;147    	TM1638_Write(DATA);				//写数据
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       TM1638_Write
;;;148    	STB=1;
000024  2001              MOVS     r0,#1
000026  4903              LDR      r1,|L7.52|
000028  f8c10190          STR      r0,[r1,#0x190]
;;;149    }
00002c  bd30              POP      {r4,r5,pc}
;;;150    /*******************************************************************************
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      0x42210190
                  |L7.52|
                          DCD      0x42210000

                          AREA ||i.Write_DataNum||, CODE, READONLY, ALIGN=2

                  Write_DataNum PROC
;;;174    *******************************************************************************/
;;;175    void Write_DataNum(unsigned char Startadd,unsigned long Num)		//地址自增方式写入8位数据
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;177    //	Write_COM(0x40);					//地址自增命令
;;;178    	STB=0;
000006  2000              MOVS     r0,#0
000008  4969              LDR      r1,|L8.432|
00000a  6008              STR      r0,[r1,#0]
;;;179    	TM1638_Write(0xC0|Startadd);    		//设置起始地址
00000c  f04500c0          ORR      r0,r5,#0xc0
000010  f7fffffe          BL       TM1638_Write
;;;180    	
;;;181    	TM1638_Write(code[Num/10000000]);
000014  4867              LDR      r0,|L8.436|
000016  fbb4f0f0          UDIV     r0,r4,r0
00001a  4967              LDR      r1,|L8.440|
00001c  5c0e              LDRB     r6,[r1,r0]
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       TM1638_Write
;;;182    	TM1638_Write(code[Num/10000000]);			//写数据
000024  4863              LDR      r0,|L8.436|
000026  fbb4f0f0          UDIV     r0,r4,r0
00002a  4963              LDR      r1,|L8.440|
00002c  5c0e              LDRB     r6,[r1,r0]
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       TM1638_Write
;;;183    	TM1638_Write(code[Num%10000000/1000000]);
000034  485f              LDR      r0,|L8.436|
000036  fbb4f1f0          UDIV     r1,r4,r0
00003a  fb004011          MLS      r0,r0,r1,r4
00003e  495f              LDR      r1,|L8.444|
000040  fbb0f0f1          UDIV     r0,r0,r1
000044  495c              LDR      r1,|L8.440|
000046  5c0e              LDRB     r6,[r1,r0]
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       TM1638_Write
;;;184    	TM1638_Write(code[Num%10000000/1000000]);			//写数据
00004e  4859              LDR      r0,|L8.436|
000050  fbb4f1f0          UDIV     r1,r4,r0
000054  fb004011          MLS      r0,r0,r1,r4
000058  4958              LDR      r1,|L8.444|
00005a  fbb0f0f1          UDIV     r0,r0,r1
00005e  4956              LDR      r1,|L8.440|
000060  5c0e              LDRB     r6,[r1,r0]
000062  4630              MOV      r0,r6
000064  f7fffffe          BL       TM1638_Write
;;;185    	TM1638_Write(code[Num%1000000/100000]);
000068  4854              LDR      r0,|L8.444|
00006a  fbb4f1f0          UDIV     r1,r4,r0
00006e  fb004011          MLS      r0,r0,r1,r4
000072  4953              LDR      r1,|L8.448|
000074  fbb0f0f1          UDIV     r0,r0,r1
000078  494f              LDR      r1,|L8.440|
00007a  5c0e              LDRB     r6,[r1,r0]
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       TM1638_Write
;;;186    	TM1638_Write(code[Num%1000000/100000]);			//写数据
000082  484e              LDR      r0,|L8.444|
000084  fbb4f1f0          UDIV     r1,r4,r0
000088  fb004011          MLS      r0,r0,r1,r4
00008c  494c              LDR      r1,|L8.448|
00008e  fbb0f0f1          UDIV     r0,r0,r1
000092  4949              LDR      r1,|L8.440|
000094  5c0e              LDRB     r6,[r1,r0]
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       TM1638_Write
;;;187    	TM1638_Write(code[Num%100000/10000]);
00009c  4848              LDR      r0,|L8.448|
00009e  fbb4f1f0          UDIV     r1,r4,r0
0000a2  fb004011          MLS      r0,r0,r1,r4
0000a6  f2427110          MOV      r1,#0x2710
0000aa  fbb0f0f1          UDIV     r0,r0,r1
0000ae  4942              LDR      r1,|L8.440|
0000b0  5c0e              LDRB     r6,[r1,r0]
0000b2  4630              MOV      r0,r6
0000b4  f7fffffe          BL       TM1638_Write
;;;188    	TM1638_Write(code[Num%100000/10000]);			//写数据
0000b8  4841              LDR      r0,|L8.448|
0000ba  fbb4f1f0          UDIV     r1,r4,r0
0000be  fb004011          MLS      r0,r0,r1,r4
0000c2  f2427110          MOV      r1,#0x2710
0000c6  fbb0f0f1          UDIV     r0,r0,r1
0000ca  493b              LDR      r1,|L8.440|
0000cc  5c0e              LDRB     r6,[r1,r0]
0000ce  4630              MOV      r0,r6
0000d0  f7fffffe          BL       TM1638_Write
;;;189    	TM1638_Write(code[Num%10000/1000]);
0000d4  f2427010          MOV      r0,#0x2710
0000d8  fbb4f1f0          UDIV     r1,r4,r0
0000dc  fb004011          MLS      r0,r0,r1,r4
0000e0  f44f717a          MOV      r1,#0x3e8
0000e4  fbb0f0f1          UDIV     r0,r0,r1
0000e8  4933              LDR      r1,|L8.440|
0000ea  5c0e              LDRB     r6,[r1,r0]
0000ec  4630              MOV      r0,r6
0000ee  f7fffffe          BL       TM1638_Write
;;;190    	TM1638_Write(code[Num%10000/1000]);			//写数据
0000f2  f2427010          MOV      r0,#0x2710
0000f6  fbb4f1f0          UDIV     r1,r4,r0
0000fa  fb004011          MLS      r0,r0,r1,r4
0000fe  f44f717a          MOV      r1,#0x3e8
000102  fbb0f0f1          UDIV     r0,r0,r1
000106  492c              LDR      r1,|L8.440|
000108  5c0e              LDRB     r6,[r1,r0]
00010a  4630              MOV      r0,r6
00010c  f7fffffe          BL       TM1638_Write
;;;191    	TM1638_Write(code[Num%1000/100]);
000110  f44f707a          MOV      r0,#0x3e8
000114  fbb4f1f0          UDIV     r1,r4,r0
000118  fb004011          MLS      r0,r0,r1,r4
00011c  2164              MOVS     r1,#0x64
00011e  fbb0f0f1          UDIV     r0,r0,r1
000122  4925              LDR      r1,|L8.440|
000124  5c0e              LDRB     r6,[r1,r0]
000126  4630              MOV      r0,r6
000128  f7fffffe          BL       TM1638_Write
;;;192    	TM1638_Write(code[Num%1000/100]);			//写数据
00012c  f44f707a          MOV      r0,#0x3e8
000130  fbb4f1f0          UDIV     r1,r4,r0
000134  fb004011          MLS      r0,r0,r1,r4
000138  2164              MOVS     r1,#0x64
00013a  fbb0f0f1          UDIV     r0,r0,r1
00013e  491e              LDR      r1,|L8.440|
000140  5c0e              LDRB     r6,[r1,r0]
000142  4630              MOV      r0,r6
000144  f7fffffe          BL       TM1638_Write
;;;193    	TM1638_Write(code[Num%100/10]);
000148  2064              MOVS     r0,#0x64
00014a  fbb4f1f0          UDIV     r1,r4,r0
00014e  fb004011          MLS      r0,r0,r1,r4
000152  210a              MOVS     r1,#0xa
000154  fbb0f0f1          UDIV     r0,r0,r1
000158  4917              LDR      r1,|L8.440|
00015a  5c0e              LDRB     r6,[r1,r0]
00015c  4630              MOV      r0,r6
00015e  f7fffffe          BL       TM1638_Write
;;;194    	TM1638_Write(code[Num%100/10]);			//写数据
000162  2064              MOVS     r0,#0x64
000164  fbb4f1f0          UDIV     r1,r4,r0
000168  fb004011          MLS      r0,r0,r1,r4
00016c  210a              MOVS     r1,#0xa
00016e  fbb0f0f1          UDIV     r0,r0,r1
000172  4911              LDR      r1,|L8.440|
000174  5c0e              LDRB     r6,[r1,r0]
000176  4630              MOV      r0,r6
000178  f7fffffe          BL       TM1638_Write
;;;195    	TM1638_Write(code[Num%10]);
00017c  200a              MOVS     r0,#0xa
00017e  fbb4f1f0          UDIV     r1,r4,r0
000182  fb004011          MLS      r0,r0,r1,r4
000186  490c              LDR      r1,|L8.440|
000188  5c0e              LDRB     r6,[r1,r0]
00018a  4630              MOV      r0,r6
00018c  f7fffffe          BL       TM1638_Write
;;;196    	TM1638_Write(code[Num%10]);			//写数据
000190  200a              MOVS     r0,#0xa
000192  fbb4f1f0          UDIV     r1,r4,r0
000196  fb004011          MLS      r0,r0,r1,r4
00019a  4907              LDR      r1,|L8.440|
00019c  5c0e              LDRB     r6,[r1,r0]
00019e  4630              MOV      r0,r6
0001a0  f7fffffe          BL       TM1638_Write
;;;197    	STB=1;
0001a4  2001              MOVS     r0,#1
0001a6  4907              LDR      r1,|L8.452|
0001a8  f8c10190          STR      r0,[r1,#0x190]
;;;198    }
0001ac  bd70              POP      {r4-r6,pc}
;;;199    /*
                          ENDP

0001ae  0000              DCW      0x0000
                  |L8.432|
                          DCD      0x42210190
                  |L8.436|
                          DCD      0x00989680
                  |L8.440|
                          DCD      code
                  |L8.444|
                          DCD      0x000f4240
                  |L8.448|
                          DCD      0x000186a0
                  |L8.452|
                          DCD      0x42210000

                          AREA ||i.Write_allLED||, CODE, READONLY, ALIGN=1

                  Write_allLED PROC
;;;212    *******************************************************************************/
;;;213    void Write_allLED(unsigned char LED_flag)					//控制全部LED函数，LED_flag表示各个LED状态
000000  b530              PUSH     {r4,r5,lr}
;;;214    {
000002  4605              MOV      r5,r0
;;;215    	unsigned char i;
;;;216    	for(i=0;i<8;i++)
000004  2400              MOVS     r4,#0
000006  e012              B        |L9.46|
                  |L9.8|
;;;217    		{
;;;218    			if(LED_flag&(1<<i))
000008  2001              MOVS     r0,#1
00000a  40a0              LSLS     r0,r0,r4
00000c  4028              ANDS     r0,r0,r5
00000e  b130              CBZ      r0,|L9.30|
;;;219    				//Write_DATA(2*i+1,3);
;;;220    				Write_DATA(2*i+1,1);
000010  0061              LSLS     r1,r4,#1
000012  1c49              ADDS     r1,r1,#1
000014  b2c8              UXTB     r0,r1
000016  2101              MOVS     r1,#1
000018  f7fffffe          BL       Write_DATA
00001c  e005              B        |L9.42|
                  |L9.30|
;;;221    			else
;;;222    				Write_DATA(2*i+1,0);
00001e  0061              LSLS     r1,r4,#1
000020  1c49              ADDS     r1,r1,#1
000022  b2c8              UXTB     r0,r1
000024  2100              MOVS     r1,#0
000026  f7fffffe          BL       Write_DATA
                  |L9.42|
00002a  1c60              ADDS     r0,r4,#1              ;216
00002c  b2c4              UXTB     r4,r0                 ;216
                  |L9.46|
00002e  2c08              CMP      r4,#8                 ;216
000030  dbea              BLT      |L9.8|
;;;223    		}
;;;224    }
000032  bd30              POP      {r4,r5,pc}
;;;225    /*******************************************************************************
                          ENDP


                          AREA ||i.init_TM1638||, CODE, READONLY, ALIGN=2

                  init_TM1638 PROC
;;;231    //TM1638初始化函数
;;;232    void init_TM1638(void)
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234    	unsigned char i;
;;;235    	GPIO_Configuration_OPP50	(DIO_Port,	DIO_Pin);			//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度50MHz----V20170605
000002  2180              MOVS     r1,#0x80
000004  4811              LDR      r0,|L10.76|
000006  f7fffffe          BL       GPIO_Configuration_OPP50
;;;236    	GPIO_Configuration_OPP50	(CLK_Port,	CLK_Pin);			//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度50MHz----V20170605
00000a  2120              MOVS     r1,#0x20
00000c  480f              LDR      r0,|L10.76|
00000e  f7fffffe          BL       GPIO_Configuration_OPP50
;;;237    	GPIO_Configuration_OPP50	(STB_Port,	STB_Pin);			//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度50MHz----V20170605
000012  2110              MOVS     r1,#0x10
000014  480d              LDR      r0,|L10.76|
000016  f7fffffe          BL       GPIO_Configuration_OPP50
;;;238    	
;;;239    	Write_COM(0x8F);       //亮度 (0x88-0x8f)8级亮度可调
00001a  208f              MOVS     r0,#0x8f
00001c  f7fffffe          BL       Write_COM
;;;240    	Write_COM(0x40);       //采用地址自动加1
000020  2040              MOVS     r0,#0x40
000022  f7fffffe          BL       Write_COM
;;;241    	STB=0;		           //
000026  2000              MOVS     r0,#0
000028  4909              LDR      r1,|L10.80|
00002a  6008              STR      r0,[r1,#0]
;;;242    	TM1638_Write(0xC0);    //设置起始地址
00002c  20c0              MOVS     r0,#0xc0
00002e  f7fffffe          BL       TM1638_Write
;;;243    
;;;244    	for(i=0;i<16;i++)	   //传送16个字节的数据
000032  2400              MOVS     r4,#0
000034  e004              B        |L10.64|
                  |L10.54|
;;;245    		TM1638_Write(0xFF);
000036  20ff              MOVS     r0,#0xff
000038  f7fffffe          BL       TM1638_Write
00003c  1c60              ADDS     r0,r4,#1              ;244
00003e  b2c4              UXTB     r4,r0                 ;244
                  |L10.64|
000040  2c10              CMP      r4,#0x10              ;244
000042  dbf8              BLT      |L10.54|
;;;246    	STB=1;
000044  2001              MOVS     r0,#1
000046  4902              LDR      r1,|L10.80|
000048  6008              STR      r0,[r1,#0]
;;;247    }
00004a  bd10              POP      {r4,pc}
;;;248    
                          ENDP

                  |L10.76|
                          DCD      0x40010800
                  |L10.80|
                          DCD      0x42210190

                          AREA ||.data||, DATA, ALIGN=0

                  code
000000  3f065b4f          DCB      0x3f,0x06,0x5b,0x4f
000004  666d7d07          DCB      0x66,0x6d,0x7d,0x07
000008  7f6f777c          DCB      0x7f,0x6f,0x77,0x7c
00000c  395e7971          DCB      0x39,0x5e,0x79,0x71
