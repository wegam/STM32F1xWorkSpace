; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\diskio.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\diskio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\diskio.crf ..\..\Driver\FatFs\source\diskio.c]
                          THUMB

                          AREA ||i.MMC_disk_initialize||, CODE, READONLY, ALIGN=1

                  MMC_disk_initialize PROC
;;;40     //}
;;;41     __weak int MMC_disk_initialize(void)
000000  2000              MOVS     r0,#0
;;;42     {
;;;43       return 0;
;;;44     }
000002  4770              BX       lr
;;;45     __weak int USB_disk_initialize(void)
                          ENDP


                          AREA ||i.MMC_disk_read||, CODE, READONLY, ALIGN=1

                  MMC_disk_read PROC
;;;53     //}
;;;54     __weak int MMC_disk_read(BYTE *buff,DWORD sector,UINT count)
000000  4603              MOV      r3,r0
;;;55     {
;;;56       return 0;
000002  2000              MOVS     r0,#0
;;;57     }
000004  4770              BX       lr
;;;58     __weak int USB_disk_read(BYTE *buff,DWORD sector,UINT count)
                          ENDP


                          AREA ||i.MMC_disk_status||, CODE, READONLY, ALIGN=1

                  MMC_disk_status PROC
;;;27     //}
;;;28     __weak int MMC_disk_status(void)
000000  2000              MOVS     r0,#0
;;;29     {
;;;30       return 0;
;;;31     }
000002  4770              BX       lr
;;;32     __weak int USB_disk_status(void)
                          ENDP


                          AREA ||i.MMC_disk_write||, CODE, READONLY, ALIGN=1

                  MMC_disk_write PROC
;;;66     //}
;;;67     __weak int MMC_disk_write(const BYTE *buff,DWORD sector,UINT count)
000000  4603              MOV      r3,r0
;;;68     {
;;;69       return 0;
000002  2000              MOVS     r0,#0
;;;70     }
000004  4770              BX       lr
;;;71     __weak int USB_disk_write(const BYTE *buff,DWORD sector,UINT count)
                          ENDP


                          AREA ||i.USB_disk_initialize||, CODE, READONLY, ALIGN=1

                  USB_disk_initialize PROC
;;;44     }
;;;45     __weak int USB_disk_initialize(void)
000000  2000              MOVS     r0,#0
;;;46     {
;;;47       return 0;
;;;48     }
000002  4770              BX       lr
;;;49     //-------------------disk_read
                          ENDP


                          AREA ||i.USB_disk_read||, CODE, READONLY, ALIGN=1

                  USB_disk_read PROC
;;;57     }
;;;58     __weak int USB_disk_read(BYTE *buff,DWORD sector,UINT count)
000000  4603              MOV      r3,r0
;;;59     {
;;;60       return 0;
000002  2000              MOVS     r0,#0
;;;61     }
000004  4770              BX       lr
;;;62     //-------------------disk_write
                          ENDP


                          AREA ||i.USB_disk_status||, CODE, READONLY, ALIGN=1

                  USB_disk_status PROC
;;;31     }
;;;32     __weak int USB_disk_status(void)
000000  2000              MOVS     r0,#0
;;;33     {
;;;34       return 0;
;;;35     }
000002  4770              BX       lr
;;;36     //-------------------disk_initialize
                          ENDP


                          AREA ||i.USB_disk_write||, CODE, READONLY, ALIGN=1

                  USB_disk_write PROC
;;;70     }
;;;71     __weak int USB_disk_write(const BYTE *buff,DWORD sector,UINT count)
000000  4603              MOV      r3,r0
;;;72     {
;;;73       return 0;
000002  2000              MOVS     r0,#0
;;;74     }
000004  4770              BX       lr
;;;75     //====================添加__weak占位函数END
                          ENDP


                          AREA ||i.disk_initialize||, CODE, READONLY, ALIGN=1

                  disk_initialize PROC
;;;113    
;;;114    DSTATUS disk_initialize (
000000  b570              PUSH     {r4-r6,lr}
;;;115    	BYTE pdrv				/* Physical drive nmuber to identify the drive */
;;;116    )
;;;117    {
000002  4604              MOV      r4,r0
;;;118    	DSTATUS stat;
;;;119    	int result;
;;;120    
;;;121    	switch (pdrv)
000004  b124              CBZ      r4,|L9.16|
000006  2c01              CMP      r4,#1
000008  d007              BEQ      |L9.26|
00000a  2c02              CMP      r4,#2
00000c  d10f              BNE      |L9.46|
00000e  e009              B        |L9.36|
                  |L9.16|
;;;122      {
;;;123    	case DEV_RAM :
;;;124    //		result = RAM_disk_initialize();
;;;125        
;;;126    
;;;127        // translate the reslut code here
;;;128        result = SD_disk_initialize();
000010  f7fffffe          BL       SD_disk_initialize
000014  4606              MOV      r6,r0
;;;129    
;;;130    		return stat;
000016  4628              MOV      r0,r5
                  |L9.24|
;;;131    
;;;132    	case DEV_MMC :
;;;133    		result = MMC_disk_initialize();
;;;134    
;;;135    		// translate the reslut code here
;;;136    
;;;137    		return stat;
;;;138    
;;;139    	case DEV_USB :
;;;140    		result = USB_disk_initialize();
;;;141    
;;;142    		// translate the reslut code here
;;;143    
;;;144    		return stat;
;;;145    	}
;;;146    	return STA_NOINIT;
;;;147    }
000018  bd70              POP      {r4-r6,pc}
                  |L9.26|
00001a  f7fffffe          BL       MMC_disk_initialize
00001e  4606              MOV      r6,r0                 ;133
000020  4628              MOV      r0,r5                 ;137
000022  e7f9              B        |L9.24|
                  |L9.36|
000024  f7fffffe          BL       USB_disk_initialize
000028  4606              MOV      r6,r0                 ;140
00002a  4628              MOV      r0,r5                 ;144
00002c  e7f4              B        |L9.24|
                  |L9.46|
00002e  2001              MOVS     r0,#1                 ;146
000030  e7f2              B        |L9.24|
;;;148    
                          ENDP


                          AREA ||i.disk_ioctl||, CODE, READONLY, ALIGN=1

                  disk_ioctl PROC
;;;276    
;;;277    DRESULT disk_ioctl (
000000  b510              PUSH     {r4,lr}
;;;278    	BYTE pdrv,  /* Physical drive nmuber (0..) */
;;;279    	BYTE cmd,		/* Control code */
;;;280    	void *buff  /* Buffer to send/receive control data */
;;;281    )
;;;282    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;283    	DRESULT res;
;;;284    	int result;
;;;285    
;;;286    	switch (pdrv) {
000006  b123              CBZ      r3,|L10.18|
000008  2b01              CMP      r3,#1
00000a  d004              BEQ      |L10.22|
00000c  2b02              CMP      r3,#2
00000e  d106              BNE      |L10.30|
000010  e003              B        |L10.26|
                  |L10.18|
;;;287    	case DEV_RAM :
;;;288    
;;;289    		// Process of the command for the RAM drive
;;;290    
;;;291    		return res;
000012  4608              MOV      r0,r1
                  |L10.20|
;;;292    
;;;293    	case DEV_MMC :
;;;294    
;;;295    		// Process of the command for the MMC/SD card
;;;296    
;;;297    		return res;
;;;298    
;;;299    	case DEV_USB :
;;;300    
;;;301    		// Process of the command the USB drive
;;;302    
;;;303    		return res;
;;;304    	}
;;;305    
;;;306    	return RES_PARERR;
;;;307    }
000014  bd10              POP      {r4,pc}
                  |L10.22|
000016  4608              MOV      r0,r1                 ;297
000018  e7fc              B        |L10.20|
                  |L10.26|
00001a  4608              MOV      r0,r1                 ;303
00001c  e7fa              B        |L10.20|
                  |L10.30|
00001e  2004              MOVS     r0,#4                 ;306
000020  e7f8              B        |L10.20|
;;;308    
                          ENDP


                          AREA ||i.disk_read||, CODE, READONLY, ALIGN=1

                  disk_read PROC
;;;167    *******************************************************************************/
;;;168    DRESULT disk_read (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;169    	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
;;;170    	BYTE *buff,		/* Data buffer to store read data */
;;;171    	DWORD sector,	/* Start sector in LBA */
;;;172    	UINT count		/* Number of sectors to read */
;;;173    )
;;;174    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;175    	DRESULT res;
;;;176    //	int result;
;;;177    
;;;178    	switch (pdrv) {
00000c  b125              CBZ      r5,|L11.24|
00000e  2d01              CMP      r5,#1
000010  d00b              BEQ      |L11.42|
000012  2d02              CMP      r5,#2
000014  d119              BNE      |L11.74|
000016  e010              B        |L11.58|
                  |L11.24|
;;;179    	case DEV_RAM :
;;;180        // translate the reslut code here
;;;181    //		result = RAM_disk_read(buff, sector, count);
;;;182    
;;;183    		// translate the reslut code here
;;;184        res = SD_disk_read(buff, sector, count);
000018  4642              MOV      r2,r8
00001a  4639              MOV      r1,r7
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       SD_disk_read
000022  b2c4              UXTB     r4,r0
;;;185    
;;;186    		return res;
000024  4620              MOV      r0,r4
                  |L11.38|
;;;187    
;;;188    	case DEV_MMC :
;;;189    		// translate the arguments here
;;;190    
;;;191    		res = MMC_disk_read(buff, sector, count);
;;;192    
;;;193    		// translate the reslut code here
;;;194    
;;;195    		return res;
;;;196    
;;;197    	case DEV_USB :
;;;198    		// translate the arguments here
;;;199    
;;;200    		res = USB_disk_read(buff, sector, count);
;;;201    
;;;202    		// translate the reslut code here
;;;203    
;;;204    		return res;
;;;205    	}
;;;206    
;;;207    	return RES_PARERR;
;;;208    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L11.42|
00002a  4642              MOV      r2,r8                 ;191
00002c  4639              MOV      r1,r7                 ;191
00002e  4630              MOV      r0,r6                 ;191
000030  f7fffffe          BL       MMC_disk_read
000034  b2c4              UXTB     r4,r0                 ;191
000036  4620              MOV      r0,r4                 ;195
000038  e7f5              B        |L11.38|
                  |L11.58|
00003a  4642              MOV      r2,r8                 ;200
00003c  4639              MOV      r1,r7                 ;200
00003e  4630              MOV      r0,r6                 ;200
000040  f7fffffe          BL       USB_disk_read
000044  b2c4              UXTB     r4,r0                 ;200
000046  4620              MOV      r0,r4                 ;204
000048  e7ed              B        |L11.38|
                  |L11.74|
00004a  2004              MOVS     r0,#4                 ;207
00004c  e7eb              B        |L11.38|
;;;209    
                          ENDP


                          AREA ||i.disk_status||, CODE, READONLY, ALIGN=1

                  disk_status PROC
;;;75     //====================添加__weak占位函数END
;;;76     DSTATUS disk_status (
000000  b570              PUSH     {r4-r6,lr}
;;;77     	BYTE pdrv		/* Physical drive nmuber to identify the drive */
;;;78     )
;;;79     {
000002  4604              MOV      r4,r0
;;;80     	DSTATUS stat;
;;;81     	int result;
;;;82     
;;;83     	switch (pdrv) {
000004  b124              CBZ      r4,|L12.16|
000006  2c01              CMP      r4,#1
000008  d007              BEQ      |L12.26|
00000a  2c02              CMP      r4,#2
00000c  d10f              BNE      |L12.46|
00000e  e009              B        |L12.36|
                  |L12.16|
;;;84     	case DEV_RAM :
;;;85     //		result = RAM_disk_status();
;;;86         
;;;87     		// translate the reslut code here
;;;88         result = SD_disk_status();
000010  f7fffffe          BL       SD_disk_status
000014  4606              MOV      r6,r0
;;;89     		return stat;
000016  4628              MOV      r0,r5
                  |L12.24|
;;;90     
;;;91     	case DEV_MMC :
;;;92     		result = MMC_disk_status();
;;;93     
;;;94     		// translate the reslut code here
;;;95     
;;;96     		return stat;
;;;97     
;;;98     	case DEV_USB :
;;;99     		result = USB_disk_status();
;;;100    
;;;101    		// translate the reslut code here
;;;102    
;;;103    		return stat;
;;;104    	}
;;;105    	return STA_NOINIT;
;;;106    }
000018  bd70              POP      {r4-r6,pc}
                  |L12.26|
00001a  f7fffffe          BL       MMC_disk_status
00001e  4606              MOV      r6,r0                 ;92
000020  4628              MOV      r0,r5                 ;96
000022  e7f9              B        |L12.24|
                  |L12.36|
000024  f7fffffe          BL       USB_disk_status
000028  4606              MOV      r6,r0                 ;99
00002a  4628              MOV      r0,r5                 ;103
00002c  e7f4              B        |L12.24|
                  |L12.46|
00002e  2001              MOVS     r0,#1                 ;105
000030  e7f2              B        |L12.24|
;;;107    
                          ENDP


                          AREA ||i.disk_write||, CODE, READONLY, ALIGN=1

                  disk_write PROC
;;;228    *******************************************************************************/
;;;229    DRESULT disk_write (
000000  e92d42f0          PUSH     {r4-r7,r9,lr}
;;;230                        BYTE pdrv,			  /* Physical drive nmuber to identify the drive */
;;;231                        const BYTE *buff,	/* Data to be written */
;;;232                        DWORD sector,		  /* Start sector in LBA */
;;;233                        UINT count			  /* Number of sectors to write */
;;;234    )
;;;235    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;236    	DRESULT res;
;;;237    	int result;
;;;238    
;;;239    	switch (pdrv) {
00000c  b124              CBZ      r4,|L13.24|
00000e  2c01              CMP      r4,#1
000010  d00b              BEQ      |L13.42|
000012  2c02              CMP      r4,#2
000014  d119              BNE      |L13.74|
000016  e010              B        |L13.58|
                  |L13.24|
;;;240    	case DEV_RAM :
;;;241    		// translate the arguments here
;;;242    
;;;243    //		result = RAM_disk_write(buff, sector, count);
;;;244    
;;;245    		// translate the reslut code here
;;;246        result = SD_disk_write(buff, sector, count);
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       SD_disk_write
000022  4681              MOV      r9,r0
;;;247    		return res;
000024  4640              MOV      r0,r8
                  |L13.38|
;;;248    
;;;249    	case DEV_MMC :
;;;250    		// translate the arguments here
;;;251    
;;;252    		result = MMC_disk_write(buff, sector, count);
;;;253    
;;;254    		// translate the reslut code here
;;;255    
;;;256    		return res;
;;;257    
;;;258    	case DEV_USB :
;;;259    		// translate the arguments here
;;;260    
;;;261    		result = USB_disk_write(buff, sector, count);
;;;262    
;;;263    		// translate the reslut code here
;;;264    
;;;265    		return res;
;;;266    	}
;;;267    
;;;268    	return RES_PARERR;
;;;269    }
000026  e8bd82f0          POP      {r4-r7,r9,pc}
                  |L13.42|
00002a  463a              MOV      r2,r7                 ;252
00002c  4631              MOV      r1,r6                 ;252
00002e  4628              MOV      r0,r5                 ;252
000030  f7fffffe          BL       MMC_disk_write
000034  4681              MOV      r9,r0                 ;252
000036  4640              MOV      r0,r8                 ;256
000038  e7f5              B        |L13.38|
                  |L13.58|
00003a  463a              MOV      r2,r7                 ;261
00003c  4631              MOV      r1,r6                 ;261
00003e  4628              MOV      r0,r5                 ;261
000040  f7fffffe          BL       USB_disk_write
000044  4681              MOV      r9,r0                 ;261
000046  4640              MOV      r0,r8                 ;265
000048  e7ed              B        |L13.38|
                  |L13.74|
00004a  2004              MOVS     r0,#4                 ;268
00004c  e7eb              B        |L13.38|
;;;270    
                          ENDP

