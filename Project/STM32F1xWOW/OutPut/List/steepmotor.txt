; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\steepmotor.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\steepmotor.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\steepmotor.crf ..\..\Driver\Components\SCR\SteepMotor.C]
                          THUMB

                          AREA ||i.StepMotorCCW||, CODE, READONLY, ALIGN=1

                  StepMotorCCW PROC
;;;137    *******************************************************************************/
;;;138    void StepMotorCCW(SteepMotorDef *STEP_MOTOx,u16	SetFrequency,u16 SetPlusUp,u16 SetPlusUpNum,u16	SetPlusDown,u16	SetPlusDownNum,u32 SetPulsTotal)		//逆时针旋转
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;139    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9a08          LDRD     r9,r10,[sp,#0x20]
000010  f8dd8028          LDR      r8,[sp,#0x28]
;;;140    	if(SetFrequency==0	||	SetPulsTotal==0)
000014  b115              CBZ      r5,|L1.28|
000016  f1b80f00          CMP      r8,#0
00001a  d104              BNE      |L1.38|
                  |L1.28|
;;;141    	{
;;;142    		STEP_MOTOx->SetPulsPort->BRR	=	STEP_MOTOx->SetPulsPin;
00001c  8920              LDRH     r0,[r4,#8]
00001e  6861              LDR      r1,[r4,#4]
000020  6148              STR      r0,[r1,#0x14]
                  |L1.34|
;;;143    		return;
;;;144    	}
;;;145    	else
;;;146    	{
;;;147    		STEP_MOTOx->SetDIRPort->BSRR	=	STEP_MOTOx->SetDIRPin;	//高电平：逆时针转
;;;148    		STEP_MOTOx->SetPulsPort->BRR	=	STEP_MOTOx->SetPulsPin;		//输出低电平
;;;149    		
;;;150    		STEP_MOTOx->SetFrequency		=	SetFrequency;							//起始输出频率
;;;151    		STEP_MOTOx->SetPlusUp				=	SetPlusUp;								//加速频率间隔
;;;152    		STEP_MOTOx->SetPlusUpNum		=	SetPlusUpNum;							//加速脉冲个数
;;;153    		
;;;154    		STEP_MOTOx->SetPlusDown			=	SetPlusDown;							//减速频率间隔
;;;155    		STEP_MOTOx->SetPlusDownNum	=	SetPlusDownNum;						//减速脉冲个数
;;;156    		
;;;157    		STEP_MOTOx->SetPulsTotal		=	SetPulsTotal;							//需要输出脉冲总数
;;;158    		
;;;159    		STEP_MOTOx->RunFlag					=	0;												//0:未运行，1-定时器开启
;;;160    		STEP_MOTOx->PulsFlag				=	0;												//一个脉冲上升沿和下降需要两个定时器中断
;;;161    		
;;;162    		STEP_MOTOx->GetFrequency		=	SetFrequency;							//频率 最小频率1Hz
;;;163    		STEP_MOTOx->GetPlusUpNum		=	0;												//加速脉冲个数
;;;164    		STEP_MOTOx->GetPulsTotal		=	0;												//已经输出脉冲计数
;;;165    		
;;;166    		TIM_SetFreq(STEP_MOTOx->SetTIMx,STEP_MOTOx->SetFrequency);		//设定频率
;;;167    		
;;;168    		STEP_MOTOx->SetTIMx->CR1 |= ((u16)0x0001);							//CR1_CEN_Set开启定时器
;;;169    //		TIM_Cmd(STEP_MOTOx->SetTIMx, ENABLE);		
;;;170    	}
;;;171    }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L1.38|
000026  8a20              LDRH     r0,[r4,#0x10]         ;147
000028  68e1              LDR      r1,[r4,#0xc]          ;147
00002a  6108              STR      r0,[r1,#0x10]         ;147
00002c  8920              LDRH     r0,[r4,#8]            ;148
00002e  6861              LDR      r1,[r4,#4]            ;148
000030  6148              STR      r0,[r1,#0x14]         ;148
000032  8265              STRH     r5,[r4,#0x12]         ;150
000034  82a6              STRH     r6,[r4,#0x14]         ;151
000036  82e7              STRH     r7,[r4,#0x16]         ;152
000038  f8a49018          STRH     r9,[r4,#0x18]         ;154
00003c  f8a4a01a          STRH     r10,[r4,#0x1a]        ;155
000040  f8c4801c          STR      r8,[r4,#0x1c]         ;157
000044  2000              MOVS     r0,#0                 ;159
000046  f8840020          STRB     r0,[r4,#0x20]         ;159
00004a  f8840021          STRB     r0,[r4,#0x21]         ;160
00004e  8465              STRH     r5,[r4,#0x22]         ;162
000050  84a0              STRH     r0,[r4,#0x24]         ;163
000052  62a0              STR      r0,[r4,#0x28]         ;164
000054  8a61              LDRH     r1,[r4,#0x12]         ;166
000056  6820              LDR      r0,[r4,#0]            ;166
000058  f7fffffe          BL       TIM_SetFreq
00005c  6820              LDR      r0,[r4,#0]            ;168
00005e  8800              LDRH     r0,[r0,#0]            ;168
000060  f0400001          ORR      r0,r0,#1              ;168
000064  6821              LDR      r1,[r4,#0]            ;168
000066  8008              STRH     r0,[r1,#0]            ;168
000068  bf00              NOP      
00006a  e7da              B        |L1.34|
;;;172    /*******************************************************************************
                          ENDP


                          AREA ||i.StepMotorCW||, CODE, READONLY, ALIGN=1

                  StepMotorCW PROC
;;;92     *******************************************************************************/
;;;93     void StepMotorCW(SteepMotorDef *STEP_MOTOx,u16	SetFrequency,u16 SetPlusUp,u16 SetPlusUpNum,u16	SetPlusDown,u16	SetPlusDownNum,u32 SetPulsTotal)		//顺时针旋转
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;94     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9a08          LDRD     r9,r10,[sp,#0x20]
000010  f8dd8028          LDR      r8,[sp,#0x28]
;;;95     	if(SetFrequency==0	||	SetPulsTotal==0)
000014  b115              CBZ      r5,|L2.28|
000016  f1b80f00          CMP      r8,#0
00001a  d104              BNE      |L2.38|
                  |L2.28|
;;;96     	{
;;;97     		(STEP_MOTOx->SetPulsPort)->BRR	=	STEP_MOTOx->SetPulsPin;
00001c  8920              LDRH     r0,[r4,#8]
00001e  6861              LDR      r1,[r4,#4]
000020  6148              STR      r0,[r1,#0x14]
                  |L2.34|
;;;98     		return;
;;;99     	}
;;;100    	else
;;;101    	{
;;;102    		(STEP_MOTOx->SetPulsPort)->BRR	=	STEP_MOTOx->SetDIRPin;		//低电平：顺时针转
;;;103    		(STEP_MOTOx->SetPulsPort)->BRR	=	STEP_MOTOx->SetPulsPin;		//输出低电平
;;;104    		
;;;105    		STEP_MOTOx->SetFrequency		=	SetFrequency;							//起始输出频率
;;;106    		STEP_MOTOx->SetPlusUp				=	SetPlusUp;								//加速频率间隔
;;;107    		STEP_MOTOx->SetPlusUpNum		=	SetPlusUpNum;							//加速脉冲个数
;;;108    		
;;;109    		STEP_MOTOx->SetPlusDown			=	SetPlusDown;							//减速频率间隔
;;;110    		STEP_MOTOx->SetPlusDownNum	=	SetPlusDownNum;						//减速脉冲个数
;;;111    		
;;;112    		STEP_MOTOx->SetPulsTotal		=	SetPulsTotal;							//需要输出脉冲总数
;;;113    		
;;;114    		
;;;115    		STEP_MOTOx->RunFlag					=	0;												//0:未运行，1-定时器开启
;;;116    		STEP_MOTOx->PulsFlag				=	0;												//一个脉冲上升沿和下降需要两个定时器中断
;;;117    		
;;;118    		STEP_MOTOx->GetFrequency		=	SetFrequency;							//频率 最小频率1Hz
;;;119    		STEP_MOTOx->GetPlusUpNum		=	0;												//加速脉冲个数
;;;120    		STEP_MOTOx->GetPulsTotal		=	0;												//已经输出脉冲计数
;;;121    
;;;122    		TIM_SetFreq(STEP_MOTOx->SetTIMx,STEP_MOTOx->SetFrequency);		//设定频率
;;;123    		
;;;124    		STEP_MOTOx->SetTIMx->CR1 |= ((u16)0x0001);							//CR1_CEN_Set开启定时器
;;;125    
;;;126    //		TIM_Cmd(STEP_MOTOx->SetTIMx, ENABLE);		
;;;127    	}
;;;128    }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L2.38|
000026  8a20              LDRH     r0,[r4,#0x10]         ;102
000028  6861              LDR      r1,[r4,#4]            ;102
00002a  6148              STR      r0,[r1,#0x14]         ;102
00002c  8920              LDRH     r0,[r4,#8]            ;103
00002e  6861              LDR      r1,[r4,#4]            ;103
000030  6148              STR      r0,[r1,#0x14]         ;103
000032  8265              STRH     r5,[r4,#0x12]         ;105
000034  82a6              STRH     r6,[r4,#0x14]         ;106
000036  82e7              STRH     r7,[r4,#0x16]         ;107
000038  f8a49018          STRH     r9,[r4,#0x18]         ;109
00003c  f8a4a01a          STRH     r10,[r4,#0x1a]        ;110
000040  f8c4801c          STR      r8,[r4,#0x1c]         ;112
000044  2000              MOVS     r0,#0                 ;115
000046  f8840020          STRB     r0,[r4,#0x20]         ;115
00004a  f8840021          STRB     r0,[r4,#0x21]         ;116
00004e  8465              STRH     r5,[r4,#0x22]         ;118
000050  84a0              STRH     r0,[r4,#0x24]         ;119
000052  62a0              STR      r0,[r4,#0x28]         ;120
000054  8a61              LDRH     r1,[r4,#0x12]         ;122
000056  6820              LDR      r0,[r4,#0]            ;122
000058  f7fffffe          BL       TIM_SetFreq
00005c  6820              LDR      r0,[r4,#0]            ;124
00005e  8800              LDRH     r0,[r0,#0]            ;124
000060  f0400001          ORR      r0,r0,#1              ;124
000064  6821              LDR      r1,[r4,#0]            ;124
000066  8008              STRH     r0,[r1,#0]            ;124
000068  bf00              NOP      
00006a  e7da              B        |L2.34|
;;;129    /*******************************************************************************
                          ENDP


                          AREA ||i.StepMotorConfiguration||, CODE, READONLY, ALIGN=1

                  StepMotorConfiguration PROC
;;;26     *******************************************************************************/
;;;27     void StepMotorConfiguration(SteepMotorDef *STEP_MOTOx)
000000  b510              PUSH     {r4,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29     	//==================配置脉冲输出管脚
;;;30     	GPIO_Configuration_OPP50	(STEP_MOTOx->SetPulsPort,	STEP_MOTOx->SetPulsPin);			//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度50MHz----V20170605
000004  8921              LDRH     r1,[r4,#8]
000006  6860              LDR      r0,[r4,#4]
000008  f7fffffe          BL       GPIO_Configuration_OPP50
;;;31     	//==================配置方向输出管脚
;;;32     	GPIO_Configuration_OPP50	(STEP_MOTOx->SetDIRPort,	STEP_MOTOx->SetDIRPin);			//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度50MHz----V20170605
00000c  8a21              LDRH     r1,[r4,#0x10]
00000e  68e0              LDR      r0,[r4,#0xc]
000010  f7fffffe          BL       GPIO_Configuration_OPP50
;;;33     	//==================配置定时器
;;;34     	TIM_ConfigurationFreq(STEP_MOTOx->SetTIMx,STEP_MOTOx->SetFrequency);					//定时器频率配置方式，最小频率1Hz,最大100KHz
000014  8a61              LDRH     r1,[r4,#0x12]
000016  6820              LDR      r0,[r4,#0]
000018  f7fffffe          BL       TIM_ConfigurationFreq
;;;35     }
00001c  bd10              POP      {r4,pc}
;;;36     /*******************************************************************************
                          ENDP


                          AREA ||i.StepMotorPause||, CODE, READONLY, ALIGN=1

                  StepMotorPause PROC
;;;210    *******************************************************************************/
;;;211    void StepMotorPause(SteepMotorDef *STEP_MOTOx)
000000  4770              BX       lr
;;;212    {
;;;213    
;;;214    }
;;;215    
                          ENDP


                          AREA ||i.StepMotorServer||, CODE, READONLY, ALIGN=1

                  StepMotorServer PROC
;;;44     *******************************************************************************/
;;;45     unsigned char StepMotorServer(SteepMotorDef *STEP_MOTOx)
000000  b510              PUSH     {r4,lr}
;;;46     {
000002  4604              MOV      r4,r0
;;;47     	if((STEP_MOTOx->SetTIMx->SR & TIM_IT_Update)==TIM_IT_Update)			//表示定时中断---运行计数未完
000004  6820              LDR      r0,[r4,#0]
000006  8a00              LDRH     r0,[r0,#0x10]
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d055              BEQ      |L5.188|
;;;48     	{
;;;49     		if(STEP_MOTOx->GetPulsTotal>=STEP_MOTOx->SetPulsTotal)
000010  69e1              LDR      r1,[r4,#0x1c]
000012  6aa0              LDR      r0,[r4,#0x28]
000014  4288              CMP      r0,r1
000016  d30b              BCC      |L5.48|
;;;50     		{
;;;51     			STEP_MOTOx->SetTIMx->CR1 &= ((u16)0x03FE);		//CR1_CEN_Reset关闭定时器
000018  6820              LDR      r0,[r4,#0]
00001a  8800              LDRH     r0,[r0,#0]
00001c  f24031fe          MOV      r1,#0x3fe
000020  4008              ANDS     r0,r0,r1
000022  6821              LDR      r1,[r4,#0]
000024  8008              STRH     r0,[r1,#0]
;;;52     //			TIM_Cmd(STEP_MOTOx->SetTIMx, DISABLE);
;;;53     			STEP_MOTOx->SetPulsPort->BRR	=	STEP_MOTOx->SetPulsPin;		//输出低电平
000026  8920              LDRH     r0,[r4,#8]
000028  6861              LDR      r1,[r4,#4]
00002a  6148              STR      r0,[r1,#0x14]
;;;54     			return 1;
00002c  2001              MOVS     r0,#1
                  |L5.46|
;;;55     		}
;;;56     		else if(STEP_MOTOx->PulsFlag	!=	0)
;;;57     		{
;;;58     			STEP_MOTOx->PulsFlag	=	0;				//原状态为高电平
;;;59     			STEP_MOTOx->SetPulsPort->BRR	=	STEP_MOTOx->SetPulsPin;
;;;60     			STEP_MOTOx->GetPulsTotal++;				//输出脉冲计数
;;;61     		}
;;;62     		else if(STEP_MOTOx->PulsFlag	!=	1)
;;;63     		{
;;;64     			STEP_MOTOx->PulsFlag	=	1;				//原状态为低电平
;;;65     			STEP_MOTOx->SetPulsPort->BSRR	=	STEP_MOTOx->SetPulsPin;			
;;;66     		}
;;;67     		
;;;68     		//==============加减速处理
;;;69     		if(STEP_MOTOx->SetPlusUp	&&	STEP_MOTOx->SetPlusUpNum	&&	(STEP_MOTOx->GetPulsTotal<STEP_MOTOx->SetPlusUpNum)	&&(STEP_MOTOx->PulsFlag	!=0))
;;;70     		{
;;;71     			STEP_MOTOx->SetFrequency+=STEP_MOTOx->SetPlusUp;
;;;72     			TIM_SetFreq(STEP_MOTOx->SetTIMx,STEP_MOTOx->SetFrequency);		//设定频率
;;;73     		}
;;;74     		else if(STEP_MOTOx->SetPlusDown	&&	STEP_MOTOx->SetPlusDownNum	&&	((STEP_MOTOx->GetPulsTotal+STEP_MOTOx->SetPlusDownNum)>STEP_MOTOx->SetPulsTotal)	&&	(STEP_MOTOx->PulsFlag	!=0))
;;;75     		{
;;;76     			STEP_MOTOx->SetFrequency-=STEP_MOTOx->SetPlusDown;
;;;77     			TIM_SetFreq(STEP_MOTOx->SetTIMx,STEP_MOTOx->SetFrequency);		//设定频率
;;;78     		}
;;;79     		STEP_MOTOx->SetTIMx->SR = (u16)~TIM_IT_Update;			//清除中断标志
;;;80     		return 1;
;;;81     	}
;;;82     	return 0;
;;;83     }
00002e  bd10              POP      {r4,pc}
                  |L5.48|
000030  f8940021          LDRB     r0,[r4,#0x21]         ;56
000034  b148              CBZ      r0,|L5.74|
000036  2000              MOVS     r0,#0                 ;58
000038  f8840021          STRB     r0,[r4,#0x21]         ;58
00003c  8920              LDRH     r0,[r4,#8]            ;59
00003e  6861              LDR      r1,[r4,#4]            ;59
000040  6148              STR      r0,[r1,#0x14]         ;59
000042  6aa0              LDR      r0,[r4,#0x28]         ;60
000044  1c40              ADDS     r0,r0,#1              ;60
000046  62a0              STR      r0,[r4,#0x28]         ;60
000048  e009              B        |L5.94|
                  |L5.74|
00004a  f8940021          LDRB     r0,[r4,#0x21]         ;62
00004e  2801              CMP      r0,#1                 ;62
000050  d005              BEQ      |L5.94|
000052  2001              MOVS     r0,#1                 ;64
000054  f8840021          STRB     r0,[r4,#0x21]         ;64
000058  8920              LDRH     r0,[r4,#8]            ;65
00005a  6861              LDR      r1,[r4,#4]            ;65
00005c  6108              STR      r0,[r1,#0x10]         ;65
                  |L5.94|
00005e  8aa0              LDRH     r0,[r4,#0x14]         ;69
000060  b188              CBZ      r0,|L5.134|
000062  8ae0              LDRH     r0,[r4,#0x16]         ;69
000064  b178              CBZ      r0,|L5.134|
000066  8ae1              LDRH     r1,[r4,#0x16]         ;69
000068  6aa0              LDR      r0,[r4,#0x28]         ;69
00006a  4288              CMP      r0,r1                 ;69
00006c  d20b              BCS      |L5.134|
00006e  f8940021          LDRB     r0,[r4,#0x21]         ;69
000072  b140              CBZ      r0,|L5.134|
000074  8a60              LDRH     r0,[r4,#0x12]         ;71
000076  8aa1              LDRH     r1,[r4,#0x14]         ;71
000078  4408              ADD      r0,r0,r1              ;71
00007a  8260              STRH     r0,[r4,#0x12]         ;71
00007c  8a61              LDRH     r1,[r4,#0x12]         ;72
00007e  6820              LDR      r0,[r4,#0]            ;72
000080  f7fffffe          BL       TIM_SetFreq
000084  e014              B        |L5.176|
                  |L5.134|
000086  8b20              LDRH     r0,[r4,#0x18]         ;74
000088  b190              CBZ      r0,|L5.176|
00008a  8b60              LDRH     r0,[r4,#0x1a]         ;74
00008c  b180              CBZ      r0,|L5.176|
00008e  8b61              LDRH     r1,[r4,#0x1a]         ;74
000090  6aa0              LDR      r0,[r4,#0x28]         ;74
000092  4408              ADD      r0,r0,r1              ;74
000094  69e1              LDR      r1,[r4,#0x1c]         ;74
000096  4288              CMP      r0,r1                 ;74
000098  d90a              BLS      |L5.176|
00009a  f8940021          LDRB     r0,[r4,#0x21]         ;74
00009e  b138              CBZ      r0,|L5.176|
0000a0  8a60              LDRH     r0,[r4,#0x12]         ;76
0000a2  8b21              LDRH     r1,[r4,#0x18]         ;76
0000a4  1a40              SUBS     r0,r0,r1              ;76
0000a6  8260              STRH     r0,[r4,#0x12]         ;76
0000a8  8a61              LDRH     r1,[r4,#0x12]         ;77
0000aa  6820              LDR      r0,[r4,#0]            ;77
0000ac  f7fffffe          BL       TIM_SetFreq
                  |L5.176|
0000b0  f64f70fe          MOV      r0,#0xfffe            ;79
0000b4  6821              LDR      r1,[r4,#0]            ;79
0000b6  8208              STRH     r0,[r1,#0x10]         ;79
0000b8  2001              MOVS     r0,#1                 ;80
0000ba  e7b8              B        |L5.46|
                  |L5.188|
0000bc  2000              MOVS     r0,#0                 ;82
0000be  e7b6              B        |L5.46|
;;;84     /*******************************************************************************
                          ENDP


                          AREA ||i.StepMotorStop||, CODE, READONLY, ALIGN=1

                  StepMotorStop PROC
;;;180    *******************************************************************************/
;;;181    void StepMotorStop(SteepMotorDef *STEP_MOTOx)
000000  6801              LDR      r1,[r0,#0]
;;;182    {
;;;183    	STEP_MOTOx->SetTIMx->CR1 &= ((u16)0x03FE);		//CR1_CEN_Reset关闭定时器
000002  8809              LDRH     r1,[r1,#0]
000004  f24032fe          MOV      r2,#0x3fe
000008  4011              ANDS     r1,r1,r2
00000a  6802              LDR      r2,[r0,#0]
00000c  8011              STRH     r1,[r2,#0]
;;;184    	STEP_MOTOx->SetPulsPort->BRR	=	STEP_MOTOx->SetPulsPin;		//输出低电平
00000e  8901              LDRH     r1,[r0,#8]
000010  6842              LDR      r2,[r0,#4]
000012  6151              STR      r1,[r2,#0x14]
;;;185    	
;;;186    	STEP_MOTOx->SetFrequency		=	0;						//起始输出频率
000014  2100              MOVS     r1,#0
000016  8241              STRH     r1,[r0,#0x12]
;;;187    	STEP_MOTOx->SetPlusUp				=	0;						//加速频率间隔
000018  8281              STRH     r1,[r0,#0x14]
;;;188    	STEP_MOTOx->SetPlusUpNum		=	0;						//加速脉冲个数
00001a  82c1              STRH     r1,[r0,#0x16]
;;;189    	
;;;190    	STEP_MOTOx->SetPlusDown			=	0;						//减速频率间隔
00001c  8301              STRH     r1,[r0,#0x18]
;;;191    	STEP_MOTOx->SetPlusDownNum	=	0;						//减速脉冲个数
00001e  8341              STRH     r1,[r0,#0x1a]
;;;192    	
;;;193    	STEP_MOTOx->SetPulsTotal		=	0;						//需要输出脉冲总数
000020  61c1              STR      r1,[r0,#0x1c]
;;;194    	
;;;195    	STEP_MOTOx->RunFlag					=	0;						//0:未运行，1-定时器开启
000022  f8801020          STRB     r1,[r0,#0x20]
;;;196    	STEP_MOTOx->PulsFlag				=	0;						//一个脉冲上升沿和下降需要两个定时器中断
000026  f8801021          STRB     r1,[r0,#0x21]
;;;197    	
;;;198    	STEP_MOTOx->GetFrequency		=	0;						//频率 最小频率1Hz
00002a  8441              STRH     r1,[r0,#0x22]
;;;199    	STEP_MOTOx->GetPlusUpNum		=	0;						//加速脉冲个数
00002c  8481              STRH     r1,[r0,#0x24]
;;;200    	STEP_MOTOx->GetPulsTotal		=	0;						//已经输出脉冲计数
00002e  6281              STR      r1,[r0,#0x28]
;;;201    }
000030  4770              BX       lr
;;;202    /*******************************************************************************
                          ENDP

