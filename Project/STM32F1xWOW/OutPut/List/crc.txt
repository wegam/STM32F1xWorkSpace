; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\crc.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\crc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\crc.crf ..\..\Driver\Tool\CRC.C]
                          THUMB

                          AREA ||i.CRC16_CCITT||, CODE, READONLY, ALIGN=1

                  CRC16_CCITT PROC
;;;94     *******************************************************************************/
;;;95     unsigned short CRC16_CCITT(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5fc              PUSH     {r2-r7,lr}
;;;96     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;97       unsigned short 	wCRCin 	= 0x0000;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;98       unsigned short 	wCPoly 	= 0x1021;
00000a  f2410721          MOV      r7,#0x1021
;;;99       unsigned char 	wChar 	= 0;
00000e  9000              STR      r0,[sp,#0]
;;;100      int	i	=	0;
000010  2600              MOVS     r6,#0
;;;101    	
;;;102      while (usDataLen--) 	
000012  e025              B        |L1.96|
                  |L1.20|
;;;103      {
;;;104    			wChar = *(puchMsg++);
000014  f8140b01          LDRB     r0,[r4],#1
000018  9000              STR      r0,[sp,#0]
;;;105    			InvertUint8(&wChar,&wChar);
00001a  4669              MOV      r1,sp
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       InvertUint8
;;;106    			wCRCin ^= (wChar << 8);
000022  f8bd0004          LDRH     r0,[sp,#4]
000026  f89d1000          LDRB     r1,[sp,#0]
00002a  ea802001          EOR      r0,r0,r1,LSL #8
00002e  9001              STR      r0,[sp,#4]
;;;107    			for(i = 0;i < 8;i++)
000030  2600              MOVS     r6,#0
000032  e013              B        |L1.92|
                  |L1.52|
;;;108    			{
;;;109    				if(wCRCin & 0x8000)
000034  f8bd0004          LDRH     r0,[sp,#4]
000038  f4004000          AND      r0,r0,#0x8000
00003c  b130              CBZ      r0,|L1.76|
;;;110    					wCRCin = (wCRCin << 1) ^ wCPoly;
00003e  f8bd0004          LDRH     r0,[sp,#4]
000042  ea870040          EOR      r0,r7,r0,LSL #1
000046  b280              UXTH     r0,r0
000048  9001              STR      r0,[sp,#4]
00004a  e006              B        |L1.90|
                  |L1.76|
;;;111    				else
;;;112    					wCRCin = wCRCin << 1;
00004c  f8bd0004          LDRH     r0,[sp,#4]
000050  f64f71ff          MOV      r1,#0xffff
000054  ea010040          AND      r0,r1,r0,LSL #1
000058  9001              STR      r0,[sp,#4]
                  |L1.90|
00005a  1c76              ADDS     r6,r6,#1              ;107
                  |L1.92|
00005c  2e08              CMP      r6,#8                 ;107
00005e  dbe9              BLT      |L1.52|
                  |L1.96|
000060  1e28              SUBS     r0,r5,#0              ;102
000062  f1a50501          SUB      r5,r5,#1              ;102
000066  d1d5              BNE      |L1.20|
;;;113    			}
;;;114      }
;;;115      InvertUint16(&wCRCin,&wCRCin);
000068  a901              ADD      r1,sp,#4
00006a  a801              ADD      r0,sp,#4
00006c  f7fffffe          BL       InvertUint16
;;;116      return (wCRCin) ;
000070  f8bd0004          LDRH     r0,[sp,#4]
;;;117    }
000074  bdfc              POP      {r2-r7,pc}
;;;118    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC16_CCITT_FALSE||, CODE, READONLY, ALIGN=1

                  CRC16_CCITT_FALSE PROC
;;;126    *******************************************************************************/
;;;127    unsigned short CRC16_CCITT_FALSE(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;128    {
000002  4602              MOV      r2,r0
;;;129      unsigned short wCRCin = 0xFFFF;
000004  f64f70ff          MOV      r0,#0xffff
;;;130      unsigned short wCPoly = 0x1021;
000008  f2410421          MOV      r4,#0x1021
;;;131      unsigned char wChar = 0;
00000c  2500              MOVS     r5,#0
;;;132      int	i	=	0;
00000e  2300              MOVS     r3,#0
;;;133    	
;;;134      while (usDataLen--) 	
000010  e013              B        |L2.58|
                  |L2.18|
;;;135      {
;;;136            wChar = *(puchMsg++);
000012  f8125b01          LDRB     r5,[r2],#1
;;;137            wCRCin ^= (wChar << 8);
000016  ea802005          EOR      r0,r0,r5,LSL #8
;;;138            for(i = 0;i < 8;i++)
00001a  2300              MOVS     r3,#0
00001c  e00b              B        |L2.54|
                  |L2.30|
;;;139            {
;;;140              if(wCRCin & 0x8000)
00001e  f4004600          AND      r6,r0,#0x8000
000022  b11e              CBZ      r6,|L2.44|
;;;141                wCRCin = (wCRCin << 1) ^ wCPoly;
000024  ea840640          EOR      r6,r4,r0,LSL #1
000028  b2b0              UXTH     r0,r6
00002a  e003              B        |L2.52|
                  |L2.44|
;;;142              else
;;;143                wCRCin = wCRCin << 1;
00002c  f64f76ff          MOV      r6,#0xffff
000030  ea060040          AND      r0,r6,r0,LSL #1
                  |L2.52|
000034  1c5b              ADDS     r3,r3,#1              ;138
                  |L2.54|
000036  2b08              CMP      r3,#8                 ;138
000038  dbf1              BLT      |L2.30|
                  |L2.58|
00003a  1e0e              SUBS     r6,r1,#0              ;134
00003c  f1a10101          SUB      r1,r1,#1              ;134
000040  d1e7              BNE      |L2.18|
;;;144            }
;;;145      }
;;;146      return (wCRCin) ;
;;;147    }
000042  bdf0              POP      {r4-r7,pc}
;;;148    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC16_IBM||, CODE, READONLY, ALIGN=1

                  CRC16_IBM PROC
;;;253    *******************************************************************************/
;;;254    unsigned short CRC16_IBM(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5fc              PUSH     {r2-r7,lr}
;;;255    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;256      unsigned short wCRCin = 0x0000;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;257      unsigned short wCPoly = 0x8005;
00000a  f2480705          MOV      r7,#0x8005
;;;258      unsigned char wChar 	= 0;
00000e  9000              STR      r0,[sp,#0]
;;;259      int	i	=	0;
000010  2600              MOVS     r6,#0
;;;260    	
;;;261      while (usDataLen--) 	
000012  e025              B        |L3.96|
                  |L3.20|
;;;262      {
;;;263            wChar = *(puchMsg++);
000014  f8140b01          LDRB     r0,[r4],#1
000018  9000              STR      r0,[sp,#0]
;;;264            InvertUint8(&wChar,&wChar);
00001a  4669              MOV      r1,sp
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       InvertUint8
;;;265            wCRCin ^= (wChar << 8);
000022  f8bd0004          LDRH     r0,[sp,#4]
000026  f89d1000          LDRB     r1,[sp,#0]
00002a  ea802001          EOR      r0,r0,r1,LSL #8
00002e  9001              STR      r0,[sp,#4]
;;;266            for(i = 0;i < 8;i++)
000030  2600              MOVS     r6,#0
000032  e013              B        |L3.92|
                  |L3.52|
;;;267            {
;;;268              if(wCRCin & 0x8000)
000034  f8bd0004          LDRH     r0,[sp,#4]
000038  f4004000          AND      r0,r0,#0x8000
00003c  b130              CBZ      r0,|L3.76|
;;;269                wCRCin = (wCRCin << 1) ^ wCPoly;
00003e  f8bd0004          LDRH     r0,[sp,#4]
000042  ea870040          EOR      r0,r7,r0,LSL #1
000046  b280              UXTH     r0,r0
000048  9001              STR      r0,[sp,#4]
00004a  e006              B        |L3.90|
                  |L3.76|
;;;270              else
;;;271                wCRCin = wCRCin << 1;
00004c  f8bd0004          LDRH     r0,[sp,#4]
000050  f64f71ff          MOV      r1,#0xffff
000054  ea010040          AND      r0,r1,r0,LSL #1
000058  9001              STR      r0,[sp,#4]
                  |L3.90|
00005a  1c76              ADDS     r6,r6,#1              ;266
                  |L3.92|
00005c  2e08              CMP      r6,#8                 ;266
00005e  dbe9              BLT      |L3.52|
                  |L3.96|
000060  1e28              SUBS     r0,r5,#0              ;261
000062  f1a50501          SUB      r5,r5,#1              ;261
000066  d1d5              BNE      |L3.20|
;;;272            }
;;;273      }
;;;274      InvertUint16(&wCRCin,&wCRCin);
000068  a901              ADD      r1,sp,#4
00006a  a801              ADD      r0,sp,#4
00006c  f7fffffe          BL       InvertUint16
;;;275      return (wCRCin) ;
000070  f8bd0004          LDRH     r0,[sp,#4]
;;;276    }
000074  bdfc              POP      {r2-r7,pc}
;;;277    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC16_MAXIM||, CODE, READONLY, ALIGN=1

                  CRC16_MAXIM PROC
;;;285    *******************************************************************************/
;;;286    unsigned short CRC16_MAXIM(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5fc              PUSH     {r2-r7,lr}
;;;287    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;288      unsigned short wCRCin = 0x0000;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;289      unsigned short wCPoly = 0x8005;
00000a  f2480705          MOV      r7,#0x8005
;;;290      unsigned char wChar 	= 0;
00000e  9000              STR      r0,[sp,#0]
;;;291      int	i	=	0;
000010  2600              MOVS     r6,#0
;;;292    	
;;;293      while (usDataLen--) 	
000012  e025              B        |L4.96|
                  |L4.20|
;;;294      {
;;;295            wChar = *(puchMsg++);
000014  f8140b01          LDRB     r0,[r4],#1
000018  9000              STR      r0,[sp,#0]
;;;296            InvertUint8(&wChar,&wChar);
00001a  4669              MOV      r1,sp
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       InvertUint8
;;;297            wCRCin ^= (wChar << 8);
000022  f8bd0004          LDRH     r0,[sp,#4]
000026  f89d1000          LDRB     r1,[sp,#0]
00002a  ea802001          EOR      r0,r0,r1,LSL #8
00002e  9001              STR      r0,[sp,#4]
;;;298            for(i = 0;i < 8;i++)
000030  2600              MOVS     r6,#0
000032  e013              B        |L4.92|
                  |L4.52|
;;;299            {
;;;300              if(wCRCin & 0x8000)
000034  f8bd0004          LDRH     r0,[sp,#4]
000038  f4004000          AND      r0,r0,#0x8000
00003c  b130              CBZ      r0,|L4.76|
;;;301                wCRCin = (wCRCin << 1) ^ wCPoly;
00003e  f8bd0004          LDRH     r0,[sp,#4]
000042  ea870040          EOR      r0,r7,r0,LSL #1
000046  b280              UXTH     r0,r0
000048  9001              STR      r0,[sp,#4]
00004a  e006              B        |L4.90|
                  |L4.76|
;;;302              else
;;;303                wCRCin = wCRCin << 1;
00004c  f8bd0004          LDRH     r0,[sp,#4]
000050  f64f71ff          MOV      r1,#0xffff
000054  ea010040          AND      r0,r1,r0,LSL #1
000058  9001              STR      r0,[sp,#4]
                  |L4.90|
00005a  1c76              ADDS     r6,r6,#1              ;298
                  |L4.92|
00005c  2e08              CMP      r6,#8                 ;298
00005e  dbe9              BLT      |L4.52|
                  |L4.96|
000060  1e28              SUBS     r0,r5,#0              ;293
000062  f1a50501          SUB      r5,r5,#1              ;293
000066  d1d5              BNE      |L4.20|
;;;304            }
;;;305      }
;;;306      InvertUint16(&wCRCin,&wCRCin);
000068  a901              ADD      r1,sp,#4
00006a  a801              ADD      r0,sp,#4
00006c  f7fffffe          BL       InvertUint16
;;;307      return (wCRCin^0xFFFF) ;
000070  f8bd0004          LDRH     r0,[sp,#4]
000074  f64f71ff          MOV      r1,#0xffff
000078  4048              EORS     r0,r0,r1
;;;308    }
00007a  bdfc              POP      {r2-r7,pc}
;;;309    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC16_MODBUS||, CODE, READONLY, ALIGN=1

                  CRC16_MODBUS PROC
;;;221    *******************************************************************************/
;;;222    unsigned short CRC16_MODBUS(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5fc              PUSH     {r2-r7,lr}
;;;223    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;224      unsigned short wCRCin = 0xFFFF;
000006  f64f70ff          MOV      r0,#0xffff
00000a  9001              STR      r0,[sp,#4]
;;;225      unsigned short wCPoly = 0x8005;
00000c  f2480705          MOV      r7,#0x8005
;;;226      unsigned char wChar 	= 0;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;227      int	i	=	0;
000014  2600              MOVS     r6,#0
;;;228    	
;;;229      while (usDataLen--) 	
000016  e025              B        |L5.100|
                  |L5.24|
;;;230      {
;;;231            wChar = *(puchMsg++);
000018  f8140b01          LDRB     r0,[r4],#1
00001c  9000              STR      r0,[sp,#0]
;;;232            InvertUint8(&wChar,&wChar);
00001e  4669              MOV      r1,sp
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       InvertUint8
;;;233            wCRCin ^= (wChar << 8);
000026  f8bd0004          LDRH     r0,[sp,#4]
00002a  f89d1000          LDRB     r1,[sp,#0]
00002e  ea802001          EOR      r0,r0,r1,LSL #8
000032  9001              STR      r0,[sp,#4]
;;;234            for(i = 0;i < 8;i++)
000034  2600              MOVS     r6,#0
000036  e013              B        |L5.96|
                  |L5.56|
;;;235            {
;;;236              if(wCRCin & 0x8000)
000038  f8bd0004          LDRH     r0,[sp,#4]
00003c  f4004000          AND      r0,r0,#0x8000
000040  b130              CBZ      r0,|L5.80|
;;;237                wCRCin = (wCRCin << 1) ^ wCPoly;
000042  f8bd0004          LDRH     r0,[sp,#4]
000046  ea870040          EOR      r0,r7,r0,LSL #1
00004a  b280              UXTH     r0,r0
00004c  9001              STR      r0,[sp,#4]
00004e  e006              B        |L5.94|
                  |L5.80|
;;;238              else
;;;239                wCRCin = wCRCin << 1;
000050  f8bd0004          LDRH     r0,[sp,#4]
000054  f64f71ff          MOV      r1,#0xffff
000058  ea010040          AND      r0,r1,r0,LSL #1
00005c  9001              STR      r0,[sp,#4]
                  |L5.94|
00005e  1c76              ADDS     r6,r6,#1              ;234
                  |L5.96|
000060  2e08              CMP      r6,#8                 ;234
000062  dbe9              BLT      |L5.56|
                  |L5.100|
000064  1e28              SUBS     r0,r5,#0              ;229
000066  f1a50501          SUB      r5,r5,#1              ;229
00006a  d1d5              BNE      |L5.24|
;;;240            }
;;;241      }
;;;242      InvertUint16(&wCRCin,&wCRCin);
00006c  a901              ADD      r1,sp,#4
00006e  a801              ADD      r0,sp,#4
000070  f7fffffe          BL       InvertUint16
;;;243      return (wCRCin) ;
000074  f8bd0004          LDRH     r0,[sp,#4]
;;;244    }
000078  bdfc              POP      {r2-r7,pc}
;;;245    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC16_USB||, CODE, READONLY, ALIGN=1

                  CRC16_USB PROC
;;;317    *******************************************************************************/
;;;318    unsigned short CRC16_USB(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5fc              PUSH     {r2-r7,lr}
;;;319    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;320      unsigned short wCRCin = 0xFFFF;
000006  f64f70ff          MOV      r0,#0xffff
00000a  9001              STR      r0,[sp,#4]
;;;321      unsigned short wCPoly = 0x8005;
00000c  f2480705          MOV      r7,#0x8005
;;;322      unsigned char wChar 	= 0;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;323      int i = 0;
000014  2600              MOVS     r6,#0
;;;324    	
;;;325      while (usDataLen--) 	
000016  e025              B        |L6.100|
                  |L6.24|
;;;326      {
;;;327            wChar = *(puchMsg++);
000018  f8140b01          LDRB     r0,[r4],#1
00001c  9000              STR      r0,[sp,#0]
;;;328            InvertUint8(&wChar,&wChar);
00001e  4669              MOV      r1,sp
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       InvertUint8
;;;329            wCRCin ^= (wChar << 8);
000026  f8bd0004          LDRH     r0,[sp,#4]
00002a  f89d1000          LDRB     r1,[sp,#0]
00002e  ea802001          EOR      r0,r0,r1,LSL #8
000032  9001              STR      r0,[sp,#4]
;;;330            for(i = 0;i < 8;i++)
000034  2600              MOVS     r6,#0
000036  e013              B        |L6.96|
                  |L6.56|
;;;331            {
;;;332              if(wCRCin & 0x8000)
000038  f8bd0004          LDRH     r0,[sp,#4]
00003c  f4004000          AND      r0,r0,#0x8000
000040  b130              CBZ      r0,|L6.80|
;;;333                wCRCin = (wCRCin << 1) ^ wCPoly;
000042  f8bd0004          LDRH     r0,[sp,#4]
000046  ea870040          EOR      r0,r7,r0,LSL #1
00004a  b280              UXTH     r0,r0
00004c  9001              STR      r0,[sp,#4]
00004e  e006              B        |L6.94|
                  |L6.80|
;;;334              else
;;;335                wCRCin = wCRCin << 1;
000050  f8bd0004          LDRH     r0,[sp,#4]
000054  f64f71ff          MOV      r1,#0xffff
000058  ea010040          AND      r0,r1,r0,LSL #1
00005c  9001              STR      r0,[sp,#4]
                  |L6.94|
00005e  1c76              ADDS     r6,r6,#1              ;330
                  |L6.96|
000060  2e08              CMP      r6,#8                 ;330
000062  dbe9              BLT      |L6.56|
                  |L6.100|
000064  1e28              SUBS     r0,r5,#0              ;325
000066  f1a50501          SUB      r5,r5,#1              ;325
00006a  d1d5              BNE      |L6.24|
;;;336            }
;;;337      }
;;;338      InvertUint16(&wCRCin,&wCRCin);
00006c  a901              ADD      r1,sp,#4
00006e  a801              ADD      r0,sp,#4
000070  f7fffffe          BL       InvertUint16
;;;339      return (wCRCin^0xFFFF) ;
000074  f8bd0004          LDRH     r0,[sp,#4]
000078  f64f71ff          MOV      r1,#0xffff
00007c  4048              EORS     r0,r0,r1
;;;340    }
00007e  bdfc              POP      {r2-r7,pc}
                          ENDP


                          AREA ||i.CRC16_X25||, CODE, READONLY, ALIGN=1

                  CRC16_X25 PROC
;;;186    *******************************************************************************/
;;;187    unsigned short CRC16_X25(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5fc              PUSH     {r2-r7,lr}
;;;188    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;189      unsigned short 	wCRCin 	= 0xFFFF;
000006  f64f70ff          MOV      r0,#0xffff
00000a  9001              STR      r0,[sp,#4]
;;;190      unsigned short 	wCPoly 	= 0x1021;
00000c  f2410721          MOV      r7,#0x1021
;;;191      unsigned char 	wChar 	= 0;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;192      int	i	=	0;
000014  2600              MOVS     r6,#0
;;;193    	
;;;194      while (usDataLen--) 	
000016  e025              B        |L7.100|
                  |L7.24|
;;;195      {
;;;196            wChar = *(puchMsg++);
000018  f8140b01          LDRB     r0,[r4],#1
00001c  9000              STR      r0,[sp,#0]
;;;197            InvertUint8(&wChar,&wChar);
00001e  4669              MOV      r1,sp
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       InvertUint8
;;;198            wCRCin ^= (wChar << 8);
000026  f8bd0004          LDRH     r0,[sp,#4]
00002a  f89d1000          LDRB     r1,[sp,#0]
00002e  ea802001          EOR      r0,r0,r1,LSL #8
000032  9001              STR      r0,[sp,#4]
;;;199            for(i = 0;i < 8;i++)
000034  2600              MOVS     r6,#0
000036  e013              B        |L7.96|
                  |L7.56|
;;;200            {
;;;201              if(wCRCin & 0x8000)
000038  f8bd0004          LDRH     r0,[sp,#4]
00003c  f4004000          AND      r0,r0,#0x8000
000040  b130              CBZ      r0,|L7.80|
;;;202                wCRCin = (wCRCin << 1) ^ wCPoly;
000042  f8bd0004          LDRH     r0,[sp,#4]
000046  ea870040          EOR      r0,r7,r0,LSL #1
00004a  b280              UXTH     r0,r0
00004c  9001              STR      r0,[sp,#4]
00004e  e006              B        |L7.94|
                  |L7.80|
;;;203              else
;;;204                wCRCin = wCRCin << 1;
000050  f8bd0004          LDRH     r0,[sp,#4]
000054  f64f71ff          MOV      r1,#0xffff
000058  ea010040          AND      r0,r1,r0,LSL #1
00005c  9001              STR      r0,[sp,#4]
                  |L7.94|
00005e  1c76              ADDS     r6,r6,#1              ;199
                  |L7.96|
000060  2e08              CMP      r6,#8                 ;199
000062  dbe9              BLT      |L7.56|
                  |L7.100|
000064  1e28              SUBS     r0,r5,#0              ;194
000066  f1a50501          SUB      r5,r5,#1              ;194
00006a  d1d5              BNE      |L7.24|
;;;205            }
;;;206      }
;;;207      InvertUint16(&wCRCin,&wCRCin);
00006c  a901              ADD      r1,sp,#4
00006e  a801              ADD      r0,sp,#4
000070  f7fffffe          BL       InvertUint16
;;;208    	return (wCRCin^0xFFFF) ;
000074  f8bd0004          LDRH     r0,[sp,#4]
000078  f64f71ff          MOV      r1,#0xffff
00007c  4048              EORS     r0,r0,r1
;;;209    //	wCRCin	=	wCRCin^0xFFFF;
;;;210    //	*puchMsg++	=	wCRCin&0XFF;
;;;211    //	*puchMsg++	=	wCRCin>>8&0XFF;
;;;212    }
00007e  bdfc              POP      {r2-r7,pc}
;;;213    /*******************************************************************************
                          ENDP


                          AREA ||i.CRC16_XMODEM||, CODE, READONLY, ALIGN=1

                  CRC16_XMODEM PROC
;;;156    *******************************************************************************/
;;;157    unsigned short CRC16_XMODEM(unsigned char *puchMsg, unsigned int usDataLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;158    {
000002  4602              MOV      r2,r0
;;;159      unsigned short 	wCRCin 	= 0x0000;
000004  2000              MOVS     r0,#0
;;;160      unsigned short 	wCPoly 	= 0x1021;
000006  f2410421          MOV      r4,#0x1021
;;;161      unsigned char 	wChar 	= 0;
00000a  2500              MOVS     r5,#0
;;;162      int	i	=	0;
00000c  2300              MOVS     r3,#0
;;;163    	
;;;164      while (usDataLen--) 	
00000e  e013              B        |L8.56|
                  |L8.16|
;;;165      {
;;;166            wChar = *(puchMsg++);
000010  f8125b01          LDRB     r5,[r2],#1
;;;167            wCRCin ^= (wChar << 8);
000014  ea802005          EOR      r0,r0,r5,LSL #8
;;;168            for(i = 0;i < 8;i++)
000018  2300              MOVS     r3,#0
00001a  e00b              B        |L8.52|
                  |L8.28|
;;;169            {
;;;170              if(wCRCin & 0x8000)
00001c  f4004600          AND      r6,r0,#0x8000
000020  b11e              CBZ      r6,|L8.42|
;;;171                wCRCin = (wCRCin << 1) ^ wCPoly;
000022  ea840640          EOR      r6,r4,r0,LSL #1
000026  b2b0              UXTH     r0,r6
000028  e003              B        |L8.50|
                  |L8.42|
;;;172              else
;;;173                wCRCin = wCRCin << 1;
00002a  f64f76ff          MOV      r6,#0xffff
00002e  ea060040          AND      r0,r6,r0,LSL #1
                  |L8.50|
000032  1c5b              ADDS     r3,r3,#1              ;168
                  |L8.52|
000034  2b08              CMP      r3,#8                 ;168
000036  dbf1              BLT      |L8.28|
                  |L8.56|
000038  1e0e              SUBS     r6,r1,#0              ;164
00003a  f1a10101          SUB      r1,r1,#1              ;164
00003e  d1e7              BNE      |L8.16|
;;;174            }
;;;175      }
;;;176      return (wCRCin) ;
;;;177    }
000040  bdf0              POP      {r4-r7,pc}
;;;178    /*******************************************************************************
                          ENDP


                          AREA ||i.InvertUint16||, CODE, READONLY, ALIGN=1

                  InvertUint16 PROC
;;;73     *******************************************************************************/
;;;74     void InvertUint16(unsigned short *dBuf,unsigned short *srcBuf)
000000  b53c              PUSH     {r2-r5,lr}
;;;75     {
000002  4602              MOV      r2,r0
;;;76     	int	i	=	0;
000004  2000              MOVS     r0,#0
;;;77     	unsigned short tmp[4];
;;;78     	tmp[0] = 0;
000006  2300              MOVS     r3,#0
000008  f8ad3000          STRH     r3,[sp,#0]
;;;79     	for(i=0; i< 16; i++)
00000c  bf00              NOP      
00000e  e00f              B        |L9.48|
                  |L9.16|
;;;80     	{
;;;81     		if(srcBuf[0]& (1 << i))
000010  880b              LDRH     r3,[r1,#0]
000012  2401              MOVS     r4,#1
000014  4084              LSLS     r4,r4,r0
000016  4023              ANDS     r3,r3,r4
000018  b14b              CBZ      r3,|L9.46|
;;;82     			tmp[0]|=1<<(15 - i);
00001a  f8bd3000          LDRH     r3,[sp,#0]
00001e  f1c0050f          RSB      r5,r0,#0xf
000022  2401              MOVS     r4,#1
000024  40ac              LSLS     r4,r4,r5
000026  4323              ORRS     r3,r3,r4
000028  b29b              UXTH     r3,r3
00002a  f8ad3000          STRH     r3,[sp,#0]
                  |L9.46|
00002e  1c40              ADDS     r0,r0,#1              ;79
                  |L9.48|
000030  2810              CMP      r0,#0x10              ;79
000032  dbed              BLT      |L9.16|
;;;83     	}
;;;84     	dBuf[0] = tmp[0];
000034  f8bd3000          LDRH     r3,[sp,#0]
000038  8013              STRH     r3,[r2,#0]
;;;85     } 
00003a  bd3c              POP      {r2-r5,pc}
;;;86     /*******************************************************************************
                          ENDP


                          AREA ||i.InvertUint8||, CODE, READONLY, ALIGN=1

                  InvertUint8 PROC
;;;52     *******************************************************************************/
;;;53     void InvertUint8(unsigned char *dBuf,unsigned char *srcBuf)
000000  b538              PUSH     {r3-r5,lr}
;;;54     {
000002  4602              MOV      r2,r0
;;;55     	int	i	=	0;
000004  2000              MOVS     r0,#0
;;;56     	unsigned char tmp[4];
;;;57     	tmp[0] = 0;
000006  2300              MOVS     r3,#0
000008  f88d3000          STRB     r3,[sp,#0]
;;;58     	for(i=0; i< 8; i++)
00000c  bf00              NOP      
00000e  e00f              B        |L10.48|
                  |L10.16|
;;;59     	{
;;;60     		if(srcBuf[0]& (1 << i))
000010  780b              LDRB     r3,[r1,#0]
000012  2401              MOVS     r4,#1
000014  4084              LSLS     r4,r4,r0
000016  4023              ANDS     r3,r3,r4
000018  b14b              CBZ      r3,|L10.46|
;;;61     		tmp[0]|=1<<(7-i);
00001a  f89d3000          LDRB     r3,[sp,#0]
00001e  f1c00507          RSB      r5,r0,#7
000022  2401              MOVS     r4,#1
000024  40ac              LSLS     r4,r4,r5
000026  4323              ORRS     r3,r3,r4
000028  b2db              UXTB     r3,r3
00002a  f88d3000          STRB     r3,[sp,#0]
                  |L10.46|
00002e  1c40              ADDS     r0,r0,#1              ;58
                  |L10.48|
000030  2808              CMP      r0,#8                 ;58
000032  dbed              BLT      |L10.16|
;;;62     	}
;;;63     	dBuf[0] = tmp[0];
000034  f89d3000          LDRB     r3,[sp,#0]
000038  7013              STRB     r3,[r2,#0]
;;;64     }
00003a  bd38              POP      {r3-r5,pc}
;;;65     /*******************************************************************************
                          ENDP

