; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_exti.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_exti.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_exti.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_exti.c]
                          THUMB

                          AREA ||i.EXTI_ClearFlag||, CODE, READONLY, ALIGN=2

                  EXTI_ClearFlag PROC
;;;163    *******************************************************************************/
;;;164    void EXTI_ClearFlag(u32 EXTI_Line)
000000  4901              LDR      r1,|L1.8|
;;;165    {
;;;166      /* Check the parameters */
;;;167      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;168      
;;;169      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;170    }
000004  4770              BX       lr
;;;171    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40010414

                          AREA ||i.EXTI_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  EXTI_ClearITPendingBit PROC
;;;210    *******************************************************************************/
;;;211    void EXTI_ClearITPendingBit(u32 EXTI_Line)
000000  4901              LDR      r1,|L2.8|
;;;212    {
;;;213      /* Check the parameters */
;;;214      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;215      
;;;216      EXTI->PR = EXTI_Line;
000002  6008              STR      r0,[r1,#0]
;;;217    }
000004  4770              BX       lr
;;;218    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40010414

                          AREA ||i.EXTI_DeInit||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;35     *******************************************************************************/
;;;36     void EXTI_DeInit(void)
000000  2000              MOVS     r0,#0
;;;37     {
;;;38       EXTI->IMR = 0x00000000;
000002  4906              LDR      r1,|L3.28|
000004  6008              STR      r0,[r1,#0]
;;;39       EXTI->EMR = 0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;40       EXTI->RTSR = 0x00000000; 
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;41       EXTI->FTSR = 0x00000000; 
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;42       EXTI->PR = 0x0007FFFF;
000012  4803              LDR      r0,|L3.32|
000014  4901              LDR      r1,|L3.28|
000016  3114              ADDS     r1,r1,#0x14
000018  6008              STR      r0,[r1,#0]
;;;43     }
00001a  4770              BX       lr
;;;44     
                          ENDP

                  |L3.28|
                          DCD      0x40010400
                  |L3.32|
                          DCD      0x0007ffff

                          AREA ||i.EXTI_GenerateSWInterrupt||, CODE, READONLY, ALIGN=2

                  EXTI_GenerateSWInterrupt PROC
;;;119    *******************************************************************************/
;;;120    void EXTI_GenerateSWInterrupt(u32 EXTI_Line)
000000  4902              LDR      r1,|L4.12|
;;;121    {
;;;122      /* Check the parameters */
;;;123      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;124      
;;;125      EXTI->SWIER |= EXTI_Line;
000002  6809              LDR      r1,[r1,#0]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L4.12|
000008  6011              STR      r1,[r2,#0]
;;;126    }
00000a  4770              BX       lr
;;;127    
                          ENDP

                  |L4.12|
                          DCD      0x40010410

                          AREA ||i.EXTI_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetFlagStatus PROC
;;;136    *******************************************************************************/
;;;137    FlagStatus EXTI_GetFlagStatus(u32 EXTI_Line)
000000  4601              MOV      r1,r0
;;;138    {
;;;139      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;140    
;;;141      /* Check the parameters */
;;;142      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;143      
;;;144      if ((EXTI->PR & EXTI_Line) != (u32)RESET)
000004  4a03              LDR      r2,|L5.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L5.16|
;;;145      {
;;;146        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L5.18|
                  |L5.16|
;;;147      }
;;;148      else
;;;149      {
;;;150        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L5.18|
;;;151      }
;;;152      return bitstatus;
;;;153    }
000012  4770              BX       lr
;;;154    
                          ENDP

                  |L5.20|
                          DCD      0x40010414

                          AREA ||i.EXTI_GetITStatus||, CODE, READONLY, ALIGN=2

                  EXTI_GetITStatus PROC
;;;180    *******************************************************************************/
;;;181    ITStatus EXTI_GetITStatus(u32 EXTI_Line)
000000  4601              MOV      r1,r0
;;;182    {
;;;183      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;184      u32 enablestatus = 0;
000004  2200              MOVS     r2,#0
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;188      
;;;189      enablestatus =  EXTI->IMR & EXTI_Line;
000006  4b07              LDR      r3,|L6.36|
000008  681b              LDR      r3,[r3,#0]
00000a  ea030201          AND      r2,r3,r1
;;;190    
;;;191      if (((EXTI->PR & EXTI_Line) != (u32)RESET) && (enablestatus != (u32)RESET))
00000e  4b05              LDR      r3,|L6.36|
000010  3314              ADDS     r3,r3,#0x14
000012  681b              LDR      r3,[r3,#0]
000014  400b              ANDS     r3,r3,r1
000016  b113              CBZ      r3,|L6.30|
000018  b10a              CBZ      r2,|L6.30|
;;;192      {
;;;193        bitstatus = SET;
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L6.32|
                  |L6.30|
;;;194      }
;;;195      else
;;;196      {
;;;197        bitstatus = RESET;
00001e  2000              MOVS     r0,#0
                  |L6.32|
;;;198      }
;;;199      return bitstatus;
;;;200    }
000020  4770              BX       lr
;;;201    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40010400

                          AREA ||i.EXTI_Init||, CODE, READONLY, ALIGN=2

                  EXTI_Init PROC
;;;54     *******************************************************************************/
;;;55     void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000000  7981              LDRB     r1,[r0,#6]
;;;56     {
;;;57       /* Check the parameters */
;;;58       assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;59       assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;60       assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;61       assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;62          
;;;63       if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
000002  2900              CMP      r1,#0
000004  d046              BEQ      |L7.148|
;;;64       {
;;;65         /* Clear EXTI line configuration */
;;;66         EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
000006  492a              LDR      r1,|L7.176|
000008  6809              LDR      r1,[r1,#0]
00000a  6802              LDR      r2,[r0,#0]
00000c  4391              BICS     r1,r1,r2
00000e  4a28              LDR      r2,|L7.176|
000010  6011              STR      r1,[r2,#0]
;;;67         EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
000012  1d11              ADDS     r1,r2,#4
000014  6809              LDR      r1,[r1,#0]
000016  6802              LDR      r2,[r0,#0]
000018  4391              BICS     r1,r1,r2
00001a  4a25              LDR      r2,|L7.176|
00001c  1d12              ADDS     r2,r2,#4
00001e  6011              STR      r1,[r2,#0]
;;;68         
;;;69         *(vu32 *)(EXTI_BASE + (u32)EXTI_InitStruct->EXTI_Mode)|= EXTI_InitStruct->EXTI_Line;
000020  7901              LDRB     r1,[r0,#4]
000022  4a24              LDR      r2,|L7.180|
000024  4411              ADD      r1,r1,r2
000026  f8d11400          LDR      r1,[r1,#0x400]
00002a  6802              LDR      r2,[r0,#0]
00002c  4311              ORRS     r1,r1,r2
00002e  7902              LDRB     r2,[r0,#4]
000030  4b20              LDR      r3,|L7.180|
000032  441a              ADD      r2,r2,r3
000034  f8c21400          STR      r1,[r2,#0x400]
;;;70     
;;;71         /* Clear Rising Falling edge configuration */
;;;72         EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
000038  491d              LDR      r1,|L7.176|
00003a  3108              ADDS     r1,r1,#8
00003c  6809              LDR      r1,[r1,#0]
00003e  6802              LDR      r2,[r0,#0]
000040  4391              BICS     r1,r1,r2
000042  4a1b              LDR      r2,|L7.176|
000044  3208              ADDS     r2,r2,#8
000046  6011              STR      r1,[r2,#0]
;;;73         EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
000048  1d11              ADDS     r1,r2,#4
00004a  6809              LDR      r1,[r1,#0]
00004c  6802              LDR      r2,[r0,#0]
00004e  4391              BICS     r1,r1,r2
000050  4a17              LDR      r2,|L7.176|
000052  320c              ADDS     r2,r2,#0xc
000054  6011              STR      r1,[r2,#0]
;;;74         
;;;75         /* Select the trigger for the selected external interrupts */
;;;76         if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
000056  7941              LDRB     r1,[r0,#5]
000058  2910              CMP      r1,#0x10
00005a  d10e              BNE      |L7.122|
;;;77         {
;;;78           /* Rising Falling edge */
;;;79           EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
00005c  1f11              SUBS     r1,r2,#4
00005e  6809              LDR      r1,[r1,#0]
000060  6802              LDR      r2,[r0,#0]
000062  4311              ORRS     r1,r1,r2
000064  4a12              LDR      r2,|L7.176|
000066  3208              ADDS     r2,r2,#8
000068  6011              STR      r1,[r2,#0]
;;;80           EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
00006a  1d11              ADDS     r1,r2,#4
00006c  6809              LDR      r1,[r1,#0]
00006e  6802              LDR      r2,[r0,#0]
000070  4311              ORRS     r1,r1,r2
000072  4a0f              LDR      r2,|L7.176|
000074  320c              ADDS     r2,r2,#0xc
000076  6011              STR      r1,[r2,#0]
000078  e018              B        |L7.172|
                  |L7.122|
;;;81         }
;;;82         else
;;;83         {
;;;84           *(vu32 *)(EXTI_BASE + (u32)EXTI_InitStruct->EXTI_Trigger)|= EXTI_InitStruct->EXTI_Line;
00007a  7941              LDRB     r1,[r0,#5]
00007c  4a0d              LDR      r2,|L7.180|
00007e  4411              ADD      r1,r1,r2
000080  f8d11400          LDR      r1,[r1,#0x400]
000084  6802              LDR      r2,[r0,#0]
000086  4311              ORRS     r1,r1,r2
000088  7942              LDRB     r2,[r0,#5]
00008a  4b0a              LDR      r3,|L7.180|
00008c  441a              ADD      r2,r2,r3
00008e  f8c21400          STR      r1,[r2,#0x400]
000092  e00b              B        |L7.172|
                  |L7.148|
;;;85         }
;;;86       }
;;;87       else
;;;88       {
;;;89         /* Disable the selected external lines */
;;;90         *(vu32 *)(EXTI_BASE + (u32)EXTI_InitStruct->EXTI_Mode)&= ~EXTI_InitStruct->EXTI_Line;
000094  7901              LDRB     r1,[r0,#4]
000096  4a07              LDR      r2,|L7.180|
000098  4411              ADD      r1,r1,r2
00009a  f8d11400          LDR      r1,[r1,#0x400]
00009e  6802              LDR      r2,[r0,#0]
0000a0  4391              BICS     r1,r1,r2
0000a2  7902              LDRB     r2,[r0,#4]
0000a4  4b03              LDR      r3,|L7.180|
0000a6  441a              ADD      r2,r2,r3
0000a8  f8c21400          STR      r1,[r2,#0x400]
                  |L7.172|
;;;91       }
;;;92     }
0000ac  4770              BX       lr
;;;93     
                          ENDP

0000ae  0000              DCW      0x0000
                  |L7.176|
                          DCD      0x40010400
                  |L7.180|
                          DCD      0x40010000

                          AREA ||i.EXTI_StructInit||, CODE, READONLY, ALIGN=1

                  EXTI_StructInit PROC
;;;101    *******************************************************************************/
;;;102    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
000000  2100              MOVS     r1,#0
;;;103    {
;;;104      EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
000002  6001              STR      r1,[r0,#0]
;;;105      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
000004  7101              STRB     r1,[r0,#4]
;;;106      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
000006  210c              MOVS     r1,#0xc
000008  7141              STRB     r1,[r0,#5]
;;;107      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
00000a  2100              MOVS     r1,#0
00000c  7181              STRB     r1,[r0,#6]
;;;108    }
00000e  4770              BX       lr
;;;109    
                          ENDP

