; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\at24c02.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\at24c02.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\at24c02.crf ..\..\Driver\Components\SCR\AT24C02.C]
                          THUMB

                          AREA ||i.AT24C02_Read||, CODE, READONLY, ALIGN=1

                  AT24C02_Read PROC
;;;50     *******************************************************************************/
;;;51     unsigned char AT24C02_Read(sI2CDef *sI2C,unsigned char Addr)
000000  b570              PUSH     {r4-r6,lr}
;;;52     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;53     	unsigned char Data	=	0;
000006  2600              MOVS     r6,#0
;;;54     	
;;;55     	I2C_Start(sI2C);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       I2C_Start
;;;56     	
;;;57     	I2C_SendByte(sI2C,Write_24C02Addr);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
00000e  21a0              MOVS     r1,#0xa0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       I2C_SendByte
;;;58     	
;;;59     	I2C_WaitAck(sI2C);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       I2C_WaitAck
;;;60     	
;;;61     	I2C_SendByte(sI2C,Addr);						//发送待读取地址
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       I2C_SendByte
;;;62     	
;;;63     	I2C_WaitAck(sI2C);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       I2C_WaitAck
;;;64     	
;;;65     	I2C_Start(sI2C);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       I2C_Start
;;;66     	
;;;67     	I2C_SendByte(sI2C,Read_24C02Addr);	//发送待读取地址
000030  21a1              MOVS     r1,#0xa1
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       I2C_SendByte
;;;68     	
;;;69     	I2C_WaitAck(sI2C);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       I2C_WaitAck
;;;70     	
;;;71     	
;;;72     	
;;;73     	I2C_SDASetIn(sI2C);
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       I2C_SDASetIn
;;;74     	
;;;75     	Data	=	I2C_ReadByte(sI2C);					//从I2C总线读取8个bits的数据  ,首先读出的是数据的最高位（MSB）
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       I2C_ReadByte
00004a  4606              MOV      r6,r0
;;;76     	
;;;77     	I2C_NAck(sI2C);								//CPU产生一个NACK信号(NACK即无应答信号)
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       I2C_NAck
;;;78     	
;;;79     	I2C_Stop(sI2C);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       I2C_Stop
;;;80     	
;;;81     	return Data;
000058  4630              MOV      r0,r6
;;;82     }
00005a  bd70              POP      {r4-r6,pc}
;;;83     /*******************************************************************************
                          ENDP


                          AREA ||i.AT24C02_ReadBuffer||, CODE, READONLY, ALIGN=1

                  AT24C02_ReadBuffer PROC
;;;128    *******************************************************************************/
;;;129    unsigned char AT24C02_ReadBuffer(sI2CDef *sI2C,unsigned char Addr,unsigned char *Buffer,unsigned char Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;130    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;131    	unsigned char i	=	0;
00000c  2400              MOVS     r4,#0
;;;132    		
;;;133    	I2C_Start(sI2C);
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       I2C_Start
;;;134    	
;;;135    	I2C_SendByte(sI2C,Write_24C02Addr);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
000014  21a0              MOVS     r1,#0xa0
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       I2C_SendByte
;;;136    	
;;;137    	if(I2C_WaitAck(sI2C)	==	I2C_NACK)
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       I2C_WaitAck
000022  b910              CBNZ     r0,|L2.42|
;;;138    			return 0;
000024  2000              MOVS     r0,#0
                  |L2.38|
;;;139    	
;;;140    	I2C_SendByte(sI2C,Addr);						//发送待读取地址
;;;141    	
;;;142    	if(I2C_WaitAck(sI2C)	==	I2C_NACK)
;;;143    			return 0;
;;;144    	
;;;145    	I2C_Start(sI2C);
;;;146    	
;;;147    	I2C_SendByte(sI2C,Read_24C02Addr);	//发送待读取地址
;;;148    	
;;;149    	if(I2C_WaitAck(sI2C)	==	I2C_NACK)
;;;150    			return 0;	
;;;151    	
;;;152    	for(i=0;i<Length;i++)
;;;153    	{
;;;154    		I2C_SDASetIn(sI2C);
;;;155    		
;;;156    		Buffer[i]	=	I2C_ReadByte(sI2C);					//从I2C总线读取8个bits的数据  ,首先读出的是数据的最高位（MSB）
;;;157    	
;;;158    		I2C_SDASetOut(sI2C);
;;;159    		
;;;160    		I2C_Ack(sI2C);											//CPU产生一个ACK信号
;;;161    	}
;;;162    	I2C_SDASetOut(sI2C);
;;;163    	
;;;164    	I2C_NAck(sI2C);											//CPU产生一个NACK信号(NACK即无应答信号)
;;;165    	
;;;166    	I2C_Stop(sI2C);
;;;167    
;;;168    	return 0;
;;;169    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L2.42|
00002a  4641              MOV      r1,r8                 ;140
00002c  4638              MOV      r0,r7                 ;140
00002e  f7fffffe          BL       I2C_SendByte
000032  4638              MOV      r0,r7                 ;142
000034  f7fffffe          BL       I2C_WaitAck
000038  b908              CBNZ     r0,|L2.62|
00003a  2000              MOVS     r0,#0                 ;143
00003c  e7f3              B        |L2.38|
                  |L2.62|
00003e  4638              MOV      r0,r7                 ;145
000040  f7fffffe          BL       I2C_Start
000044  21a1              MOVS     r1,#0xa1              ;147
000046  4638              MOV      r0,r7                 ;147
000048  f7fffffe          BL       I2C_SendByte
00004c  4638              MOV      r0,r7                 ;149
00004e  f7fffffe          BL       I2C_WaitAck
000052  b908              CBNZ     r0,|L2.88|
000054  2000              MOVS     r0,#0                 ;150
000056  e7e6              B        |L2.38|
                  |L2.88|
000058  2400              MOVS     r4,#0                 ;152
00005a  e00e              B        |L2.122|
                  |L2.92|
00005c  4638              MOV      r0,r7                 ;154
00005e  f7fffffe          BL       I2C_SDASetIn
000062  4638              MOV      r0,r7                 ;156
000064  f7fffffe          BL       I2C_ReadByte
000068  5528              STRB     r0,[r5,r4]            ;156
00006a  4638              MOV      r0,r7                 ;158
00006c  f7fffffe          BL       I2C_SDASetOut
000070  4638              MOV      r0,r7                 ;160
000072  f7fffffe          BL       I2C_Ack
000076  1c60              ADDS     r0,r4,#1              ;152
000078  b2c4              UXTB     r4,r0                 ;152
                  |L2.122|
00007a  42b4              CMP      r4,r6                 ;152
00007c  dbee              BLT      |L2.92|
00007e  4638              MOV      r0,r7                 ;162
000080  f7fffffe          BL       I2C_SDASetOut
000084  4638              MOV      r0,r7                 ;164
000086  f7fffffe          BL       I2C_NAck
00008a  4638              MOV      r0,r7                 ;166
00008c  f7fffffe          BL       I2C_Stop
000090  2000              MOVS     r0,#0                 ;168
000092  e7c8              B        |L2.38|
;;;170    
                          ENDP


                          AREA ||i.AT24C02_Write||, CODE, READONLY, ALIGN=1

                  AT24C02_Write PROC
;;;23     *******************************************************************************/
;;;24     void AT24C02_Write(sI2CDef *sI2C,unsigned char Addr,unsigned char Data)
000000  b570              PUSH     {r4-r6,lr}
;;;25     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;26     	I2C_Start(sI2C);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       I2C_Start
;;;27     	
;;;28     	I2C_SendByte(sI2C,Write_24C02Addr);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
00000e  21a0              MOVS     r1,#0xa0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       I2C_SendByte
;;;29     	
;;;30     	I2C_WaitAck(sI2C);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       I2C_WaitAck
;;;31     	
;;;32     	I2C_SendByte(sI2C,Addr);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
00001c  4631              MOV      r1,r6
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       I2C_SendByte
;;;33     	
;;;34     	I2C_WaitAck(sI2C);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       I2C_WaitAck
;;;35     	
;;;36     	I2C_SendByte(sI2C,Data);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
00002a  4621              MOV      r1,r4
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       I2C_SendByte
;;;37     	
;;;38     	I2C_WaitAck(sI2C);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       I2C_WaitAck
;;;39     	
;;;40     	I2C_Stop(sI2C);
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       I2C_Stop
;;;41     }
00003e  bd70              POP      {r4-r6,pc}
;;;42     /*******************************************************************************
                          ENDP


                          AREA ||i.AT24C02_WritePage||, CODE, READONLY, ALIGN=1

                  AT24C02_WritePage PROC
;;;91     *******************************************************************************/
;;;92     void AT24C02_WritePage(sI2CDef *sI2C,unsigned char StartAddr,unsigned char *Buffer)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;93     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;94     	unsigned char i	=	0;
00000a  2400              MOVS     r4,#0
;;;95     
;;;96     	
;;;97     	I2C_Start(sI2C);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       I2C_Start
;;;98     	
;;;99     	I2C_SendByte(sI2C,Write_24C02Addr);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
000012  21a0              MOVS     r1,#0xa0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       I2C_SendByte
;;;100    	
;;;101    	if(I2C_WaitAck(sI2C)	==	I2C_NACK)
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       I2C_WaitAck
000020  b908              CBNZ     r0,|L4.38|
                  |L4.34|
;;;102    			return;
;;;103    	
;;;104    	I2C_SendByte(sI2C,StartAddr);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
;;;105    	
;;;106    	if(I2C_WaitAck(sI2C)	==	I2C_NACK)
;;;107    			return;
;;;108    	
;;;109    	for(i=0;i<8;i++)
;;;110    	{
;;;111    		I2C_SendByte(sI2C,Buffer[i]);	//向I2C总线设备发送8bits的数据 ,首先传输的是数据的最高位（MSB）
;;;112    	
;;;113    		if(I2C_WaitAck(sI2C)	==	I2C_NACK)
;;;114    			return;
;;;115    	}
;;;116    	
;;;117    	I2C_Stop(sI2C);
;;;118    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L4.38|
000026  4639              MOV      r1,r7                 ;104
000028  4630              MOV      r0,r6                 ;104
00002a  f7fffffe          BL       I2C_SendByte
00002e  4630              MOV      r0,r6                 ;106
000030  f7fffffe          BL       I2C_WaitAck
000034  b900              CBNZ     r0,|L4.56|
000036  e7f4              B        |L4.34|
                  |L4.56|
000038  2400              MOVS     r4,#0                 ;109
00003a  e00a              B        |L4.82|
                  |L4.60|
00003c  5d29              LDRB     r1,[r5,r4]            ;111
00003e  4630              MOV      r0,r6                 ;111
000040  f7fffffe          BL       I2C_SendByte
000044  4630              MOV      r0,r6                 ;113
000046  f7fffffe          BL       I2C_WaitAck
00004a  b900              CBNZ     r0,|L4.78|
00004c  e7e9              B        |L4.34|
                  |L4.78|
00004e  1c60              ADDS     r0,r4,#1              ;109
000050  b2c4              UXTB     r4,r0                 ;109
                  |L4.82|
000052  2c08              CMP      r4,#8                 ;109
000054  dbf2              BLT      |L4.60|
000056  4630              MOV      r0,r6                 ;117
000058  f7fffffe          BL       I2C_Stop
00005c  bf00              NOP      
00005e  e7e0              B        |L4.34|
;;;119    
                          ENDP

