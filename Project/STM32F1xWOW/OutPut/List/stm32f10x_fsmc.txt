; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\stm32f10x_fsmc.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\stm32f10x_fsmc.crf ..\..\Library\STM32F10x_StdPeriph_Driver\SCR\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_ClearFlag||, CODE, READONLY, ALIGN=2

                  FSMC_ClearFlag PROC
;;;748    *******************************************************************************/                   
;;;749    void FSMC_ClearFlag(u32 FSMC_Bank, u32 FSMC_FLAG)
000000  2810              CMP      r0,#0x10
;;;750    {
;;;751     /* Check the parameters */
;;;752      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;753      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;754        
;;;755      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d107              BNE      |L1.20|
;;;756      {
;;;757        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  438a              BICS     r2,r2,r1
00000c  f04f4320          MOV      r3,#0xa0000000
000010  665a              STR      r2,[r3,#0x64]
000012  e012              B        |L1.58|
                  |L1.20|
;;;758      }  
;;;759      else if(FSMC_Bank == FSMC_Bank3_NAND)
000014  f5b07f80          CMP      r0,#0x100
000018  d107              BNE      |L1.42|
;;;760      {
;;;761        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
00001a  4a08              LDR      r2,|L1.60|
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32084          STR      r2,[r3,#0x84]
000028  e007              B        |L1.58|
                  |L1.42|
;;;762      }
;;;763      /* FSMC_Bank4_PCCARD*/
;;;764      else
;;;765      {
;;;766        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
00002a  4a04              LDR      r2,|L1.60|
00002c  3220              ADDS     r2,r2,#0x20
00002e  6812              LDR      r2,[r2,#0]
000030  438a              BICS     r2,r2,r1
000032  f04f4320          MOV      r3,#0xa0000000
000036  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.58|
;;;767      }
;;;768    }
00003a  4770              BX       lr
;;;769    
                          ENDP

                  |L1.60|
                          DCD      0xa0000084

                          AREA ||i.FSMC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  FSMC_ClearITPendingBit PROC
;;;839    *******************************************************************************/
;;;840    void FSMC_ClearITPendingBit(u32 FSMC_Bank, u32 FSMC_IT)
000000  2810              CMP      r0,#0x10
;;;841    {
;;;842      /* Check the parameters */
;;;843      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;844      assert_param(IS_FSMC_IT(FSMC_IT));
;;;845        
;;;846      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d108              BNE      |L2.22|
;;;847      {
;;;848        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  ea2202d1          BIC      r2,r2,r1,LSR #3
00000e  f04f4320          MOV      r3,#0xa0000000
000012  665a              STR      r2,[r3,#0x64]
000014  e014              B        |L2.64|
                  |L2.22|
;;;849      }  
;;;850      else if(FSMC_Bank == FSMC_Bank3_NAND)
000016  f5b07f80          CMP      r0,#0x100
00001a  d108              BNE      |L2.46|
;;;851      {
;;;852        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
00001c  4a09              LDR      r2,|L2.68|
00001e  6812              LDR      r2,[r2,#0]
000020  ea2202d1          BIC      r2,r2,r1,LSR #3
000024  f04f4320          MOV      r3,#0xa0000000
000028  f8c32084          STR      r2,[r3,#0x84]
00002c  e008              B        |L2.64|
                  |L2.46|
;;;853      }
;;;854      /* FSMC_Bank4_PCCARD*/
;;;855      else
;;;856      {
;;;857        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
00002e  4a05              LDR      r2,|L2.68|
000030  3220              ADDS     r2,r2,#0x20
000032  6812              LDR      r2,[r2,#0]
000034  ea2202d1          BIC      r2,r2,r1,LSR #3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  f8c320a4          STR      r2,[r3,#0xa4]
                  |L2.64|
;;;858      }
;;;859    }
000040  4770              BX       lr
;;;860    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0xa0000084

                          AREA ||i.FSMC_GetECC||, CODE, READONLY, ALIGN=2

                  FSMC_GetECC PROC
;;;597    *******************************************************************************/
;;;598    u32 FSMC_GetECC(u32 FSMC_Bank)
000000  4601              MOV      r1,r0
;;;599    {
;;;600      u32 eccval = 0x00000000;
000002  2000              MOVS     r0,#0
;;;601      
;;;602      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2910              CMP      r1,#0x10
000006  d103              BNE      |L3.16|
;;;603      {
;;;604        /* Get the ECCR2 register value */
;;;605        eccval = FSMC_Bank2->ECCR2;
000008  f04f4220          MOV      r2,#0xa0000000
00000c  6f50              LDR      r0,[r2,#0x74]
00000e  e001              B        |L3.20|
                  |L3.16|
;;;606      }
;;;607      else
;;;608      {
;;;609        /* Get the ECCR3 register value */
;;;610        eccval = FSMC_Bank3->ECCR3;
000010  4a01              LDR      r2,|L3.24|
000012  6810              LDR      r0,[r2,#0]
                  |L3.20|
;;;611      }
;;;612      /* Return the error correction code value */
;;;613      return(eccval);
;;;614    }
000014  4770              BX       lr
;;;615    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0xa0000094

                          AREA ||i.FSMC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetFlagStatus PROC
;;;696    *******************************************************************************/                   
;;;697    FlagStatus FSMC_GetFlagStatus(u32 FSMC_Bank, u32 FSMC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;698    {
000002  4602              MOV      r2,r0
;;;699      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;700      u32 tmpsr = 0x00000000;
000006  2300              MOVS     r3,#0
;;;701      
;;;702      /* Check the parameters */
;;;703      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;704      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;705      
;;;706      if(FSMC_Bank == FSMC_Bank2_NAND)
000008  2a10              CMP      r2,#0x10
00000a  d103              BNE      |L4.20|
;;;707      {
;;;708        tmpsr = FSMC_Bank2->SR2;
00000c  f04f4420          MOV      r4,#0xa0000000
000010  6e63              LDR      r3,[r4,#0x64]
000012  e008              B        |L4.38|
                  |L4.20|
;;;709      }  
;;;710      else if(FSMC_Bank == FSMC_Bank3_NAND)
000014  f5b27f80          CMP      r2,#0x100
000018  d102              BNE      |L4.32|
;;;711      {
;;;712        tmpsr = FSMC_Bank3->SR3;
00001a  4c06              LDR      r4,|L4.52|
00001c  6823              LDR      r3,[r4,#0]
00001e  e002              B        |L4.38|
                  |L4.32|
;;;713      }
;;;714      /* FSMC_Bank4_PCCARD*/
;;;715      else
;;;716      {
;;;717        tmpsr = FSMC_Bank4->SR4;
000020  4c04              LDR      r4,|L4.52|
000022  3420              ADDS     r4,r4,#0x20
000024  6823              LDR      r3,[r4,#0]
                  |L4.38|
;;;718      } 
;;;719      
;;;720      /* Get the flag status */
;;;721      if ((tmpsr & FSMC_FLAG) != (u16)RESET )
000026  ea030401          AND      r4,r3,r1
00002a  b10c              CBZ      r4,|L4.48|
;;;722      {
;;;723        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L4.50|
                  |L4.48|
;;;724      }
;;;725      else
;;;726      {
;;;727        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L4.50|
;;;728      }
;;;729      /* Return the flag status */
;;;730      return bitstatus;
;;;731    }
000032  bd10              POP      {r4,pc}
;;;732    
                          ENDP

                  |L4.52|
                          DCD      0xa0000084

                          AREA ||i.FSMC_GetITStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetITStatus PROC
;;;785    *******************************************************************************/ 
;;;786    ITStatus FSMC_GetITStatus(u32 FSMC_Bank, u32 FSMC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;787    {
000002  4602              MOV      r2,r0
;;;788      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;789      u32 tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
000006  2300              MOVS     r3,#0
000008  2400              MOVS     r4,#0
00000a  2500              MOVS     r5,#0
;;;790      
;;;791      /* Check the parameters */
;;;792      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;793      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;794      
;;;795      if(FSMC_Bank == FSMC_Bank2_NAND)
00000c  2a10              CMP      r2,#0x10
00000e  d103              BNE      |L5.24|
;;;796      {
;;;797        tmpsr = FSMC_Bank2->SR2;
000010  f04f4620          MOV      r6,#0xa0000000
000014  6e73              LDR      r3,[r6,#0x64]
000016  e008              B        |L5.42|
                  |L5.24|
;;;798      }  
;;;799      else if(FSMC_Bank == FSMC_Bank3_NAND)
000018  f5b27f80          CMP      r2,#0x100
00001c  d102              BNE      |L5.36|
;;;800      {
;;;801        tmpsr = FSMC_Bank3->SR3;
00001e  4e08              LDR      r6,|L5.64|
000020  6833              LDR      r3,[r6,#0]
000022  e002              B        |L5.42|
                  |L5.36|
;;;802      }
;;;803      /* FSMC_Bank4_PCCARD*/
;;;804      else
;;;805      {
;;;806        tmpsr = FSMC_Bank4->SR4;
000024  4e06              LDR      r6,|L5.64|
000026  3620              ADDS     r6,r6,#0x20
000028  6833              LDR      r3,[r6,#0]
                  |L5.42|
;;;807      } 
;;;808      
;;;809      itstatus = tmpsr & FSMC_IT;
00002a  ea030401          AND      r4,r3,r1
;;;810      
;;;811      itenable = tmpsr & (FSMC_IT >> 3);
00002e  ea0305d1          AND      r5,r3,r1,LSR #3
;;;812    
;;;813      if ((itstatus != (u32)RESET)  && (itenable != (u32)RESET))
000032  b114              CBZ      r4,|L5.58|
000034  b10d              CBZ      r5,|L5.58|
;;;814      {
;;;815        bitstatus = SET;
000036  2001              MOVS     r0,#1
000038  e000              B        |L5.60|
                  |L5.58|
;;;816      }
;;;817      else
;;;818      {
;;;819        bitstatus = RESET;
00003a  2000              MOVS     r0,#0
                  |L5.60|
;;;820      }
;;;821      return bitstatus; 
;;;822    }
00003c  bd70              POP      {r4-r6,pc}
;;;823    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0xa0000084

                          AREA ||i.FSMC_ITConfig||, CODE, READONLY, ALIGN=2

                  FSMC_ITConfig PROC
;;;634    *******************************************************************************/
;;;635    void FSMC_ITConfig(u32 FSMC_Bank, u32 FSMC_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;636    {
;;;637      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;638      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;639      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;640      
;;;641      if (NewState != DISABLE)
000002  b1ea              CBZ      r2,|L6.64|
;;;642      {
;;;643        /* Enable the selected FSMC_Bank2 interrupts */
;;;644        if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d107              BNE      |L6.24|
;;;645        {
;;;646          FSMC_Bank2->SR2 |= FSMC_IT;
000008  f04f4320          MOV      r3,#0xa0000000
00000c  6e5b              LDR      r3,[r3,#0x64]
00000e  430b              ORRS     r3,r3,r1
000010  f04f4420          MOV      r4,#0xa0000000
000014  6663              STR      r3,[r4,#0x64]
000016  e030              B        |L6.122|
                  |L6.24|
;;;647        }
;;;648        /* Enable the selected FSMC_Bank3 interrupts */
;;;649        else if (FSMC_Bank == FSMC_Bank3_NAND)
000018  f5b07f80          CMP      r0,#0x100
00001c  d107              BNE      |L6.46|
;;;650        {
;;;651          FSMC_Bank3->SR3 |= FSMC_IT;
00001e  4b17              LDR      r3,|L6.124|
000020  681b              LDR      r3,[r3,#0]
000022  430b              ORRS     r3,r3,r1
000024  f04f4420          MOV      r4,#0xa0000000
000028  f8c43084          STR      r3,[r4,#0x84]
00002c  e025              B        |L6.122|
                  |L6.46|
;;;652        }
;;;653        /* Enable the selected FSMC_Bank4 interrupts */
;;;654        else
;;;655        {
;;;656          FSMC_Bank4->SR4 |= FSMC_IT;    
00002e  4b13              LDR      r3,|L6.124|
000030  3320              ADDS     r3,r3,#0x20
000032  681b              LDR      r3,[r3,#0]
000034  430b              ORRS     r3,r3,r1
000036  f04f4420          MOV      r4,#0xa0000000
00003a  f8c430a4          STR      r3,[r4,#0xa4]
00003e  e01c              B        |L6.122|
                  |L6.64|
;;;657        }
;;;658      }
;;;659      else
;;;660      {
;;;661        /* Disable the selected FSMC_Bank2 interrupts */
;;;662        if(FSMC_Bank == FSMC_Bank2_NAND)
000040  2810              CMP      r0,#0x10
000042  d107              BNE      |L6.84|
;;;663        {
;;;664          
;;;665          FSMC_Bank2->SR2 &= (u32)~FSMC_IT;
000044  f04f4320          MOV      r3,#0xa0000000
000048  6e5b              LDR      r3,[r3,#0x64]
00004a  438b              BICS     r3,r3,r1
00004c  f04f4420          MOV      r4,#0xa0000000
000050  6663              STR      r3,[r4,#0x64]
000052  e012              B        |L6.122|
                  |L6.84|
;;;666        }
;;;667        /* Disable the selected FSMC_Bank3 interrupts */
;;;668        else if (FSMC_Bank == FSMC_Bank3_NAND)
000054  f5b07f80          CMP      r0,#0x100
000058  d107              BNE      |L6.106|
;;;669        {
;;;670          FSMC_Bank3->SR3 &= (u32)~FSMC_IT;
00005a  4b08              LDR      r3,|L6.124|
00005c  681b              LDR      r3,[r3,#0]
00005e  438b              BICS     r3,r3,r1
000060  f04f4420          MOV      r4,#0xa0000000
000064  f8c43084          STR      r3,[r4,#0x84]
000068  e007              B        |L6.122|
                  |L6.106|
;;;671        }
;;;672        /* Disable the selected FSMC_Bank4 interrupts */
;;;673        else
;;;674        {
;;;675          FSMC_Bank4->SR4 &= (u32)~FSMC_IT;    
00006a  4b04              LDR      r3,|L6.124|
00006c  3320              ADDS     r3,r3,#0x20
00006e  681b              LDR      r3,[r3,#0]
000070  438b              BICS     r3,r3,r1
000072  f04f4420          MOV      r4,#0xa0000000
000076  f8c430a4          STR      r3,[r4,#0xa4]
                  |L6.122|
;;;676        }
;;;677      }
;;;678    }
00007a  bd10              POP      {r4,pc}
;;;679                      
                          ENDP

                  |L6.124|
                          DCD      0xa0000084

                          AREA ||i.FSMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDCmd PROC
;;;489    *******************************************************************************/
;;;490    void FSMC_NANDCmd(u32 FSMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L7.42|
;;;491    {
;;;492      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;493      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;494      
;;;495      if (NewState != DISABLE)
;;;496      {
;;;497        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;498        if(FSMC_Bank == FSMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L7.24|
;;;499        {
;;;500          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420204          ORR      r2,r2,#4
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01b              B        |L7.80|
                  |L7.24|
;;;501        }
;;;502        else
;;;503        {
;;;504          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
000018  4a0e              LDR      r2,|L7.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420204          ORR      r2,r2,#4
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e012              B        |L7.80|
                  |L7.42|
;;;505        }
;;;506      }
;;;507      else
;;;508      {
;;;509        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;510        if(FSMC_Bank == FSMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L7.64|
;;;511        {
;;;512          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L7.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e007              B        |L7.80|
                  |L7.64|
;;;513        }
;;;514        else
;;;515        {
;;;516          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
000040  4a04              LDR      r2,|L7.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L7.88|
000046  401a              ANDS     r2,r2,r3
000048  f04f4320          MOV      r3,#0xa0000000
00004c  f8c32080          STR      r2,[r3,#0x80]
                  |L7.80|
;;;517        }
;;;518      }
;;;519    }
000050  4770              BX       lr
;;;520    
                          ENDP

000052  0000              DCW      0x0000
                  |L7.84|
                          DCD      0xa0000080
                  |L7.88|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_NANDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDDeInit PROC
;;;83     *******************************************************************************/
;;;84     void FSMC_NANDDeInit(u32 FSMC_Bank)
000000  2810              CMP      r0,#0x10
;;;85     {
;;;86       /* Check the parameter */
;;;87       assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;88       
;;;89       if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d10a              BNE      |L8.26|
;;;90       {
;;;91         /* Set the FSMC_Bank2 registers to their reset values */
;;;92         FSMC_Bank2->PCR2 = 0x00000018;
000004  2118              MOVS     r1,#0x18
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6611              STR      r1,[r2,#0x60]
;;;93         FSMC_Bank2->SR2 = 0x00000040;
00000c  2140              MOVS     r1,#0x40
00000e  6651              STR      r1,[r2,#0x64]
;;;94         FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
000010  f04f31fc          MOV      r1,#0xfcfcfcfc
000014  6691              STR      r1,[r2,#0x68]
;;;95         FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
000016  66d1              STR      r1,[r2,#0x6c]
000018  e010              B        |L8.60|
                  |L8.26|
;;;96       }
;;;97       /* FSMC_Bank3_NAND */  
;;;98       else
;;;99       {
;;;100        /* Set the FSMC_Bank3 registers to their reset values */
;;;101        FSMC_Bank3->PCR3 = 0x00000018;
00001a  2118              MOVS     r1,#0x18
00001c  4a08              LDR      r2,|L8.64|
00001e  6011              STR      r1,[r2,#0]
;;;102        FSMC_Bank3->SR3 = 0x00000040;
000020  2140              MOVS     r1,#0x40
000022  f04f4220          MOV      r2,#0xa0000000
000026  f8c21084          STR      r1,[r2,#0x84]
;;;103        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
00002a  f04f31fc          MOV      r1,#0xfcfcfcfc
00002e  4a04              LDR      r2,|L8.64|
000030  3208              ADDS     r2,r2,#8
000032  6011              STR      r1,[r2,#0]
;;;104        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
000034  f04f4220          MOV      r2,#0xa0000000
000038  f8c2108c          STR      r1,[r2,#0x8c]
                  |L8.60|
;;;105      }  
;;;106    }
00003c  4770              BX       lr
;;;107    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0xa0000080

                          AREA ||i.FSMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDECCCmd PROC
;;;556    *******************************************************************************/
;;;557    void FSMC_NANDECCCmd(u32 FSMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L9.42|
;;;558    {
;;;559      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;560      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;561      
;;;562      if (NewState != DISABLE)
;;;563      {
;;;564        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;565        if(FSMC_Bank == FSMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L9.24|
;;;566        {
;;;567          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420240          ORR      r2,r2,#0x40
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01b              B        |L9.80|
                  |L9.24|
;;;568        }
;;;569        else
;;;570        {
;;;571          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000018  4a0e              LDR      r2,|L9.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420240          ORR      r2,r2,#0x40
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e012              B        |L9.80|
                  |L9.42|
;;;572        }
;;;573      }
;;;574      else
;;;575      {
;;;576        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;577        if(FSMC_Bank == FSMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L9.64|
;;;578        {
;;;579          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L9.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e007              B        |L9.80|
                  |L9.64|
;;;580        }
;;;581        else
;;;582        {
;;;583          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
000040  4a04              LDR      r2,|L9.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L9.88|
000046  401a              ANDS     r2,r2,r3
000048  f04f4320          MOV      r3,#0xa0000000
00004c  f8c32080          STR      r2,[r3,#0x80]
                  |L9.80|
;;;584        }
;;;585      }
;;;586    }
000050  4770              BX       lr
;;;587    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0xa0000080
                  |L9.88|
                          DCD      0x000fffbf

                          AREA ||i.FSMC_NANDInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDInit PROC
;;;227    *******************************************************************************/
;;;228    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;229    {
;;;230      u32 tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;231        
;;;232      /* Check the parameters */
;;;233      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;234      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;235      assert_param( IS_FSMC_DATA_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;236      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;237      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;238      assert_param( IS_FSMC_ADDRESS_LOW_MAPPING(FSMC_NANDInitStruct->FSMC_AddressLowMapping));
;;;239      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;240      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;241    
;;;242      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;243      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;244      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;245      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;246    
;;;247      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;248      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;249      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;250      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;251      
;;;252      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;253      tmppcr = (u32)FSMC_NANDInitStruct->FSMC_Waitfeature |
000008  6844              LDR      r4,[r0,#4]
00000a  f0440408          ORR      r4,r4,#8
00000e  6885              LDR      r5,[r0,#8]
000010  432c              ORRS     r4,r4,r5
000012  68c5              LDR      r5,[r0,#0xc]
000014  432c              ORRS     r4,r4,r5
000016  6905              LDR      r5,[r0,#0x10]
000018  432c              ORRS     r4,r4,r5
00001a  6945              LDR      r5,[r0,#0x14]
00001c  432c              ORRS     r4,r4,r5
00001e  6985              LDR      r5,[r0,#0x18]
000020  ea442445          ORR      r4,r4,r5,LSL #9
000024  69c5              LDR      r5,[r0,#0x1c]
000026  ea443145          ORR      r1,r4,r5,LSL #13
;;;254                PCR_MemoryType_NAND |
;;;255                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;256                FSMC_NANDInitStruct->FSMC_ECC |
;;;257                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;258                FSMC_NANDInitStruct->FSMC_AddressLowMapping |
;;;259                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;260                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;261                
;;;262      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;263      tmppmem = (u32)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
00002a  6a04              LDR      r4,[r0,#0x20]
00002c  6824              LDR      r4,[r4,#0]
00002e  6a05              LDR      r5,[r0,#0x20]
000030  686d              LDR      r5,[r5,#4]
000032  ea442405          ORR      r4,r4,r5,LSL #8
000036  6a05              LDR      r5,[r0,#0x20]
000038  892d              LDRH     r5,[r5,#8]
00003a  ea444405          ORR      r4,r4,r5,LSL #16
00003e  6a05              LDR      r5,[r0,#0x20]
000040  7b2d              LDRB     r5,[r5,#0xc]
000042  ea446205          ORR      r2,r4,r5,LSL #24
;;;264                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;265                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;266                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;267                
;;;268      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;269      tmppatt = (u32)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000046  6a44              LDR      r4,[r0,#0x24]
000048  6824              LDR      r4,[r4,#0]
00004a  6a45              LDR      r5,[r0,#0x24]
00004c  686d              LDR      r5,[r5,#4]
00004e  ea442405          ORR      r4,r4,r5,LSL #8
000052  6a45              LDR      r5,[r0,#0x24]
000054  892d              LDRH     r5,[r5,#8]
000056  ea444405          ORR      r4,r4,r5,LSL #16
00005a  6a45              LDR      r5,[r0,#0x24]
00005c  7b2d              LDRB     r5,[r5,#0xc]
00005e  ea446305          ORR      r3,r4,r5,LSL #24
;;;270                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;271                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;272                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;273      
;;;274      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
000062  6804              LDR      r4,[r0,#0]
000064  2c10              CMP      r4,#0x10
000066  d105              BNE      |L10.116|
;;;275      {
;;;276        /* FSMC_Bank2_NAND registers configuration */
;;;277        FSMC_Bank2->PCR2 = tmppcr;
000068  f04f4420          MOV      r4,#0xa0000000
00006c  6621              STR      r1,[r4,#0x60]
;;;278        FSMC_Bank2->PMEM2 = tmppmem;
00006e  66a2              STR      r2,[r4,#0x68]
;;;279        FSMC_Bank2->PATT2 = tmppatt;
000070  66e3              STR      r3,[r4,#0x6c]
000072  e008              B        |L10.134|
                  |L10.116|
;;;280      }
;;;281      else
;;;282      {
;;;283        /* FSMC_Bank3_NAND registers configuration */
;;;284        FSMC_Bank3->PCR3 = tmppcr;
000074  4c04              LDR      r4,|L10.136|
000076  6021              STR      r1,[r4,#0]
;;;285        FSMC_Bank3->PMEM3 = tmppmem;
000078  f04f4420          MOV      r4,#0xa0000000
00007c  f8c42088          STR      r2,[r4,#0x88]
;;;286        FSMC_Bank3->PATT3 = tmppatt;
000080  4c01              LDR      r4,|L10.136|
000082  340c              ADDS     r4,r4,#0xc
000084  6023              STR      r3,[r4,#0]
                  |L10.134|
;;;287      }
;;;288    }
000086  bd30              POP      {r4,r5,pc}
;;;289    
                          ENDP

                  |L10.136|
                          DCD      0xa0000080

                          AREA ||i.FSMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDStructInit PROC
;;;396    *******************************************************************************/
;;;397    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;398    { 
;;;399      /* Reset NAND Init structure parameters values */
;;;400      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
000002  6001              STR      r1,[r0,#0]
;;;401      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000004  2100              MOVS     r1,#0
000006  6041              STR      r1,[r0,#4]
;;;402      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000008  6081              STR      r1,[r0,#8]
;;;403      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
00000a  60c1              STR      r1,[r0,#0xc]
;;;404      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
00000c  6101              STR      r1,[r0,#0x10]
;;;405      FSMC_NANDInitStruct->FSMC_AddressLowMapping = FSMC_AddressLowMapping_Direct;
00000e  6141              STR      r1,[r0,#0x14]
;;;406      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
000010  6181              STR      r1,[r0,#0x18]
;;;407      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
000012  61c1              STR      r1,[r0,#0x1c]
;;;408      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000014  21fc              MOVS     r1,#0xfc
000016  6a02              LDR      r2,[r0,#0x20]
000018  6011              STR      r1,[r2,#0]
;;;409      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00001a  6a02              LDR      r2,[r0,#0x20]
00001c  6051              STR      r1,[r2,#4]
;;;410      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00001e  6a02              LDR      r2,[r0,#0x20]
000020  6091              STR      r1,[r2,#8]
;;;411      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000022  6a02              LDR      r2,[r0,#0x20]
000024  60d1              STR      r1,[r2,#0xc]
;;;412      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000026  6a42              LDR      r2,[r0,#0x24]
000028  6011              STR      r1,[r2,#0]
;;;413      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00002a  6a42              LDR      r2,[r0,#0x24]
00002c  6051              STR      r1,[r2,#4]
;;;414      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00002e  6a42              LDR      r2,[r0,#0x24]
000030  6091              STR      r1,[r2,#8]
;;;415      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
000032  6a42              LDR      r2,[r0,#0x24]
000034  60d1              STR      r1,[r2,#0xc]
;;;416    }
000036  4770              BX       lr
;;;417    
                          ENDP


                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMCmd PROC
;;;460    *******************************************************************************/
;;;461    void FSMC_NORSRAMCmd(u32 FSMC_Bank, FunctionalState NewState)
000000  b151              CBZ      r1,|L12.24|
;;;462    {
;;;463      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;464      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;465      
;;;466      if (NewState != DISABLE)
;;;467      {
;;;468        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;469        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000002  0082              LSLS     r2,r0,#2
000004  f1a242c0          SUB      r2,r2,#0x60000000
000008  6812              LDR      r2,[r2,#0]
00000a  f0420301          ORR      r3,r2,#1
00000e  0082              LSLS     r2,r0,#2
000010  f1a242c0          SUB      r2,r2,#0x60000000
000014  6013              STR      r3,[r2,#0]
000016  e009              B        |L12.44|
                  |L12.24|
;;;470      }
;;;471      else
;;;472      {
;;;473        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;474        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
000018  0082              LSLS     r2,r0,#2
00001a  f1a242c0          SUB      r2,r2,#0x60000000
00001e  6812              LDR      r2,[r2,#0]
000020  4b03              LDR      r3,|L12.48|
000022  401a              ANDS     r2,r2,r3
000024  0083              LSLS     r3,r0,#2
000026  f1a343c0          SUB      r3,r3,#0x60000000
00002a  601a              STR      r2,[r3,#0]
                  |L12.44|
;;;475      }
;;;476    }
00002c  4770              BX       lr
;;;477    
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      0x000ffffe

                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMDeInit PROC
;;;52     *******************************************************************************/
;;;53     void FSMC_NORSRAMDeInit(u32 FSMC_Bank)
000000  b930              CBNZ     r0,|L13.16|
;;;54     {
;;;55       /* Check the parameter */
;;;56       assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;57       
;;;58       /* FSMC_Bank1_NORSRAM1 */
;;;59       if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;60       {
;;;61         FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000002  f24302db          MOV      r2,#0x30db
000006  0081              LSLS     r1,r0,#2
000008  f1a141c0          SUB      r1,r1,#0x60000000
00000c  600a              STR      r2,[r1,#0]
00000e  e005              B        |L13.28|
                  |L13.16|
;;;62       }
;;;63       /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;64       else
;;;65       {   
;;;66         FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000010  f24302d2          MOV      r2,#0x30d2
000014  0081              LSLS     r1,r0,#2
000016  f1a141c0          SUB      r1,r1,#0x60000000
00001a  600a              STR      r2,[r1,#0]
                  |L13.28|
;;;67       }
;;;68     
;;;69       FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  1c41              ADDS     r1,r0,#1
000022  0089              LSLS     r1,r1,#2
000024  f1a141c0          SUB      r1,r1,#0x60000000
000028  600a              STR      r2,[r1,#0]
;;;70       FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002a  0081              LSLS     r1,r0,#2
00002c  f1a141c0          SUB      r1,r1,#0x60000000
000030  f8c12104          STR      r2,[r1,#0x104]
;;;71     }
000034  4770              BX       lr
;;;72     
                          ENDP


                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMInit PROC
;;;135    *******************************************************************************/
;;;136    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  e9d01201          LDRD     r1,r2,[r0,#4]
;;;137    { 
;;;138      /* Check the parameters */
;;;139      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;140      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;141      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;142      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;143      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;144      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;145      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;146      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;147      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;148      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;149      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;150      assert_param(IS_FSMC_ASYNC_WAIT(FSMC_NORSRAMInitStruct->FSMC_AsyncWait));
;;;151      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;152      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;153      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;154      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;155      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;156      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;157      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;158      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;159      
;;;160      /* Bank1 NOR/SRAM control register configuration */ 
;;;161      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000004  4311              ORRS     r1,r1,r2
000006  68c2              LDR      r2,[r0,#0xc]
000008  4311              ORRS     r1,r1,r2
00000a  6902              LDR      r2,[r0,#0x10]
00000c  4311              ORRS     r1,r1,r2
00000e  6942              LDR      r2,[r0,#0x14]
000010  4311              ORRS     r1,r1,r2
000012  6982              LDR      r2,[r0,#0x18]
000014  4311              ORRS     r1,r1,r2
000016  69c2              LDR      r2,[r0,#0x1c]
000018  4311              ORRS     r1,r1,r2
00001a  6a02              LDR      r2,[r0,#0x20]
00001c  4311              ORRS     r1,r1,r2
00001e  6a42              LDR      r2,[r0,#0x24]
000020  4311              ORRS     r1,r1,r2
000022  6a82              LDR      r2,[r0,#0x28]
000024  4311              ORRS     r1,r1,r2
000026  6ac2              LDR      r2,[r0,#0x2c]
000028  4311              ORRS     r1,r1,r2
00002a  6b02              LDR      r2,[r0,#0x30]
00002c  4311              ORRS     r1,r1,r2
00002e  6802              LDR      r2,[r0,#0]
000030  0092              LSLS     r2,r2,#2
000032  f1a242c0          SUB      r2,r2,#0x60000000
000036  6011              STR      r1,[r2,#0]
;;;162                (u32)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;163                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;164                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;165                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;166                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;167                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;168                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;169                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;170                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;171                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;172                FSMC_NORSRAMInitStruct->FSMC_AsyncWait |
;;;173                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;174    
;;;175      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
000038  6881              LDR      r1,[r0,#8]
00003a  2908              CMP      r1,#8
00003c  d10b              BNE      |L14.86|
;;;176      {
;;;177        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (u32)BCR_FACCEN_Set;
00003e  6801              LDR      r1,[r0,#0]
000040  0089              LSLS     r1,r1,#2
000042  f1a141c0          SUB      r1,r1,#0x60000000
000046  6809              LDR      r1,[r1,#0]
000048  f0410240          ORR      r2,r1,#0x40
00004c  6801              LDR      r1,[r0,#0]
00004e  0089              LSLS     r1,r1,#2
000050  f1a141c0          SUB      r1,r1,#0x60000000
000054  600a              STR      r2,[r1,#0]
                  |L14.86|
;;;178      }
;;;179    
;;;180      /* Bank1 NOR/SRAM timing register configuration */
;;;181      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
000056  6b41              LDR      r1,[r0,#0x34]
000058  6809              LDR      r1,[r1,#0]
00005a  6b42              LDR      r2,[r0,#0x34]
00005c  6852              LDR      r2,[r2,#4]
00005e  ea411102          ORR      r1,r1,r2,LSL #4
000062  6b42              LDR      r2,[r0,#0x34]
000064  6892              LDR      r2,[r2,#8]
000066  ea412102          ORR      r1,r1,r2,LSL #8
00006a  6b42              LDR      r2,[r0,#0x34]
00006c  8992              LDRH     r2,[r2,#0xc]
00006e  ea414102          ORR      r1,r1,r2,LSL #16
000072  6b42              LDR      r2,[r0,#0x34]
000074  8a12              LDRH     r2,[r2,#0x10]
000076  ea415102          ORR      r1,r1,r2,LSL #20
00007a  6b42              LDR      r2,[r0,#0x34]
00007c  7d12              LDRB     r2,[r2,#0x14]
00007e  ea416102          ORR      r1,r1,r2,LSL #24
000082  6b42              LDR      r2,[r0,#0x34]
000084  6992              LDR      r2,[r2,#0x18]
000086  4311              ORRS     r1,r1,r2
000088  6802              LDR      r2,[r0,#0]
00008a  1c52              ADDS     r2,r2,#1
00008c  0092              LSLS     r2,r2,#2
00008e  f1a242c0          SUB      r2,r2,#0x60000000
000092  6011              STR      r1,[r2,#0]
;;;182                (u32)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;183                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;184                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;185                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;186                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;187                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;188                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;189                
;;;190    
;;;191        
;;;192      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;193      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
000094  6a81              LDR      r1,[r0,#0x28]
000096  f5b14f80          CMP      r1,#0x4000
00009a  d11f              BNE      |L14.220|
;;;194      {
;;;195        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;196        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;197        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;198        assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;199        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;200        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;201        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;202    
;;;203        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
00009c  6b81              LDR      r1,[r0,#0x38]
00009e  6809              LDR      r1,[r1,#0]
0000a0  6b82              LDR      r2,[r0,#0x38]
0000a2  6852              LDR      r2,[r2,#4]
0000a4  ea411102          ORR      r1,r1,r2,LSL #4
0000a8  6b82              LDR      r2,[r0,#0x38]
0000aa  6892              LDR      r2,[r2,#8]
0000ac  ea412102          ORR      r1,r1,r2,LSL #8
0000b0  6b82              LDR      r2,[r0,#0x38]
0000b2  8992              LDRH     r2,[r2,#0xc]
0000b4  ea414102          ORR      r1,r1,r2,LSL #16
0000b8  6b82              LDR      r2,[r0,#0x38]
0000ba  8a12              LDRH     r2,[r2,#0x10]
0000bc  ea415102          ORR      r1,r1,r2,LSL #20
0000c0  6b82              LDR      r2,[r0,#0x38]
0000c2  7d12              LDRB     r2,[r2,#0x14]
0000c4  ea416102          ORR      r1,r1,r2,LSL #24
0000c8  6b82              LDR      r2,[r0,#0x38]
0000ca  6992              LDR      r2,[r2,#0x18]
0000cc  4311              ORRS     r1,r1,r2
0000ce  6802              LDR      r2,[r0,#0]
0000d0  0092              LSLS     r2,r2,#2
0000d2  f1a242c0          SUB      r2,r2,#0x60000000
0000d6  f8c21104          STR      r1,[r2,#0x104]
0000da  e007              B        |L14.236|
                  |L14.220|
;;;204                  (u32)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;205                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;206                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;207                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;208                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;209                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;210                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;211      }
;;;212      else
;;;213      {
;;;214        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
0000dc  f06f4270          MVN      r2,#0xf0000000
0000e0  6801              LDR      r1,[r0,#0]
0000e2  0089              LSLS     r1,r1,#2
0000e4  f1a141c0          SUB      r1,r1,#0x60000000
0000e8  f8c12104          STR      r2,[r1,#0x104]
                  |L14.236|
;;;215      }
;;;216    }
0000ec  4770              BX       lr
;;;217    
                          ENDP


                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;356    *******************************************************************************/
;;;357    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  2100              MOVS     r1,#0
;;;358    {  
;;;359      /* Reset NOR/SRAM Init structure parameters values */
;;;360      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  6001              STR      r1,[r0,#0]
;;;361      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2102              MOVS     r1,#2
000006  6041              STR      r1,[r0,#4]
;;;362      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;363      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000c  60c1              STR      r1,[r0,#0xc]
;;;364      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;365      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000010  6141              STR      r1,[r0,#0x14]
;;;366      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000012  6181              STR      r1,[r0,#0x18]
;;;367      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000014  61c1              STR      r1,[r0,#0x1c]
;;;368      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000016  f44f5180          MOV      r1,#0x1000
00001a  6201              STR      r1,[r0,#0x20]
;;;369      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001c  0049              LSLS     r1,r1,#1
00001e  6241              STR      r1,[r0,#0x24]
;;;370      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000020  2100              MOVS     r1,#0
000022  6281              STR      r1,[r0,#0x28]
;;;371      FSMC_NORSRAMInitStruct->FSMC_AsyncWait = FSMC_AsyncWait_Disable;
000024  62c1              STR      r1,[r0,#0x2c]
;;;372      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000026  6301              STR      r1,[r0,#0x30]
;;;373      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000028  210f              MOVS     r1,#0xf
00002a  6b42              LDR      r2,[r0,#0x34]
00002c  6011              STR      r1,[r2,#0]
;;;374      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
00002e  6b42              LDR      r2,[r0,#0x34]
000030  6051              STR      r1,[r2,#4]
;;;375      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000032  21ff              MOVS     r1,#0xff
000034  6b42              LDR      r2,[r0,#0x34]
000036  6091              STR      r1,[r2,#8]
;;;376      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000038  210f              MOVS     r1,#0xf
00003a  6b42              LDR      r2,[r0,#0x34]
00003c  60d1              STR      r1,[r2,#0xc]
;;;377      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
00003e  6b42              LDR      r2,[r0,#0x34]
000040  6111              STR      r1,[r2,#0x10]
;;;378      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
000042  6b42              LDR      r2,[r0,#0x34]
000044  6151              STR      r1,[r2,#0x14]
;;;379      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
000046  2100              MOVS     r1,#0
000048  6b42              LDR      r2,[r0,#0x34]
00004a  6191              STR      r1,[r2,#0x18]
;;;380      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
00004c  210f              MOVS     r1,#0xf
00004e  6b82              LDR      r2,[r0,#0x38]
000050  6011              STR      r1,[r2,#0]
;;;381      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000052  6b82              LDR      r2,[r0,#0x38]
000054  6051              STR      r1,[r2,#4]
;;;382      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000056  21ff              MOVS     r1,#0xff
000058  6b82              LDR      r2,[r0,#0x38]
00005a  6091              STR      r1,[r2,#8]
;;;383      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00005c  210f              MOVS     r1,#0xf
00005e  6b82              LDR      r2,[r0,#0x38]
000060  60d1              STR      r1,[r2,#0xc]
;;;384      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000062  6b82              LDR      r2,[r0,#0x38]
000064  6111              STR      r1,[r2,#0x10]
;;;385      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000066  6b82              LDR      r2,[r0,#0x38]
000068  6151              STR      r1,[r2,#0x14]
;;;386      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00006a  2100              MOVS     r1,#0
00006c  6b82              LDR      r2,[r0,#0x38]
00006e  6191              STR      r1,[r2,#0x18]
;;;387    }
000070  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.FSMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDCmd PROC
;;;528    *******************************************************************************/
;;;529    void FSMC_PCCARDCmd(FunctionalState NewState)
000000  b140              CBZ      r0,|L16.20|
;;;530    {
;;;531      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;532      
;;;533      if (NewState != DISABLE)
;;;534      {
;;;535        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;536        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
000002  4909              LDR      r1,|L16.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  f04f4220          MOV      r2,#0xa0000000
00000e  f8c210a0          STR      r1,[r2,#0xa0]
000012  e007              B        |L16.36|
                  |L16.20|
;;;537      }
;;;538      else
;;;539      {
;;;540        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;541        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
000014  4904              LDR      r1,|L16.40|
000016  6809              LDR      r1,[r1,#0]
000018  4a04              LDR      r2,|L16.44|
00001a  4011              ANDS     r1,r1,r2
00001c  f04f4220          MOV      r2,#0xa0000000
000020  f8c210a0          STR      r1,[r2,#0xa0]
                  |L16.36|
;;;542      }
;;;543    }
000024  4770              BX       lr
;;;544    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
                          DCD      0xa00000a0
                  |L16.44|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_PCCARDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDDeInit PROC
;;;115    *******************************************************************************/
;;;116    void FSMC_PCCARDDeInit(void)
000000  2018              MOVS     r0,#0x18
;;;117    {
;;;118      /* Set the FSMC_Bank4 registers to their reset values */
;;;119      FSMC_Bank4->PCR4 = 0x00000018; 
000002  4908              LDR      r1,|L17.36|
000004  6008              STR      r0,[r1,#0]
;;;120      FSMC_Bank4->SR4 = 0x00000000;	
000006  2000              MOVS     r0,#0
000008  0609              LSLS     r1,r1,#24
00000a  f8c100a4          STR      r0,[r1,#0xa4]
;;;121      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
00000e  f04f30fc          MOV      r0,#0xfcfcfcfc
000012  4904              LDR      r1,|L17.36|
000014  3108              ADDS     r1,r1,#8
000016  6008              STR      r0,[r1,#0]
;;;122      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000018  1d09              ADDS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;123      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;124    }
000020  4770              BX       lr
;;;125    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDInit PROC
;;;299    *******************************************************************************/
;;;300    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  e9d01200          LDRD     r1,r2,[r0,#0]
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;304      assert_param(IS_FSMC_ADDRESS_LOW_MAPPING(FSMC_PCCARDInitStruct->FSMC_AddressLowMapping));
;;;305      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;306      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;307    
;;;308     
;;;309      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;310      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;311      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;312      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;313      
;;;314      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;315      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;316      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;317      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;318    
;;;319      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;320      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;321      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;322      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;323      
;;;324      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;325      FSMC_Bank4->PCR4 = (u32)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000004  4311              ORRS     r1,r1,r2
000006  6882              LDR      r2,[r0,#8]
000008  ea412142          ORR      r1,r1,r2,LSL #9
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  ea413142          ORR      r1,r1,r2,LSL #13
000012  4a1b              LDR      r2,|L18.128|
000014  6011              STR      r1,[r2,#0]
;;;326                         FSMC_PCCARDInitStruct->FSMC_AddressLowMapping |
;;;327                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;328                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;329                
;;;330      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;331      FSMC_Bank4->PMEM4 = (u32)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000016  6901              LDR      r1,[r0,#0x10]
000018  6809              LDR      r1,[r1,#0]
00001a  6902              LDR      r2,[r0,#0x10]
00001c  6852              LDR      r2,[r2,#4]
00001e  ea412102          ORR      r1,r1,r2,LSL #8
000022  6902              LDR      r2,[r0,#0x10]
000024  8912              LDRH     r2,[r2,#8]
000026  ea414102          ORR      r1,r1,r2,LSL #16
00002a  6902              LDR      r2,[r0,#0x10]
00002c  7b12              LDRB     r2,[r2,#0xc]
00002e  ea416102          ORR      r1,r1,r2,LSL #24
000032  4a13              LDR      r2,|L18.128|
000034  3208              ADDS     r2,r2,#8
000036  6011              STR      r1,[r2,#0]
;;;332                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;333                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;334                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;335                
;;;336      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;337      FSMC_Bank4->PATT4 = (u32)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000038  6941              LDR      r1,[r0,#0x14]
00003a  6809              LDR      r1,[r1,#0]
00003c  6942              LDR      r2,[r0,#0x14]
00003e  6852              LDR      r2,[r2,#4]
000040  ea412102          ORR      r1,r1,r2,LSL #8
000044  6942              LDR      r2,[r0,#0x14]
000046  8912              LDRH     r2,[r2,#8]
000048  ea414102          ORR      r1,r1,r2,LSL #16
00004c  6942              LDR      r2,[r0,#0x14]
00004e  7b12              LDRB     r2,[r2,#0xc]
000050  ea416102          ORR      r1,r1,r2,LSL #24
000054  4a0a              LDR      r2,|L18.128|
000056  320c              ADDS     r2,r2,#0xc
000058  6011              STR      r1,[r2,#0]
;;;338                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;339                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;340                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;341                
;;;342      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;343      FSMC_Bank4->PIO4 = (u32)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
00005a  6981              LDR      r1,[r0,#0x18]
00005c  6809              LDR      r1,[r1,#0]
00005e  6982              LDR      r2,[r0,#0x18]
000060  6852              LDR      r2,[r2,#4]
000062  ea412102          ORR      r1,r1,r2,LSL #8
000066  6982              LDR      r2,[r0,#0x18]
000068  8912              LDRH     r2,[r2,#8]
00006a  ea414102          ORR      r1,r1,r2,LSL #16
00006e  6982              LDR      r2,[r0,#0x18]
000070  7b12              LDRB     r2,[r2,#0xc]
000072  ea416102          ORR      r1,r1,r2,LSL #24
000076  f04f4220          MOV      r2,#0xa0000000
00007a  f8c210b0          STR      r1,[r2,#0xb0]
;;;344                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;345                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;346                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;347    }
00007e  4770              BX       lr
;;;348    
                          ENDP

                  |L18.128|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDStructInit PROC
;;;425    *******************************************************************************/
;;;426    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;427    {
;;;428      /* Reset PCCARD Init structure parameters values */
;;;429      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
;;;430      FSMC_PCCARDInitStruct->FSMC_AddressLowMapping = FSMC_AddressLowMapping_Direct;
000004  6041              STR      r1,[r0,#4]
;;;431      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000006  6081              STR      r1,[r0,#8]
;;;432      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000008  60c1              STR      r1,[r0,#0xc]
;;;433      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00000a  21fc              MOVS     r1,#0xfc
00000c  6902              LDR      r2,[r0,#0x10]
00000e  6011              STR      r1,[r2,#0]
;;;434      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000010  6902              LDR      r2,[r0,#0x10]
000012  6051              STR      r1,[r2,#4]
;;;435      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000014  6902              LDR      r2,[r0,#0x10]
000016  6091              STR      r1,[r2,#8]
;;;436      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000018  6902              LDR      r2,[r0,#0x10]
00001a  60d1              STR      r1,[r2,#0xc]
;;;437      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00001c  6942              LDR      r2,[r0,#0x14]
00001e  6011              STR      r1,[r2,#0]
;;;438      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000020  6942              LDR      r2,[r0,#0x14]
000022  6051              STR      r1,[r2,#4]
;;;439      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000024  6942              LDR      r2,[r0,#0x14]
000026  6091              STR      r1,[r2,#8]
;;;440      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000028  6942              LDR      r2,[r0,#0x14]
00002a  60d1              STR      r1,[r2,#0xc]
;;;441      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00002c  6982              LDR      r2,[r0,#0x18]
00002e  6011              STR      r1,[r2,#0]
;;;442      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000030  6982              LDR      r2,[r0,#0x18]
000032  6051              STR      r1,[r2,#4]
;;;443      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000034  6982              LDR      r2,[r0,#0x18]
000036  6091              STR      r1,[r2,#8]
;;;444      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000038  6982              LDR      r2,[r0,#0x18]
00003a  60d1              STR      r1,[r2,#0xc]
;;;445    }
00003c  4770              BX       lr
;;;446    
                          ENDP

