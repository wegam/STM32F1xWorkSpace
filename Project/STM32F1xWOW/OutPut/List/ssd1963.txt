; generated by Component: ARM Compiler 5.06 (build 20) Tool: ArmCC [4d35a4]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\obj\ssd1963.o --asm_dir=.\OutPut\List\ --list_dir=.\OutPut\List\ --depend=.\output\obj\ssd1963.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Library\STM32F10x_StdPeriph_Driver\INC -I..\..\Library\Startup\STM32F10x -I..\..\Library\C -I..\..\Library\ARM\Include -I..\..\Driver\WOW\INC -I..\..\Driver\Components\INC -I..\..\Driver\Protocol -I..\..\Examples\DEMO\include -I..\..\Examples\WOW -I.\main -I..\..\Driver\Tool -I..\..\Driver\FatFs\source -IE:\Project\MKD\STM32\STM32F1xWorkSpace\Project\STM32F1xWOW\RTE -I"D:\Program Files (x86)\MDK\Pack\ARM\CMSIS\5.0.1\CMSIS\Include" -I"D:\Program Files (x86)\MDK\Pack\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -D__MICROLIB -D__UVISION_VERSION=516 -D_RTE_ -DSTM32F10X_HD -DAMPLCDV11 --omf_browse=.\output\obj\ssd1963.crf ..\..\Driver\Components\SCR\SSD1963.C]
                          THUMB

                          AREA ||i.SSD1963_Clean||, CODE, READONLY, ALIGN=2

                  SSD1963_Clean PROC
;;;697    *******************************************************************************/
;;;698    void SSD1963_Clean(u16 Color)	//清除屏幕函数
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;699    {
000004  4682              MOV      r10,r0
;;;700    	unsigned short x,y;
;;;701    	unsigned short HSX,HEX,HSY,HEY,MaxH,MaxV;
;;;702    	unsigned long	length	=	0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;703    	eRotate	Rotate	=	pSSD1963->Flag.Rotate;
00000a  4822              LDR      r0,|L1.148|
00000c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00000e  f890b05c          LDRB     r11,[r0,#0x5c]
;;;704    	
;;;705    	MaxH	=	pSSD1963->Data.MaxH;
000012  4820              LDR      r0,|L1.148|
000014  6800              LDR      r0,[r0,#0]  ; pSSD1963
000016  f8b08040          LDRH     r8,[r0,#0x40]
;;;706    	MaxV	=	pSSD1963->Data.MaxV;	
00001a  481e              LDR      r0,|L1.148|
00001c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00001e  f8b09042          LDRH     r9,[r0,#0x42]
;;;707    	switch(Rotate)
000022  f1bb0f00          CMP      r11,#0
000026  d006              BEQ      |L1.54|
000028  f1bb0f01          CMP      r11,#1
00002c  d00c              BEQ      |L1.72|
00002e  f1bb0f02          CMP      r11,#2
000032  d11b              BNE      |L1.108|
000034  e011              B        |L1.90|
                  |L1.54|
;;;708    	{
;;;709    		case 	Draw_Rotate_0D:
;;;710    					HSX	=	0;
000036  2400              MOVS     r4,#0
;;;711    					HEX	=	MaxH-1;
000038  f1a80001          SUB      r0,r8,#1
00003c  b285              UXTH     r5,r0
;;;712    					HSY	=	0;
00003e  2600              MOVS     r6,#0
;;;713    					HEY	=	MaxV-1;
000040  f1a90001          SUB      r0,r9,#1
000044  b287              UXTH     r7,r0
;;;714    			break;
000046  e01a              B        |L1.126|
                  |L1.72|
;;;715    		case	Draw_Rotate_90D:
;;;716    					HSX	=	0;
000048  2400              MOVS     r4,#0
;;;717    					HEX	=	MaxV-1;
00004a  f1a90001          SUB      r0,r9,#1
00004e  b285              UXTH     r5,r0
;;;718    					HSY	=	0;
000050  2600              MOVS     r6,#0
;;;719    					HEY	=	MaxH-1;
000052  f1a80001          SUB      r0,r8,#1
000056  b287              UXTH     r7,r0
;;;720    			break;
000058  e011              B        |L1.126|
                  |L1.90|
;;;721    		case	Draw_Rotate_180D:
;;;722    					HSX	=	0;
00005a  2400              MOVS     r4,#0
;;;723    					HEX	=	MaxH-1;
00005c  f1a80001          SUB      r0,r8,#1
000060  b285              UXTH     r5,r0
;;;724    					HSY	=	0;
000062  2600              MOVS     r6,#0
;;;725    					HEY	=	MaxV-1;
000064  f1a90001          SUB      r0,r9,#1
000068  b287              UXTH     r7,r0
;;;726    			break;
00006a  e008              B        |L1.126|
                  |L1.108|
;;;727    		default:
;;;728    					HSX	=	0;
00006c  2400              MOVS     r4,#0
;;;729    					HEX	=	MaxV-1;
00006e  f1a90001          SUB      r0,r9,#1
000072  b285              UXTH     r5,r0
;;;730    					HSY	=	0;
000074  2600              MOVS     r6,#0
;;;731    					HEY	=	MaxH-1;
000076  f1a80001          SUB      r0,r8,#1
00007a  b287              UXTH     r7,r0
;;;732    			break;			
00007c  bf00              NOP      
                  |L1.126|
00007e  bf00              NOP                            ;714
;;;733    	}	
;;;734    	SSD1963_Fill(HSX,HSY,HEX,HEY,Color);
000080  463b              MOV      r3,r7
000082  462a              MOV      r2,r5
000084  4631              MOV      r1,r6
000086  4620              MOV      r0,r4
000088  f8cda000          STR      r10,[sp,#0]
00008c  f7fffffe          BL       SSD1963_Fill
;;;735    }
000090  e8bd9ffc          POP      {r2-r12,pc}
;;;736    /**************************************************************************************************
                          ENDP

                  |L1.148|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_DrawCircle||, CODE, READONLY, ALIGN=1

                  SSD1963_DrawCircle PROC
;;;591    **************************************************************************************************/
;;;592    void SSD1963_DrawCircle(
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;593    												u16 x,u16 y,		//圆心坐标原点
;;;594    												u16 r,					//半径
;;;595    												u8 Filled,			//是否填充
;;;596    												u16 color				//颜色
;;;597    												)
;;;598    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  469b              MOV      r11,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;599    	int a,b;
;;;600    	int di;
;;;601    	a=0;b=r;	  
000010  2400              MOVS     r4,#0
000012  4655              MOV      r5,r10
;;;602    	di=3-(r<<1);             //判断下个点位置的标志
000014  2003              MOVS     r0,#3
000016  eba0094a          SUB      r9,r0,r10,LSL #1
;;;603    	while(a<=b)
00001a  e0c8              B        |L2.430|
                  |L2.28|
;;;604    	{
;;;605    		if(Filled)	//填充就画线
00001c  f1bb0f00          CMP      r11,#0
000020  d072              BEQ      |L2.264|
;;;606    		{
;;;607    			SSD1963_DrawLine(x,y,x-b,y-a,color);             //3           
000022  1b38              SUBS     r0,r7,r4
000024  b283              UXTH     r3,r0
000026  1b70              SUBS     r0,r6,r5
000028  b282              UXTH     r2,r0
00002a  4639              MOV      r1,r7
00002c  4630              MOV      r0,r6
00002e  f8cd8000          STR      r8,[sp,#0]
000032  f7fffffe          BL       SSD1963_DrawLine
;;;608    			SSD1963_DrawLine(x,y,x+b,y-a,color);             //0           
000036  1b38              SUBS     r0,r7,r4
000038  b283              UXTH     r3,r0
00003a  1970              ADDS     r0,r6,r5
00003c  b282              UXTH     r2,r0
00003e  4639              MOV      r1,r7
000040  4630              MOV      r0,r6
000042  f8cd8000          STR      r8,[sp,#0]
000046  f7fffffe          BL       SSD1963_DrawLine
;;;609    			SSD1963_DrawLine(x,y,x-a,y+b,color);             //1       
00004a  1978              ADDS     r0,r7,r5
00004c  b283              UXTH     r3,r0
00004e  1b30              SUBS     r0,r6,r4
000050  b282              UXTH     r2,r0
000052  4639              MOV      r1,r7
000054  4630              MOV      r0,r6
000056  f8cd8000          STR      r8,[sp,#0]
00005a  f7fffffe          BL       SSD1963_DrawLine
;;;610    			SSD1963_DrawLine(x,y,x-b,y-a,color);             //7           
00005e  1b38              SUBS     r0,r7,r4
000060  b283              UXTH     r3,r0
000062  1b70              SUBS     r0,r6,r5
000064  b282              UXTH     r2,r0
000066  4639              MOV      r1,r7
000068  4630              MOV      r0,r6
00006a  f8cd8000          STR      r8,[sp,#0]
00006e  f7fffffe          BL       SSD1963_DrawLine
;;;611    			SSD1963_DrawLine(x,y,x-a,y-b,color);             //2             
000072  1b78              SUBS     r0,r7,r5
000074  b283              UXTH     r3,r0
000076  1b30              SUBS     r0,r6,r4
000078  b282              UXTH     r2,r0
00007a  4639              MOV      r1,r7
00007c  4630              MOV      r0,r6
00007e  f8cd8000          STR      r8,[sp,#0]
000082  f7fffffe          BL       SSD1963_DrawLine
;;;612    			SSD1963_DrawLine(x,y,x+b,y+a,color);             //4               
000086  1938              ADDS     r0,r7,r4
000088  b283              UXTH     r3,r0
00008a  1970              ADDS     r0,r6,r5
00008c  b282              UXTH     r2,r0
00008e  4639              MOV      r1,r7
000090  4630              MOV      r0,r6
000092  f8cd8000          STR      r8,[sp,#0]
000096  f7fffffe          BL       SSD1963_DrawLine
;;;613    			SSD1963_DrawLine(x,y,x+a,y-b,color);             //5
00009a  1b78              SUBS     r0,r7,r5
00009c  b283              UXTH     r3,r0
00009e  1930              ADDS     r0,r6,r4
0000a0  b282              UXTH     r2,r0
0000a2  4639              MOV      r1,r7
0000a4  4630              MOV      r0,r6
0000a6  f8cd8000          STR      r8,[sp,#0]
0000aa  f7fffffe          BL       SSD1963_DrawLine
;;;614    			SSD1963_DrawLine(x,y,x+a,y+b,color);             //6 
0000ae  1978              ADDS     r0,r7,r5
0000b0  b283              UXTH     r3,r0
0000b2  1930              ADDS     r0,r6,r4
0000b4  b282              UXTH     r2,r0
0000b6  4639              MOV      r1,r7
0000b8  4630              MOV      r0,r6
0000ba  f8cd8000          STR      r8,[sp,#0]
0000be  f7fffffe          BL       SSD1963_DrawLine
;;;615    			SSD1963_DrawLine(x,y,x-b,y+a,color);             
0000c2  1938              ADDS     r0,r7,r4
0000c4  b283              UXTH     r3,r0
0000c6  1b70              SUBS     r0,r6,r5
0000c8  b282              UXTH     r2,r0
0000ca  4639              MOV      r1,r7
0000cc  4630              MOV      r0,r6
0000ce  f8cd8000          STR      r8,[sp,#0]
0000d2  f7fffffe          BL       SSD1963_DrawLine
;;;616    			a++;
0000d6  1c64              ADDS     r4,r4,#1
;;;617    			//使用Bresenham算法画圆     
;;;618    			if(di<0)
0000d8  f1b90f00          CMP      r9,#0
0000dc  da03              BGE      |L2.230|
;;;619    				di +=4*a+6;	  
0000de  00a0              LSLS     r0,r4,#2
0000e0  1d80              ADDS     r0,r0,#6
0000e2  4481              ADD      r9,r9,r0
0000e4  e004              B        |L2.240|
                  |L2.230|
;;;620    			else
;;;621    			{
;;;622    				di+=10+4*(a-b);   
0000e6  1b60              SUBS     r0,r4,r5
0000e8  0080              LSLS     r0,r0,#2
0000ea  300a              ADDS     r0,r0,#0xa
0000ec  4481              ADD      r9,r9,r0
;;;623    				b--;
0000ee  1e6d              SUBS     r5,r5,#1
                  |L2.240|
;;;624    			}
;;;625    			SSD1963_DrawLine(x,y,x+a,y+b,color);				//AB 两个坐标画一条直线
0000f0  1978              ADDS     r0,r7,r5
0000f2  b283              UXTH     r3,r0
0000f4  1930              ADDS     r0,r6,r4
0000f6  b282              UXTH     r2,r0
0000f8  4639              MOV      r1,r7
0000fa  4630              MOV      r0,r6
0000fc  f8cd8000          STR      r8,[sp,#0]
000100  f7fffffe          BL       SSD1963_DrawLine
000104  e053              B        |L2.430|
000106  e7ff              B        |L2.264|
                  |L2.264|
;;;626    		}
;;;627    		else
;;;628    		{
;;;629    			SSD1963_DrawDot(x-b,y-a,color);             //3           
000108  1b3a              SUBS     r2,r7,r4
00010a  b291              UXTH     r1,r2
00010c  1b72              SUBS     r2,r6,r5
00010e  b290              UXTH     r0,r2
000110  4642              MOV      r2,r8
000112  f7fffffe          BL       SSD1963_DrawDot
;;;630    			SSD1963_DrawDot(x+b,y-a,color);             //0           
000116  1b3a              SUBS     r2,r7,r4
000118  b291              UXTH     r1,r2
00011a  1972              ADDS     r2,r6,r5
00011c  b290              UXTH     r0,r2
00011e  4642              MOV      r2,r8
000120  f7fffffe          BL       SSD1963_DrawDot
;;;631    			SSD1963_DrawDot(x-a,y+b,color);             //1       
000124  197a              ADDS     r2,r7,r5
000126  b291              UXTH     r1,r2
000128  1b32              SUBS     r2,r6,r4
00012a  b290              UXTH     r0,r2
00012c  4642              MOV      r2,r8
00012e  f7fffffe          BL       SSD1963_DrawDot
;;;632    			SSD1963_DrawDot(x-b,y-a,color);             //7           
000132  1b3a              SUBS     r2,r7,r4
000134  b291              UXTH     r1,r2
000136  1b72              SUBS     r2,r6,r5
000138  b290              UXTH     r0,r2
00013a  4642              MOV      r2,r8
00013c  f7fffffe          BL       SSD1963_DrawDot
;;;633    			SSD1963_DrawDot(x-a,y-b,color);             //2             
000140  1b7a              SUBS     r2,r7,r5
000142  b291              UXTH     r1,r2
000144  1b32              SUBS     r2,r6,r4
000146  b290              UXTH     r0,r2
000148  4642              MOV      r2,r8
00014a  f7fffffe          BL       SSD1963_DrawDot
;;;634    			SSD1963_DrawDot(x+b,y+a,color);             //4               
00014e  193a              ADDS     r2,r7,r4
000150  b291              UXTH     r1,r2
000152  1972              ADDS     r2,r6,r5
000154  b290              UXTH     r0,r2
000156  4642              MOV      r2,r8
000158  f7fffffe          BL       SSD1963_DrawDot
;;;635    			SSD1963_DrawDot(x+a,y-b,color);             //5
00015c  1b7a              SUBS     r2,r7,r5
00015e  b291              UXTH     r1,r2
000160  1932              ADDS     r2,r6,r4
000162  b290              UXTH     r0,r2
000164  4642              MOV      r2,r8
000166  f7fffffe          BL       SSD1963_DrawDot
;;;636    			SSD1963_DrawDot(x+a,y+b,color);             //6 
00016a  197a              ADDS     r2,r7,r5
00016c  b291              UXTH     r1,r2
00016e  1932              ADDS     r2,r6,r4
000170  b290              UXTH     r0,r2
000172  4642              MOV      r2,r8
000174  f7fffffe          BL       SSD1963_DrawDot
;;;637    			SSD1963_DrawDot(x-b,y+a,color);             
000178  193a              ADDS     r2,r7,r4
00017a  b291              UXTH     r1,r2
00017c  1b72              SUBS     r2,r6,r5
00017e  b290              UXTH     r0,r2
000180  4642              MOV      r2,r8
000182  f7fffffe          BL       SSD1963_DrawDot
;;;638    			a++;
000186  1c64              ADDS     r4,r4,#1
;;;639    			//使用Bresenham算法画圆     
;;;640    			if(di<0)
000188  f1b90f00          CMP      r9,#0
00018c  da03              BGE      |L2.406|
;;;641    				di +=4*a+6;	  
00018e  00a0              LSLS     r0,r4,#2
000190  1d80              ADDS     r0,r0,#6
000192  4481              ADD      r9,r9,r0
000194  e004              B        |L2.416|
                  |L2.406|
;;;642    			else
;;;643    			{
;;;644    				di+=10+4*(a-b);   
000196  1b60              SUBS     r0,r4,r5
000198  0080              LSLS     r0,r0,#2
00019a  300a              ADDS     r0,r0,#0xa
00019c  4481              ADD      r9,r9,r0
;;;645    				b--;
00019e  1e6d              SUBS     r5,r5,#1
                  |L2.416|
;;;646    			}
;;;647    				SSD1963_DrawDot(x+a,y+b,color);
0001a0  197a              ADDS     r2,r7,r5
0001a2  b291              UXTH     r1,r2
0001a4  1932              ADDS     r2,r6,r4
0001a6  b290              UXTH     r0,r2
0001a8  4642              MOV      r2,r8
0001aa  f7fffffe          BL       SSD1963_DrawDot
                  |L2.430|
0001ae  42ac              CMP      r4,r5                 ;603
0001b0  f77faf34          BLE      |L2.28|
;;;648    		}
;;;649    	}
;;;650    }
0001b4  e8bd8ff8          POP      {r3-r11,pc}
;;;651    /**************************************************************************************************
                          ENDP


                          AREA ||i.SSD1963_DrawDot||, CODE, READONLY, ALIGN=1

                  SSD1963_DrawDot PROC
;;;512    *******************************************************************************/
;;;513    void SSD1963_DrawDot(
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;514    									unsigned short HSX,			//点X坐标*/
;;;515    									unsigned short HSY,			//点Y坐标*/
;;;516    									unsigned short Color		//点颜色*/	
;;;517    								)
;;;518    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;519    	SSD1963_SetWindowAddress(HSX,HSY,HSX,HSY);	//设置光标位置
000006  462b              MOV      r3,r5
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SSD1963_SetWindowAddress
;;;520    	SSD1963_WriteGRAM(&Color,1);
000012  2101              MOVS     r1,#1
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       SSD1963_WriteGRAM
;;;521    }
00001a  bd3e              POP      {r1-r5,pc}
;;;522    /*******************************************************************************
                          ENDP


                          AREA ||i.SSD1963_DrawLine||, CODE, READONLY, ALIGN=1

                  SSD1963_DrawLine PROC
;;;530    *******************************************************************************/
;;;531    void SSD1963_DrawLine(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;532    									unsigned short HSX, unsigned short HSY, 	//x1,y1:起点坐标
;;;533    									unsigned short HEX, unsigned short HEY,		//x2,y2:终点坐标
;;;534    									unsigned short Color					//颜色
;;;535    )
;;;536    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
;;;537    	u16 t; 
;;;538    	int xerr=0,yerr=0,delta_x,delta_y,distance; 
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  4683              MOV      r11,r0
;;;539    	int incx,incy,uRow,uCol; 
;;;540    
;;;541    	delta_x=HEX-HSX; //计算坐标增量 
000010  9807              LDR      r0,[sp,#0x1c]
000012  eba00509          SUB      r5,r0,r9
;;;542    	delta_y=HEY-HSY; 
000016  9808              LDR      r0,[sp,#0x20]
000018  eba0060a          SUB      r6,r0,r10
;;;543    	uRow=HSX; 
00001c  f8cd9008          STR      r9,[sp,#8]
;;;544    	uCol=HSY;
000020  f8cda004          STR      r10,[sp,#4]
;;;545    	
;;;546    	if(delta_x>0)
000024  2d00              CMP      r5,#0
000026  dd01              BLE      |L4.44|
;;;547    		incx=1; //设置单步方向 
000028  2701              MOVS     r7,#1
00002a  e005              B        |L4.56|
                  |L4.44|
;;;548    	else if(delta_x==0)
00002c  b90d              CBNZ     r5,|L4.50|
;;;549    		incx=0;//垂直线 
00002e  2700              MOVS     r7,#0
000030  e002              B        |L4.56|
                  |L4.50|
;;;550    	else
;;;551    	{
;;;552    		incx=-1;
000032  f04f37ff          MOV      r7,#0xffffffff
;;;553    		delta_x=-delta_x;
000036  426d              RSBS     r5,r5,#0
                  |L4.56|
;;;554    	}
;;;555    		
;;;556    	if(delta_y>0)
000038  2e00              CMP      r6,#0
00003a  dd02              BLE      |L4.66|
;;;557    		incy=1; 
00003c  f04f0801          MOV      r8,#1
000040  e006              B        |L4.80|
                  |L4.66|
;;;558    	else if(delta_y==0)
000042  b916              CBNZ     r6,|L4.74|
;;;559    		incy=0;//水平线 
000044  f04f0800          MOV      r8,#0
000048  e002              B        |L4.80|
                  |L4.74|
;;;560    	else
;;;561    		{incy=-1;delta_y=-delta_y;}
00004a  f04f38ff          MOV      r8,#0xffffffff
00004e  4276              RSBS     r6,r6,#0
                  |L4.80|
;;;562    		
;;;563    	if( delta_x>delta_y)
000050  42b5              CMP      r5,r6
000052  dd01              BLE      |L4.88|
;;;564    		distance=delta_x; 								//选取基本增量坐标轴 
000054  462c              MOV      r4,r5
000056  e000              B        |L4.90|
                  |L4.88|
;;;565    	else
;;;566    		distance=delta_y;
000058  4634              MOV      r4,r6
                  |L4.90|
;;;567    	
;;;568    	for(t=0;t<distance+1;t++ )					//画线输出 
00005a  2000              MOVS     r0,#0
00005c  9004              STR      r0,[sp,#0x10]
00005e  e01e              B        |L4.158|
                  |L4.96|
;;;569    	{  
;;;570    		SSD1963_DrawDot(uRow,uCol,Color);			//画点 
000060  9a01              LDR      r2,[sp,#4]
000062  b291              UXTH     r1,r2
000064  9a02              LDR      r2,[sp,#8]
000066  b290              UXTH     r0,r2
000068  9a12              LDR      r2,[sp,#0x48]
00006a  f7fffffe          BL       SSD1963_DrawDot
;;;571    		xerr+=delta_x ; 
00006e  9803              LDR      r0,[sp,#0xc]
000070  4428              ADD      r0,r0,r5
000072  9003              STR      r0,[sp,#0xc]
;;;572    		yerr+=delta_y ; 
000074  44b3              ADD      r11,r11,r6
;;;573    		if(xerr>distance) 
000076  9803              LDR      r0,[sp,#0xc]
000078  42a0              CMP      r0,r4
00007a  dd05              BLE      |L4.136|
;;;574    		{ 
;;;575    			xerr-=distance; 
00007c  9803              LDR      r0,[sp,#0xc]
00007e  1b00              SUBS     r0,r0,r4
000080  9003              STR      r0,[sp,#0xc]
;;;576    			uRow+=incx; 
000082  9802              LDR      r0,[sp,#8]
000084  4438              ADD      r0,r0,r7
000086  9002              STR      r0,[sp,#8]
                  |L4.136|
;;;577    		} 
;;;578    		if(yerr>distance) 
000088  45a3              CMP      r11,r4
00008a  dd04              BLE      |L4.150|
;;;579    		{ 
;;;580    			yerr-=distance;
00008c  ebab0b04          SUB      r11,r11,r4
;;;581    			uCol+=incy; 
000090  9801              LDR      r0,[sp,#4]
000092  4440              ADD      r0,r0,r8
000094  9001              STR      r0,[sp,#4]
                  |L4.150|
000096  9804              LDR      r0,[sp,#0x10]         ;568
000098  1c40              ADDS     r0,r0,#1              ;568
00009a  b280              UXTH     r0,r0                 ;568
00009c  9004              STR      r0,[sp,#0x10]         ;568
                  |L4.158|
00009e  1c61              ADDS     r1,r4,#1              ;568
0000a0  9804              LDR      r0,[sp,#0x10]         ;568
0000a2  4288              CMP      r0,r1                 ;568
0000a4  dbdc              BLT      |L4.96|
;;;582    		} 
;;;583    	}
;;;584    }
0000a6  b009              ADD      sp,sp,#0x24
0000a8  e8bd8ff0          POP      {r4-r11,pc}
;;;585    /**************************************************************************************************
                          ENDP


                          AREA ||i.SSD1963_DrawRectangle||, CODE, READONLY, ALIGN=1

                  SSD1963_DrawRectangle PROC
;;;655    **************************************************************************************************/
;;;656    void SSD1963_DrawRectangle(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;657    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;658    	SSD1963_DrawLine( x1, y1,	x1,	y2, color );
00000e  4643              MOV      r3,r8
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  9400              STR      r4,[sp,#0]
000018  f7fffffe          BL       SSD1963_DrawLine
;;;659    	SSD1963_DrawLine( x1, y1,	x2,	y1, color );
00001c  4633              MOV      r3,r6
00001e  463a              MOV      r2,r7
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  9400              STR      r4,[sp,#0]
000026  f7fffffe          BL       SSD1963_DrawLine
;;;660    	SSD1963_DrawLine( x2, y1,	x2,	y2, color );
00002a  4643              MOV      r3,r8
00002c  463a              MOV      r2,r7
00002e  4631              MOV      r1,r6
000030  4638              MOV      r0,r7
000032  9400              STR      r4,[sp,#0]
000034  f7fffffe          BL       SSD1963_DrawLine
;;;661    	SSD1963_DrawLine( x1, y2,	x2,	y2, color );
000038  4643              MOV      r3,r8
00003a  463a              MOV      r2,r7
00003c  4641              MOV      r1,r8
00003e  4628              MOV      r0,r5
000040  9400              STR      r4,[sp,#0]
000042  f7fffffe          BL       SSD1963_DrawLine
;;;662    }
000046  e8bd83f8          POP      {r3-r9,pc}
;;;663    /*******************************************************************************
                          ENDP


                          AREA ||i.SSD1963_Fill||, CODE, READONLY, ALIGN=2

                  SSD1963_Fill PROC
;;;668    *******************************************************************************/
;;;669    void SSD1963_Fill(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;670    							unsigned short x1, unsigned short y1, 	//x1,y1:起点坐标
;;;671    							unsigned short x2, unsigned short y2,		//x2,y2:终点坐标
;;;672    							u16 Color
;;;673    )
;;;674    {          
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;675    	unsigned int x;
;;;676    	unsigned int y;	
;;;677    	SSD1963_SetWindowAddress(x1,y1,x2,y2);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SSD1963_SetWindowAddress
;;;678    	pSSD1963->Display.WriteIndex( 0X2C );
00001c  4814              LDR      r0,|L6.112|
00001e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000020  6e41              LDR      r1,[r0,#0x64]
000022  202c              MOVS     r0,#0x2c
000024  4788              BLX      r1
;;;679    	SSD1963Crl(CS);	//LCD_CS_LOW;
000026  4812              LDR      r0,|L6.112|
000028  6800              LDR      r0,[r0,#0]  ; pSSD1963
00002a  8d80              LDRH     r0,[r0,#0x2c]
00002c  4910              LDR      r1,|L6.112|
00002e  6809              LDR      r1,[r1,#0]  ; pSSD1963
000030  6a89              LDR      r1,[r1,#0x28]
000032  6148              STR      r0,[r1,#0x14]
;;;680    	for(x=0;x<=x2-x1;x++)
000034  f04f0800          MOV      r8,#0
000038  e00e              B        |L6.88|
                  |L6.58|
;;;681    	{
;;;682    		for(y=0;y<=y2-y1;y++)
00003a  f04f0900          MOV      r9,#0
00003e  e006              B        |L6.78|
                  |L6.64|
;;;683    		{
;;;684    			pSSD1963->Display.WriteData(Color);							//写数据
000040  480b              LDR      r0,|L6.112|
000042  6800              LDR      r0,[r0,#0]  ; pSSD1963
000044  6e81              LDR      r1,[r0,#0x68]
000046  4650              MOV      r0,r10
000048  4788              BLX      r1
00004a  f1090901          ADD      r9,r9,#1              ;682
                  |L6.78|
00004e  1b78              SUBS     r0,r7,r5              ;682
000050  4548              CMP      r0,r9                 ;682
000052  d2f5              BCS      |L6.64|
000054  f1080801          ADD      r8,r8,#1              ;680
                  |L6.88|
000058  1b30              SUBS     r0,r6,r4              ;680
00005a  4540              CMP      r0,r8                 ;680
00005c  d2ed              BCS      |L6.58|
;;;685    		}
;;;686    	}	
;;;687    	SSD1963Set(CS);	//LCD_CS_HIGH;
00005e  4804              LDR      r0,|L6.112|
000060  6800              LDR      r0,[r0,#0]  ; pSSD1963
000062  8d80              LDRH     r0,[r0,#0x2c]
000064  4902              LDR      r1,|L6.112|
000066  6809              LDR      r1,[r1,#0]  ; pSSD1963
000068  6a89              LDR      r1,[r1,#0x28]
00006a  6108              STR      r0,[r1,#0x10]
;;;688    }
00006c  e8bd87f0          POP      {r4-r10,pc}
;;;689    /*******************************************************************************
                          ENDP

                  |L6.112|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_Initialize||, CODE, READONLY, ALIGN=2

                  SSD1963_Initialize PROC
;;;55     *******************************************************************************/
;;;56     void SSD1963_Initialize(void*	pInfo)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58     	static unsigned short	DeviceCode	=	0;
;;;59     	LCDPortDef*	Port	=	NULL;
000004  2500              MOVS     r5,#0
;;;60     	if(NULL==	pInfo)
000006  b904              CBNZ     r4,|L7.10|
                  |L7.8|
;;;61     		return;
;;;62     	pSSD1963		=	(LCDDef*)pInfo;		//指针指向	
;;;63     	
;;;64     	pSSD1963		=	(LCDDef*)pInfo;		//指针指向
;;;65     	Port	=	&pSSD1963->Port;
;;;66     	
;;;67     	//==========================GPIO配置
;;;68     //	GPIO_Configuration_OPP50	(Port->sBL_PORT,				Port->sBL_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;69     //	GPIO_Configuration_OPP50	(Port->sRD_PORT,				Port->sRD_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;70     //	GPIO_Configuration_OPP50	(Port->sREST_PORT,			Port->sREST_Pin);				//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;71     //	GPIO_Configuration_OPP50	(Port->sDC_PORT,				Port->sDC_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;72     //	GPIO_Configuration_OPP50	(Port->sWR_PORT,				Port->sWR_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;73     //	GPIO_Configuration_OPP50	(Port->sCS_PORT,				Port->sCS_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;74     //	GPIO_Configuration_OPP50	(Port->sTE_PORT,				Port->sTE_Pin);					//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;75     //	GPIO_Configuration_OPP50	(Port->sDATABUS_PORT,		Port->sDATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605
;;;76     	
;;;77     //	DeviceCode	=	SSD1963_ReadRegister(0x00);
;;;78     	
;;;79     	//==========================检查背景色与画笔色是否相同
;;;80     	if(pSSD1963->Data.PColor	==	pSSD1963->Data.BColor)
;;;81     	{
;;;82     		pSSD1963->Data.PColor	=	pSSD1963->Data.BColor^0xFFFF;
;;;83     	}
;;;84     	
;;;85     	pSSD1963->Data.MaxH	=	SSD1963_H;					//最大水平宽度
;;;86     	pSSD1963->Data.MaxV	=	SSD1963_V;					//最大垂直高度	
;;;87       
;;;88     	//==========================接口函数
;;;89     	pSSD1963->Display.WriteAddress		=	SSD1963_SetWindowAddress;
;;;90     	pSSD1963->Display.PowerOn					=	SSD1963_PowerOn;
;;;91     	pSSD1963->Display.DispOff					=	SSD1963_PowerOff;
;;;92     	
;;;93     	pSSD1963->Display.DrawDot					=	SSD1963_DrawDot;
;;;94     	pSSD1963->Display.DrawLine				=	SSD1963_DrawLine;
;;;95     	pSSD1963->Display.DrawCircle			=	SSD1963_DrawCircle;
;;;96     	pSSD1963->Display.DrawRectangle		=	SSD1963_DrawRectangle;
;;;97     	
;;;98     	pSSD1963->Display.Fill						=	SSD1963_Fill;
;;;99     	pSSD1963->Display.Clean						=	SSD1963_Clean;
;;;100    	pSSD1963->Display.SetBackground		=	SSD1963_SetBackground;
;;;101    	
;;;102    	pSSD1963->Display.ShowChar				=	SSD1963_ShowChar;
;;;103    	pSSD1963->Display.ShowWord				=	SSD1963_ShowWord;
;;;104    	
;;;105      if(NULL ==  pSSD1963->Display.WriteIndex)
;;;106        pSSD1963->Display.WriteIndex  = SSD1963_WriteIndex;
;;;107      if(NULL ==  pSSD1963->Display.WriteData)
;;;108        pSSD1963->Display.WriteData  = SSD1963_WriteData;
;;;109      if(NULL ==  pSSD1963->Display.WriteCommand)
;;;110        pSSD1963->Display.WriteCommand  = SSD1963_WriteCommand;
;;;111      
;;;112    	SSD1963_PowerOn();
;;;113    	SSD1963_Clean(pSSD1963->Data.BColor);
;;;114    	
;;;115    	SSD1963Set(BL);
;;;116    }
000008  bd70              POP      {r4-r6,pc}
                  |L7.10|
00000a  4843              LDR      r0,|L7.280|
00000c  6004              STR      r4,[r0,#0]            ;62  ; pSSD1963
00000e  6004              STR      r4,[r0,#0]            ;64  ; pSSD1963
000010  6805              LDR      r5,[r0,#0]            ;65  ; pSSD1963
000012  6800              LDR      r0,[r0,#0]            ;80  ; pSSD1963
000014  f8b01050          LDRH     r1,[r0,#0x50]         ;80
000018  483f              LDR      r0,|L7.280|
00001a  6800              LDR      r0,[r0,#0]            ;80  ; pSSD1963
00001c  f8b00052          LDRH     r0,[r0,#0x52]         ;80
000020  4281              CMP      r1,r0                 ;80
000022  d10a              BNE      |L7.58|
000024  483c              LDR      r0,|L7.280|
000026  6800              LDR      r0,[r0,#0]            ;82  ; pSSD1963
000028  f8b00052          LDRH     r0,[r0,#0x52]         ;82
00002c  f64f71ff          MOV      r1,#0xffff            ;82
000030  4048              EORS     r0,r0,r1              ;82
000032  4939              LDR      r1,|L7.280|
000034  6809              LDR      r1,[r1,#0]            ;82  ; pSSD1963
000036  f8a10050          STRH     r0,[r1,#0x50]         ;82
                  |L7.58|
00003a  f44f7048          MOV      r0,#0x320             ;85
00003e  4936              LDR      r1,|L7.280|
000040  6809              LDR      r1,[r1,#0]            ;85  ; pSSD1963
000042  f8a10040          STRH     r0,[r1,#0x40]         ;85
000046  f44f71f0          MOV      r1,#0x1e0             ;86
00004a  4833              LDR      r0,|L7.280|
00004c  6800              LDR      r0,[r0,#0]            ;86  ; pSSD1963
00004e  f8a01042          STRH     r1,[r0,#0x42]         ;86
000052  4832              LDR      r0,|L7.284|
000054  4930              LDR      r1,|L7.280|
000056  6809              LDR      r1,[r1,#0]            ;89  ; pSSD1963
000058  6608              STR      r0,[r1,#0x60]         ;89
00005a  4931              LDR      r1,|L7.288|
00005c  482e              LDR      r0,|L7.280|
00005e  6800              LDR      r0,[r0,#0]            ;90  ; pSSD1963
000060  6781              STR      r1,[r0,#0x78]         ;90
000062  4930              LDR      r1,|L7.292|
000064  482c              LDR      r0,|L7.280|
000066  6800              LDR      r0,[r0,#0]            ;91  ; pSSD1963
000068  f8c01080          STR      r1,[r0,#0x80]         ;91
00006c  492e              LDR      r1,|L7.296|
00006e  482a              LDR      r0,|L7.280|
000070  6800              LDR      r0,[r0,#0]            ;93  ; pSSD1963
000072  f8c01084          STR      r1,[r0,#0x84]         ;93
000076  492d              LDR      r1,|L7.300|
000078  4827              LDR      r0,|L7.280|
00007a  6800              LDR      r0,[r0,#0]            ;94  ; pSSD1963
00007c  f8c01088          STR      r1,[r0,#0x88]         ;94
000080  492b              LDR      r1,|L7.304|
000082  4825              LDR      r0,|L7.280|
000084  6800              LDR      r0,[r0,#0]            ;95  ; pSSD1963
000086  f8c0108c          STR      r1,[r0,#0x8c]         ;95
00008a  492a              LDR      r1,|L7.308|
00008c  4822              LDR      r0,|L7.280|
00008e  6800              LDR      r0,[r0,#0]            ;96  ; pSSD1963
000090  f8c01090          STR      r1,[r0,#0x90]         ;96
000094  4928              LDR      r1,|L7.312|
000096  4820              LDR      r0,|L7.280|
000098  6800              LDR      r0,[r0,#0]            ;98  ; pSSD1963
00009a  f8c01094          STR      r1,[r0,#0x94]         ;98
00009e  4927              LDR      r1,|L7.316|
0000a0  481d              LDR      r0,|L7.280|
0000a2  6800              LDR      r0,[r0,#0]            ;99  ; pSSD1963
0000a4  f8c01098          STR      r1,[r0,#0x98]         ;99
0000a8  4925              LDR      r1,|L7.320|
0000aa  481b              LDR      r0,|L7.280|
0000ac  6800              LDR      r0,[r0,#0]            ;100  ; pSSD1963
0000ae  f8c0109c          STR      r1,[r0,#0x9c]         ;100
0000b2  4924              LDR      r1,|L7.324|
0000b4  4818              LDR      r0,|L7.280|
0000b6  6800              LDR      r0,[r0,#0]            ;102  ; pSSD1963
0000b8  f8c010a0          STR      r1,[r0,#0xa0]         ;102
0000bc  4922              LDR      r1,|L7.328|
0000be  4816              LDR      r0,|L7.280|
0000c0  6800              LDR      r0,[r0,#0]            ;103  ; pSSD1963
0000c2  f8c010a4          STR      r1,[r0,#0xa4]         ;103
0000c6  4814              LDR      r0,|L7.280|
0000c8  6800              LDR      r0,[r0,#0]            ;105  ; pSSD1963
0000ca  6e40              LDR      r0,[r0,#0x64]         ;105
0000cc  b918              CBNZ     r0,|L7.214|
0000ce  491f              LDR      r1,|L7.332|
0000d0  4811              LDR      r0,|L7.280|
0000d2  6800              LDR      r0,[r0,#0]            ;106  ; pSSD1963
0000d4  6641              STR      r1,[r0,#0x64]         ;106
                  |L7.214|
0000d6  4810              LDR      r0,|L7.280|
0000d8  6800              LDR      r0,[r0,#0]            ;107  ; pSSD1963
0000da  6e80              LDR      r0,[r0,#0x68]         ;107
0000dc  b918              CBNZ     r0,|L7.230|
0000de  491c              LDR      r1,|L7.336|
0000e0  480d              LDR      r0,|L7.280|
0000e2  6800              LDR      r0,[r0,#0]            ;108  ; pSSD1963
0000e4  6681              STR      r1,[r0,#0x68]         ;108
                  |L7.230|
0000e6  480c              LDR      r0,|L7.280|
0000e8  6800              LDR      r0,[r0,#0]            ;109  ; pSSD1963
0000ea  6ec0              LDR      r0,[r0,#0x6c]         ;109
0000ec  b918              CBNZ     r0,|L7.246|
0000ee  4919              LDR      r1,|L7.340|
0000f0  4809              LDR      r0,|L7.280|
0000f2  6800              LDR      r0,[r0,#0]            ;110  ; pSSD1963
0000f4  66c1              STR      r1,[r0,#0x6c]         ;110
                  |L7.246|
0000f6  f7fffffe          BL       SSD1963_PowerOn
0000fa  4907              LDR      r1,|L7.280|
0000fc  6809              LDR      r1,[r1,#0]            ;113  ; pSSD1963
0000fe  f8b10052          LDRH     r0,[r1,#0x52]         ;113
000102  f7fffffe          BL       SSD1963_Clean
000106  4804              LDR      r0,|L7.280|
000108  6800              LDR      r0,[r0,#0]            ;115  ; pSSD1963
00010a  8880              LDRH     r0,[r0,#4]            ;115
00010c  4902              LDR      r1,|L7.280|
00010e  6809              LDR      r1,[r1,#0]            ;115  ; pSSD1963
000110  6809              LDR      r1,[r1,#0]            ;115
000112  6108              STR      r0,[r1,#0x10]         ;115
000114  bf00              NOP      
000116  e777              B        |L7.8|
;;;117    /*******************************************************************************
                          ENDP

                  |L7.280|
                          DCD      pSSD1963
                  |L7.284|
                          DCD      SSD1963_SetWindowAddress
                  |L7.288|
                          DCD      SSD1963_PowerOn
                  |L7.292|
                          DCD      SSD1963_PowerOff
                  |L7.296|
                          DCD      SSD1963_DrawDot
                  |L7.300|
                          DCD      SSD1963_DrawLine
                  |L7.304|
                          DCD      SSD1963_DrawCircle
                  |L7.308|
                          DCD      SSD1963_DrawRectangle
                  |L7.312|
                          DCD      SSD1963_Fill
                  |L7.316|
                          DCD      SSD1963_Clean
                  |L7.320|
                          DCD      SSD1963_SetBackground
                  |L7.324|
                          DCD      SSD1963_ShowChar
                  |L7.328|
                          DCD      SSD1963_ShowWord
                  |L7.332|
                          DCD      SSD1963_WriteIndex
                  |L7.336|
                          DCD      SSD1963_WriteData
                  |L7.340|
                          DCD      SSD1963_WriteCommand

                          AREA ||i.SSD1963_PowerOff||, CODE, READONLY, ALIGN=2

                  SSD1963_PowerOff PROC
;;;317    **************************************************************************************************/
;;;318    void SSD1963_PowerOff( void )
000000  b508              PUSH     {r3,lr}
;;;319    {
;;;320    	LCD_BL_OFF;		//关背光
000002  2000              MOVS     r0,#0
000004  4602              MOV      r2,r0
000006  4b05              LDR      r3,|L8.28|
000008  2103              MOVS     r1,#3
00000a  9000              STR      r0,[sp,#0]
00000c  0318              LSLS     r0,r3,#12
00000e  f7fffffe          BL       PWM_OUT
;;;321    	SSD1963_WriteCommand( 0x10, 0 );	
000012  2100              MOVS     r1,#0
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       SSD1963_WriteCommand
;;;322    }
00001a  bd08              POP      {r3,pc}
;;;323    /*******************************************************************************
                          ENDP

                  |L8.28|
                          DCD      0x40140000

                          AREA ||i.SSD1963_PowerOn||, CODE, READONLY, ALIGN=2

                  SSD1963_PowerOn PROC
;;;330    *******************************************************************************/
;;;331    void SSD1963_PowerOn(void)
000000  b570              PUSH     {r4-r6,lr}
;;;332    {
;;;333    
;;;334    	u16 time=2000;
000002  f44f64fa          MOV      r4,#0x7d0
;;;335    	u16	temp=time;
000006  4625              MOV      r5,r4
;;;336    //调用一次这些函数，免得编译的时候提示警告
;;;337    	//1）――――――――――复位
;;;338    //	SSD1963_BACKLIGHT_OFF;	//关背光
;;;339    //	LCD_REST();
;;;340    //	LCD_RST_LOW;
;;;341    //	LCD_RST_HIGH;
;;;342    //	while(temp--);	  //等待晶振启动
;;;343    //	//2）――――――――――复位
;;;344    //	LCD_CS_HIGH;			//先取消片选
;;;345    //	LCD_RD_HIGH;
;;;346    //	LCD_WR_LOW;				//总线功能为写数据
;;;347    //	LCD_CS_LOW;  		  //使能
;;;348    //  LCD_DelaymS(10);
;;;349    	SSD1963Crl(CS);	//LCD_CS_LOW;
000008  4885              LDR      r0,|L9.544|
00000a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00000c  8d80              LDRH     r0,[r0,#0x2c]
00000e  4984              LDR      r1,|L9.544|
000010  6809              LDR      r1,[r1,#0]  ; pSSD1963
000012  6a89              LDR      r1,[r1,#0x28]
000014  6148              STR      r0,[r1,#0x14]
;;;350    	//3）――――――――――设置系统时钟  晶振频率 10MHz  250MHz < VCO < 800MHz
;;;351    	pSSD1963->Display.WriteIndex(0x00E2);						//PLL multiplier, set PLL clock to 120M Start the PLL. Before the start, the system was operated with the crystal oscillator or clock input
000016  4882              LDR      r0,|L9.544|
000018  6800              LDR      r0,[r0,#0]  ; pSSD1963
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  20e2              MOVS     r0,#0xe2
00001e  4788              BLX      r1
;;;352    	pSSD1963->Display.WriteData(0x0023);	    				//设置倍频 N=0x36 for 6.5M, 0x23 for 10M crystal
000020  487f              LDR      r0,|L9.544|
000022  6800              LDR      r0,[r0,#0]  ; pSSD1963
000024  6e81              LDR      r1,[r0,#0x68]
000026  2023              MOVS     r0,#0x23
000028  4788              BLX      r1
;;;353    	pSSD1963->Display.WriteData(0x0001);							//设置分频
00002a  487d              LDR      r0,|L9.544|
00002c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00002e  6e81              LDR      r1,[r0,#0x68]
000030  2001              MOVS     r0,#1
000032  4788              BLX      r1
;;;354    	pSSD1963->Display.WriteData(0x0004);							//完成设置
000034  487a              LDR      r0,|L9.544|
000036  6800              LDR      r0,[r0,#0]  ; pSSD1963
000038  6e81              LDR      r1,[r0,#0x68]
00003a  2004              MOVS     r0,#4
00003c  4788              BLX      r1
;;;355    	//4）――――――――――使能PLL
;;;356    	pSSD1963->Display.WriteIndex(0x00E0);  					//PLL enable
00003e  4878              LDR      r0,|L9.544|
000040  6800              LDR      r0,[r0,#0]  ; pSSD1963
000042  6e41              LDR      r1,[r0,#0x64]
000044  20e0              MOVS     r0,#0xe0
000046  4788              BLX      r1
;;;357    	pSSD1963->Display.WriteData(0x0001);
000048  4875              LDR      r0,|L9.544|
00004a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00004c  6e81              LDR      r1,[r0,#0x68]
00004e  2001              MOVS     r0,#1
000050  4788              BLX      r1
;;;358    	
;;;359    	pSSD1963->Display.WriteIndex(0x00E0);
000052  4873              LDR      r0,|L9.544|
000054  6800              LDR      r0,[r0,#0]  ; pSSD1963
000056  6e41              LDR      r1,[r0,#0x64]
000058  20e0              MOVS     r0,#0xe0
00005a  4788              BLX      r1
;;;360    	pSSD1963->Display.WriteData(0x0003);
00005c  4870              LDR      r0,|L9.544|
00005e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000060  6e81              LDR      r1,[r0,#0x68]
000062  2003              MOVS     r0,#3
000064  4788              BLX      r1
;;;361      LCD_DelaymS(10);
000066  200a              MOVS     r0,#0xa
000068  f7fffffe          BL       LCD_DelaymS
;;;362    	//5）――――――――――软件复位
;;;363    	pSSD1963->Display.WriteIndex(0x0001);  					//software reset
00006c  486c              LDR      r0,|L9.544|
00006e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000070  6e41              LDR      r1,[r0,#0x64]
000072  2001              MOVS     r0,#1
000074  4788              BLX      r1
;;;364    	//6）――――――――――设置扫描频率
;;;365    	pSSD1963->Display.WriteIndex(0x00E6);						//PLL setting for PCLK, depends on resolution
000076  486a              LDR      r0,|L9.544|
000078  6800              LDR      r0,[r0,#0]  ; pSSD1963
00007a  6e41              LDR      r1,[r0,#0x64]
00007c  20e6              MOVS     r0,#0xe6
00007e  4788              BLX      r1
;;;366    	pSSD1963->Display.WriteData(0x0003);
000080  4867              LDR      r0,|L9.544|
000082  6800              LDR      r0,[r0,#0]  ; pSSD1963
000084  6e81              LDR      r1,[r0,#0x68]
000086  2003              MOVS     r0,#3
000088  4788              BLX      r1
;;;367    	pSSD1963->Display.WriteData(0x00FF);
00008a  4865              LDR      r0,|L9.544|
00008c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00008e  6e81              LDR      r1,[r0,#0x68]
000090  20ff              MOVS     r0,#0xff
000092  4788              BLX      r1
;;;368    	pSSD1963->Display.WriteData(0x00FF);
000094  4862              LDR      r0,|L9.544|
000096  6800              LDR      r0,[r0,#0]  ; pSSD1963
000098  6e81              LDR      r1,[r0,#0x68]
00009a  20ff              MOVS     r0,#0xff
00009c  4788              BLX      r1
;;;369    	//7）――――――――――设置LCD面板模式 Set the LCD panel mode (RGB TFT or TTL)
;;;370    	pSSD1963->Display.WriteIndex(0x00B0);						//LCD SPECIFICATION
00009e  4860              LDR      r0,|L9.544|
0000a0  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000a2  6e41              LDR      r1,[r0,#0x64]
0000a4  20b0              MOVS     r0,#0xb0
0000a6  4788              BLX      r1
;;;371    	pSSD1963->Display.WriteData(0x0000);
0000a8  485d              LDR      r0,|L9.544|
0000aa  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000ac  6e81              LDR      r1,[r0,#0x68]
0000ae  2000              MOVS     r0,#0
0000b0  4788              BLX      r1
;;;372    	pSSD1963->Display.WriteData(0x0000);
0000b2  485b              LDR      r0,|L9.544|
0000b4  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000b6  6e81              LDR      r1,[r0,#0x68]
0000b8  2000              MOVS     r0,#0
0000ba  4788              BLX      r1
;;;373    	pSSD1963->Display.WriteData((LCD_HDP>>8)&0X00FF);  		//设置水平像素点个数高8位		Set HDP 
0000bc  4858              LDR      r0,|L9.544|
0000be  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000c0  6e81              LDR      r1,[r0,#0x68]
0000c2  2003              MOVS     r0,#3
0000c4  4788              BLX      r1
;;;374    	pSSD1963->Display.WriteData(LCD_HDP&0X00FF);					//设置水平像素点个数低8位
0000c6  4856              LDR      r0,|L9.544|
0000c8  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000ca  6e81              LDR      r1,[r0,#0x68]
0000cc  201f              MOVS     r0,#0x1f
0000ce  4788              BLX      r1
;;;375    	pSSD1963->Display.WriteData((LCD_VDP>>8)&0X00FF);  		//设置垂直像素点个数高8位		Set VDP
0000d0  4853              LDR      r0,|L9.544|
0000d2  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000d4  6e81              LDR      r1,[r0,#0x68]
0000d6  2001              MOVS     r0,#1
0000d8  4788              BLX      r1
;;;376    	pSSD1963->Display.WriteData(LCD_VDP&0X00FF);					//设置垂直像素点个数低8位
0000da  4851              LDR      r0,|L9.544|
0000dc  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000de  6e81              LDR      r1,[r0,#0x68]
0000e0  20df              MOVS     r0,#0xdf
0000e2  4788              BLX      r1
;;;377    	pSSD1963->Display.WriteData(0x0000);									//设置奇偶行RGB顺序，默认0，Even line RGB sequence&Odd line RGB sequence
0000e4  484e              LDR      r0,|L9.544|
0000e6  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000e8  6e81              LDR      r1,[r0,#0x68]
0000ea  2000              MOVS     r0,#0
0000ec  4788              BLX      r1
;;;378    	//8）――――――――――设置水平期 Set Horizontal Period
;;;379    	pSSD1963->Display.WriteIndex(0x00B4);							//HSYNC
0000ee  484c              LDR      r0,|L9.544|
0000f0  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000f2  6e41              LDR      r1,[r0,#0x64]
0000f4  20b4              MOVS     r0,#0xb4
0000f6  4788              BLX      r1
;;;380    	pSSD1963->Display.WriteData((LCD_HT>>8)&0X00FF);  	//High byte of horizontal total period
0000f8  4849              LDR      r0,|L9.544|
0000fa  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000fc  6e81              LDR      r1,[r0,#0x68]
0000fe  2003              MOVS     r0,#3
000100  4788              BLX      r1
;;;381    	pSSD1963->Display.WriteData(LCD_HT&0X00FF);					//Low byte of the horizontal total period (display + non-display) in pixel clock (POR = 10101111)
000102  4847              LDR      r0,|L9.544|
000104  6800              LDR      r0,[r0,#0]  ; pSSD1963
000106  6e81              LDR      r1,[r0,#0x68]
000108  20a0              MOVS     r0,#0xa0
00010a  4788              BLX      r1
;;;382    																			//Horizontal total period = (HT + 1) pixels
;;;383    	pSSD1963->Display.WriteData((LCD_HPS>>8)&0X00FF);  	//High byte of the non-display period between the start of the horizontal sync (LLINE) signal and the first
00010c  4844              LDR      r0,|L9.544|
00010e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000110  6e81              LDR      r1,[r0,#0x68]
000112  2000              MOVS     r0,#0
000114  4788              BLX      r1
;;;384    																			//display data. (POR = 000)
;;;385    	pSSD1963->Display.WriteData(LCD_HPS&0X00FF);
000116  4842              LDR      r0,|L9.544|
000118  6800              LDR      r0,[r0,#0]  ; pSSD1963
00011a  6e81              LDR      r1,[r0,#0x68]
00011c  202e              MOVS     r0,#0x2e
00011e  4788              BLX      r1
;;;386    	pSSD1963->Display.WriteData(LCD_HPW);			   //Set HPW
000120  483f              LDR      r0,|L9.544|
000122  6800              LDR      r0,[r0,#0]  ; pSSD1963
000124  6e81              LDR      r1,[r0,#0x68]
000126  2030              MOVS     r0,#0x30
000128  4788              BLX      r1
;;;387    	pSSD1963->Display.WriteData((LCD_LPS>>8)&0X00FF);  //Set HPS
00012a  483d              LDR      r0,|L9.544|
00012c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00012e  6e81              LDR      r1,[r0,#0x68]
000130  2000              MOVS     r0,#0
000132  4788              BLX      r1
;;;388    	pSSD1963->Display.WriteData(LCD_LPS&0X00FF);
000134  483a              LDR      r0,|L9.544|
000136  6800              LDR      r0,[r0,#0]  ; pSSD1963
000138  6e81              LDR      r1,[r0,#0x68]
00013a  200f              MOVS     r0,#0xf
00013c  4788              BLX      r1
;;;389    	pSSD1963->Display.WriteData(0x0000);
00013e  4838              LDR      r0,|L9.544|
000140  6800              LDR      r0,[r0,#0]  ; pSSD1963
000142  6e81              LDR      r1,[r0,#0x68]
000144  2000              MOVS     r0,#0
000146  4788              BLX      r1
;;;390    	//9）――――――――――设置垂直期	Set Vertical Period
;;;391    	pSSD1963->Display.WriteIndex(0x00B6);							//VSYNC
000148  4835              LDR      r0,|L9.544|
00014a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00014c  6e41              LDR      r1,[r0,#0x64]
00014e  20b6              MOVS     r0,#0xb6
000150  4788              BLX      r1
;;;392    	pSSD1963->Display.WriteData((LCD_VT>>8)&0X00FF);   //Set VT
000152  4833              LDR      r0,|L9.544|
000154  6800              LDR      r0,[r0,#0]  ; pSSD1963
000156  6e81              LDR      r1,[r0,#0x68]
000158  2002              MOVS     r0,#2
00015a  4788              BLX      r1
;;;393    	pSSD1963->Display.WriteData(LCD_VT&0X00FF);
00015c  4830              LDR      r0,|L9.544|
00015e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000160  6e81              LDR      r1,[r0,#0x68]
000162  200d              MOVS     r0,#0xd
000164  4788              BLX      r1
;;;394    	pSSD1963->Display.WriteData((LCD_VPS>>8)&0X00FF);  //Set VPS
000166  482e              LDR      r0,|L9.544|
000168  6800              LDR      r0,[r0,#0]  ; pSSD1963
00016a  6e81              LDR      r1,[r0,#0x68]
00016c  2000              MOVS     r0,#0
00016e  4788              BLX      r1
;;;395    	pSSD1963->Display.WriteData(LCD_VPS&0X00FF);
000170  482b              LDR      r0,|L9.544|
000172  6800              LDR      r0,[r0,#0]  ; pSSD1963
000174  6e81              LDR      r1,[r0,#0x68]
000176  2010              MOVS     r0,#0x10
000178  4788              BLX      r1
;;;396    	pSSD1963->Display.WriteData(LCD_VPW);			   //Set VPW
00017a  4829              LDR      r0,|L9.544|
00017c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00017e  6e81              LDR      r1,[r0,#0x68]
000180  2010              MOVS     r0,#0x10
000182  4788              BLX      r1
;;;397    	pSSD1963->Display.WriteData((LCD_FPS>>8)&0X00FF);  //Set FPS
000184  4826              LDR      r0,|L9.544|
000186  6800              LDR      r0,[r0,#0]  ; pSSD1963
000188  6e81              LDR      r1,[r0,#0x68]
00018a  2000              MOVS     r0,#0
00018c  4788              BLX      r1
;;;398    	pSSD1963->Display.WriteData(LCD_FPS&0X00FF);	
00018e  4824              LDR      r0,|L9.544|
000190  6800              LDR      r0,[r0,#0]  ; pSSD1963
000192  6e81              LDR      r1,[r0,#0x68]
000194  2008              MOVS     r0,#8
000196  4788              BLX      r1
;;;399    	//10）――――――――――配置GPIO
;;;400    	pSSD1963->Display.WriteIndex(0x00B8);
000198  4821              LDR      r0,|L9.544|
00019a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00019c  6e41              LDR      r1,[r0,#0x64]
00019e  20b8              MOVS     r0,#0xb8
0001a0  4788              BLX      r1
;;;401    	pSSD1963->Display.WriteData(0x0007);    //GPIO3=input, GPIO[2:0]=output //输出模式
0001a2  481f              LDR      r0,|L9.544|
0001a4  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001a6  6e81              LDR      r1,[r0,#0x68]
0001a8  2007              MOVS     r0,#7
0001aa  4788              BLX      r1
;;;402    	pSSD1963->Display.WriteData(0x0001);   	//0 GPIO0 is used to control the panel power with Enter Sleep Mode 0x10 or Exit Sleep Mode 0x11.
0001ac  481c              LDR      r0,|L9.544|
0001ae  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001b0  6e81              LDR      r1,[r0,#0x68]
0001b2  2001              MOVS     r0,#1
0001b4  4788              BLX      r1
;;;403    													//1 GPIO0 is used as normal GPIO
;;;404    	//11）――――――――――设置GPIO（设置扫描方向） Set GPIO value for GPIO configured as output
;;;405    	pSSD1963->Display.WriteIndex(0x00BA);
0001b6  481a              LDR      r0,|L9.544|
0001b8  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001ba  6e41              LDR      r1,[r0,#0x64]
0001bc  20ba              MOVS     r0,#0xba
0001be  4788              BLX      r1
;;;406    	pSSD1963->Display.WriteData((LCD_LR&0XFF)|(LCD_UD&0XFF));    //GPIO[3:0] out 1
0001c0  4817              LDR      r0,|L9.544|
0001c2  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001c4  6e81              LDR      r1,[r0,#0x68]
0001c6  2005              MOVS     r0,#5
0001c8  4788              BLX      r1
;;;407    	//12）――――――――――设置地址模式	Set Address Mode
;;;408    	pSSD1963->Display.WriteIndex(0x0036); //rotation
0001ca  4815              LDR      r0,|L9.544|
0001cc  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001ce  6e41              LDR      r1,[r0,#0x64]
0001d0  2036              MOVS     r0,#0x36
0001d2  4788              BLX      r1
;;;409    	pSSD1963->Display.WriteData(0x0000);
0001d4  4812              LDR      r0,|L9.544|
0001d6  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001d8  6e81              LDR      r1,[r0,#0x68]
0001da  2000              MOVS     r0,#0
0001dc  4788              BLX      r1
;;;410    	//13）――――――――――设置数据接口 Set Pixel Data Interface/Pixel Data Interface Format
;;;411    	pSSD1963->Display.WriteIndex(0x00F0); //pixel data interface
0001de  4810              LDR      r0,|L9.544|
0001e0  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001e2  6e41              LDR      r1,[r0,#0x64]
0001e4  20f0              MOVS     r0,#0xf0
0001e6  4788              BLX      r1
;;;412    	pSSD1963->Display.WriteData(0x0003);
0001e8  480d              LDR      r0,|L9.544|
0001ea  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001ec  6e81              LDR      r1,[r0,#0x68]
0001ee  2003              MOVS     r0,#3
0001f0  4788              BLX      r1
;;;413    	
;;;414    	//14）――――――――――设置垂直期
;;;415    	pSSD1963->Display.WriteIndex(0x0029); //display on
0001f2  480b              LDR      r0,|L9.544|
0001f4  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001f6  6e41              LDR      r1,[r0,#0x64]
0001f8  2029              MOVS     r0,#0x29
0001fa  4788              BLX      r1
;;;416    	//15）――――――――――设置垂直期
;;;417    	pSSD1963->Display.WriteIndex(0x00d0); 
0001fc  4808              LDR      r0,|L9.544|
0001fe  6800              LDR      r0,[r0,#0]  ; pSSD1963
000200  6e41              LDR      r1,[r0,#0x64]
000202  20d0              MOVS     r0,#0xd0
000204  4788              BLX      r1
;;;418    	pSSD1963->Display.WriteData(0x000D);
000206  4806              LDR      r0,|L9.544|
000208  6800              LDR      r0,[r0,#0]  ; pSSD1963
00020a  6e81              LDR      r1,[r0,#0x68]
00020c  200d              MOVS     r0,#0xd
00020e  4788              BLX      r1
;;;419    	SSD1963Set(CS);	//LCD_CS_HIGH;
000210  4803              LDR      r0,|L9.544|
000212  6800              LDR      r0,[r0,#0]  ; pSSD1963
000214  8d80              LDRH     r0,[r0,#0x2c]
000216  4902              LDR      r1,|L9.544|
000218  6809              LDR      r1,[r1,#0]  ; pSSD1963
00021a  6a89              LDR      r1,[r1,#0x28]
00021c  6108              STR      r0,[r1,#0x10]
;;;420    }
00021e  bd70              POP      {r4-r6,pc}
;;;421    /*******************************************************************************
                          ENDP

                  |L9.544|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_ReadData||, CODE, READONLY, ALIGN=2

                  SSD1963_ReadData PROC
;;;143    *******************************************************************************/
;;;144    unsigned short SSD1963_ReadData(void)
000000  2000              MOVS     r0,#0
;;;145    {
;;;146    	unsigned short Data	=	0;
;;;147    #if	1	//Bus16Bit
;;;148    	SSD1963Crl(RD);	//LCD_RD_LOW;
000002  490a              LDR      r1,|L10.44|
000004  6809              LDR      r1,[r1,#0]  ; pSSD1963
000006  8989              LDRH     r1,[r1,#0xc]
000008  4a08              LDR      r2,|L10.44|
00000a  6812              LDR      r2,[r2,#0]  ; pSSD1963
00000c  6892              LDR      r2,[r2,#8]
00000e  6151              STR      r1,[r2,#0x14]
;;;149    	Data	=	SSD1963_DATABUS_PORT->IDR;
000010  4906              LDR      r1,|L10.44|
000012  6809              LDR      r1,[r1,#0]  ; pSSD1963
000014  6b89              LDR      r1,[r1,#0x38]
000016  6889              LDR      r1,[r1,#8]
000018  b288              UXTH     r0,r1
;;;150    	SSD1963Set(RD);	//LCD_RD_HIGH;
00001a  4904              LDR      r1,|L10.44|
00001c  6809              LDR      r1,[r1,#0]  ; pSSD1963
00001e  8989              LDRH     r1,[r1,#0xc]
000020  4a02              LDR      r2,|L10.44|
000022  6812              LDR      r2,[r2,#0]  ; pSSD1963
000024  6892              LDR      r2,[r2,#8]
000026  6111              STR      r1,[r2,#0x10]
;;;151    #else	
;;;152    	SSD1963Crl(RD);	//LCD_RD_LOW;
;;;153    	Data	=	SSD1963_DATABUS_PORT->IDR;
;;;154    	SSD1963Set(RD);	//LCD_RD_HIGH;
;;;155    	
;;;156    	Data	<<=8;
;;;157    	
;;;158    	SSD1963Crl(RD);	//LCD_RD_LOW;
;;;159    	Data	|=	SSD1963_DATABUS_PORT->IDR;
;;;160    	SSD1963Set(RD);	//LCD_RD_HIGH;
;;;161    #endif	
;;;162    	return Data;
;;;163    }
000028  4770              BX       lr
;;;164    /*******************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_ReadGRAM||, CODE, READONLY, ALIGN=2

                  SSD1963_ReadGRAM PROC
;;;300    *******************************************************************************/
;;;301    void SSD1963_ReadGRAM(unsigned	short* RAM,unsigned long length)
000000  b570              PUSH     {r4-r6,lr}
;;;302    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;303    	unsigned	long	i	=	0;
000006  2400              MOVS     r4,#0
;;;304    	SSD1963Crl(CS);	//LCD_CS_LOW;
000008  4815              LDR      r0,|L11.96|
00000a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00000c  8d80              LDRH     r0,[r0,#0x2c]
00000e  4914              LDR      r1,|L11.96|
000010  6809              LDR      r1,[r1,#0]  ; pSSD1963
000012  6a89              LDR      r1,[r1,#0x28]
000014  6148              STR      r0,[r1,#0x14]
;;;305    	SSD1963_WriteIndex(0X3E);
000016  203e              MOVS     r0,#0x3e
000018  f7fffffe          BL       SSD1963_WriteIndex
;;;306    	GPIO_Configuration_IPU	(SSD1963_DATABUS_PORT,SSD1963_DATABUS_Pin);			//将GPIO相应管脚配置为上拉输入模式----V20170605
00001c  4a10              LDR      r2,|L11.96|
00001e  6812              LDR      r2,[r2,#0]  ; pSSD1963
000020  8f91              LDRH     r1,[r2,#0x3c]
000022  4a0f              LDR      r2,|L11.96|
000024  6812              LDR      r2,[r2,#0]  ; pSSD1963
000026  6b90              LDR      r0,[r2,#0x38]
000028  f7fffffe          BL       GPIO_Configuration_IPU
;;;307    	for(i=0;i<length;i++)
00002c  bf00              NOP      
00002e  e004              B        |L11.58|
                  |L11.48|
;;;308    	{
;;;309    		RAM[i]=SSD1963_ReadData();
000030  f7fffffe          BL       SSD1963_ReadData
000034  f8250014          STRH     r0,[r5,r4,LSL #1]
000038  1c64              ADDS     r4,r4,#1              ;307
                  |L11.58|
00003a  42b4              CMP      r4,r6                 ;307
00003c  d3f8              BCC      |L11.48|
;;;310    	}
;;;311    	SSD1963Set(CS);	//LCD_CS_HIGH;
00003e  4808              LDR      r0,|L11.96|
000040  6800              LDR      r0,[r0,#0]  ; pSSD1963
000042  8d80              LDRH     r0,[r0,#0x2c]
000044  4906              LDR      r1,|L11.96|
000046  6809              LDR      r1,[r1,#0]  ; pSSD1963
000048  6a89              LDR      r1,[r1,#0x28]
00004a  6108              STR      r0,[r1,#0x10]
;;;312    	GPIO_Configuration_OPP50	(SSD1963_DATABUS_PORT,SSD1963_DATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605	
00004c  4a04              LDR      r2,|L11.96|
00004e  6812              LDR      r2,[r2,#0]  ; pSSD1963
000050  8f91              LDRH     r1,[r2,#0x3c]
000052  4a03              LDR      r2,|L11.96|
000054  6812              LDR      r2,[r2,#0]  ; pSSD1963
000056  6b90              LDR      r0,[r2,#0x38]
000058  f7fffffe          BL       GPIO_Configuration_OPP50
;;;313    }
00005c  bd70              POP      {r4-r6,pc}
;;;314    /**************************************************************************************************
                          ENDP

00005e  0000              DCW      0x0000
                  |L11.96|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_ReadRegister||, CODE, READONLY, ALIGN=2

                  SSD1963_ReadRegister PROC
;;;172    *******************************************************************************/
;;;173    unsigned short SSD1963_ReadRegister(unsigned	short	Addr)
000000  b570              PUSH     {r4-r6,lr}
;;;174    {
000002  4604              MOV      r4,r0
;;;175    	unsigned short Data	=	0;
000004  2500              MOVS     r5,#0
;;;176    	SSD1963Crl(CS);	//LCD_CS_LOW;
000006  4813              LDR      r0,|L12.84|
000008  6800              LDR      r0,[r0,#0]  ; pSSD1963
00000a  8d80              LDRH     r0,[r0,#0x2c]
00000c  4911              LDR      r1,|L12.84|
00000e  6809              LDR      r1,[r1,#0]  ; pSSD1963
000010  6a89              LDR      r1,[r1,#0x28]
000012  6148              STR      r0,[r1,#0x14]
;;;177    	//---------------------Write Index
;;;178    	SSD1963_WriteAddr(Addr);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SSD1963_WriteAddr
;;;179    	//---------------------Read Data
;;;180    	GPIO_Configuration_IPU	(SSD1963_DATABUS_PORT,SSD1963_DATABUS_Pin);			//将GPIO相应管脚配置为上拉输入模式----V20170605
00001a  4a0e              LDR      r2,|L12.84|
00001c  6812              LDR      r2,[r2,#0]  ; pSSD1963
00001e  8f91              LDRH     r1,[r2,#0x3c]
000020  4a0c              LDR      r2,|L12.84|
000022  6812              LDR      r2,[r2,#0]  ; pSSD1963
000024  6b90              LDR      r0,[r2,#0x38]
000026  f7fffffe          BL       GPIO_Configuration_IPU
;;;181    	Data	=	SSD1963_ReadData();
00002a  f7fffffe          BL       SSD1963_ReadData
00002e  4605              MOV      r5,r0
;;;182    	SSD1963Set(CS);	//LCD_CS_HIGH;
000030  4808              LDR      r0,|L12.84|
000032  6800              LDR      r0,[r0,#0]  ; pSSD1963
000034  8d80              LDRH     r0,[r0,#0x2c]
000036  4907              LDR      r1,|L12.84|
000038  6809              LDR      r1,[r1,#0]  ; pSSD1963
00003a  6a89              LDR      r1,[r1,#0x28]
00003c  6108              STR      r0,[r1,#0x10]
;;;183    	GPIO_Configuration_OPP50	(SSD1963_DATABUS_PORT,SSD1963_DATABUS_Pin);		//将GPIO相应管脚配置为PP(推挽)输出模式，最大速度2MHz----V20170605	
00003e  4a05              LDR      r2,|L12.84|
000040  6812              LDR      r2,[r2,#0]  ; pSSD1963
000042  8f91              LDRH     r1,[r2,#0x3c]
000044  4a03              LDR      r2,|L12.84|
000046  6812              LDR      r2,[r2,#0]  ; pSSD1963
000048  6b90              LDR      r0,[r2,#0x38]
00004a  f7fffffe          BL       GPIO_Configuration_OPP50
;;;184    	return Data;
00004e  4628              MOV      r0,r5
;;;185    }
000050  bd70              POP      {r4-r6,pc}
;;;186    /*******************************************************************************
                          ENDP

000052  0000              DCW      0x0000
                  |L12.84|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_Reset||, CODE, READONLY, ALIGN=2

                  SSD1963_Reset PROC
;;;125    *******************************************************************************/
;;;126    void SSD1963_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128    	SSD1963Set(RST);
000002  480f              LDR      r0,|L13.64|
000004  6800              LDR      r0,[r0,#0]  ; pSSD1963
000006  8a80              LDRH     r0,[r0,#0x14]
000008  490d              LDR      r1,|L13.64|
00000a  6809              LDR      r1,[r1,#0]  ; pSSD1963
00000c  6909              LDR      r1,[r1,#0x10]
00000e  6108              STR      r0,[r1,#0x10]
;;;129    	LCD_DelaymS(5);				//SysTick延时nmS
000010  2005              MOVS     r0,#5
000012  f7fffffe          BL       LCD_DelaymS
;;;130    	SSD1963Crl(RST);;
000016  480a              LDR      r0,|L13.64|
000018  6800              LDR      r0,[r0,#0]  ; pSSD1963
00001a  8a80              LDRH     r0,[r0,#0x14]
00001c  4908              LDR      r1,|L13.64|
00001e  6809              LDR      r1,[r1,#0]  ; pSSD1963
000020  6909              LDR      r1,[r1,#0x10]
000022  6148              STR      r0,[r1,#0x14]
;;;131    	LCD_DelaymS(5);				//SysTick延时nmS
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       LCD_DelaymS
;;;132    	SSD1963Set(RST);
00002a  4805              LDR      r0,|L13.64|
00002c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00002e  8a80              LDRH     r0,[r0,#0x14]
000030  4903              LDR      r1,|L13.64|
000032  6809              LDR      r1,[r1,#0]  ; pSSD1963
000034  6909              LDR      r1,[r1,#0x10]
000036  6108              STR      r0,[r1,#0x10]
;;;133    	LCD_DelaymS(10);				//SysTick延时nmS
000038  200a              MOVS     r0,#0xa
00003a  f7fffffe          BL       LCD_DelaymS
;;;134    }
00003e  bd10              POP      {r4,pc}
;;;135    /*******************************************************************************
                          ENDP

                  |L13.64|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_SetBackground||, CODE, READONLY, ALIGN=2

                  SSD1963_SetBackground PROC
;;;739    **************************************************************************************************/
;;;740    void SSD1963_SetBackground(  u16 BackColor )
000000  b510              PUSH     {r4,lr}
;;;741    {
000002  4604              MOV      r4,r0
;;;742    	pSSD1963->Data.BColor	=	BackColor;
000004  4803              LDR      r0,|L14.20|
000006  6800              LDR      r0,[r0,#0]  ; pSSD1963
000008  f8a04052          STRH     r4,[r0,#0x52]
;;;743    	SSD1963_Clean(BackColor);	//清除屏幕函数
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SSD1963_Clean
;;;744    }
000012  bd10              POP      {r4,pc}
;;;745    
                          ENDP

                  |L14.20|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_SetWindowAddress||, CODE, READONLY, ALIGN=2

                  SSD1963_SetWindowAddress PROC
;;;428    *******************************************************************************/
;;;429    void SSD1963_SetWindowAddress(unsigned short x1,unsigned short y1,unsigned short x2,unsigned short y2)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;430    { 
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;431    	unsigned short MaxH,MaxV;
;;;432    	unsigned short Model	=	0x5030;
00000c  f2450b30          MOV      r11,#0x5030
;;;433    	
;;;434    	eRotate	Rotate	=	LCDSYS->Flag.Rotate;
000010  488b              LDR      r0,|L15.576|
000012  6800              LDR      r0,[r0,#0]  ; LCDSYS
000014  f890905c          LDRB     r9,[r0,#0x5c]
;;;435    	
;;;436    	MaxH	=	LCDSYS->Data.MaxH;
000018  4889              LDR      r0,|L15.576|
00001a  6800              LDR      r0,[r0,#0]  ; LCDSYS
00001c  f8b0a040          LDRH     r10,[r0,#0x40]
;;;437    	MaxV	=	LCDSYS->Data.MaxV;
000020  4887              LDR      r0,|L15.576|
000022  6800              LDR      r0,[r0,#0]  ; LCDSYS
000024  f8b08042          LDRH     r8,[r0,#0x42]
;;;438    	
;;;439    if	(Rotate	==Draw_Rotate_0D)
000028  f1b90f00          CMP      r9,#0
00002c  d122              BNE      |L15.116|
;;;440    {
;;;441    	LCDSYS->Data.HSX	=	x1;
00002e  4884              LDR      r0,|L15.576|
000030  6800              LDR      r0,[r0,#0]  ; LCDSYS
000032  f8a04044          STRH     r4,[r0,#0x44]
;;;442    	LCDSYS->Data.HEX	=	x2;
000036  4882              LDR      r0,|L15.576|
000038  6800              LDR      r0,[r0,#0]  ; LCDSYS
00003a  f8a06046          STRH     r6,[r0,#0x46]
;;;443    	LCDSYS->Data.VSY	=	y1;
00003e  4880              LDR      r0,|L15.576|
000040  6800              LDR      r0,[r0,#0]  ; LCDSYS
000042  f8a05048          STRH     r5,[r0,#0x48]
;;;444    	LCDSYS->Data.VEY	=	y2;
000046  487e              LDR      r0,|L15.576|
000048  6800              LDR      r0,[r0,#0]  ; LCDSYS
00004a  f8a0704a          STRH     r7,[r0,#0x4a]
;;;445    	
;;;446    	LCDSYS->Data.HXA	=	LCDSYS->Data.HSX;
00004e  487c              LDR      r0,|L15.576|
000050  6800              LDR      r0,[r0,#0]  ; LCDSYS
000052  f8b01044          LDRH     r1,[r0,#0x44]
000056  487a              LDR      r0,|L15.576|
000058  6800              LDR      r0,[r0,#0]  ; LCDSYS
00005a  f8a0104c          STRH     r1,[r0,#0x4c]
;;;447    	LCDSYS->Data.VYA	=	LCDSYS->Data.VSY;
00005e  4878              LDR      r0,|L15.576|
000060  6800              LDR      r0,[r0,#0]  ; LCDSYS
000062  f8b01048          LDRH     r1,[r0,#0x48]
000066  4876              LDR      r0,|L15.576|
000068  6800              LDR      r0,[r0,#0]  ; LCDSYS
00006a  f8a0104e          STRH     r1,[r0,#0x4e]
;;;448    	
;;;449    	Model	=	0X00;
00006e  f04f0b00          MOV      r11,#0
000072  e085              B        |L15.384|
                  |L15.116|
;;;450    }
;;;451    else if (Rotate	==Draw_Rotate_90D)
000074  f1b90f01          CMP      r9,#1
000078  d12a              BNE      |L15.208|
;;;452    {
;;;453    	LCDSYS->Data.HSX	=	y1;
00007a  4871              LDR      r0,|L15.576|
00007c  6800              LDR      r0,[r0,#0]  ; LCDSYS
00007e  f8a05044          STRH     r5,[r0,#0x44]
;;;454    	LCDSYS->Data.HEX	=	y2;	
000082  486f              LDR      r0,|L15.576|
000084  6800              LDR      r0,[r0,#0]  ; LCDSYS
000086  f8a07046          STRH     r7,[r0,#0x46]
;;;455    	LCDSYS->Data.VSY	=	MaxV	-	x2	-	1;
00008a  eba80006          SUB      r0,r8,r6
00008e  1e40              SUBS     r0,r0,#1
000090  b281              UXTH     r1,r0
000092  486b              LDR      r0,|L15.576|
000094  6800              LDR      r0,[r0,#0]  ; LCDSYS
000096  f8a01048          STRH     r1,[r0,#0x48]
;;;456    	LCDSYS->Data.VEY	=	MaxV	-	x1	-	1;
00009a  eba80004          SUB      r0,r8,r4
00009e  1e40              SUBS     r0,r0,#1
0000a0  b281              UXTH     r1,r0
0000a2  4867              LDR      r0,|L15.576|
0000a4  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000a6  f8a0104a          STRH     r1,[r0,#0x4a]
;;;457    	
;;;458    	LCDSYS->Data.HXA	=	LCDSYS->Data.HSX;
0000aa  4865              LDR      r0,|L15.576|
0000ac  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000ae  f8b01044          LDRH     r1,[r0,#0x44]
0000b2  4863              LDR      r0,|L15.576|
0000b4  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000b6  f8a0104c          STRH     r1,[r0,#0x4c]
;;;459    	LCDSYS->Data.VYA	=	LCDSYS->Data.VEY;
0000ba  4861              LDR      r0,|L15.576|
0000bc  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000be  f8b0104a          LDRH     r1,[r0,#0x4a]
0000c2  485f              LDR      r0,|L15.576|
0000c4  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000c6  f8a0104e          STRH     r1,[r0,#0x4e]
;;;460    	Model	=	0XA0;								//GRAM(Graphics RAM--图形内存) Data Write (R202h)准备写入
0000ca  f04f0ba0          MOV      r11,#0xa0
0000ce  e057              B        |L15.384|
                  |L15.208|
;;;461    }
;;;462    else if (Rotate	==Draw_Rotate_180D)	
0000d0  f1b90f02          CMP      r9,#2
0000d4  d132              BNE      |L15.316|
;;;463    {
;;;464    	LCDSYS->Data.HSX	=	MaxH	-	x2	-	1;
0000d6  ebaa0006          SUB      r0,r10,r6
0000da  1e40              SUBS     r0,r0,#1
0000dc  b281              UXTH     r1,r0
0000de  4858              LDR      r0,|L15.576|
0000e0  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000e2  f8a01044          STRH     r1,[r0,#0x44]
;;;465    	LCDSYS->Data.HEX	=	MaxH	-	x1	-	1;
0000e6  ebaa0004          SUB      r0,r10,r4
0000ea  1e40              SUBS     r0,r0,#1
0000ec  b281              UXTH     r1,r0
0000ee  4854              LDR      r0,|L15.576|
0000f0  6800              LDR      r0,[r0,#0]  ; LCDSYS
0000f2  f8a01046          STRH     r1,[r0,#0x46]
;;;466    	LCDSYS->Data.VSY	=	MaxV	-	y2	-	1;
0000f6  eba80007          SUB      r0,r8,r7
0000fa  1e40              SUBS     r0,r0,#1
0000fc  b281              UXTH     r1,r0
0000fe  4850              LDR      r0,|L15.576|
000100  6800              LDR      r0,[r0,#0]  ; LCDSYS
000102  f8a01048          STRH     r1,[r0,#0x48]
;;;467    	LCDSYS->Data.VEY	=	MaxV	-	y1	-	1;
000106  eba80005          SUB      r0,r8,r5
00010a  1e40              SUBS     r0,r0,#1
00010c  b281              UXTH     r1,r0
00010e  484c              LDR      r0,|L15.576|
000110  6800              LDR      r0,[r0,#0]  ; LCDSYS
000112  f8a0104a          STRH     r1,[r0,#0x4a]
;;;468    	
;;;469    	LCDSYS->Data.HXA	=	LCDSYS->Data.HEX;
000116  484a              LDR      r0,|L15.576|
000118  6800              LDR      r0,[r0,#0]  ; LCDSYS
00011a  f8b01046          LDRH     r1,[r0,#0x46]
00011e  4848              LDR      r0,|L15.576|
000120  6800              LDR      r0,[r0,#0]  ; LCDSYS
000122  f8a0104c          STRH     r1,[r0,#0x4c]
;;;470    	LCDSYS->Data.VYA	=	LCDSYS->Data.VEY;
000126  4846              LDR      r0,|L15.576|
000128  6800              LDR      r0,[r0,#0]  ; LCDSYS
00012a  f8b0104a          LDRH     r1,[r0,#0x4a]
00012e  4844              LDR      r0,|L15.576|
000130  6800              LDR      r0,[r0,#0]  ; LCDSYS
000132  f8a0104e          STRH     r1,[r0,#0x4e]
;;;471    	
;;;472    	Model	=	0XC0;
000136  f04f0bc0          MOV      r11,#0xc0
00013a  e021              B        |L15.384|
                  |L15.316|
;;;473    }
;;;474    else //(Rotate	==Draw_Rotate_270D)
;;;475    {
;;;476    	LCDSYS->Data.HSX	=	y1;
00013c  4840              LDR      r0,|L15.576|
00013e  6800              LDR      r0,[r0,#0]  ; LCDSYS
000140  f8a05044          STRH     r5,[r0,#0x44]
;;;477    	LCDSYS->Data.HEX	=	y2;
000144  483e              LDR      r0,|L15.576|
000146  6800              LDR      r0,[r0,#0]  ; LCDSYS
000148  f8a07046          STRH     r7,[r0,#0x46]
;;;478    	LCDSYS->Data.VSY	=	x1;
00014c  483c              LDR      r0,|L15.576|
00014e  6800              LDR      r0,[r0,#0]  ; LCDSYS
000150  f8a04048          STRH     r4,[r0,#0x48]
;;;479    	LCDSYS->Data.VEY	=	x2;
000154  483a              LDR      r0,|L15.576|
000156  6800              LDR      r0,[r0,#0]  ; LCDSYS
000158  f8a0604a          STRH     r6,[r0,#0x4a]
;;;480    	
;;;481    	LCDSYS->Data.HXA	=	LCDSYS->Data.HEX;
00015c  4838              LDR      r0,|L15.576|
00015e  6800              LDR      r0,[r0,#0]  ; LCDSYS
000160  f8b01046          LDRH     r1,[r0,#0x46]
000164  4836              LDR      r0,|L15.576|
000166  6800              LDR      r0,[r0,#0]  ; LCDSYS
000168  f8a0104c          STRH     r1,[r0,#0x4c]
;;;482    	LCDSYS->Data.VYA	=	LCDSYS->Data.VSY;
00016c  4834              LDR      r0,|L15.576|
00016e  6800              LDR      r0,[r0,#0]  ; LCDSYS
000170  f8b01048          LDRH     r1,[r0,#0x48]
000174  4832              LDR      r0,|L15.576|
000176  6800              LDR      r0,[r0,#0]  ; LCDSYS
000178  f8a0104e          STRH     r1,[r0,#0x4e]
;;;483    
;;;484    	Model	=	0X22;
00017c  f04f0b22          MOV      r11,#0x22
                  |L15.384|
;;;485    }
;;;486    	//======================================区域设置
;;;487    	pSSD1963->Display.WriteIndex(0x002A);			//设置列地址
000180  4830              LDR      r0,|L15.580|
000182  6800              LDR      r0,[r0,#0]  ; pSSD1963
000184  6e41              LDR      r1,[r0,#0x64]
000186  202a              MOVS     r0,#0x2a
000188  4788              BLX      r1
;;;488    	pSSD1963->Display.WriteData(LCDSYS->Data.HSX>>8);		//起始地址高8位
00018a  4a2d              LDR      r2,|L15.576|
00018c  6812              LDR      r2,[r2,#0]  ; LCDSYS
00018e  f8b22044          LDRH     r2,[r2,#0x44]
000192  1210              ASRS     r0,r2,#8
000194  4a2b              LDR      r2,|L15.580|
000196  6812              LDR      r2,[r2,#0]  ; pSSD1963
000198  6e91              LDR      r1,[r2,#0x68]
00019a  4788              BLX      r1
;;;489    	pSSD1963->Display.WriteData(LCDSYS->Data.HSX);			//起始地址低8位
00019c  4a28              LDR      r2,|L15.576|
00019e  6812              LDR      r2,[r2,#0]  ; LCDSYS
0001a0  f8b20044          LDRH     r0,[r2,#0x44]
0001a4  4a27              LDR      r2,|L15.580|
0001a6  6812              LDR      r2,[r2,#0]  ; pSSD1963
0001a8  6e91              LDR      r1,[r2,#0x68]
0001aa  4788              BLX      r1
;;;490    	pSSD1963->Display.WriteData(LCDSYS->Data.HEX>>8);		//结束地址高8位
0001ac  4a24              LDR      r2,|L15.576|
0001ae  6812              LDR      r2,[r2,#0]  ; LCDSYS
0001b0  f8b22046          LDRH     r2,[r2,#0x46]
0001b4  1210              ASRS     r0,r2,#8
0001b6  4a23              LDR      r2,|L15.580|
0001b8  6812              LDR      r2,[r2,#0]  ; pSSD1963
0001ba  6e91              LDR      r1,[r2,#0x68]
0001bc  4788              BLX      r1
;;;491    	pSSD1963->Display.WriteData(LCDSYS->Data.HEX);			//行结束地址低8位
0001be  4a20              LDR      r2,|L15.576|
0001c0  6812              LDR      r2,[r2,#0]  ; LCDSYS
0001c2  f8b20046          LDRH     r0,[r2,#0x46]
0001c6  4a1f              LDR      r2,|L15.580|
0001c8  6812              LDR      r2,[r2,#0]  ; pSSD1963
0001ca  6e91              LDR      r1,[r2,#0x68]
0001cc  4788              BLX      r1
;;;492    	
;;;493    	pSSD1963->Display.WriteIndex(0x002b);			//设置页地址	
0001ce  481d              LDR      r0,|L15.580|
0001d0  6800              LDR      r0,[r0,#0]  ; pSSD1963
0001d2  6e41              LDR      r1,[r0,#0x64]
0001d4  202b              MOVS     r0,#0x2b
0001d6  4788              BLX      r1
;;;494    	pSSD1963->Display.WriteData(LCDSYS->Data.VSY>>8);
0001d8  4a19              LDR      r2,|L15.576|
0001da  6812              LDR      r2,[r2,#0]  ; LCDSYS
0001dc  f8b22048          LDRH     r2,[r2,#0x48]
0001e0  1210              ASRS     r0,r2,#8
0001e2  4a18              LDR      r2,|L15.580|
0001e4  6812              LDR      r2,[r2,#0]  ; pSSD1963
0001e6  6e91              LDR      r1,[r2,#0x68]
0001e8  4788              BLX      r1
;;;495    	pSSD1963->Display.WriteData(LCDSYS->Data.VSY);
0001ea  4a15              LDR      r2,|L15.576|
0001ec  6812              LDR      r2,[r2,#0]  ; LCDSYS
0001ee  f8b20048          LDRH     r0,[r2,#0x48]
0001f2  4a14              LDR      r2,|L15.580|
0001f4  6812              LDR      r2,[r2,#0]  ; pSSD1963
0001f6  6e91              LDR      r1,[r2,#0x68]
0001f8  4788              BLX      r1
;;;496    	pSSD1963->Display.WriteData(LCDSYS->Data.VEY>>8);
0001fa  4a11              LDR      r2,|L15.576|
0001fc  6812              LDR      r2,[r2,#0]  ; LCDSYS
0001fe  f8b2204a          LDRH     r2,[r2,#0x4a]
000202  1210              ASRS     r0,r2,#8
000204  4a0f              LDR      r2,|L15.580|
000206  6812              LDR      r2,[r2,#0]  ; pSSD1963
000208  6e91              LDR      r1,[r2,#0x68]
00020a  4788              BLX      r1
;;;497    	pSSD1963->Display.WriteData(LCDSYS->Data.VEY);
00020c  4a0c              LDR      r2,|L15.576|
00020e  6812              LDR      r2,[r2,#0]  ; LCDSYS
000210  f8b2004a          LDRH     r0,[r2,#0x4a]
000214  4a0b              LDR      r2,|L15.580|
000216  6812              LDR      r2,[r2,#0]  ; pSSD1963
000218  6e91              LDR      r1,[r2,#0x68]
00021a  4788              BLX      r1
;;;498    	
;;;499    	pSSD1963->Display.WriteIndex(0x0036);			//设置页地址
00021c  4809              LDR      r0,|L15.580|
00021e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000220  6e41              LDR      r1,[r0,#0x64]
000222  2036              MOVS     r0,#0x36
000224  4788              BLX      r1
;;;500    	pSSD1963->Display.WriteData(Model);
000226  4807              LDR      r0,|L15.580|
000228  6800              LDR      r0,[r0,#0]  ; pSSD1963
00022a  6e81              LDR      r1,[r0,#0x68]
00022c  4658              MOV      r0,r11
00022e  4788              BLX      r1
;;;501    
;;;502    	pSSD1963->Display.WriteIndex(0x002c);			//写内存起始地址					 						 
000230  4804              LDR      r0,|L15.580|
000232  6800              LDR      r0,[r0,#0]  ; pSSD1963
000234  6e41              LDR      r1,[r0,#0x64]
000236  202c              MOVS     r0,#0x2c
000238  4788              BLX      r1
;;;503    }
00023a  e8bd9ff0          POP      {r4-r12,pc}
;;;504    //
                          ENDP

00023e  0000              DCW      0x0000
                  |L15.576|
                          DCD      LCDSYS
                  |L15.580|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_ShowChar||, CODE, READONLY, ALIGN=2

                  SSD1963_ShowChar PROC
;;;755    *******************************************************************************/
;;;756    void SSD1963_ShowChar(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;757    										u16 x,			//x				:起点x坐标
;;;758    										u16 y,			//y				:起点y坐标
;;;759    										u8 font,		//font		:字体大小
;;;760    										u16 color,	//字体颜色
;;;761    										u8 num,			//num			:字节数
;;;762    										u8 *Buffer	//Buffer	:显示的内容缓存
;;;763    										
;;;764    )		//高通字库测试程序
;;;765    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4614              MOV      r4,r2
00000c  469a              MOV      r10,r3
00000e  f8ddb03c          LDR      r11,[sp,#0x3c]
;;;766    	u8 temp;
;;;767    	u8 i=0,j=0;
000012  2500              MOVS     r5,#0
000014  2700              MOVS     r7,#0
;;;768    	unsigned short x1=0,x2=0,y1=0,y2=0;
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9003              STR      r0,[sp,#0xc]
00001c  9002              STR      r0,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
;;;769    	unsigned short LCD_PEN_COLOR	=	0;   	//画笔色
000020  9000              STR      r0,[sp,#0]
;;;770    	x1	=	x;
000022  f8cd8010          STR      r8,[sp,#0x10]
;;;771    	y1	=	y;
000026  f8cd9008          STR      r9,[sp,#8]
;;;772    	x2	=	x+font/2-1;		//
00002a  4620              MOV      r0,r4
00002c  eb0471d0          ADD      r1,r4,r0,LSR #31
000030  eb080161          ADD      r1,r8,r1,ASR #1
000034  1e49              SUBS     r1,r1,#1
000036  b289              UXTH     r1,r1
000038  9103              STR      r1,[sp,#0xc]
;;;773    	y2	=	y+font-1;
00003a  eb090004          ADD      r0,r9,r4
00003e  1e40              SUBS     r0,r0,#1
000040  b280              UXTH     r0,r0
000042  9001              STR      r0,[sp,#4]
;;;774    	
;;;775    	SSD1963_SetWindowAddress(x1,y1,x2,y2);//设置显示区域	
000044  e9dd3101          LDRD     r3,r1,[sp,#4]
000048  e9dd2003          LDRD     r2,r0,[sp,#0xc]
00004c  f7fffffe          BL       SSD1963_SetWindowAddress
;;;776    	pSSD1963->Display.WriteIndex( 0X2C );
000050  482c              LDR      r0,|L16.260|
000052  6800              LDR      r0,[r0,#0]  ; pSSD1963
000054  6e41              LDR      r1,[r0,#0x64]
000056  202c              MOVS     r0,#0x2c
000058  4788              BLX      r1
;;;777    	SSD1963Crl(CS);	//LCD_CS_LOW;
00005a  482a              LDR      r0,|L16.260|
00005c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00005e  8d80              LDRH     r0,[r0,#0x2c]
000060  4928              LDR      r1,|L16.260|
000062  6809              LDR      r1,[r1,#0]  ; pSSD1963
000064  6a89              LDR      r1,[r1,#0x28]
000066  6148              STR      r0,[r1,#0x14]
;;;778    	for(i=0;i<num;i++)
000068  bf00              NOP      
00006a  e03e              B        |L16.234|
                  |L16.108|
;;;779    	{ 
;;;780    		temp=Buffer[i];		 					//调用1608字体--二维数组形式--字库使用时取消
00006c  f81b6005          LDRB     r6,[r11,r5]
;;;781    		for(j=0;j<8;j++)
000070  2700              MOVS     r7,#0
000072  e014              B        |L16.158|
                  |L16.116|
;;;782    		{
;;;783    			if((temp&0x80)==0X80)
000074  f0060080          AND      r0,r6,#0x80
000078  2880              CMP      r0,#0x80
00007a  d102              BNE      |L16.130|
;;;784    			{
;;;785    				LCD_PEN_COLOR=color;
00007c  f8cda000          STR      r10,[sp,#0]
000080  e004              B        |L16.140|
                  |L16.130|
;;;786    			}
;;;787    			else
;;;788    				LCD_PEN_COLOR=pSSD1963->Data.BColor;
000082  4820              LDR      r0,|L16.260|
000084  6800              LDR      r0,[r0,#0]  ; pSSD1963
000086  f8b00052          LDRH     r0,[r0,#0x52]
00008a  9000              STR      r0,[sp,#0]
                  |L16.140|
;;;789    			pSSD1963->Display.WriteData(LCD_PEN_COLOR);
00008c  481d              LDR      r0,|L16.260|
00008e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000090  6e81              LDR      r1,[r0,#0x68]
000092  9800              LDR      r0,[sp,#0]
000094  4788              BLX      r1
;;;790    			temp=temp<<1;
000096  0670              LSLS     r0,r6,#25
000098  0e06              LSRS     r6,r0,#24
00009a  1c78              ADDS     r0,r7,#1              ;781
00009c  b2c7              UXTB     r7,r0                 ;781
                  |L16.158|
00009e  2f08              CMP      r7,#8                 ;781
0000a0  dbe8              BLT      |L16.116|
;;;791    		}
;;;792        //=======================未满8位的补充定入
;;;793        if((24==font)||(12==font))
0000a2  2c18              CMP      r4,#0x18
0000a4  d001              BEQ      |L16.170|
0000a6  2c0c              CMP      r4,#0xc
0000a8  d11d              BNE      |L16.230|
                  |L16.170|
;;;794        {
;;;795          temp=Buffer[i+1];		 					
0000aa  1c68              ADDS     r0,r5,#1
0000ac  f81b6000          LDRB     r6,[r11,r0]
;;;796          for(j=0;j<4;j++)
0000b0  2700              MOVS     r7,#0
0000b2  e014              B        |L16.222|
                  |L16.180|
;;;797          {
;;;798            if((temp&0x80)==0X80)
0000b4  f0060080          AND      r0,r6,#0x80
0000b8  2880              CMP      r0,#0x80
0000ba  d102              BNE      |L16.194|
;;;799            {
;;;800              LCD_PEN_COLOR=color;
0000bc  f8cda000          STR      r10,[sp,#0]
0000c0  e004              B        |L16.204|
                  |L16.194|
;;;801            }
;;;802            else
;;;803              LCD_PEN_COLOR=pSSD1963->Data.BColor;
0000c2  4810              LDR      r0,|L16.260|
0000c4  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000c6  f8b00052          LDRH     r0,[r0,#0x52]
0000ca  9000              STR      r0,[sp,#0]
                  |L16.204|
;;;804            pSSD1963->Display.WriteData(LCD_PEN_COLOR);
0000cc  480d              LDR      r0,|L16.260|
0000ce  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000d0  6e81              LDR      r1,[r0,#0x68]
0000d2  9800              LDR      r0,[sp,#0]
0000d4  4788              BLX      r1
;;;805            temp=temp<<1;
0000d6  0670              LSLS     r0,r6,#25
0000d8  0e06              LSRS     r6,r0,#24
0000da  1c78              ADDS     r0,r7,#1              ;796
0000dc  b2c7              UXTB     r7,r0                 ;796
                  |L16.222|
0000de  2f04              CMP      r7,#4                 ;796
0000e0  dbe8              BLT      |L16.180|
;;;806          }
;;;807          i++;
0000e2  1c68              ADDS     r0,r5,#1
0000e4  b2c5              UXTB     r5,r0
                  |L16.230|
0000e6  1c68              ADDS     r0,r5,#1              ;778
0000e8  b2c5              UXTB     r5,r0                 ;778
                  |L16.234|
0000ea  980e              LDR      r0,[sp,#0x38]         ;778
0000ec  4285              CMP      r5,r0                 ;778
0000ee  dbbd              BLT      |L16.108|
;;;808        }		
;;;809    	}
;;;810    	SSD1963Set(CS);	//LCD_CS_HIGH;
0000f0  4804              LDR      r0,|L16.260|
0000f2  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000f4  8d80              LDRH     r0,[r0,#0x2c]
0000f6  4903              LDR      r1,|L16.260|
0000f8  6809              LDR      r1,[r1,#0]  ; pSSD1963
0000fa  6a89              LDR      r1,[r1,#0x28]
0000fc  6108              STR      r0,[r1,#0x10]
;;;811    }
0000fe  b005              ADD      sp,sp,#0x14
000100  e8bd8ff0          POP      {r4-r11,pc}
;;;812    /*******************************************************************************
                          ENDP

                  |L16.260|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_ShowWord||, CODE, READONLY, ALIGN=2

                  SSD1963_ShowWord PROC
;;;817    *******************************************************************************/
;;;818    void SSD1963_ShowWord(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;819    										u16 x,			//x				:起点x坐标
;;;820    										u16 y,			//y				:起点y坐标
;;;821    										u8 font,		//font		:字体大小
;;;822    										u16 color,	//字体颜色
;;;823    										u8 num,			//num			:字节数
;;;824    										u8 *Buffer	//Buffer	:显示的内容缓存
;;;825    										
;;;826    )		//高通字库测试程序
;;;827    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
00000c  469a              MOV      r10,r3
00000e  f8ddb03c          LDR      r11,[sp,#0x3c]
;;;828    	u8 temp;
;;;829    	u8 i=0,j=0;
000012  2400              MOVS     r4,#0
000014  2700              MOVS     r7,#0
;;;830    	unsigned short x1=0,x2=0,y1=0,y2=0;
000016  2000              MOVS     r0,#0
000018  9004              STR      r0,[sp,#0x10]
00001a  9003              STR      r0,[sp,#0xc]
00001c  9002              STR      r0,[sp,#8]
00001e  9001              STR      r0,[sp,#4]
;;;831    	unsigned short LCD_PEN_COLOR	=	0;   	//画笔色
000020  9000              STR      r0,[sp,#0]
;;;832    	x1	=	x;
000022  f8cd8010          STR      r8,[sp,#0x10]
;;;833    	y1	=	y;
000026  f8cd9008          STR      r9,[sp,#8]
;;;834      x2	=	x+font-1;
00002a  eb080005          ADD      r0,r8,r5
00002e  1e40              SUBS     r0,r0,#1
000030  b280              UXTH     r0,r0
000032  9003              STR      r0,[sp,#0xc]
;;;835      y2	=	y+font-1;
000034  eb090005          ADD      r0,r9,r5
000038  1e40              SUBS     r0,r0,#1
00003a  b280              UXTH     r0,r0
00003c  9001              STR      r0,[sp,#4]
;;;836    	SSD1963_SetWindowAddress(x1,y1,x2,y2);//设置显示区域
00003e  e9dd3101          LDRD     r3,r1,[sp,#4]
000042  e9dd2003          LDRD     r2,r0,[sp,#0xc]
000046  f7fffffe          BL       SSD1963_SetWindowAddress
;;;837    	pSSD1963->Display.WriteIndex( 0X2C );
00004a  482c              LDR      r0,|L17.252|
00004c  6800              LDR      r0,[r0,#0]  ; pSSD1963
00004e  6e41              LDR      r1,[r0,#0x64]
000050  202c              MOVS     r0,#0x2c
000052  4788              BLX      r1
;;;838    	SSD1963Crl(CS);	//LCD_CS_LOW;
000054  4829              LDR      r0,|L17.252|
000056  6800              LDR      r0,[r0,#0]  ; pSSD1963
000058  8d80              LDRH     r0,[r0,#0x2c]
00005a  4928              LDR      r1,|L17.252|
00005c  6809              LDR      r1,[r1,#0]  ; pSSD1963
00005e  6a89              LDR      r1,[r1,#0x28]
000060  6148              STR      r0,[r1,#0x14]
;;;839    	for(i=0;i<num;i++)
000062  bf00              NOP      
000064  e03c              B        |L17.224|
                  |L17.102|
;;;840    	{ 
;;;841    		temp=Buffer[i];		 				
000066  f81b6004          LDRB     r6,[r11,r4]
;;;842    		for(j=0;j<8;j++)
00006a  2700              MOVS     r7,#0
00006c  e014              B        |L17.152|
                  |L17.110|
;;;843    		{
;;;844    			if((temp&0x80)==0X80)
00006e  f0060080          AND      r0,r6,#0x80
000072  2880              CMP      r0,#0x80
000074  d102              BNE      |L17.124|
;;;845    			{
;;;846    				LCD_PEN_COLOR=color;
000076  f8cda000          STR      r10,[sp,#0]
00007a  e004              B        |L17.134|
                  |L17.124|
;;;847    			}
;;;848    			else
;;;849    				LCD_PEN_COLOR=pSSD1963->Data.BColor;
00007c  481f              LDR      r0,|L17.252|
00007e  6800              LDR      r0,[r0,#0]  ; pSSD1963
000080  f8b00052          LDRH     r0,[r0,#0x52]
000084  9000              STR      r0,[sp,#0]
                  |L17.134|
;;;850    			pSSD1963->Display.WriteData(LCD_PEN_COLOR);
000086  481d              LDR      r0,|L17.252|
000088  6800              LDR      r0,[r0,#0]  ; pSSD1963
00008a  6e81              LDR      r1,[r0,#0x68]
00008c  9800              LDR      r0,[sp,#0]
00008e  4788              BLX      r1
;;;851    			temp=temp<<1;
000090  0670              LSLS     r0,r6,#25
000092  0e06              LSRS     r6,r0,#24
000094  1c78              ADDS     r0,r7,#1              ;842
000096  b2c7              UXTB     r7,r0                 ;842
                  |L17.152|
000098  2f08              CMP      r7,#8                 ;842
00009a  dbe8              BLT      |L17.110|
;;;852    		}
;;;853        //=======================未满8位的补充定入
;;;854        if((12==font))
00009c  2d0c              CMP      r5,#0xc
00009e  d11d              BNE      |L17.220|
;;;855        {
;;;856          temp=Buffer[i+1];		 					
0000a0  1c60              ADDS     r0,r4,#1
0000a2  f81b6000          LDRB     r6,[r11,r0]
;;;857          for(j=0;j<4;j++)
0000a6  2700              MOVS     r7,#0
0000a8  e014              B        |L17.212|
                  |L17.170|
;;;858          {
;;;859            if((temp&0x80)==0X80)
0000aa  f0060080          AND      r0,r6,#0x80
0000ae  2880              CMP      r0,#0x80
0000b0  d102              BNE      |L17.184|
;;;860            {
;;;861              LCD_PEN_COLOR=color;
0000b2  f8cda000          STR      r10,[sp,#0]
0000b6  e004              B        |L17.194|
                  |L17.184|
;;;862            }
;;;863            else
;;;864              LCD_PEN_COLOR=pSSD1963->Data.BColor;
0000b8  4810              LDR      r0,|L17.252|
0000ba  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000bc  f8b00052          LDRH     r0,[r0,#0x52]
0000c0  9000              STR      r0,[sp,#0]
                  |L17.194|
;;;865            pSSD1963->Display.WriteData(LCD_PEN_COLOR);
0000c2  480e              LDR      r0,|L17.252|
0000c4  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000c6  6e81              LDR      r1,[r0,#0x68]
0000c8  9800              LDR      r0,[sp,#0]
0000ca  4788              BLX      r1
;;;866            temp=temp<<1;
0000cc  0670              LSLS     r0,r6,#25
0000ce  0e06              LSRS     r6,r0,#24
0000d0  1c78              ADDS     r0,r7,#1              ;857
0000d2  b2c7              UXTB     r7,r0                 ;857
                  |L17.212|
0000d4  2f04              CMP      r7,#4                 ;857
0000d6  dbe8              BLT      |L17.170|
;;;867          }
;;;868          i++;
0000d8  1c60              ADDS     r0,r4,#1
0000da  b2c4              UXTB     r4,r0
                  |L17.220|
0000dc  1c60              ADDS     r0,r4,#1              ;839
0000de  b2c4              UXTB     r4,r0                 ;839
                  |L17.224|
0000e0  980e              LDR      r0,[sp,#0x38]         ;839
0000e2  4284              CMP      r4,r0                 ;839
0000e4  dbbf              BLT      |L17.102|
;;;869        }			
;;;870    	}
;;;871    	SSD1963Set(CS);	//LCD_CS_HIGH;
0000e6  4805              LDR      r0,|L17.252|
0000e8  6800              LDR      r0,[r0,#0]  ; pSSD1963
0000ea  8d80              LDRH     r0,[r0,#0x2c]
0000ec  4903              LDR      r1,|L17.252|
0000ee  6809              LDR      r1,[r1,#0]  ; pSSD1963
0000f0  6a89              LDR      r1,[r1,#0x28]
0000f2  6108              STR      r0,[r1,#0x10]
;;;872    }
0000f4  b005              ADD      sp,sp,#0x14
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;873    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L17.252|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_WriteAddr||, CODE, READONLY, ALIGN=2

                  SSD1963_WriteAddr PROC
;;;219    *******************************************************************************/
;;;220    void SSD1963_WriteAddr(unsigned	short	Addr)
000000  b500              PUSH     {lr}
;;;221    {
000002  4603              MOV      r3,r0
;;;222    	SSD1963Crl(DC);	//LCD_DC_LOW;		//RS
000004  4808              LDR      r0,|L18.40|
000006  6800              LDR      r0,[r0,#0]  ; pSSD1963
000008  8b80              LDRH     r0,[r0,#0x1c]
00000a  4907              LDR      r1,|L18.40|
00000c  6809              LDR      r1,[r1,#0]  ; pSSD1963
00000e  6989              LDR      r1,[r1,#0x18]
000010  6148              STR      r0,[r1,#0x14]
;;;223    	SSD1963_WriteData(Addr);
000012  4618              MOV      r0,r3
000014  f7fffffe          BL       SSD1963_WriteData
;;;224    	SSD1963Set(DC);	//LCD_DC_HIGH;	//RS
000018  4803              LDR      r0,|L18.40|
00001a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00001c  8b80              LDRH     r0,[r0,#0x1c]
00001e  4902              LDR      r1,|L18.40|
000020  6809              LDR      r1,[r1,#0]  ; pSSD1963
000022  6989              LDR      r1,[r1,#0x18]
000024  6108              STR      r0,[r1,#0x10]
;;;225    }
000026  bd00              POP      {pc}
;;;226    /*******************************************************************************
                          ENDP

                  |L18.40|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_WriteCommand||, CODE, READONLY, ALIGN=1

                  SSD1963_WriteCommand PROC
;;;267    *******************************************************************************/
;;;268    void SSD1963_WriteCommand(unsigned	short	Index,unsigned short Cmd)
000000  b530              PUSH     {r4,r5,lr}
;;;269    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;270    	SSD1963_WriteRegister(Index,Cmd);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SSD1963_WriteRegister
;;;271    }
00000e  bd30              POP      {r4,r5,pc}
;;;272    /*******************************************************************************
                          ENDP


                          AREA ||i.SSD1963_WriteData||, CODE, READONLY, ALIGN=2

                  SSD1963_WriteData PROC
;;;194    *******************************************************************************/
;;;195    void SSD1963_WriteData(unsigned	short	Data)
000000  4909              LDR      r1,|L20.40|
;;;196    {
;;;197    #if	1	//Bus16Bit
;;;198    	SSD1963Crl(WR);	//LCD_WR_LOW;
000002  6809              LDR      r1,[r1,#0]  ; pSSD1963
000004  8c89              LDRH     r1,[r1,#0x24]
000006  4a08              LDR      r2,|L20.40|
000008  6812              LDR      r2,[r2,#0]  ; pSSD1963
00000a  6a12              LDR      r2,[r2,#0x20]
00000c  6151              STR      r1,[r2,#0x14]
;;;199    	SSD1963_DATABUS_PORT->ODR = Data;
00000e  4906              LDR      r1,|L20.40|
000010  6809              LDR      r1,[r1,#0]  ; pSSD1963
000012  6b89              LDR      r1,[r1,#0x38]
000014  60c8              STR      r0,[r1,#0xc]
;;;200    	SSD1963Set(WR);	//LCD_WR_HIGH;
000016  4904              LDR      r1,|L20.40|
000018  6809              LDR      r1,[r1,#0]  ; pSSD1963
00001a  8c89              LDRH     r1,[r1,#0x24]
00001c  4a02              LDR      r2,|L20.40|
00001e  6812              LDR      r2,[r2,#0]  ; pSSD1963
000020  6a12              LDR      r2,[r2,#0x20]
000022  6111              STR      r1,[r2,#0x10]
;;;201    #else
;;;202    	SSD1963Crl(WR);	//LCD_WR_LOW;
;;;203    	SSD1963_DATABUS_PORT->ODR = Data>>8;
;;;204    	SSD1963Set(WR);	//LCD_WR_HIGH;
;;;205    	
;;;206    	SSD1963Crl(WR);	//LCD_WR_LOW;
;;;207    	SSD1963_DATABUS_PORT->ODR = Data&0xFF;
;;;208    	SSD1963Set(WR);	//LCD_WR_HIGH;
;;;209    #endif
;;;210    }
000024  4770              BX       lr
;;;211    /*******************************************************************************
                          ENDP

000026  0000              DCW      0x0000
                  |L20.40|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_WriteGRAM||, CODE, READONLY, ALIGN=2

                  SSD1963_WriteGRAM PROC
;;;280    *******************************************************************************/
;;;281    void SSD1963_WriteGRAM(unsigned	short* RAM,unsigned long length)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;283    	unsigned	long	i	=	0;
000006  2400              MOVS     r4,#0
;;;284    	SSD1963Crl(CS);	//LCD_CS_LOW;
000008  480f              LDR      r0,|L21.72|
00000a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00000c  8d80              LDRH     r0,[r0,#0x2c]
00000e  490e              LDR      r1,|L21.72|
000010  6809              LDR      r1,[r1,#0]  ; pSSD1963
000012  6a89              LDR      r1,[r1,#0x28]
000014  6148              STR      r0,[r1,#0x14]
;;;285    	pSSD1963->Display.WriteIndex(0X3C);
000016  480c              LDR      r0,|L21.72|
000018  6800              LDR      r0,[r0,#0]  ; pSSD1963
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  203c              MOVS     r0,#0x3c
00001e  4788              BLX      r1
;;;286    	for(i=0;i<length;i++)
000020  bf00              NOP      
000022  e006              B        |L21.50|
                  |L21.36|
;;;287    	{
;;;288    		pSSD1963->Display.WriteData(RAM[i]);
000024  f8350014          LDRH     r0,[r5,r4,LSL #1]
000028  4a07              LDR      r2,|L21.72|
00002a  6812              LDR      r2,[r2,#0]  ; pSSD1963
00002c  6e91              LDR      r1,[r2,#0x68]
00002e  4788              BLX      r1
000030  1c64              ADDS     r4,r4,#1              ;286
                  |L21.50|
000032  42b4              CMP      r4,r6                 ;286
000034  d3f6              BCC      |L21.36|
;;;289    	}
;;;290    	SSD1963Set(CS);	//LCD_CS_HIGH;
000036  4804              LDR      r0,|L21.72|
000038  6800              LDR      r0,[r0,#0]  ; pSSD1963
00003a  8d80              LDRH     r0,[r0,#0x2c]
00003c  4902              LDR      r1,|L21.72|
00003e  6809              LDR      r1,[r1,#0]  ; pSSD1963
000040  6a89              LDR      r1,[r1,#0x28]
000042  6108              STR      r0,[r1,#0x10]
;;;291    }
000044  bd70              POP      {r4-r6,pc}
;;;292    /*******************************************************************************
                          ENDP

000046  0000              DCW      0x0000
                  |L21.72|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_WriteIndex||, CODE, READONLY, ALIGN=2

                  SSD1963_WriteIndex PROC
;;;234    *******************************************************************************/
;;;235    void SSD1963_WriteIndex(unsigned	short	Index)
000000  b510              PUSH     {r4,lr}
;;;236    {
000002  4604              MOV      r4,r0
;;;237    	SSD1963Crl(CS);	//LCD_CS_LOW;	
000004  4808              LDR      r0,|L22.40|
000006  6800              LDR      r0,[r0,#0]  ; pSSD1963
000008  8d80              LDRH     r0,[r0,#0x2c]
00000a  4907              LDR      r1,|L22.40|
00000c  6809              LDR      r1,[r1,#0]  ; pSSD1963
00000e  6a89              LDR      r1,[r1,#0x28]
000010  6148              STR      r0,[r1,#0x14]
;;;238    	SSD1963_WriteAddr(Index);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SSD1963_WriteAddr
;;;239    	SSD1963Set(CS);	//LCD_CS_HIGH;
000018  4803              LDR      r0,|L22.40|
00001a  6800              LDR      r0,[r0,#0]  ; pSSD1963
00001c  8d80              LDRH     r0,[r0,#0x2c]
00001e  4902              LDR      r1,|L22.40|
000020  6809              LDR      r1,[r1,#0]  ; pSSD1963
000022  6a89              LDR      r1,[r1,#0x28]
000024  6108              STR      r0,[r1,#0x10]
;;;240    }
000026  bd10              POP      {r4,pc}
;;;241    /*******************************************************************************
                          ENDP

                  |L22.40|
                          DCD      pSSD1963

                          AREA ||i.SSD1963_WriteRegister||, CODE, READONLY, ALIGN=2

                  SSD1963_WriteRegister PROC
;;;249    *******************************************************************************/
;;;250    void SSD1963_WriteRegister(unsigned	short	Addr,unsigned short Data)
000000  b530              PUSH     {r4,r5,lr}
;;;251    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;252    	SSD1963Crl(CS);	//LCD_CS_LOW;	
000006  480a              LDR      r0,|L23.48|
000008  6800              LDR      r0,[r0,#0]  ; pSSD1963
00000a  8d80              LDRH     r0,[r0,#0x2c]
00000c  4908              LDR      r1,|L23.48|
00000e  6809              LDR      r1,[r1,#0]  ; pSSD1963
000010  6a89              LDR      r1,[r1,#0x28]
000012  6148              STR      r0,[r1,#0x14]
;;;253    	//---------------------Write Index
;;;254    	SSD1963_WriteAddr(Addr);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       SSD1963_WriteAddr
;;;255    	//---------------------Write Data
;;;256    	SSD1963_WriteData(Data);	
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       SSD1963_WriteData
;;;257    	SSD1963Set(CS);	//LCD_CS_HIGH;	
000020  4803              LDR      r0,|L23.48|
000022  6800              LDR      r0,[r0,#0]  ; pSSD1963
000024  8d80              LDRH     r0,[r0,#0x2c]
000026  4902              LDR      r1,|L23.48|
000028  6809              LDR      r1,[r1,#0]  ; pSSD1963
00002a  6a89              LDR      r1,[r1,#0x28]
00002c  6108              STR      r0,[r1,#0x10]
;;;258    }
00002e  bd30              POP      {r4,r5,pc}
;;;259    /*******************************************************************************
                          ENDP

                  |L23.48|
                          DCD      pSSD1963

                          AREA ||.data||, DATA, ALIGN=2

                  pSSD1963
                          DCD      0x00000000
                  DeviceCode
000004  0000              DCW      0x0000
